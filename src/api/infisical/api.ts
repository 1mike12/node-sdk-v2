/* tslint:disable */
/* eslint-disable */
/**
 * Infisical API
 * List of all available APIs that can be consumed
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface ApiStatusGet200Response
 */
export interface ApiStatusGet200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiStatusGet200Response
     */
    'date': string;
    /**
     * 
     * @type {string}
     * @memberof ApiStatusGet200Response
     */
    'message'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ApiStatusGet200Response
     */
    'emailConfigured'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ApiStatusGet200Response
     */
    'inviteOnlySignup'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ApiStatusGet200Response
     */
    'redisConfigured'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ApiStatusGet200Response
     */
    'secretScanningConfigured'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ApiStatusGet200Response
     */
    'samlDefaultOrgSlug'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1AccessApprovalsPoliciesPolicyIdPatchRequest
 */
export interface ApiV1AccessApprovalsPoliciesPolicyIdPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1AccessApprovalsPoliciesPolicyIdPatchRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AccessApprovalsPoliciesPolicyIdPatchRequest
     */
    'secretPath'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ApiV1AccessApprovalsPoliciesPolicyIdPatchRequest
     */
    'approverUserIds': Array<string>;
    /**
     * 
     * @type {number}
     * @memberof ApiV1AccessApprovalsPoliciesPolicyIdPatchRequest
     */
    'approvals'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AccessApprovalsPoliciesPolicyIdPatchRequest
     */
    'enforcementLevel'?: ApiV1AccessApprovalsPoliciesPolicyIdPatchRequestEnforcementLevelEnum;
}

export const ApiV1AccessApprovalsPoliciesPolicyIdPatchRequestEnforcementLevelEnum = {
    Hard: 'hard',
    Soft: 'soft'
} as const;

export type ApiV1AccessApprovalsPoliciesPolicyIdPatchRequestEnforcementLevelEnum = typeof ApiV1AccessApprovalsPoliciesPolicyIdPatchRequestEnforcementLevelEnum[keyof typeof ApiV1AccessApprovalsPoliciesPolicyIdPatchRequestEnforcementLevelEnum];

/**
 * 
 * @export
 * @interface ApiV1AccessApprovalsPoliciesPostRequest
 */
export interface ApiV1AccessApprovalsPoliciesPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1AccessApprovalsPoliciesPostRequest
     */
    'projectSlug': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AccessApprovalsPoliciesPostRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AccessApprovalsPoliciesPostRequest
     */
    'secretPath'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AccessApprovalsPoliciesPostRequest
     */
    'environment': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ApiV1AccessApprovalsPoliciesPostRequest
     */
    'approverUserIds': Array<string>;
    /**
     * 
     * @type {number}
     * @memberof ApiV1AccessApprovalsPoliciesPostRequest
     */
    'approvals'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AccessApprovalsPoliciesPostRequest
     */
    'enforcementLevel'?: ApiV1AccessApprovalsPoliciesPostRequestEnforcementLevelEnum;
}

export const ApiV1AccessApprovalsPoliciesPostRequestEnforcementLevelEnum = {
    Hard: 'hard',
    Soft: 'soft'
} as const;

export type ApiV1AccessApprovalsPoliciesPostRequestEnforcementLevelEnum = typeof ApiV1AccessApprovalsPoliciesPostRequestEnforcementLevelEnum[keyof typeof ApiV1AccessApprovalsPoliciesPostRequestEnforcementLevelEnum];

/**
 * 
 * @export
 * @interface ApiV1AccessApprovalsRequestsCountGet200Response
 */
export interface ApiV1AccessApprovalsRequestsCountGet200Response {
    /**
     * 
     * @type {number}
     * @memberof ApiV1AccessApprovalsRequestsCountGet200Response
     */
    'pendingCount': number;
    /**
     * 
     * @type {number}
     * @memberof ApiV1AccessApprovalsRequestsCountGet200Response
     */
    'finalizedCount': number;
}
/**
 * 
 * @export
 * @interface ApiV1AccessApprovalsRequestsGet200Response
 */
export interface ApiV1AccessApprovalsRequestsGet200Response {
    /**
     * 
     * @type {Array<ApiV1AccessApprovalsRequestsGet200ResponseRequestsInner>}
     * @memberof ApiV1AccessApprovalsRequestsGet200Response
     */
    'requests': Array<ApiV1AccessApprovalsRequestsGet200ResponseRequestsInner>;
}
/**
 * 
 * @export
 * @interface ApiV1AccessApprovalsRequestsGet200ResponseRequestsInner
 */
export interface ApiV1AccessApprovalsRequestsGet200ResponseRequestsInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1AccessApprovalsRequestsGet200ResponseRequestsInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AccessApprovalsRequestsGet200ResponseRequestsInner
     */
    'policyId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AccessApprovalsRequestsGet200ResponseRequestsInner
     */
    'privilegeId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AccessApprovalsRequestsGet200ResponseRequestsInner
     */
    'requestedBy'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1AccessApprovalsRequestsGet200ResponseRequestsInner
     */
    'isTemporary': boolean;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AccessApprovalsRequestsGet200ResponseRequestsInner
     */
    'temporaryRange'?: string | null;
    /**
     * 
     * @type {any}
     * @memberof ApiV1AccessApprovalsRequestsGet200ResponseRequestsInner
     */
    'permissions'?: any;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AccessApprovalsRequestsGet200ResponseRequestsInner
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AccessApprovalsRequestsGet200ResponseRequestsInner
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AccessApprovalsRequestsGet200ResponseRequestsInner
     */
    'requestedByUserId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AccessApprovalsRequestsGet200ResponseRequestsInner
     */
    'environmentName': string;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1AccessApprovalsRequestsGet200ResponseRequestsInner
     */
    'isApproved': boolean;
    /**
     * 
     * @type {ApiV1AccessApprovalsRequestsGet200ResponseRequestsInnerPrivilege}
     * @memberof ApiV1AccessApprovalsRequestsGet200ResponseRequestsInner
     */
    'privilege': ApiV1AccessApprovalsRequestsGet200ResponseRequestsInnerPrivilege | null;
    /**
     * 
     * @type {ApiV1AccessApprovalsRequestsGet200ResponseRequestsInnerPolicy}
     * @memberof ApiV1AccessApprovalsRequestsGet200ResponseRequestsInner
     */
    'policy': ApiV1AccessApprovalsRequestsGet200ResponseRequestsInnerPolicy;
    /**
     * 
     * @type {Array<ApiV1SecretApprovalRequestsGet200ResponseApprovalsInnerReviewersInner>}
     * @memberof ApiV1AccessApprovalsRequestsGet200ResponseRequestsInner
     */
    'reviewers': Array<ApiV1SecretApprovalRequestsGet200ResponseApprovalsInnerReviewersInner>;
    /**
     * 
     * @type {ApiV1SecretApprovalRequestsGet200ResponseApprovalsInnerCommitterUser}
     * @memberof ApiV1AccessApprovalsRequestsGet200ResponseRequestsInner
     */
    'requestedByUser': ApiV1SecretApprovalRequestsGet200ResponseApprovalsInnerCommitterUser;
}
/**
 * 
 * @export
 * @interface ApiV1AccessApprovalsRequestsGet200ResponseRequestsInnerPolicy
 */
export interface ApiV1AccessApprovalsRequestsGet200ResponseRequestsInnerPolicy {
    /**
     * 
     * @type {string}
     * @memberof ApiV1AccessApprovalsRequestsGet200ResponseRequestsInnerPolicy
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AccessApprovalsRequestsGet200ResponseRequestsInnerPolicy
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof ApiV1AccessApprovalsRequestsGet200ResponseRequestsInnerPolicy
     */
    'approvals': number;
    /**
     * 
     * @type {Array<string>}
     * @memberof ApiV1AccessApprovalsRequestsGet200ResponseRequestsInnerPolicy
     */
    'approvers': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AccessApprovalsRequestsGet200ResponseRequestsInnerPolicy
     */
    'secretPath'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AccessApprovalsRequestsGet200ResponseRequestsInnerPolicy
     */
    'envId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AccessApprovalsRequestsGet200ResponseRequestsInnerPolicy
     */
    'enforcementLevel': string;
}
/**
 * 
 * @export
 * @interface ApiV1AccessApprovalsRequestsGet200ResponseRequestsInnerPrivilege
 */
export interface ApiV1AccessApprovalsRequestsGet200ResponseRequestsInnerPrivilege {
    /**
     * 
     * @type {string}
     * @memberof ApiV1AccessApprovalsRequestsGet200ResponseRequestsInnerPrivilege
     */
    'membershipId': string;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1AccessApprovalsRequestsGet200ResponseRequestsInnerPrivilege
     */
    'isTemporary': boolean;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AccessApprovalsRequestsGet200ResponseRequestsInnerPrivilege
     */
    'temporaryMode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AccessApprovalsRequestsGet200ResponseRequestsInnerPrivilege
     */
    'temporaryRange'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AccessApprovalsRequestsGet200ResponseRequestsInnerPrivilege
     */
    'temporaryAccessStartTime'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AccessApprovalsRequestsGet200ResponseRequestsInnerPrivilege
     */
    'temporaryAccessEndTime'?: string | null;
    /**
     * 
     * @type {any}
     * @memberof ApiV1AccessApprovalsRequestsGet200ResponseRequestsInnerPrivilege
     */
    'permissions'?: any;
}
/**
 * 
 * @export
 * @interface ApiV1AccessApprovalsRequestsPost200Response
 */
export interface ApiV1AccessApprovalsRequestsPost200Response {
    /**
     * 
     * @type {ApiV1AccessApprovalsRequestsPost200ResponseApproval}
     * @memberof ApiV1AccessApprovalsRequestsPost200Response
     */
    'approval': ApiV1AccessApprovalsRequestsPost200ResponseApproval;
}
/**
 * 
 * @export
 * @interface ApiV1AccessApprovalsRequestsPost200ResponseApproval
 */
export interface ApiV1AccessApprovalsRequestsPost200ResponseApproval {
    /**
     * 
     * @type {string}
     * @memberof ApiV1AccessApprovalsRequestsPost200ResponseApproval
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AccessApprovalsRequestsPost200ResponseApproval
     */
    'policyId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AccessApprovalsRequestsPost200ResponseApproval
     */
    'privilegeId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AccessApprovalsRequestsPost200ResponseApproval
     */
    'requestedBy'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1AccessApprovalsRequestsPost200ResponseApproval
     */
    'isTemporary': boolean;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AccessApprovalsRequestsPost200ResponseApproval
     */
    'temporaryRange'?: string | null;
    /**
     * 
     * @type {any}
     * @memberof ApiV1AccessApprovalsRequestsPost200ResponseApproval
     */
    'permissions'?: any;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AccessApprovalsRequestsPost200ResponseApproval
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AccessApprovalsRequestsPost200ResponseApproval
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AccessApprovalsRequestsPost200ResponseApproval
     */
    'requestedByUserId': string;
}
/**
 * 
 * @export
 * @interface ApiV1AccessApprovalsRequestsPostRequest
 */
export interface ApiV1AccessApprovalsRequestsPostRequest {
    /**
     * 
     * @type {Array<string>}
     * @memberof ApiV1AccessApprovalsRequestsPostRequest
     */
    'permissions': Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1AccessApprovalsRequestsPostRequest
     */
    'isTemporary': boolean;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AccessApprovalsRequestsPostRequest
     */
    'temporaryRange'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1AccessApprovalsRequestsRequestIdReviewPost200Response
 */
export interface ApiV1AccessApprovalsRequestsRequestIdReviewPost200Response {
    /**
     * 
     * @type {ApiV1AccessApprovalsRequestsRequestIdReviewPost200ResponseReview}
     * @memberof ApiV1AccessApprovalsRequestsRequestIdReviewPost200Response
     */
    'review': ApiV1AccessApprovalsRequestsRequestIdReviewPost200ResponseReview;
}
/**
 * 
 * @export
 * @interface ApiV1AccessApprovalsRequestsRequestIdReviewPost200ResponseReview
 */
export interface ApiV1AccessApprovalsRequestsRequestIdReviewPost200ResponseReview {
    /**
     * 
     * @type {string}
     * @memberof ApiV1AccessApprovalsRequestsRequestIdReviewPost200ResponseReview
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AccessApprovalsRequestsRequestIdReviewPost200ResponseReview
     */
    'member'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AccessApprovalsRequestsRequestIdReviewPost200ResponseReview
     */
    'status': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AccessApprovalsRequestsRequestIdReviewPost200ResponseReview
     */
    'requestId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AccessApprovalsRequestsRequestIdReviewPost200ResponseReview
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AccessApprovalsRequestsRequestIdReviewPost200ResponseReview
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AccessApprovalsRequestsRequestIdReviewPost200ResponseReview
     */
    'reviewerUserId': string;
}
/**
 * 
 * @export
 * @interface ApiV1AdditionalPrivilegeIdentityDeleteRequest
 */
export interface ApiV1AdditionalPrivilegeIdentityDeleteRequest {
    /**
     * The slug of the privilege to delete.
     * @type {string}
     * @memberof ApiV1AdditionalPrivilegeIdentityDeleteRequest
     */
    'privilegeSlug': string;
    /**
     * The ID of the identity to delete.
     * @type {string}
     * @memberof ApiV1AdditionalPrivilegeIdentityDeleteRequest
     */
    'identityId': string;
    /**
     * The slug of the project of the identity in.
     * @type {string}
     * @memberof ApiV1AdditionalPrivilegeIdentityDeleteRequest
     */
    'projectSlug': string;
}
/**
 * 
 * @export
 * @interface ApiV1AdditionalPrivilegeIdentityGet200Response
 */
export interface ApiV1AdditionalPrivilegeIdentityGet200Response {
    /**
     * 
     * @type {Array<ApiV1AdditionalPrivilegeIdentityPermanentPost200ResponsePrivilege>}
     * @memberof ApiV1AdditionalPrivilegeIdentityGet200Response
     */
    'privileges': Array<ApiV1AdditionalPrivilegeIdentityPermanentPost200ResponsePrivilege>;
}
/**
 * 
 * @export
 * @interface ApiV1AdditionalPrivilegeIdentityPatchRequest
 */
export interface ApiV1AdditionalPrivilegeIdentityPatchRequest {
    /**
     * The slug of the privilege to update.
     * @type {string}
     * @memberof ApiV1AdditionalPrivilegeIdentityPatchRequest
     */
    'privilegeSlug': string;
    /**
     * The ID of the identity to update.
     * @type {string}
     * @memberof ApiV1AdditionalPrivilegeIdentityPatchRequest
     */
    'identityId': string;
    /**
     * The slug of the project of the identity in.
     * @type {string}
     * @memberof ApiV1AdditionalPrivilegeIdentityPatchRequest
     */
    'projectSlug': string;
    /**
     * 
     * @type {ApiV1AdditionalPrivilegeIdentityPatchRequestPrivilegeDetails}
     * @memberof ApiV1AdditionalPrivilegeIdentityPatchRequest
     */
    'privilegeDetails': ApiV1AdditionalPrivilegeIdentityPatchRequestPrivilegeDetails;
}
/**
 * 
 * @export
 * @interface ApiV1AdditionalPrivilegeIdentityPatchRequestPrivilegeDetails
 */
export interface ApiV1AdditionalPrivilegeIdentityPatchRequestPrivilegeDetails {
    /**
     * The new slug of the privilege to update.
     * @type {string}
     * @memberof ApiV1AdditionalPrivilegeIdentityPatchRequestPrivilegeDetails
     */
    'slug'?: string;
    /**
     * @deprecated - use privilegePermission The permission object for the privilege. - Read secrets ``` { \"permissions\": [{\"action\": \"read\", \"subject\": \"secrets\"]} ``` - Read and Write secrets ``` { \"permissions\": [{\"action\": \"read\", \"subject\": \"secrets\"], {\"action\": \"write\", \"subject\": \"secrets\"]} ``` - Read secrets scoped to an environment and secret path ``` - { \"permissions\": [{\"action\": \"read\", \"subject\": \"secrets\", \"conditions\": { \"environment\": \"dev\", \"secretPath\": { \"$glob\": \"/\" } }}] } ``` 
     * @type {Array<ApiV1WorkspaceProjectSlugRolesPostRequestPermissionsInner>}
     * @memberof ApiV1AdditionalPrivilegeIdentityPatchRequestPrivilegeDetails
     */
    'permissions'?: Array<ApiV1WorkspaceProjectSlugRolesPostRequestPermissionsInner>;
    /**
     * 
     * @type {ApiV1AdditionalPrivilegeIdentityPermanentPostRequestPrivilegePermission}
     * @memberof ApiV1AdditionalPrivilegeIdentityPatchRequestPrivilegeDetails
     */
    'privilegePermission'?: ApiV1AdditionalPrivilegeIdentityPermanentPostRequestPrivilegePermission;
    /**
     * Whether the privilege is temporary.
     * @type {boolean}
     * @memberof ApiV1AdditionalPrivilegeIdentityPatchRequestPrivilegeDetails
     */
    'isTemporary'?: boolean;
    /**
     * Type of temporary access given. Types: relative
     * @type {string}
     * @memberof ApiV1AdditionalPrivilegeIdentityPatchRequestPrivilegeDetails
     */
    'temporaryMode'?: ApiV1AdditionalPrivilegeIdentityPatchRequestPrivilegeDetailsTemporaryModeEnum;
    /**
     * TTL for the temporay time. Eg: 1m, 1h, 1d
     * @type {string}
     * @memberof ApiV1AdditionalPrivilegeIdentityPatchRequestPrivilegeDetails
     */
    'temporaryRange'?: string;
    /**
     * ISO time for which temporary access should begin.
     * @type {string}
     * @memberof ApiV1AdditionalPrivilegeIdentityPatchRequestPrivilegeDetails
     */
    'temporaryAccessStartTime'?: string;
}

export const ApiV1AdditionalPrivilegeIdentityPatchRequestPrivilegeDetailsTemporaryModeEnum = {
    Relative: 'relative'
} as const;

export type ApiV1AdditionalPrivilegeIdentityPatchRequestPrivilegeDetailsTemporaryModeEnum = typeof ApiV1AdditionalPrivilegeIdentityPatchRequestPrivilegeDetailsTemporaryModeEnum[keyof typeof ApiV1AdditionalPrivilegeIdentityPatchRequestPrivilegeDetailsTemporaryModeEnum];

/**
 * 
 * @export
 * @interface ApiV1AdditionalPrivilegeIdentityPermanentPost200Response
 */
export interface ApiV1AdditionalPrivilegeIdentityPermanentPost200Response {
    /**
     * 
     * @type {ApiV1AdditionalPrivilegeIdentityPermanentPost200ResponsePrivilege}
     * @memberof ApiV1AdditionalPrivilegeIdentityPermanentPost200Response
     */
    'privilege': ApiV1AdditionalPrivilegeIdentityPermanentPost200ResponsePrivilege;
}
/**
 * 
 * @export
 * @interface ApiV1AdditionalPrivilegeIdentityPermanentPost200ResponsePrivilege
 */
export interface ApiV1AdditionalPrivilegeIdentityPermanentPost200ResponsePrivilege {
    /**
     * 
     * @type {string}
     * @memberof ApiV1AdditionalPrivilegeIdentityPermanentPost200ResponsePrivilege
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AdditionalPrivilegeIdentityPermanentPost200ResponsePrivilege
     */
    'slug': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AdditionalPrivilegeIdentityPermanentPost200ResponsePrivilege
     */
    'projectMembershipId': string;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1AdditionalPrivilegeIdentityPermanentPost200ResponsePrivilege
     */
    'isTemporary'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AdditionalPrivilegeIdentityPermanentPost200ResponsePrivilege
     */
    'temporaryMode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AdditionalPrivilegeIdentityPermanentPost200ResponsePrivilege
     */
    'temporaryRange'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AdditionalPrivilegeIdentityPermanentPost200ResponsePrivilege
     */
    'temporaryAccessStartTime'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AdditionalPrivilegeIdentityPermanentPost200ResponsePrivilege
     */
    'temporaryAccessEndTime'?: string | null;
    /**
     * 
     * @type {Array<ApiV1WorkspaceProjectSlugRolesPost200ResponseRolePermissionsInner>}
     * @memberof ApiV1AdditionalPrivilegeIdentityPermanentPost200ResponsePrivilege
     */
    'permissions': Array<ApiV1WorkspaceProjectSlugRolesPost200ResponseRolePermissionsInner>;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AdditionalPrivilegeIdentityPermanentPost200ResponsePrivilege
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AdditionalPrivilegeIdentityPermanentPost200ResponsePrivilege
     */
    'updatedAt': string;
}
/**
 * 
 * @export
 * @interface ApiV1AdditionalPrivilegeIdentityPermanentPostRequest
 */
export interface ApiV1AdditionalPrivilegeIdentityPermanentPostRequest {
    /**
     * The ID of the identity to create.
     * @type {string}
     * @memberof ApiV1AdditionalPrivilegeIdentityPermanentPostRequest
     */
    'identityId': string;
    /**
     * The slug of the project of the identity in.
     * @type {string}
     * @memberof ApiV1AdditionalPrivilegeIdentityPermanentPostRequest
     */
    'projectSlug': string;
    /**
     * The slug of the privilege to create.
     * @type {string}
     * @memberof ApiV1AdditionalPrivilegeIdentityPermanentPostRequest
     */
    'slug'?: string;
    /**
     * @deprecated - use privilegePermission The permission object for the privilege. - Read secrets ``` { \"permissions\": [{\"action\": \"read\", \"subject\": \"secrets\"]} ``` - Read and Write secrets ``` { \"permissions\": [{\"action\": \"read\", \"subject\": \"secrets\"], {\"action\": \"write\", \"subject\": \"secrets\"]} ``` - Read secrets scoped to an environment and secret path ``` - { \"permissions\": [{\"action\": \"read\", \"subject\": \"secrets\", \"conditions\": { \"environment\": \"dev\", \"secretPath\": { \"$glob\": \"/\" } }}] } ``` 
     * @type {Array<ApiV1WorkspaceProjectSlugRolesPostRequestPermissionsInner>}
     * @memberof ApiV1AdditionalPrivilegeIdentityPermanentPostRequest
     */
    'permissions'?: Array<ApiV1WorkspaceProjectSlugRolesPostRequestPermissionsInner>;
    /**
     * 
     * @type {ApiV1AdditionalPrivilegeIdentityPermanentPostRequestPrivilegePermission}
     * @memberof ApiV1AdditionalPrivilegeIdentityPermanentPostRequest
     */
    'privilegePermission'?: ApiV1AdditionalPrivilegeIdentityPermanentPostRequestPrivilegePermission;
}
/**
 * The permission object for the privilege.
 * @export
 * @interface ApiV1AdditionalPrivilegeIdentityPermanentPostRequestPrivilegePermission
 */
export interface ApiV1AdditionalPrivilegeIdentityPermanentPostRequestPrivilegePermission {
    /**
     * Describe what action an entity can take. Possible actions: create, edit, delete, and read
     * @type {Array<string>}
     * @memberof ApiV1AdditionalPrivilegeIdentityPermanentPostRequestPrivilegePermission
     */
    'actions': Array<ApiV1AdditionalPrivilegeIdentityPermanentPostRequestPrivilegePermissionActionsEnum>;
    /**
     * The entity this permission pertains to. Possible options: secrets, environments
     * @type {string}
     * @memberof ApiV1AdditionalPrivilegeIdentityPermanentPostRequestPrivilegePermission
     */
    'subject': ApiV1AdditionalPrivilegeIdentityPermanentPostRequestPrivilegePermissionSubjectEnum;
    /**
     * 
     * @type {ApiV1AdditionalPrivilegeIdentityPermanentPostRequestPrivilegePermissionConditions}
     * @memberof ApiV1AdditionalPrivilegeIdentityPermanentPostRequestPrivilegePermission
     */
    'conditions': ApiV1AdditionalPrivilegeIdentityPermanentPostRequestPrivilegePermissionConditions;
}

export const ApiV1AdditionalPrivilegeIdentityPermanentPostRequestPrivilegePermissionActionsEnum = {
    Read: 'read',
    Create: 'create',
    Edit: 'edit',
    Delete: 'delete'
} as const;

export type ApiV1AdditionalPrivilegeIdentityPermanentPostRequestPrivilegePermissionActionsEnum = typeof ApiV1AdditionalPrivilegeIdentityPermanentPostRequestPrivilegePermissionActionsEnum[keyof typeof ApiV1AdditionalPrivilegeIdentityPermanentPostRequestPrivilegePermissionActionsEnum];
export const ApiV1AdditionalPrivilegeIdentityPermanentPostRequestPrivilegePermissionSubjectEnum = {
    Secrets: 'secrets'
} as const;

export type ApiV1AdditionalPrivilegeIdentityPermanentPostRequestPrivilegePermissionSubjectEnum = typeof ApiV1AdditionalPrivilegeIdentityPermanentPostRequestPrivilegePermissionSubjectEnum[keyof typeof ApiV1AdditionalPrivilegeIdentityPermanentPostRequestPrivilegePermissionSubjectEnum];

/**
 * When specified, only matching conditions will be allowed to access given resource.
 * @export
 * @interface ApiV1AdditionalPrivilegeIdentityPermanentPostRequestPrivilegePermissionConditions
 */
export interface ApiV1AdditionalPrivilegeIdentityPermanentPostRequestPrivilegePermissionConditions {
    /**
     * The environment slug this permission should allow.
     * @type {string}
     * @memberof ApiV1AdditionalPrivilegeIdentityPermanentPostRequestPrivilegePermissionConditions
     */
    'environment': string;
    /**
     * 
     * @type {ApiV1WorkspaceProjectSlugRolesPostRequestPermissionsInnerConditionsSecretPath}
     * @memberof ApiV1AdditionalPrivilegeIdentityPermanentPostRequestPrivilegePermissionConditions
     */
    'secretPath'?: ApiV1WorkspaceProjectSlugRolesPostRequestPermissionsInnerConditionsSecretPath;
}
/**
 * 
 * @export
 * @interface ApiV1AdditionalPrivilegeIdentityTemporaryPostRequest
 */
export interface ApiV1AdditionalPrivilegeIdentityTemporaryPostRequest {
    /**
     * The ID of the identity to create.
     * @type {string}
     * @memberof ApiV1AdditionalPrivilegeIdentityTemporaryPostRequest
     */
    'identityId': string;
    /**
     * The slug of the project of the identity in.
     * @type {string}
     * @memberof ApiV1AdditionalPrivilegeIdentityTemporaryPostRequest
     */
    'projectSlug': string;
    /**
     * The slug of the privilege to create.
     * @type {string}
     * @memberof ApiV1AdditionalPrivilegeIdentityTemporaryPostRequest
     */
    'slug'?: string;
    /**
     * @deprecated - use privilegePermission The permission object for the privilege. - Read secrets ``` { \"permissions\": [{\"action\": \"read\", \"subject\": \"secrets\"]} ``` - Read and Write secrets ``` { \"permissions\": [{\"action\": \"read\", \"subject\": \"secrets\"], {\"action\": \"write\", \"subject\": \"secrets\"]} ``` - Read secrets scoped to an environment and secret path ``` - { \"permissions\": [{\"action\": \"read\", \"subject\": \"secrets\", \"conditions\": { \"environment\": \"dev\", \"secretPath\": { \"$glob\": \"/\" } }}] } ``` 
     * @type {Array<ApiV1WorkspaceProjectSlugRolesPostRequestPermissionsInner>}
     * @memberof ApiV1AdditionalPrivilegeIdentityTemporaryPostRequest
     */
    'permissions'?: Array<ApiV1WorkspaceProjectSlugRolesPostRequestPermissionsInner>;
    /**
     * 
     * @type {ApiV1AdditionalPrivilegeIdentityPermanentPostRequestPrivilegePermission}
     * @memberof ApiV1AdditionalPrivilegeIdentityTemporaryPostRequest
     */
    'privilegePermission'?: ApiV1AdditionalPrivilegeIdentityPermanentPostRequestPrivilegePermission;
    /**
     * Type of temporary access given. Types: relative
     * @type {string}
     * @memberof ApiV1AdditionalPrivilegeIdentityTemporaryPostRequest
     */
    'temporaryMode': ApiV1AdditionalPrivilegeIdentityTemporaryPostRequestTemporaryModeEnum;
    /**
     * TTL for the temporay time. Eg: 1m, 1h, 1d
     * @type {string}
     * @memberof ApiV1AdditionalPrivilegeIdentityTemporaryPostRequest
     */
    'temporaryRange': string;
    /**
     * ISO time for which temporary access should begin.
     * @type {string}
     * @memberof ApiV1AdditionalPrivilegeIdentityTemporaryPostRequest
     */
    'temporaryAccessStartTime': string;
}

export const ApiV1AdditionalPrivilegeIdentityTemporaryPostRequestTemporaryModeEnum = {
    Relative: 'relative'
} as const;

export type ApiV1AdditionalPrivilegeIdentityTemporaryPostRequestTemporaryModeEnum = typeof ApiV1AdditionalPrivilegeIdentityTemporaryPostRequestTemporaryModeEnum[keyof typeof ApiV1AdditionalPrivilegeIdentityTemporaryPostRequestTemporaryModeEnum];

/**
 * 
 * @export
 * @interface ApiV1AdditionalPrivilegeUsersGet200Response
 */
export interface ApiV1AdditionalPrivilegeUsersGet200Response {
    /**
     * 
     * @type {Array<ApiV1AdditionalPrivilegeUsersPermanentPost200ResponsePrivilege>}
     * @memberof ApiV1AdditionalPrivilegeUsersGet200Response
     */
    'privileges': Array<ApiV1AdditionalPrivilegeUsersPermanentPost200ResponsePrivilege>;
}
/**
 * 
 * @export
 * @interface ApiV1AdditionalPrivilegeUsersPermanentPost200Response
 */
export interface ApiV1AdditionalPrivilegeUsersPermanentPost200Response {
    /**
     * 
     * @type {ApiV1AdditionalPrivilegeUsersPermanentPost200ResponsePrivilege}
     * @memberof ApiV1AdditionalPrivilegeUsersPermanentPost200Response
     */
    'privilege': ApiV1AdditionalPrivilegeUsersPermanentPost200ResponsePrivilege;
}
/**
 * 
 * @export
 * @interface ApiV1AdditionalPrivilegeUsersPermanentPost200ResponsePrivilege
 */
export interface ApiV1AdditionalPrivilegeUsersPermanentPost200ResponsePrivilege {
    /**
     * 
     * @type {string}
     * @memberof ApiV1AdditionalPrivilegeUsersPermanentPost200ResponsePrivilege
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AdditionalPrivilegeUsersPermanentPost200ResponsePrivilege
     */
    'slug': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AdditionalPrivilegeUsersPermanentPost200ResponsePrivilege
     */
    'projectMembershipId'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1AdditionalPrivilegeUsersPermanentPost200ResponsePrivilege
     */
    'isTemporary'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AdditionalPrivilegeUsersPermanentPost200ResponsePrivilege
     */
    'temporaryMode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AdditionalPrivilegeUsersPermanentPost200ResponsePrivilege
     */
    'temporaryRange'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AdditionalPrivilegeUsersPermanentPost200ResponsePrivilege
     */
    'temporaryAccessStartTime'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AdditionalPrivilegeUsersPermanentPost200ResponsePrivilege
     */
    'temporaryAccessEndTime'?: string | null;
    /**
     * 
     * @type {any}
     * @memberof ApiV1AdditionalPrivilegeUsersPermanentPost200ResponsePrivilege
     */
    'permissions'?: any;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AdditionalPrivilegeUsersPermanentPost200ResponsePrivilege
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AdditionalPrivilegeUsersPermanentPost200ResponsePrivilege
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AdditionalPrivilegeUsersPermanentPost200ResponsePrivilege
     */
    'userId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AdditionalPrivilegeUsersPermanentPost200ResponsePrivilege
     */
    'projectId': string;
}
/**
 * 
 * @export
 * @interface ApiV1AdditionalPrivilegeUsersPermanentPostRequest
 */
export interface ApiV1AdditionalPrivilegeUsersPermanentPostRequest {
    /**
     * Project membership id of user
     * @type {string}
     * @memberof ApiV1AdditionalPrivilegeUsersPermanentPostRequest
     */
    'projectMembershipId': string;
    /**
     * The slug of the privilege to create.
     * @type {string}
     * @memberof ApiV1AdditionalPrivilegeUsersPermanentPostRequest
     */
    'slug'?: string;
    /**
     * The permission object for the privilege. Refer https://casl.js.org/v6/en/guide/define-rules#the-shape-of-raw-rule to understand the shape
     * @type {Array<string>}
     * @memberof ApiV1AdditionalPrivilegeUsersPermanentPostRequest
     */
    'permissions': Array<string>;
}
/**
 * 
 * @export
 * @interface ApiV1AdditionalPrivilegeUsersPrivilegeIdPatchRequest
 */
export interface ApiV1AdditionalPrivilegeUsersPrivilegeIdPatchRequest {
    /**
     * The slug of the privilege to create.
     * @type {string}
     * @memberof ApiV1AdditionalPrivilegeUsersPrivilegeIdPatchRequest
     */
    'slug'?: string;
    /**
     * The permission object for the privilege. Refer https://casl.js.org/v6/en/guide/define-rules#the-shape-of-raw-rule to understand the shape
     * @type {Array<string>}
     * @memberof ApiV1AdditionalPrivilegeUsersPrivilegeIdPatchRequest
     */
    'permissions'?: Array<string>;
    /**
     * Whether the privilege is temporary.
     * @type {boolean}
     * @memberof ApiV1AdditionalPrivilegeUsersPrivilegeIdPatchRequest
     */
    'isTemporary'?: boolean;
    /**
     * Type of temporary access given. Types: relative
     * @type {string}
     * @memberof ApiV1AdditionalPrivilegeUsersPrivilegeIdPatchRequest
     */
    'temporaryMode'?: ApiV1AdditionalPrivilegeUsersPrivilegeIdPatchRequestTemporaryModeEnum;
    /**
     * TTL for the temporay time. Eg: 1m, 1h, 1d
     * @type {string}
     * @memberof ApiV1AdditionalPrivilegeUsersPrivilegeIdPatchRequest
     */
    'temporaryRange'?: string;
    /**
     * ISO time for which temporary access should begin.
     * @type {string}
     * @memberof ApiV1AdditionalPrivilegeUsersPrivilegeIdPatchRequest
     */
    'temporaryAccessStartTime'?: string;
}

export const ApiV1AdditionalPrivilegeUsersPrivilegeIdPatchRequestTemporaryModeEnum = {
    Relative: 'relative'
} as const;

export type ApiV1AdditionalPrivilegeUsersPrivilegeIdPatchRequestTemporaryModeEnum = typeof ApiV1AdditionalPrivilegeUsersPrivilegeIdPatchRequestTemporaryModeEnum[keyof typeof ApiV1AdditionalPrivilegeUsersPrivilegeIdPatchRequestTemporaryModeEnum];

/**
 * 
 * @export
 * @interface ApiV1AdditionalPrivilegeUsersTemporaryPostRequest
 */
export interface ApiV1AdditionalPrivilegeUsersTemporaryPostRequest {
    /**
     * Project membership id of user
     * @type {string}
     * @memberof ApiV1AdditionalPrivilegeUsersTemporaryPostRequest
     */
    'projectMembershipId': string;
    /**
     * The slug of the privilege to create.
     * @type {string}
     * @memberof ApiV1AdditionalPrivilegeUsersTemporaryPostRequest
     */
    'slug'?: string;
    /**
     * The permission object for the privilege. Refer https://casl.js.org/v6/en/guide/define-rules#the-shape-of-raw-rule to understand the shape
     * @type {Array<string>}
     * @memberof ApiV1AdditionalPrivilegeUsersTemporaryPostRequest
     */
    'permissions': Array<string>;
    /**
     * Type of temporary access given. Types: relative
     * @type {string}
     * @memberof ApiV1AdditionalPrivilegeUsersTemporaryPostRequest
     */
    'temporaryMode': ApiV1AdditionalPrivilegeUsersTemporaryPostRequestTemporaryModeEnum;
    /**
     * TTL for the temporay time. Eg: 1m, 1h, 1d
     * @type {string}
     * @memberof ApiV1AdditionalPrivilegeUsersTemporaryPostRequest
     */
    'temporaryRange': string;
    /**
     * ISO time for which temporary access should begin.
     * @type {string}
     * @memberof ApiV1AdditionalPrivilegeUsersTemporaryPostRequest
     */
    'temporaryAccessStartTime': string;
}

export const ApiV1AdditionalPrivilegeUsersTemporaryPostRequestTemporaryModeEnum = {
    Relative: 'relative'
} as const;

export type ApiV1AdditionalPrivilegeUsersTemporaryPostRequestTemporaryModeEnum = typeof ApiV1AdditionalPrivilegeUsersTemporaryPostRequestTemporaryModeEnum[keyof typeof ApiV1AdditionalPrivilegeUsersTemporaryPostRequestTemporaryModeEnum];

/**
 * 
 * @export
 * @interface ApiV1AdminConfigGet200Response
 */
export interface ApiV1AdminConfigGet200Response {
    /**
     * 
     * @type {ApiV1AdminConfigGet200ResponseConfig}
     * @memberof ApiV1AdminConfigGet200Response
     */
    'config': ApiV1AdminConfigGet200ResponseConfig;
}
/**
 * 
 * @export
 * @interface ApiV1AdminConfigGet200ResponseConfig
 */
export interface ApiV1AdminConfigGet200ResponseConfig {
    /**
     * 
     * @type {string}
     * @memberof ApiV1AdminConfigGet200ResponseConfig
     */
    'id': string;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1AdminConfigGet200ResponseConfig
     */
    'initialized'?: boolean | null;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1AdminConfigGet200ResponseConfig
     */
    'allowSignUp'?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AdminConfigGet200ResponseConfig
     */
    'allowedSignUpDomain'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AdminConfigGet200ResponseConfig
     */
    'instanceId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1AdminConfigGet200ResponseConfig
     */
    'trustSamlEmails'?: boolean | null;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1AdminConfigGet200ResponseConfig
     */
    'trustLdapEmails'?: boolean | null;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1AdminConfigGet200ResponseConfig
     */
    'trustOidcEmails'?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AdminConfigGet200ResponseConfig
     */
    'defaultAuthOrgId'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ApiV1AdminConfigGet200ResponseConfig
     */
    'enabledLoginMethods'?: Array<string> | null;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1AdminConfigGet200ResponseConfig
     */
    'isMigrationModeOn': boolean;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AdminConfigGet200ResponseConfig
     */
    'defaultAuthOrgSlug': string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1AdminConfigGet200ResponseConfig
     */
    'isSecretScanningDisabled': boolean;
}
/**
 * 
 * @export
 * @interface ApiV1AdminConfigPatch200Response
 */
export interface ApiV1AdminConfigPatch200Response {
    /**
     * 
     * @type {ApiV1AdminConfigPatch200ResponseConfig}
     * @memberof ApiV1AdminConfigPatch200Response
     */
    'config': ApiV1AdminConfigPatch200ResponseConfig;
}
/**
 * 
 * @export
 * @interface ApiV1AdminConfigPatch200ResponseConfig
 */
export interface ApiV1AdminConfigPatch200ResponseConfig {
    /**
     * 
     * @type {string}
     * @memberof ApiV1AdminConfigPatch200ResponseConfig
     */
    'id': string;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1AdminConfigPatch200ResponseConfig
     */
    'initialized'?: boolean | null;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1AdminConfigPatch200ResponseConfig
     */
    'allowSignUp'?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AdminConfigPatch200ResponseConfig
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AdminConfigPatch200ResponseConfig
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AdminConfigPatch200ResponseConfig
     */
    'allowedSignUpDomain'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AdminConfigPatch200ResponseConfig
     */
    'instanceId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1AdminConfigPatch200ResponseConfig
     */
    'trustSamlEmails'?: boolean | null;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1AdminConfigPatch200ResponseConfig
     */
    'trustLdapEmails'?: boolean | null;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1AdminConfigPatch200ResponseConfig
     */
    'trustOidcEmails'?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AdminConfigPatch200ResponseConfig
     */
    'defaultAuthOrgId'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ApiV1AdminConfigPatch200ResponseConfig
     */
    'enabledLoginMethods'?: Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AdminConfigPatch200ResponseConfig
     */
    'defaultAuthOrgSlug': string | null;
}
/**
 * 
 * @export
 * @interface ApiV1AdminConfigPatchRequest
 */
export interface ApiV1AdminConfigPatchRequest {
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1AdminConfigPatchRequest
     */
    'allowSignUp'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AdminConfigPatchRequest
     */
    'allowedSignUpDomain'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1AdminConfigPatchRequest
     */
    'trustSamlEmails'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1AdminConfigPatchRequest
     */
    'trustLdapEmails'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1AdminConfigPatchRequest
     */
    'trustOidcEmails'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AdminConfigPatchRequest
     */
    'defaultAuthOrgId'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ApiV1AdminConfigPatchRequest
     */
    'enabledLoginMethods'?: Array<ApiV1AdminConfigPatchRequestEnabledLoginMethodsEnum>;
}

export const ApiV1AdminConfigPatchRequestEnabledLoginMethodsEnum = {
    Email: 'email',
    Google: 'google',
    Github: 'github',
    Gitlab: 'gitlab',
    Saml: 'saml',
    Ldap: 'ldap',
    Oidc: 'oidc'
} as const;

export type ApiV1AdminConfigPatchRequestEnabledLoginMethodsEnum = typeof ApiV1AdminConfigPatchRequestEnabledLoginMethodsEnum[keyof typeof ApiV1AdminConfigPatchRequestEnabledLoginMethodsEnum];

/**
 * 
 * @export
 * @interface ApiV1AdminSignupPost200Response
 */
export interface ApiV1AdminSignupPost200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiV1AdminSignupPost200Response
     */
    'message': string;
    /**
     * 
     * @type {ApiV1PasswordEmailPasswordResetVerifyPost200ResponseUser}
     * @memberof ApiV1AdminSignupPost200Response
     */
    'user': ApiV1PasswordEmailPasswordResetVerifyPost200ResponseUser;
    /**
     * 
     * @type {ApiV1OrganizationGet200ResponseOrganizationsInner}
     * @memberof ApiV1AdminSignupPost200Response
     */
    'organization': ApiV1OrganizationGet200ResponseOrganizationsInner;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AdminSignupPost200Response
     */
    'token': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AdminSignupPost200Response
     */
    'new': string;
}
/**
 * 
 * @export
 * @interface ApiV1AdminSignupPostRequest
 */
export interface ApiV1AdminSignupPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1AdminSignupPostRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AdminSignupPostRequest
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AdminSignupPostRequest
     */
    'firstName': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AdminSignupPostRequest
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AdminSignupPostRequest
     */
    'protectedKey': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AdminSignupPostRequest
     */
    'protectedKeyIV': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AdminSignupPostRequest
     */
    'protectedKeyTag': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AdminSignupPostRequest
     */
    'publicKey': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AdminSignupPostRequest
     */
    'encryptedPrivateKey': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AdminSignupPostRequest
     */
    'encryptedPrivateKeyIV': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AdminSignupPostRequest
     */
    'encryptedPrivateKeyTag': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AdminSignupPostRequest
     */
    'salt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AdminSignupPostRequest
     */
    'verifier': string;
}
/**
 * 
 * @export
 * @interface ApiV1AdminUserManagementUsersGet200Response
 */
export interface ApiV1AdminUserManagementUsersGet200Response {
    /**
     * 
     * @type {Array<ApiV1AdminUserManagementUsersGet200ResponseUsersInner>}
     * @memberof ApiV1AdminUserManagementUsersGet200Response
     */
    'users': Array<ApiV1AdminUserManagementUsersGet200ResponseUsersInner>;
}
/**
 * 
 * @export
 * @interface ApiV1AdminUserManagementUsersGet200ResponseUsersInner
 */
export interface ApiV1AdminUserManagementUsersGet200ResponseUsersInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1AdminUserManagementUsersGet200ResponseUsersInner
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AdminUserManagementUsersGet200ResponseUsersInner
     */
    'firstName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AdminUserManagementUsersGet200ResponseUsersInner
     */
    'lastName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AdminUserManagementUsersGet200ResponseUsersInner
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AdminUserManagementUsersGet200ResponseUsersInner
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface ApiV1AdminUserManagementUsersUserIdDelete200Response
 */
export interface ApiV1AdminUserManagementUsersUserIdDelete200Response {
    /**
     * 
     * @type {ApiV1AdminUserManagementUsersGet200ResponseUsersInner}
     * @memberof ApiV1AdminUserManagementUsersUserIdDelete200Response
     */
    'users': ApiV1AdminUserManagementUsersGet200ResponseUsersInner;
}
/**
 * 
 * @export
 * @interface ApiV1AuditLogStreamsGet200Response
 */
export interface ApiV1AuditLogStreamsGet200Response {
    /**
     * 
     * @type {Array<ApiV1AuditLogStreamsGet200ResponseAuditLogStreamsInner>}
     * @memberof ApiV1AuditLogStreamsGet200Response
     */
    'auditLogStreams': Array<ApiV1AuditLogStreamsGet200ResponseAuditLogStreamsInner>;
}
/**
 * 
 * @export
 * @interface ApiV1AuditLogStreamsGet200ResponseAuditLogStreamsInner
 */
export interface ApiV1AuditLogStreamsGet200ResponseAuditLogStreamsInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuditLogStreamsGet200ResponseAuditLogStreamsInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuditLogStreamsGet200ResponseAuditLogStreamsInner
     */
    'url': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuditLogStreamsGet200ResponseAuditLogStreamsInner
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuditLogStreamsGet200ResponseAuditLogStreamsInner
     */
    'updatedAt': string;
}
/**
 * 
 * @export
 * @interface ApiV1AuditLogStreamsIdGet200Response
 */
export interface ApiV1AuditLogStreamsIdGet200Response {
    /**
     * 
     * @type {ApiV1AuditLogStreamsIdGet200ResponseAuditLogStream}
     * @memberof ApiV1AuditLogStreamsIdGet200Response
     */
    'auditLogStream': ApiV1AuditLogStreamsIdGet200ResponseAuditLogStream;
}
/**
 * 
 * @export
 * @interface ApiV1AuditLogStreamsIdGet200ResponseAuditLogStream
 */
export interface ApiV1AuditLogStreamsIdGet200ResponseAuditLogStream {
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuditLogStreamsIdGet200ResponseAuditLogStream
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuditLogStreamsIdGet200ResponseAuditLogStream
     */
    'url': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuditLogStreamsIdGet200ResponseAuditLogStream
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuditLogStreamsIdGet200ResponseAuditLogStream
     */
    'updatedAt': string;
    /**
     * 
     * @type {Array<ApiV1AuditLogStreamsIdGet200ResponseAuditLogStreamHeadersInner>}
     * @memberof ApiV1AuditLogStreamsIdGet200ResponseAuditLogStream
     */
    'headers'?: Array<ApiV1AuditLogStreamsIdGet200ResponseAuditLogStreamHeadersInner>;
}
/**
 * 
 * @export
 * @interface ApiV1AuditLogStreamsIdGet200ResponseAuditLogStreamHeadersInner
 */
export interface ApiV1AuditLogStreamsIdGet200ResponseAuditLogStreamHeadersInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuditLogStreamsIdGet200ResponseAuditLogStreamHeadersInner
     */
    'key': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuditLogStreamsIdGet200ResponseAuditLogStreamHeadersInner
     */
    'value': string;
}
/**
 * 
 * @export
 * @interface ApiV1AuditLogStreamsIdPatchRequest
 */
export interface ApiV1AuditLogStreamsIdPatchRequest {
    /**
     * The HTTP URL to push logs to.
     * @type {string}
     * @memberof ApiV1AuditLogStreamsIdPatchRequest
     */
    'url'?: string;
    /**
     * The HTTP headers attached for the external prrovider requests.
     * @type {Array<ApiV1AuditLogStreamsPostRequestHeadersInner>}
     * @memberof ApiV1AuditLogStreamsIdPatchRequest
     */
    'headers'?: Array<ApiV1AuditLogStreamsPostRequestHeadersInner>;
}
/**
 * 
 * @export
 * @interface ApiV1AuditLogStreamsPost200Response
 */
export interface ApiV1AuditLogStreamsPost200Response {
    /**
     * 
     * @type {ApiV1AuditLogStreamsGet200ResponseAuditLogStreamsInner}
     * @memberof ApiV1AuditLogStreamsPost200Response
     */
    'auditLogStream': ApiV1AuditLogStreamsGet200ResponseAuditLogStreamsInner;
}
/**
 * 
 * @export
 * @interface ApiV1AuditLogStreamsPostRequest
 */
export interface ApiV1AuditLogStreamsPostRequest {
    /**
     * The HTTP URL to push logs to.
     * @type {string}
     * @memberof ApiV1AuditLogStreamsPostRequest
     */
    'url': string;
    /**
     * The HTTP headers attached for the external prrovider requests.
     * @type {Array<ApiV1AuditLogStreamsPostRequestHeadersInner>}
     * @memberof ApiV1AuditLogStreamsPostRequest
     */
    'headers'?: Array<ApiV1AuditLogStreamsPostRequestHeadersInner>;
}
/**
 * The HTTP headers attached for the external prrovider requests.
 * @export
 * @interface ApiV1AuditLogStreamsPostRequestHeadersInner
 */
export interface ApiV1AuditLogStreamsPostRequestHeadersInner {
    /**
     * The HTTP header key name.
     * @type {string}
     * @memberof ApiV1AuditLogStreamsPostRequestHeadersInner
     */
    'key': string;
    /**
     * The HTTP header value.
     * @type {string}
     * @memberof ApiV1AuditLogStreamsPostRequestHeadersInner
     */
    'value': string;
}
/**
 * 
 * @export
 * @interface ApiV1AuthAwsAuthIdentitiesIdentityIdGet200Response
 */
export interface ApiV1AuthAwsAuthIdentitiesIdentityIdGet200Response {
    /**
     * 
     * @type {ApiV1AuthAwsAuthIdentitiesIdentityIdGet200ResponseIdentityAwsAuth}
     * @memberof ApiV1AuthAwsAuthIdentitiesIdentityIdGet200Response
     */
    'identityAwsAuth': ApiV1AuthAwsAuthIdentitiesIdentityIdGet200ResponseIdentityAwsAuth;
}
/**
 * 
 * @export
 * @interface ApiV1AuthAwsAuthIdentitiesIdentityIdGet200ResponseIdentityAwsAuth
 */
export interface ApiV1AuthAwsAuthIdentitiesIdentityIdGet200ResponseIdentityAwsAuth {
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthAwsAuthIdentitiesIdentityIdGet200ResponseIdentityAwsAuth
     */
    'id': string;
    /**
     * 
     * @type {number}
     * @memberof ApiV1AuthAwsAuthIdentitiesIdentityIdGet200ResponseIdentityAwsAuth
     */
    'accessTokenTTL'?: number;
    /**
     * 
     * @type {number}
     * @memberof ApiV1AuthAwsAuthIdentitiesIdentityIdGet200ResponseIdentityAwsAuth
     */
    'accessTokenMaxTTL'?: number;
    /**
     * 
     * @type {number}
     * @memberof ApiV1AuthAwsAuthIdentitiesIdentityIdGet200ResponseIdentityAwsAuth
     */
    'accessTokenNumUsesLimit'?: number;
    /**
     * 
     * @type {any}
     * @memberof ApiV1AuthAwsAuthIdentitiesIdentityIdGet200ResponseIdentityAwsAuth
     */
    'accessTokenTrustedIps'?: any;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthAwsAuthIdentitiesIdentityIdGet200ResponseIdentityAwsAuth
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthAwsAuthIdentitiesIdentityIdGet200ResponseIdentityAwsAuth
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthAwsAuthIdentitiesIdentityIdGet200ResponseIdentityAwsAuth
     */
    'identityId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthAwsAuthIdentitiesIdentityIdGet200ResponseIdentityAwsAuth
     */
    'type': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthAwsAuthIdentitiesIdentityIdGet200ResponseIdentityAwsAuth
     */
    'stsEndpoint': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthAwsAuthIdentitiesIdentityIdGet200ResponseIdentityAwsAuth
     */
    'allowedPrincipalArns': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthAwsAuthIdentitiesIdentityIdGet200ResponseIdentityAwsAuth
     */
    'allowedAccountIds': string;
}
/**
 * 
 * @export
 * @interface ApiV1AuthAwsAuthIdentitiesIdentityIdPatchRequest
 */
export interface ApiV1AuthAwsAuthIdentitiesIdentityIdPatchRequest {
    /**
     * The new endpoint URL for the AWS STS API.
     * @type {string}
     * @memberof ApiV1AuthAwsAuthIdentitiesIdentityIdPatchRequest
     */
    'stsEndpoint'?: string;
    /**
     * The new comma-separated list of trusted IAM principal ARNs that are allowed to authenticate with Infisical.
     * @type {string}
     * @memberof ApiV1AuthAwsAuthIdentitiesIdentityIdPatchRequest
     */
    'allowedPrincipalArns'?: string;
    /**
     * The new comma-separated list of trusted AWS account IDs that are allowed to authenticate with Infisical.
     * @type {string}
     * @memberof ApiV1AuthAwsAuthIdentitiesIdentityIdPatchRequest
     */
    'allowedAccountIds'?: string;
    /**
     * The new IPs or CIDR ranges that access tokens can be used from.
     * @type {Array<ApiV1AuthTokenAuthIdentitiesIdentityIdPostRequestAccessTokenTrustedIpsInner>}
     * @memberof ApiV1AuthAwsAuthIdentitiesIdentityIdPatchRequest
     */
    'accessTokenTrustedIps'?: Array<ApiV1AuthTokenAuthIdentitiesIdentityIdPostRequestAccessTokenTrustedIpsInner>;
    /**
     * The new lifetime for an acccess token in seconds.
     * @type {number}
     * @memberof ApiV1AuthAwsAuthIdentitiesIdentityIdPatchRequest
     */
    'accessTokenTTL'?: number;
    /**
     * The new maximum number of times that an access token can be used.
     * @type {number}
     * @memberof ApiV1AuthAwsAuthIdentitiesIdentityIdPatchRequest
     */
    'accessTokenNumUsesLimit'?: number;
    /**
     * The new maximum lifetime for an acccess token in seconds.
     * @type {number}
     * @memberof ApiV1AuthAwsAuthIdentitiesIdentityIdPatchRequest
     */
    'accessTokenMaxTTL'?: number;
}
/**
 * 
 * @export
 * @interface ApiV1AuthAwsAuthIdentitiesIdentityIdPostRequest
 */
export interface ApiV1AuthAwsAuthIdentitiesIdentityIdPostRequest {
    /**
     * The endpoint URL for the AWS STS API.
     * @type {string}
     * @memberof ApiV1AuthAwsAuthIdentitiesIdentityIdPostRequest
     */
    'stsEndpoint'?: string;
    /**
     * The comma-separated list of trusted IAM principal ARNs that are allowed to authenticate with Infisical.
     * @type {string}
     * @memberof ApiV1AuthAwsAuthIdentitiesIdentityIdPostRequest
     */
    'allowedPrincipalArns'?: string;
    /**
     * The comma-separated list of trusted AWS account IDs that are allowed to authenticate with Infisical.
     * @type {string}
     * @memberof ApiV1AuthAwsAuthIdentitiesIdentityIdPostRequest
     */
    'allowedAccountIds'?: string;
    /**
     * The IPs or CIDR ranges that access tokens can be used from.
     * @type {Array<ApiV1AuthTokenAuthIdentitiesIdentityIdPostRequestAccessTokenTrustedIpsInner>}
     * @memberof ApiV1AuthAwsAuthIdentitiesIdentityIdPostRequest
     */
    'accessTokenTrustedIps'?: Array<ApiV1AuthTokenAuthIdentitiesIdentityIdPostRequestAccessTokenTrustedIpsInner>;
    /**
     * The lifetime for an acccess token in seconds.
     * @type {number}
     * @memberof ApiV1AuthAwsAuthIdentitiesIdentityIdPostRequest
     */
    'accessTokenTTL'?: number;
    /**
     * The maximum lifetime for an acccess token in seconds.
     * @type {number}
     * @memberof ApiV1AuthAwsAuthIdentitiesIdentityIdPostRequest
     */
    'accessTokenMaxTTL'?: number;
    /**
     * The maximum number of times that an access token can be used.
     * @type {number}
     * @memberof ApiV1AuthAwsAuthIdentitiesIdentityIdPostRequest
     */
    'accessTokenNumUsesLimit'?: number;
}
/**
 * 
 * @export
 * @interface ApiV1AuthAwsAuthLoginPostRequest
 */
export interface ApiV1AuthAwsAuthLoginPostRequest {
    /**
     * The ID of the identity to login.
     * @type {string}
     * @memberof ApiV1AuthAwsAuthLoginPostRequest
     */
    'identityId': string;
    /**
     * The HTTP request method used in the signed request.
     * @type {string}
     * @memberof ApiV1AuthAwsAuthLoginPostRequest
     */
    'iamHttpRequestMethod'?: string;
    /**
     * The base64-encoded body of the signed request. Most likely, the base64-encoding of Action=GetCallerIdentity&Version=2011-06-15.
     * @type {string}
     * @memberof ApiV1AuthAwsAuthLoginPostRequest
     */
    'iamRequestBody': string;
    /**
     * The base64-encoded headers of the sts:GetCallerIdentity signed request.
     * @type {string}
     * @memberof ApiV1AuthAwsAuthLoginPostRequest
     */
    'iamRequestHeaders': string;
}
/**
 * 
 * @export
 * @interface ApiV1AuthAzureAuthIdentitiesIdentityIdGet200Response
 */
export interface ApiV1AuthAzureAuthIdentitiesIdentityIdGet200Response {
    /**
     * 
     * @type {ApiV1AuthAzureAuthIdentitiesIdentityIdGet200ResponseIdentityAzureAuth}
     * @memberof ApiV1AuthAzureAuthIdentitiesIdentityIdGet200Response
     */
    'identityAzureAuth': ApiV1AuthAzureAuthIdentitiesIdentityIdGet200ResponseIdentityAzureAuth;
}
/**
 * 
 * @export
 * @interface ApiV1AuthAzureAuthIdentitiesIdentityIdGet200ResponseIdentityAzureAuth
 */
export interface ApiV1AuthAzureAuthIdentitiesIdentityIdGet200ResponseIdentityAzureAuth {
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthAzureAuthIdentitiesIdentityIdGet200ResponseIdentityAzureAuth
     */
    'id': string;
    /**
     * 
     * @type {number}
     * @memberof ApiV1AuthAzureAuthIdentitiesIdentityIdGet200ResponseIdentityAzureAuth
     */
    'accessTokenTTL'?: number;
    /**
     * 
     * @type {number}
     * @memberof ApiV1AuthAzureAuthIdentitiesIdentityIdGet200ResponseIdentityAzureAuth
     */
    'accessTokenMaxTTL'?: number;
    /**
     * 
     * @type {number}
     * @memberof ApiV1AuthAzureAuthIdentitiesIdentityIdGet200ResponseIdentityAzureAuth
     */
    'accessTokenNumUsesLimit'?: number;
    /**
     * 
     * @type {any}
     * @memberof ApiV1AuthAzureAuthIdentitiesIdentityIdGet200ResponseIdentityAzureAuth
     */
    'accessTokenTrustedIps'?: any;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthAzureAuthIdentitiesIdentityIdGet200ResponseIdentityAzureAuth
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthAzureAuthIdentitiesIdentityIdGet200ResponseIdentityAzureAuth
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthAzureAuthIdentitiesIdentityIdGet200ResponseIdentityAzureAuth
     */
    'identityId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthAzureAuthIdentitiesIdentityIdGet200ResponseIdentityAzureAuth
     */
    'tenantId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthAzureAuthIdentitiesIdentityIdGet200ResponseIdentityAzureAuth
     */
    'resource': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthAzureAuthIdentitiesIdentityIdGet200ResponseIdentityAzureAuth
     */
    'allowedServicePrincipalIds': string;
}
/**
 * 
 * @export
 * @interface ApiV1AuthAzureAuthIdentitiesIdentityIdPatchRequest
 */
export interface ApiV1AuthAzureAuthIdentitiesIdentityIdPatchRequest {
    /**
     * The new tenant ID for the Azure AD organization.
     * @type {string}
     * @memberof ApiV1AuthAzureAuthIdentitiesIdentityIdPatchRequest
     */
    'tenantId'?: string;
    /**
     * The new resource URL for the application registered in Azure AD.
     * @type {string}
     * @memberof ApiV1AuthAzureAuthIdentitiesIdentityIdPatchRequest
     */
    'resource'?: string;
    /**
     * The new comma-separated list of Azure AD service principal IDs that are allowed to authenticate with Infisical.
     * @type {string}
     * @memberof ApiV1AuthAzureAuthIdentitiesIdentityIdPatchRequest
     */
    'allowedServicePrincipalIds'?: string;
    /**
     * The new IPs or CIDR ranges that access tokens can be used from.
     * @type {Array<ApiV1AuthTokenAuthIdentitiesIdentityIdPostRequestAccessTokenTrustedIpsInner>}
     * @memberof ApiV1AuthAzureAuthIdentitiesIdentityIdPatchRequest
     */
    'accessTokenTrustedIps'?: Array<ApiV1AuthTokenAuthIdentitiesIdentityIdPostRequestAccessTokenTrustedIpsInner>;
    /**
     * The new lifetime for an acccess token in seconds.
     * @type {number}
     * @memberof ApiV1AuthAzureAuthIdentitiesIdentityIdPatchRequest
     */
    'accessTokenTTL'?: number;
    /**
     * The new maximum number of times that an access token can be used.
     * @type {number}
     * @memberof ApiV1AuthAzureAuthIdentitiesIdentityIdPatchRequest
     */
    'accessTokenNumUsesLimit'?: number;
    /**
     * The new maximum lifetime for an acccess token in seconds.
     * @type {number}
     * @memberof ApiV1AuthAzureAuthIdentitiesIdentityIdPatchRequest
     */
    'accessTokenMaxTTL'?: number;
}
/**
 * 
 * @export
 * @interface ApiV1AuthAzureAuthIdentitiesIdentityIdPostRequest
 */
export interface ApiV1AuthAzureAuthIdentitiesIdentityIdPostRequest {
    /**
     * The tenant ID for the Azure AD organization.
     * @type {string}
     * @memberof ApiV1AuthAzureAuthIdentitiesIdentityIdPostRequest
     */
    'tenantId': string;
    /**
     * The resource URL for the application registered in Azure AD.
     * @type {string}
     * @memberof ApiV1AuthAzureAuthIdentitiesIdentityIdPostRequest
     */
    'resource': string;
    /**
     * The comma-separated list of Azure AD service principal IDs that are allowed to authenticate with Infisical.
     * @type {string}
     * @memberof ApiV1AuthAzureAuthIdentitiesIdentityIdPostRequest
     */
    'allowedServicePrincipalIds'?: string;
    /**
     * The IPs or CIDR ranges that access tokens can be used from.
     * @type {Array<ApiV1AuthTokenAuthIdentitiesIdentityIdPostRequestAccessTokenTrustedIpsInner>}
     * @memberof ApiV1AuthAzureAuthIdentitiesIdentityIdPostRequest
     */
    'accessTokenTrustedIps'?: Array<ApiV1AuthTokenAuthIdentitiesIdentityIdPostRequestAccessTokenTrustedIpsInner>;
    /**
     * The lifetime for an acccess token in seconds.
     * @type {number}
     * @memberof ApiV1AuthAzureAuthIdentitiesIdentityIdPostRequest
     */
    'accessTokenTTL'?: number;
    /**
     * The maximum lifetime for an acccess token in seconds.
     * @type {number}
     * @memberof ApiV1AuthAzureAuthIdentitiesIdentityIdPostRequest
     */
    'accessTokenMaxTTL'?: number;
    /**
     * The maximum number of times that an access token can be used.
     * @type {number}
     * @memberof ApiV1AuthAzureAuthIdentitiesIdentityIdPostRequest
     */
    'accessTokenNumUsesLimit'?: number;
}
/**
 * 
 * @export
 * @interface ApiV1AuthCheckAuthPost200Response
 */
export interface ApiV1AuthCheckAuthPost200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthCheckAuthPost200Response
     */
    'message': ApiV1AuthCheckAuthPost200ResponseMessageEnum;
}

export const ApiV1AuthCheckAuthPost200ResponseMessageEnum = {
    Authenticated: 'Authenticated'
} as const;

export type ApiV1AuthCheckAuthPost200ResponseMessageEnum = typeof ApiV1AuthCheckAuthPost200ResponseMessageEnum[keyof typeof ApiV1AuthCheckAuthPost200ResponseMessageEnum];

/**
 * 
 * @export
 * @interface ApiV1AuthGcpAuthIdentitiesIdentityIdGet200Response
 */
export interface ApiV1AuthGcpAuthIdentitiesIdentityIdGet200Response {
    /**
     * 
     * @type {ApiV1AuthGcpAuthIdentitiesIdentityIdGet200ResponseIdentityGcpAuth}
     * @memberof ApiV1AuthGcpAuthIdentitiesIdentityIdGet200Response
     */
    'identityGcpAuth': ApiV1AuthGcpAuthIdentitiesIdentityIdGet200ResponseIdentityGcpAuth;
}
/**
 * 
 * @export
 * @interface ApiV1AuthGcpAuthIdentitiesIdentityIdGet200ResponseIdentityGcpAuth
 */
export interface ApiV1AuthGcpAuthIdentitiesIdentityIdGet200ResponseIdentityGcpAuth {
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthGcpAuthIdentitiesIdentityIdGet200ResponseIdentityGcpAuth
     */
    'id': string;
    /**
     * 
     * @type {number}
     * @memberof ApiV1AuthGcpAuthIdentitiesIdentityIdGet200ResponseIdentityGcpAuth
     */
    'accessTokenTTL'?: number;
    /**
     * 
     * @type {number}
     * @memberof ApiV1AuthGcpAuthIdentitiesIdentityIdGet200ResponseIdentityGcpAuth
     */
    'accessTokenMaxTTL'?: number;
    /**
     * 
     * @type {number}
     * @memberof ApiV1AuthGcpAuthIdentitiesIdentityIdGet200ResponseIdentityGcpAuth
     */
    'accessTokenNumUsesLimit'?: number;
    /**
     * 
     * @type {any}
     * @memberof ApiV1AuthGcpAuthIdentitiesIdentityIdGet200ResponseIdentityGcpAuth
     */
    'accessTokenTrustedIps'?: any;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthGcpAuthIdentitiesIdentityIdGet200ResponseIdentityGcpAuth
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthGcpAuthIdentitiesIdentityIdGet200ResponseIdentityGcpAuth
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthGcpAuthIdentitiesIdentityIdGet200ResponseIdentityGcpAuth
     */
    'identityId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthGcpAuthIdentitiesIdentityIdGet200ResponseIdentityGcpAuth
     */
    'type': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthGcpAuthIdentitiesIdentityIdGet200ResponseIdentityGcpAuth
     */
    'allowedServiceAccounts': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthGcpAuthIdentitiesIdentityIdGet200ResponseIdentityGcpAuth
     */
    'allowedProjects': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthGcpAuthIdentitiesIdentityIdGet200ResponseIdentityGcpAuth
     */
    'allowedZones': string;
}
/**
 * 
 * @export
 * @interface ApiV1AuthGcpAuthIdentitiesIdentityIdPatchRequest
 */
export interface ApiV1AuthGcpAuthIdentitiesIdentityIdPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthGcpAuthIdentitiesIdentityIdPatchRequest
     */
    'type'?: ApiV1AuthGcpAuthIdentitiesIdentityIdPatchRequestTypeEnum;
    /**
     * The new comma-separated list of trusted service account emails corresponding to the GCE resource(s) allowed to authenticate with Infisical.
     * @type {string}
     * @memberof ApiV1AuthGcpAuthIdentitiesIdentityIdPatchRequest
     */
    'allowedServiceAccounts'?: string;
    /**
     * The new comma-separated list of trusted GCP projects that the GCE instance must belong to authenticate with Infisical.
     * @type {string}
     * @memberof ApiV1AuthGcpAuthIdentitiesIdentityIdPatchRequest
     */
    'allowedProjects'?: string;
    /**
     * The new comma-separated list of trusted zones that the GCE instances must belong to authenticate with Infisical.
     * @type {string}
     * @memberof ApiV1AuthGcpAuthIdentitiesIdentityIdPatchRequest
     */
    'allowedZones'?: string;
    /**
     * The new IPs or CIDR ranges that access tokens can be used from.
     * @type {Array<ApiV1AuthTokenAuthIdentitiesIdentityIdPostRequestAccessTokenTrustedIpsInner>}
     * @memberof ApiV1AuthGcpAuthIdentitiesIdentityIdPatchRequest
     */
    'accessTokenTrustedIps'?: Array<ApiV1AuthTokenAuthIdentitiesIdentityIdPostRequestAccessTokenTrustedIpsInner>;
    /**
     * The new lifetime for an acccess token in seconds.
     * @type {number}
     * @memberof ApiV1AuthGcpAuthIdentitiesIdentityIdPatchRequest
     */
    'accessTokenTTL'?: number;
    /**
     * The new maximum number of times that an access token can be used.
     * @type {number}
     * @memberof ApiV1AuthGcpAuthIdentitiesIdentityIdPatchRequest
     */
    'accessTokenNumUsesLimit'?: number;
    /**
     * The new maximum lifetime for an acccess token in seconds.
     * @type {number}
     * @memberof ApiV1AuthGcpAuthIdentitiesIdentityIdPatchRequest
     */
    'accessTokenMaxTTL'?: number;
}

export const ApiV1AuthGcpAuthIdentitiesIdentityIdPatchRequestTypeEnum = {
    Iam: 'iam',
    Gce: 'gce'
} as const;

export type ApiV1AuthGcpAuthIdentitiesIdentityIdPatchRequestTypeEnum = typeof ApiV1AuthGcpAuthIdentitiesIdentityIdPatchRequestTypeEnum[keyof typeof ApiV1AuthGcpAuthIdentitiesIdentityIdPatchRequestTypeEnum];

/**
 * 
 * @export
 * @interface ApiV1AuthGcpAuthIdentitiesIdentityIdPostRequest
 */
export interface ApiV1AuthGcpAuthIdentitiesIdentityIdPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthGcpAuthIdentitiesIdentityIdPostRequest
     */
    'type': ApiV1AuthGcpAuthIdentitiesIdentityIdPostRequestTypeEnum;
    /**
     * The comma-separated list of trusted service account emails corresponding to the GCE resource(s) allowed to authenticate with Infisical.
     * @type {string}
     * @memberof ApiV1AuthGcpAuthIdentitiesIdentityIdPostRequest
     */
    'allowedServiceAccounts'?: string;
    /**
     * The comma-separated list of trusted GCP projects that the GCE instance must belong to authenticate with Infisical.
     * @type {string}
     * @memberof ApiV1AuthGcpAuthIdentitiesIdentityIdPostRequest
     */
    'allowedProjects'?: string;
    /**
     * The comma-separated list of trusted zones that the GCE instances must belong to authenticate with Infisical.
     * @type {string}
     * @memberof ApiV1AuthGcpAuthIdentitiesIdentityIdPostRequest
     */
    'allowedZones'?: string;
    /**
     * The IPs or CIDR ranges that access tokens can be used from.
     * @type {Array<ApiV1AuthTokenAuthIdentitiesIdentityIdPostRequestAccessTokenTrustedIpsInner>}
     * @memberof ApiV1AuthGcpAuthIdentitiesIdentityIdPostRequest
     */
    'accessTokenTrustedIps'?: Array<ApiV1AuthTokenAuthIdentitiesIdentityIdPostRequestAccessTokenTrustedIpsInner>;
    /**
     * The lifetime for an acccess token in seconds.
     * @type {number}
     * @memberof ApiV1AuthGcpAuthIdentitiesIdentityIdPostRequest
     */
    'accessTokenTTL'?: number;
    /**
     * The maximum lifetime for an acccess token in seconds.
     * @type {number}
     * @memberof ApiV1AuthGcpAuthIdentitiesIdentityIdPostRequest
     */
    'accessTokenMaxTTL'?: number;
    /**
     * The maximum number of times that an access token can be used.
     * @type {number}
     * @memberof ApiV1AuthGcpAuthIdentitiesIdentityIdPostRequest
     */
    'accessTokenNumUsesLimit'?: number;
}

export const ApiV1AuthGcpAuthIdentitiesIdentityIdPostRequestTypeEnum = {
    Iam: 'iam',
    Gce: 'gce'
} as const;

export type ApiV1AuthGcpAuthIdentitiesIdentityIdPostRequestTypeEnum = typeof ApiV1AuthGcpAuthIdentitiesIdentityIdPostRequestTypeEnum[keyof typeof ApiV1AuthGcpAuthIdentitiesIdentityIdPostRequestTypeEnum];

/**
 * 
 * @export
 * @interface ApiV1AuthKubernetesAuthIdentitiesIdentityIdDelete200Response
 */
export interface ApiV1AuthKubernetesAuthIdentitiesIdentityIdDelete200Response {
    /**
     * 
     * @type {ApiV1AuthKubernetesAuthIdentitiesIdentityIdDelete200ResponseIdentityKubernetesAuth}
     * @memberof ApiV1AuthKubernetesAuthIdentitiesIdentityIdDelete200Response
     */
    'identityKubernetesAuth': ApiV1AuthKubernetesAuthIdentitiesIdentityIdDelete200ResponseIdentityKubernetesAuth;
}
/**
 * 
 * @export
 * @interface ApiV1AuthKubernetesAuthIdentitiesIdentityIdDelete200ResponseIdentityKubernetesAuth
 */
export interface ApiV1AuthKubernetesAuthIdentitiesIdentityIdDelete200ResponseIdentityKubernetesAuth {
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthKubernetesAuthIdentitiesIdentityIdDelete200ResponseIdentityKubernetesAuth
     */
    'id': string;
    /**
     * 
     * @type {number}
     * @memberof ApiV1AuthKubernetesAuthIdentitiesIdentityIdDelete200ResponseIdentityKubernetesAuth
     */
    'accessTokenTTL'?: number;
    /**
     * 
     * @type {number}
     * @memberof ApiV1AuthKubernetesAuthIdentitiesIdentityIdDelete200ResponseIdentityKubernetesAuth
     */
    'accessTokenMaxTTL'?: number;
    /**
     * 
     * @type {number}
     * @memberof ApiV1AuthKubernetesAuthIdentitiesIdentityIdDelete200ResponseIdentityKubernetesAuth
     */
    'accessTokenNumUsesLimit'?: number;
    /**
     * 
     * @type {any}
     * @memberof ApiV1AuthKubernetesAuthIdentitiesIdentityIdDelete200ResponseIdentityKubernetesAuth
     */
    'accessTokenTrustedIps'?: any;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthKubernetesAuthIdentitiesIdentityIdDelete200ResponseIdentityKubernetesAuth
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthKubernetesAuthIdentitiesIdentityIdDelete200ResponseIdentityKubernetesAuth
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthKubernetesAuthIdentitiesIdentityIdDelete200ResponseIdentityKubernetesAuth
     */
    'identityId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthKubernetesAuthIdentitiesIdentityIdDelete200ResponseIdentityKubernetesAuth
     */
    'kubernetesHost': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthKubernetesAuthIdentitiesIdentityIdDelete200ResponseIdentityKubernetesAuth
     */
    'allowedNamespaces': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthKubernetesAuthIdentitiesIdentityIdDelete200ResponseIdentityKubernetesAuth
     */
    'allowedNames': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthKubernetesAuthIdentitiesIdentityIdDelete200ResponseIdentityKubernetesAuth
     */
    'allowedAudience': string;
}
/**
 * 
 * @export
 * @interface ApiV1AuthKubernetesAuthIdentitiesIdentityIdGet200Response
 */
export interface ApiV1AuthKubernetesAuthIdentitiesIdentityIdGet200Response {
    /**
     * 
     * @type {ApiV1AuthKubernetesAuthIdentitiesIdentityIdGet200ResponseIdentityKubernetesAuth}
     * @memberof ApiV1AuthKubernetesAuthIdentitiesIdentityIdGet200Response
     */
    'identityKubernetesAuth': ApiV1AuthKubernetesAuthIdentitiesIdentityIdGet200ResponseIdentityKubernetesAuth;
}
/**
 * 
 * @export
 * @interface ApiV1AuthKubernetesAuthIdentitiesIdentityIdGet200ResponseIdentityKubernetesAuth
 */
export interface ApiV1AuthKubernetesAuthIdentitiesIdentityIdGet200ResponseIdentityKubernetesAuth {
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthKubernetesAuthIdentitiesIdentityIdGet200ResponseIdentityKubernetesAuth
     */
    'id': string;
    /**
     * 
     * @type {number}
     * @memberof ApiV1AuthKubernetesAuthIdentitiesIdentityIdGet200ResponseIdentityKubernetesAuth
     */
    'accessTokenTTL'?: number;
    /**
     * 
     * @type {number}
     * @memberof ApiV1AuthKubernetesAuthIdentitiesIdentityIdGet200ResponseIdentityKubernetesAuth
     */
    'accessTokenMaxTTL'?: number;
    /**
     * 
     * @type {number}
     * @memberof ApiV1AuthKubernetesAuthIdentitiesIdentityIdGet200ResponseIdentityKubernetesAuth
     */
    'accessTokenNumUsesLimit'?: number;
    /**
     * 
     * @type {any}
     * @memberof ApiV1AuthKubernetesAuthIdentitiesIdentityIdGet200ResponseIdentityKubernetesAuth
     */
    'accessTokenTrustedIps'?: any;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthKubernetesAuthIdentitiesIdentityIdGet200ResponseIdentityKubernetesAuth
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthKubernetesAuthIdentitiesIdentityIdGet200ResponseIdentityKubernetesAuth
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthKubernetesAuthIdentitiesIdentityIdGet200ResponseIdentityKubernetesAuth
     */
    'identityId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthKubernetesAuthIdentitiesIdentityIdGet200ResponseIdentityKubernetesAuth
     */
    'kubernetesHost': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthKubernetesAuthIdentitiesIdentityIdGet200ResponseIdentityKubernetesAuth
     */
    'allowedNamespaces': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthKubernetesAuthIdentitiesIdentityIdGet200ResponseIdentityKubernetesAuth
     */
    'allowedNames': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthKubernetesAuthIdentitiesIdentityIdGet200ResponseIdentityKubernetesAuth
     */
    'allowedAudience': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthKubernetesAuthIdentitiesIdentityIdGet200ResponseIdentityKubernetesAuth
     */
    'caCert': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthKubernetesAuthIdentitiesIdentityIdGet200ResponseIdentityKubernetesAuth
     */
    'tokenReviewerJwt': string;
}
/**
 * 
 * @export
 * @interface ApiV1AuthKubernetesAuthIdentitiesIdentityIdPatchRequest
 */
export interface ApiV1AuthKubernetesAuthIdentitiesIdentityIdPatchRequest {
    /**
     * The new host string, host:port pair, or URL to the base of the Kubernetes API server.
     * @type {string}
     * @memberof ApiV1AuthKubernetesAuthIdentitiesIdentityIdPatchRequest
     */
    'kubernetesHost'?: string;
    /**
     * The new PEM-encoded CA cert for the Kubernetes API server.
     * @type {string}
     * @memberof ApiV1AuthKubernetesAuthIdentitiesIdentityIdPatchRequest
     */
    'caCert'?: string;
    /**
     * The new long-lived service account JWT token for Infisical to access the TokenReview API to validate other service account JWT tokens submitted by applications/pods.
     * @type {string}
     * @memberof ApiV1AuthKubernetesAuthIdentitiesIdentityIdPatchRequest
     */
    'tokenReviewerJwt'?: string;
    /**
     * The new comma-separated list of trusted namespaces that service accounts must belong to authenticate with Infisical.
     * @type {string}
     * @memberof ApiV1AuthKubernetesAuthIdentitiesIdentityIdPatchRequest
     */
    'allowedNamespaces'?: string;
    /**
     * The new comma-separated list of trusted service account names that can authenticate with Infisical.
     * @type {string}
     * @memberof ApiV1AuthKubernetesAuthIdentitiesIdentityIdPatchRequest
     */
    'allowedNames'?: string;
    /**
     * The new optional audience claim that the service account JWT token must have to authenticate with Infisical.
     * @type {string}
     * @memberof ApiV1AuthKubernetesAuthIdentitiesIdentityIdPatchRequest
     */
    'allowedAudience'?: string;
    /**
     * The new IPs or CIDR ranges that access tokens can be used from.
     * @type {Array<ApiV1AuthTokenAuthIdentitiesIdentityIdPostRequestAccessTokenTrustedIpsInner>}
     * @memberof ApiV1AuthKubernetesAuthIdentitiesIdentityIdPatchRequest
     */
    'accessTokenTrustedIps'?: Array<ApiV1AuthTokenAuthIdentitiesIdentityIdPostRequestAccessTokenTrustedIpsInner>;
    /**
     * The new lifetime for an acccess token in seconds.
     * @type {number}
     * @memberof ApiV1AuthKubernetesAuthIdentitiesIdentityIdPatchRequest
     */
    'accessTokenTTL'?: number;
    /**
     * The new maximum number of times that an access token can be used.
     * @type {number}
     * @memberof ApiV1AuthKubernetesAuthIdentitiesIdentityIdPatchRequest
     */
    'accessTokenNumUsesLimit'?: number;
    /**
     * The new maximum lifetime for an acccess token in seconds.
     * @type {number}
     * @memberof ApiV1AuthKubernetesAuthIdentitiesIdentityIdPatchRequest
     */
    'accessTokenMaxTTL'?: number;
}
/**
 * 
 * @export
 * @interface ApiV1AuthKubernetesAuthIdentitiesIdentityIdPostRequest
 */
export interface ApiV1AuthKubernetesAuthIdentitiesIdentityIdPostRequest {
    /**
     * The host string, host:port pair, or URL to the base of the Kubernetes API server.
     * @type {string}
     * @memberof ApiV1AuthKubernetesAuthIdentitiesIdentityIdPostRequest
     */
    'kubernetesHost': string;
    /**
     * The PEM-encoded CA cert for the Kubernetes API server.
     * @type {string}
     * @memberof ApiV1AuthKubernetesAuthIdentitiesIdentityIdPostRequest
     */
    'caCert'?: string;
    /**
     * The long-lived service account JWT token for Infisical to access the TokenReview API to validate other service account JWT tokens submitted by applications/pods.
     * @type {string}
     * @memberof ApiV1AuthKubernetesAuthIdentitiesIdentityIdPostRequest
     */
    'tokenReviewerJwt': string;
    /**
     * The comma-separated list of trusted namespaces that service accounts must belong to authenticate with Infisical.
     * @type {string}
     * @memberof ApiV1AuthKubernetesAuthIdentitiesIdentityIdPostRequest
     */
    'allowedNamespaces': string;
    /**
     * The comma-separated list of trusted service account names that can authenticate with Infisical.
     * @type {string}
     * @memberof ApiV1AuthKubernetesAuthIdentitiesIdentityIdPostRequest
     */
    'allowedNames': string;
    /**
     * The optional audience claim that the service account JWT token must have to authenticate with Infisical.
     * @type {string}
     * @memberof ApiV1AuthKubernetesAuthIdentitiesIdentityIdPostRequest
     */
    'allowedAudience': string;
    /**
     * The IPs or CIDR ranges that access tokens can be used from.
     * @type {Array<ApiV1AuthTokenAuthIdentitiesIdentityIdPostRequestAccessTokenTrustedIpsInner>}
     * @memberof ApiV1AuthKubernetesAuthIdentitiesIdentityIdPostRequest
     */
    'accessTokenTrustedIps'?: Array<ApiV1AuthTokenAuthIdentitiesIdentityIdPostRequestAccessTokenTrustedIpsInner>;
    /**
     * The lifetime for an acccess token in seconds.
     * @type {number}
     * @memberof ApiV1AuthKubernetesAuthIdentitiesIdentityIdPostRequest
     */
    'accessTokenTTL'?: number;
    /**
     * The maximum lifetime for an acccess token in seconds.
     * @type {number}
     * @memberof ApiV1AuthKubernetesAuthIdentitiesIdentityIdPostRequest
     */
    'accessTokenMaxTTL'?: number;
    /**
     * The maximum number of times that an access token can be used.
     * @type {number}
     * @memberof ApiV1AuthKubernetesAuthIdentitiesIdentityIdPostRequest
     */
    'accessTokenNumUsesLimit'?: number;
}
/**
 * 
 * @export
 * @interface ApiV1AuthKubernetesAuthLoginPostRequest
 */
export interface ApiV1AuthKubernetesAuthLoginPostRequest {
    /**
     * The ID of the identity to login.
     * @type {string}
     * @memberof ApiV1AuthKubernetesAuthLoginPostRequest
     */
    'identityId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthKubernetesAuthLoginPostRequest
     */
    'jwt': string;
}
/**
 * 
 * @export
 * @interface ApiV1AuthOidcAuthIdentitiesIdentityIdDelete200Response
 */
export interface ApiV1AuthOidcAuthIdentitiesIdentityIdDelete200Response {
    /**
     * 
     * @type {ApiV1AuthOidcAuthIdentitiesIdentityIdDelete200ResponseIdentityOidcAuth}
     * @memberof ApiV1AuthOidcAuthIdentitiesIdentityIdDelete200Response
     */
    'identityOidcAuth': ApiV1AuthOidcAuthIdentitiesIdentityIdDelete200ResponseIdentityOidcAuth;
}
/**
 * 
 * @export
 * @interface ApiV1AuthOidcAuthIdentitiesIdentityIdDelete200ResponseIdentityOidcAuth
 */
export interface ApiV1AuthOidcAuthIdentitiesIdentityIdDelete200ResponseIdentityOidcAuth {
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthOidcAuthIdentitiesIdentityIdDelete200ResponseIdentityOidcAuth
     */
    'id': string;
    /**
     * 
     * @type {number}
     * @memberof ApiV1AuthOidcAuthIdentitiesIdentityIdDelete200ResponseIdentityOidcAuth
     */
    'accessTokenTTL'?: number;
    /**
     * 
     * @type {number}
     * @memberof ApiV1AuthOidcAuthIdentitiesIdentityIdDelete200ResponseIdentityOidcAuth
     */
    'accessTokenMaxTTL'?: number;
    /**
     * 
     * @type {number}
     * @memberof ApiV1AuthOidcAuthIdentitiesIdentityIdDelete200ResponseIdentityOidcAuth
     */
    'accessTokenNumUsesLimit'?: number;
    /**
     * 
     * @type {any}
     * @memberof ApiV1AuthOidcAuthIdentitiesIdentityIdDelete200ResponseIdentityOidcAuth
     */
    'accessTokenTrustedIps'?: any;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthOidcAuthIdentitiesIdentityIdDelete200ResponseIdentityOidcAuth
     */
    'identityId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthOidcAuthIdentitiesIdentityIdDelete200ResponseIdentityOidcAuth
     */
    'oidcDiscoveryUrl': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthOidcAuthIdentitiesIdentityIdDelete200ResponseIdentityOidcAuth
     */
    'boundIssuer': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthOidcAuthIdentitiesIdentityIdDelete200ResponseIdentityOidcAuth
     */
    'boundAudiences': string;
    /**
     * 
     * @type {any}
     * @memberof ApiV1AuthOidcAuthIdentitiesIdentityIdDelete200ResponseIdentityOidcAuth
     */
    'boundClaims'?: any;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthOidcAuthIdentitiesIdentityIdDelete200ResponseIdentityOidcAuth
     */
    'boundSubject'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthOidcAuthIdentitiesIdentityIdDelete200ResponseIdentityOidcAuth
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthOidcAuthIdentitiesIdentityIdDelete200ResponseIdentityOidcAuth
     */
    'updatedAt': string;
}
/**
 * 
 * @export
 * @interface ApiV1AuthOidcAuthIdentitiesIdentityIdGet200Response
 */
export interface ApiV1AuthOidcAuthIdentitiesIdentityIdGet200Response {
    /**
     * 
     * @type {ApiV1AuthOidcAuthIdentitiesIdentityIdGet200ResponseIdentityOidcAuth}
     * @memberof ApiV1AuthOidcAuthIdentitiesIdentityIdGet200Response
     */
    'identityOidcAuth': ApiV1AuthOidcAuthIdentitiesIdentityIdGet200ResponseIdentityOidcAuth;
}
/**
 * 
 * @export
 * @interface ApiV1AuthOidcAuthIdentitiesIdentityIdGet200ResponseIdentityOidcAuth
 */
export interface ApiV1AuthOidcAuthIdentitiesIdentityIdGet200ResponseIdentityOidcAuth {
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthOidcAuthIdentitiesIdentityIdGet200ResponseIdentityOidcAuth
     */
    'id': string;
    /**
     * 
     * @type {number}
     * @memberof ApiV1AuthOidcAuthIdentitiesIdentityIdGet200ResponseIdentityOidcAuth
     */
    'accessTokenTTL'?: number;
    /**
     * 
     * @type {number}
     * @memberof ApiV1AuthOidcAuthIdentitiesIdentityIdGet200ResponseIdentityOidcAuth
     */
    'accessTokenMaxTTL'?: number;
    /**
     * 
     * @type {number}
     * @memberof ApiV1AuthOidcAuthIdentitiesIdentityIdGet200ResponseIdentityOidcAuth
     */
    'accessTokenNumUsesLimit'?: number;
    /**
     * 
     * @type {any}
     * @memberof ApiV1AuthOidcAuthIdentitiesIdentityIdGet200ResponseIdentityOidcAuth
     */
    'accessTokenTrustedIps'?: any;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthOidcAuthIdentitiesIdentityIdGet200ResponseIdentityOidcAuth
     */
    'identityId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthOidcAuthIdentitiesIdentityIdGet200ResponseIdentityOidcAuth
     */
    'oidcDiscoveryUrl': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthOidcAuthIdentitiesIdentityIdGet200ResponseIdentityOidcAuth
     */
    'boundIssuer': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthOidcAuthIdentitiesIdentityIdGet200ResponseIdentityOidcAuth
     */
    'boundAudiences': string;
    /**
     * 
     * @type {any}
     * @memberof ApiV1AuthOidcAuthIdentitiesIdentityIdGet200ResponseIdentityOidcAuth
     */
    'boundClaims'?: any;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthOidcAuthIdentitiesIdentityIdGet200ResponseIdentityOidcAuth
     */
    'boundSubject'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthOidcAuthIdentitiesIdentityIdGet200ResponseIdentityOidcAuth
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthOidcAuthIdentitiesIdentityIdGet200ResponseIdentityOidcAuth
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthOidcAuthIdentitiesIdentityIdGet200ResponseIdentityOidcAuth
     */
    'caCert': string;
}
/**
 * 
 * @export
 * @interface ApiV1AuthOidcAuthIdentitiesIdentityIdPatchRequest
 */
export interface ApiV1AuthOidcAuthIdentitiesIdentityIdPatchRequest {
    /**
     * The new URL used to retrieve the OpenID Connect configuration from the identity provider.
     * @type {string}
     * @memberof ApiV1AuthOidcAuthIdentitiesIdentityIdPatchRequest
     */
    'oidcDiscoveryUrl'?: string;
    /**
     * The new PEM-encoded CA cert for establishing secure communication with the Identity Provider endpoints.
     * @type {string}
     * @memberof ApiV1AuthOidcAuthIdentitiesIdentityIdPatchRequest
     */
    'caCert'?: string;
    /**
     * The new unique identifier of the identity provider issuing the JWT.
     * @type {string}
     * @memberof ApiV1AuthOidcAuthIdentitiesIdentityIdPatchRequest
     */
    'boundIssuer'?: string;
    /**
     * The new list of intended recipients.
     * @type {string}
     * @memberof ApiV1AuthOidcAuthIdentitiesIdentityIdPatchRequest
     */
    'boundAudiences'?: string;
    /**
     * The new attributes that should be present in the JWT for it to be valid.
     * @type {{ [key: string]: string; }}
     * @memberof ApiV1AuthOidcAuthIdentitiesIdentityIdPatchRequest
     */
    'boundClaims'?: { [key: string]: string; };
    /**
     * The new expected principal that is the subject of the JWT.
     * @type {string}
     * @memberof ApiV1AuthOidcAuthIdentitiesIdentityIdPatchRequest
     */
    'boundSubject'?: string;
    /**
     * The new IPs or CIDR ranges that access tokens can be used from.
     * @type {Array<ApiV1AuthTokenAuthIdentitiesIdentityIdPostRequestAccessTokenTrustedIpsInner>}
     * @memberof ApiV1AuthOidcAuthIdentitiesIdentityIdPatchRequest
     */
    'accessTokenTrustedIps'?: Array<ApiV1AuthTokenAuthIdentitiesIdentityIdPostRequestAccessTokenTrustedIpsInner>;
    /**
     * The new lifetime for an acccess token in seconds.
     * @type {number}
     * @memberof ApiV1AuthOidcAuthIdentitiesIdentityIdPatchRequest
     */
    'accessTokenTTL'?: number;
    /**
     * The new maximum lifetime for an acccess token in seconds.
     * @type {number}
     * @memberof ApiV1AuthOidcAuthIdentitiesIdentityIdPatchRequest
     */
    'accessTokenMaxTTL'?: number;
    /**
     * The new maximum number of times that an access token can be used.
     * @type {number}
     * @memberof ApiV1AuthOidcAuthIdentitiesIdentityIdPatchRequest
     */
    'accessTokenNumUsesLimit'?: number;
}
/**
 * 
 * @export
 * @interface ApiV1AuthOidcAuthIdentitiesIdentityIdPostRequest
 */
export interface ApiV1AuthOidcAuthIdentitiesIdentityIdPostRequest {
    /**
     * The URL used to retrieve the OpenID Connect configuration from the identity provider.
     * @type {string}
     * @memberof ApiV1AuthOidcAuthIdentitiesIdentityIdPostRequest
     */
    'oidcDiscoveryUrl': string;
    /**
     * The PEM-encoded CA cert for establishing secure communication with the Identity Provider endpoints.
     * @type {string}
     * @memberof ApiV1AuthOidcAuthIdentitiesIdentityIdPostRequest
     */
    'caCert'?: string;
    /**
     * The unique identifier of the identity provider issuing the JWT.
     * @type {string}
     * @memberof ApiV1AuthOidcAuthIdentitiesIdentityIdPostRequest
     */
    'boundIssuer': string;
    /**
     * The list of intended recipients.
     * @type {string}
     * @memberof ApiV1AuthOidcAuthIdentitiesIdentityIdPostRequest
     */
    'boundAudiences'?: string;
    /**
     * The attributes that should be present in the JWT for it to be valid.
     * @type {{ [key: string]: string; }}
     * @memberof ApiV1AuthOidcAuthIdentitiesIdentityIdPostRequest
     */
    'boundClaims': { [key: string]: string; };
    /**
     * The expected principal that is the subject of the JWT.
     * @type {string}
     * @memberof ApiV1AuthOidcAuthIdentitiesIdentityIdPostRequest
     */
    'boundSubject'?: string;
    /**
     * The IPs or CIDR ranges that access tokens can be used from.
     * @type {Array<ApiV1AuthTokenAuthIdentitiesIdentityIdPostRequestAccessTokenTrustedIpsInner>}
     * @memberof ApiV1AuthOidcAuthIdentitiesIdentityIdPostRequest
     */
    'accessTokenTrustedIps'?: Array<ApiV1AuthTokenAuthIdentitiesIdentityIdPostRequestAccessTokenTrustedIpsInner>;
    /**
     * The lifetime for an acccess token in seconds.
     * @type {number}
     * @memberof ApiV1AuthOidcAuthIdentitiesIdentityIdPostRequest
     */
    'accessTokenTTL'?: number;
    /**
     * The maximum lifetime for an acccess token in seconds.
     * @type {number}
     * @memberof ApiV1AuthOidcAuthIdentitiesIdentityIdPostRequest
     */
    'accessTokenMaxTTL'?: number;
    /**
     * The maximum number of times that an access token can be used.
     * @type {number}
     * @memberof ApiV1AuthOidcAuthIdentitiesIdentityIdPostRequest
     */
    'accessTokenNumUsesLimit'?: number;
}
/**
 * 
 * @export
 * @interface ApiV1AuthTokenAuthIdentitiesIdentityIdGet200Response
 */
export interface ApiV1AuthTokenAuthIdentitiesIdentityIdGet200Response {
    /**
     * 
     * @type {ApiV1AuthTokenAuthIdentitiesIdentityIdGet200ResponseIdentityTokenAuth}
     * @memberof ApiV1AuthTokenAuthIdentitiesIdentityIdGet200Response
     */
    'identityTokenAuth': ApiV1AuthTokenAuthIdentitiesIdentityIdGet200ResponseIdentityTokenAuth;
}
/**
 * 
 * @export
 * @interface ApiV1AuthTokenAuthIdentitiesIdentityIdGet200ResponseIdentityTokenAuth
 */
export interface ApiV1AuthTokenAuthIdentitiesIdentityIdGet200ResponseIdentityTokenAuth {
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthTokenAuthIdentitiesIdentityIdGet200ResponseIdentityTokenAuth
     */
    'id': string;
    /**
     * 
     * @type {number}
     * @memberof ApiV1AuthTokenAuthIdentitiesIdentityIdGet200ResponseIdentityTokenAuth
     */
    'accessTokenTTL'?: number;
    /**
     * 
     * @type {number}
     * @memberof ApiV1AuthTokenAuthIdentitiesIdentityIdGet200ResponseIdentityTokenAuth
     */
    'accessTokenMaxTTL'?: number;
    /**
     * 
     * @type {number}
     * @memberof ApiV1AuthTokenAuthIdentitiesIdentityIdGet200ResponseIdentityTokenAuth
     */
    'accessTokenNumUsesLimit'?: number;
    /**
     * 
     * @type {any}
     * @memberof ApiV1AuthTokenAuthIdentitiesIdentityIdGet200ResponseIdentityTokenAuth
     */
    'accessTokenTrustedIps'?: any;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthTokenAuthIdentitiesIdentityIdGet200ResponseIdentityTokenAuth
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthTokenAuthIdentitiesIdentityIdGet200ResponseIdentityTokenAuth
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthTokenAuthIdentitiesIdentityIdGet200ResponseIdentityTokenAuth
     */
    'identityId': string;
}
/**
 * 
 * @export
 * @interface ApiV1AuthTokenAuthIdentitiesIdentityIdPatchRequest
 */
export interface ApiV1AuthTokenAuthIdentitiesIdentityIdPatchRequest {
    /**
     * The new IPs or CIDR ranges that access tokens can be used from.
     * @type {Array<ApiV1AuthTokenAuthIdentitiesIdentityIdPostRequestAccessTokenTrustedIpsInner>}
     * @memberof ApiV1AuthTokenAuthIdentitiesIdentityIdPatchRequest
     */
    'accessTokenTrustedIps'?: Array<ApiV1AuthTokenAuthIdentitiesIdentityIdPostRequestAccessTokenTrustedIpsInner>;
    /**
     * The new lifetime for an acccess token in seconds.
     * @type {number}
     * @memberof ApiV1AuthTokenAuthIdentitiesIdentityIdPatchRequest
     */
    'accessTokenTTL'?: number;
    /**
     * The new maximum number of times that an access token can be used.
     * @type {number}
     * @memberof ApiV1AuthTokenAuthIdentitiesIdentityIdPatchRequest
     */
    'accessTokenNumUsesLimit'?: number;
    /**
     * The new maximum lifetime for an acccess token in seconds.
     * @type {number}
     * @memberof ApiV1AuthTokenAuthIdentitiesIdentityIdPatchRequest
     */
    'accessTokenMaxTTL'?: number;
}
/**
 * 
 * @export
 * @interface ApiV1AuthTokenAuthIdentitiesIdentityIdPostRequest
 */
export interface ApiV1AuthTokenAuthIdentitiesIdentityIdPostRequest {
    /**
     * The IPs or CIDR ranges that access tokens can be used from.
     * @type {Array<ApiV1AuthTokenAuthIdentitiesIdentityIdPostRequestAccessTokenTrustedIpsInner>}
     * @memberof ApiV1AuthTokenAuthIdentitiesIdentityIdPostRequest
     */
    'accessTokenTrustedIps'?: Array<ApiV1AuthTokenAuthIdentitiesIdentityIdPostRequestAccessTokenTrustedIpsInner>;
    /**
     * The lifetime for an acccess token in seconds.
     * @type {number}
     * @memberof ApiV1AuthTokenAuthIdentitiesIdentityIdPostRequest
     */
    'accessTokenTTL'?: number;
    /**
     * The maximum lifetime for an acccess token in seconds.
     * @type {number}
     * @memberof ApiV1AuthTokenAuthIdentitiesIdentityIdPostRequest
     */
    'accessTokenMaxTTL'?: number;
    /**
     * The maximum number of times that an access token can be used.
     * @type {number}
     * @memberof ApiV1AuthTokenAuthIdentitiesIdentityIdPostRequest
     */
    'accessTokenNumUsesLimit'?: number;
}
/**
 * 
 * @export
 * @interface ApiV1AuthTokenAuthIdentitiesIdentityIdPostRequestAccessTokenTrustedIpsInner
 */
export interface ApiV1AuthTokenAuthIdentitiesIdentityIdPostRequestAccessTokenTrustedIpsInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthTokenAuthIdentitiesIdentityIdPostRequestAccessTokenTrustedIpsInner
     */
    'ipAddress': string;
}
/**
 * 
 * @export
 * @interface ApiV1AuthTokenAuthIdentitiesIdentityIdTokensGet200Response
 */
export interface ApiV1AuthTokenAuthIdentitiesIdentityIdTokensGet200Response {
    /**
     * 
     * @type {Array<ApiV1AuthTokenAuthIdentitiesIdentityIdTokensGet200ResponseTokensInner>}
     * @memberof ApiV1AuthTokenAuthIdentitiesIdentityIdTokensGet200Response
     */
    'tokens': Array<ApiV1AuthTokenAuthIdentitiesIdentityIdTokensGet200ResponseTokensInner>;
}
/**
 * 
 * @export
 * @interface ApiV1AuthTokenAuthIdentitiesIdentityIdTokensGet200ResponseTokensInner
 */
export interface ApiV1AuthTokenAuthIdentitiesIdentityIdTokensGet200ResponseTokensInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthTokenAuthIdentitiesIdentityIdTokensGet200ResponseTokensInner
     */
    'id': string;
    /**
     * 
     * @type {number}
     * @memberof ApiV1AuthTokenAuthIdentitiesIdentityIdTokensGet200ResponseTokensInner
     */
    'accessTokenTTL'?: number;
    /**
     * 
     * @type {number}
     * @memberof ApiV1AuthTokenAuthIdentitiesIdentityIdTokensGet200ResponseTokensInner
     */
    'accessTokenMaxTTL'?: number;
    /**
     * 
     * @type {number}
     * @memberof ApiV1AuthTokenAuthIdentitiesIdentityIdTokensGet200ResponseTokensInner
     */
    'accessTokenNumUses'?: number;
    /**
     * 
     * @type {number}
     * @memberof ApiV1AuthTokenAuthIdentitiesIdentityIdTokensGet200ResponseTokensInner
     */
    'accessTokenNumUsesLimit'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthTokenAuthIdentitiesIdentityIdTokensGet200ResponseTokensInner
     */
    'accessTokenLastUsedAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthTokenAuthIdentitiesIdentityIdTokensGet200ResponseTokensInner
     */
    'accessTokenLastRenewedAt'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1AuthTokenAuthIdentitiesIdentityIdTokensGet200ResponseTokensInner
     */
    'isAccessTokenRevoked'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthTokenAuthIdentitiesIdentityIdTokensGet200ResponseTokensInner
     */
    'identityUAClientSecretId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthTokenAuthIdentitiesIdentityIdTokensGet200ResponseTokensInner
     */
    'identityId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthTokenAuthIdentitiesIdentityIdTokensGet200ResponseTokensInner
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthTokenAuthIdentitiesIdentityIdTokensGet200ResponseTokensInner
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthTokenAuthIdentitiesIdentityIdTokensGet200ResponseTokensInner
     */
    'name'?: string | null;
}
/**
 * 
 * @export
 * @interface ApiV1AuthTokenAuthIdentitiesIdentityIdTokensPost200Response
 */
export interface ApiV1AuthTokenAuthIdentitiesIdentityIdTokensPost200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthTokenAuthIdentitiesIdentityIdTokensPost200Response
     */
    'accessToken': string;
    /**
     * 
     * @type {number}
     * @memberof ApiV1AuthTokenAuthIdentitiesIdentityIdTokensPost200Response
     */
    'expiresIn': number;
    /**
     * 
     * @type {number}
     * @memberof ApiV1AuthTokenAuthIdentitiesIdentityIdTokensPost200Response
     */
    'accessTokenMaxTTL': number;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthTokenAuthIdentitiesIdentityIdTokensPost200Response
     */
    'tokenType': ApiV1AuthTokenAuthIdentitiesIdentityIdTokensPost200ResponseTokenTypeEnum;
}

export const ApiV1AuthTokenAuthIdentitiesIdentityIdTokensPost200ResponseTokenTypeEnum = {
    Bearer: 'Bearer'
} as const;

export type ApiV1AuthTokenAuthIdentitiesIdentityIdTokensPost200ResponseTokenTypeEnum = typeof ApiV1AuthTokenAuthIdentitiesIdentityIdTokensPost200ResponseTokenTypeEnum[keyof typeof ApiV1AuthTokenAuthIdentitiesIdentityIdTokensPost200ResponseTokenTypeEnum];

/**
 * 
 * @export
 * @interface ApiV1AuthTokenAuthIdentitiesIdentityIdTokensPostRequest
 */
export interface ApiV1AuthTokenAuthIdentitiesIdentityIdTokensPostRequest {
    /**
     * The name of the token to create
     * @type {string}
     * @memberof ApiV1AuthTokenAuthIdentitiesIdentityIdTokensPostRequest
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1AuthTokenAuthTokensTokenIdPatch200Response
 */
export interface ApiV1AuthTokenAuthTokensTokenIdPatch200Response {
    /**
     * 
     * @type {ApiV1AuthTokenAuthIdentitiesIdentityIdTokensGet200ResponseTokensInner}
     * @memberof ApiV1AuthTokenAuthTokensTokenIdPatch200Response
     */
    'token': ApiV1AuthTokenAuthIdentitiesIdentityIdTokensGet200ResponseTokensInner;
}
/**
 * 
 * @export
 * @interface ApiV1AuthTokenAuthTokensTokenIdPatchRequest
 */
export interface ApiV1AuthTokenAuthTokensTokenIdPatchRequest {
    /**
     * The name of the token to update to
     * @type {string}
     * @memberof ApiV1AuthTokenAuthTokensTokenIdPatchRequest
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1AuthTokenPost200Response
 */
export interface ApiV1AuthTokenPost200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthTokenPost200Response
     */
    'token': string;
}
/**
 * 
 * @export
 * @interface ApiV1AuthTokenRenewPostRequest
 */
export interface ApiV1AuthTokenRenewPostRequest {
    /**
     * The access token to renew.
     * @type {string}
     * @memberof ApiV1AuthTokenRenewPostRequest
     */
    'accessToken': string;
}
/**
 * 
 * @export
 * @interface ApiV1AuthTokenRevokePostRequest
 */
export interface ApiV1AuthTokenRevokePostRequest {
    /**
     * The access token to revoke.
     * @type {string}
     * @memberof ApiV1AuthTokenRevokePostRequest
     */
    'accessToken': string;
}
/**
 * 
 * @export
 * @interface ApiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsClientSecretIdGet200Response
 */
export interface ApiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsClientSecretIdGet200Response {
    /**
     * 
     * @type {ApiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsGet200ResponseClientSecretDataInner}
     * @memberof ApiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsClientSecretIdGet200Response
     */
    'clientSecretData': ApiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsGet200ResponseClientSecretDataInner;
}
/**
 * 
 * @export
 * @interface ApiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsGet200Response
 */
export interface ApiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsGet200Response {
    /**
     * 
     * @type {Array<ApiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsGet200ResponseClientSecretDataInner>}
     * @memberof ApiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsGet200Response
     */
    'clientSecretData': Array<ApiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsGet200ResponseClientSecretDataInner>;
}
/**
 * 
 * @export
 * @interface ApiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsGet200ResponseClientSecretDataInner
 */
export interface ApiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsGet200ResponseClientSecretDataInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsGet200ResponseClientSecretDataInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsGet200ResponseClientSecretDataInner
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsGet200ResponseClientSecretDataInner
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsGet200ResponseClientSecretDataInner
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsGet200ResponseClientSecretDataInner
     */
    'clientSecretPrefix': string;
    /**
     * 
     * @type {number}
     * @memberof ApiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsGet200ResponseClientSecretDataInner
     */
    'clientSecretNumUses'?: number;
    /**
     * 
     * @type {number}
     * @memberof ApiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsGet200ResponseClientSecretDataInner
     */
    'clientSecretNumUsesLimit'?: number;
    /**
     * 
     * @type {number}
     * @memberof ApiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsGet200ResponseClientSecretDataInner
     */
    'clientSecretTTL'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsGet200ResponseClientSecretDataInner
     */
    'identityUAId': string;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsGet200ResponseClientSecretDataInner
     */
    'isClientSecretRevoked'?: boolean;
}
/**
 * 
 * @export
 * @interface ApiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsPost200Response
 */
export interface ApiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsPost200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsPost200Response
     */
    'clientSecret': string;
    /**
     * 
     * @type {ApiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsGet200ResponseClientSecretDataInner}
     * @memberof ApiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsPost200Response
     */
    'clientSecretData': ApiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsGet200ResponseClientSecretDataInner;
}
/**
 * 
 * @export
 * @interface ApiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsPostRequest
 */
export interface ApiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsPostRequest {
    /**
     * The description of the client secret.
     * @type {string}
     * @memberof ApiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsPostRequest
     */
    'description'?: string;
    /**
     * The maximum number of times that the client secret can be used; a value of 0 implies infinite number of uses.
     * @type {number}
     * @memberof ApiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsPostRequest
     */
    'numUsesLimit'?: number;
    /**
     * The lifetime for the client secret in seconds.
     * @type {number}
     * @memberof ApiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsPostRequest
     */
    'ttl'?: number;
}
/**
 * 
 * @export
 * @interface ApiV1AuthUniversalAuthIdentitiesIdentityIdGet200Response
 */
export interface ApiV1AuthUniversalAuthIdentitiesIdentityIdGet200Response {
    /**
     * 
     * @type {ApiV1AuthUniversalAuthIdentitiesIdentityIdGet200ResponseIdentityUniversalAuth}
     * @memberof ApiV1AuthUniversalAuthIdentitiesIdentityIdGet200Response
     */
    'identityUniversalAuth': ApiV1AuthUniversalAuthIdentitiesIdentityIdGet200ResponseIdentityUniversalAuth;
}
/**
 * 
 * @export
 * @interface ApiV1AuthUniversalAuthIdentitiesIdentityIdGet200ResponseIdentityUniversalAuth
 */
export interface ApiV1AuthUniversalAuthIdentitiesIdentityIdGet200ResponseIdentityUniversalAuth {
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthUniversalAuthIdentitiesIdentityIdGet200ResponseIdentityUniversalAuth
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthUniversalAuthIdentitiesIdentityIdGet200ResponseIdentityUniversalAuth
     */
    'clientId': string;
    /**
     * 
     * @type {number}
     * @memberof ApiV1AuthUniversalAuthIdentitiesIdentityIdGet200ResponseIdentityUniversalAuth
     */
    'accessTokenTTL'?: number;
    /**
     * 
     * @type {number}
     * @memberof ApiV1AuthUniversalAuthIdentitiesIdentityIdGet200ResponseIdentityUniversalAuth
     */
    'accessTokenMaxTTL'?: number;
    /**
     * 
     * @type {number}
     * @memberof ApiV1AuthUniversalAuthIdentitiesIdentityIdGet200ResponseIdentityUniversalAuth
     */
    'accessTokenNumUsesLimit'?: number;
    /**
     * 
     * @type {any}
     * @memberof ApiV1AuthUniversalAuthIdentitiesIdentityIdGet200ResponseIdentityUniversalAuth
     */
    'clientSecretTrustedIps'?: any;
    /**
     * 
     * @type {any}
     * @memberof ApiV1AuthUniversalAuthIdentitiesIdentityIdGet200ResponseIdentityUniversalAuth
     */
    'accessTokenTrustedIps'?: any;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthUniversalAuthIdentitiesIdentityIdGet200ResponseIdentityUniversalAuth
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthUniversalAuthIdentitiesIdentityIdGet200ResponseIdentityUniversalAuth
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1AuthUniversalAuthIdentitiesIdentityIdGet200ResponseIdentityUniversalAuth
     */
    'identityId': string;
}
/**
 * 
 * @export
 * @interface ApiV1AuthUniversalAuthIdentitiesIdentityIdPatchRequest
 */
export interface ApiV1AuthUniversalAuthIdentitiesIdentityIdPatchRequest {
    /**
     * The new list of IPs or CIDR ranges that the Client Secret can be used from.
     * @type {Array<ApiV1AuthTokenAuthIdentitiesIdentityIdPostRequestAccessTokenTrustedIpsInner>}
     * @memberof ApiV1AuthUniversalAuthIdentitiesIdentityIdPatchRequest
     */
    'clientSecretTrustedIps'?: Array<ApiV1AuthTokenAuthIdentitiesIdentityIdPostRequestAccessTokenTrustedIpsInner>;
    /**
     * The new list of IPs or CIDR ranges that access tokens can be used from.
     * @type {Array<ApiV1AuthTokenAuthIdentitiesIdentityIdPostRequestAccessTokenTrustedIpsInner>}
     * @memberof ApiV1AuthUniversalAuthIdentitiesIdentityIdPatchRequest
     */
    'accessTokenTrustedIps'?: Array<ApiV1AuthTokenAuthIdentitiesIdentityIdPostRequestAccessTokenTrustedIpsInner>;
    /**
     * The new lifetime for an access token in seconds.
     * @type {number}
     * @memberof ApiV1AuthUniversalAuthIdentitiesIdentityIdPatchRequest
     */
    'accessTokenTTL'?: number;
    /**
     * The new maximum number of times that an access token can be used.
     * @type {number}
     * @memberof ApiV1AuthUniversalAuthIdentitiesIdentityIdPatchRequest
     */
    'accessTokenNumUsesLimit'?: number;
    /**
     * The new maximum lifetime for an access token in seconds.
     * @type {number}
     * @memberof ApiV1AuthUniversalAuthIdentitiesIdentityIdPatchRequest
     */
    'accessTokenMaxTTL'?: number;
}
/**
 * 
 * @export
 * @interface ApiV1AuthUniversalAuthIdentitiesIdentityIdPostRequest
 */
export interface ApiV1AuthUniversalAuthIdentitiesIdentityIdPostRequest {
    /**
     * A list of IPs or CIDR ranges that the Client Secret can be used from together with the Client ID to get back an access token. You can use 0.0.0.0/0, to allow usage from any network address.
     * @type {Array<ApiV1AuthTokenAuthIdentitiesIdentityIdPostRequestAccessTokenTrustedIpsInner>}
     * @memberof ApiV1AuthUniversalAuthIdentitiesIdentityIdPostRequest
     */
    'clientSecretTrustedIps'?: Array<ApiV1AuthTokenAuthIdentitiesIdentityIdPostRequestAccessTokenTrustedIpsInner>;
    /**
     * A list of IPs or CIDR ranges that access tokens can be used from. You can use 0.0.0.0/0, to allow usage from any network address.
     * @type {Array<ApiV1AuthTokenAuthIdentitiesIdentityIdPostRequestAccessTokenTrustedIpsInner>}
     * @memberof ApiV1AuthUniversalAuthIdentitiesIdentityIdPostRequest
     */
    'accessTokenTrustedIps'?: Array<ApiV1AuthTokenAuthIdentitiesIdentityIdPostRequestAccessTokenTrustedIpsInner>;
    /**
     * The lifetime for an access token in seconds. This value will be referenced at renewal time.
     * @type {number}
     * @memberof ApiV1AuthUniversalAuthIdentitiesIdentityIdPostRequest
     */
    'accessTokenTTL'?: number;
    /**
     * The maximum lifetime for an access token in seconds. This value will be referenced at renewal time.
     * @type {number}
     * @memberof ApiV1AuthUniversalAuthIdentitiesIdentityIdPostRequest
     */
    'accessTokenMaxTTL'?: number;
    /**
     * The maximum number of times that an access token can be used; a value of 0 implies infinite number of uses.
     * @type {number}
     * @memberof ApiV1AuthUniversalAuthIdentitiesIdentityIdPostRequest
     */
    'accessTokenNumUsesLimit'?: number;
}
/**
 * 
 * @export
 * @interface ApiV1AuthUniversalAuthLoginPostRequest
 */
export interface ApiV1AuthUniversalAuthLoginPostRequest {
    /**
     * Your Machine Identity Client ID.
     * @type {string}
     * @memberof ApiV1AuthUniversalAuthLoginPostRequest
     */
    'clientId': string;
    /**
     * Your Machine Identity Client Secret.
     * @type {string}
     * @memberof ApiV1AuthUniversalAuthLoginPostRequest
     */
    'clientSecret': string;
}
/**
 * 
 * @export
 * @interface ApiV1BotBotIdActivePatchRequest
 */
export interface ApiV1BotBotIdActivePatchRequest {
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1BotBotIdActivePatchRequest
     */
    'isActive': boolean;
    /**
     * 
     * @type {ApiV1BotBotIdActivePatchRequestBotKey}
     * @memberof ApiV1BotBotIdActivePatchRequest
     */
    'botKey'?: ApiV1BotBotIdActivePatchRequestBotKey;
}
/**
 * 
 * @export
 * @interface ApiV1BotBotIdActivePatchRequestBotKey
 */
export interface ApiV1BotBotIdActivePatchRequestBotKey {
    /**
     * 
     * @type {string}
     * @memberof ApiV1BotBotIdActivePatchRequestBotKey
     */
    'nonce'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1BotBotIdActivePatchRequestBotKey
     */
    'encryptedKey'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1BotProjectIdGet200Response
 */
export interface ApiV1BotProjectIdGet200Response {
    /**
     * 
     * @type {ApiV1BotProjectIdGet200ResponseBot}
     * @memberof ApiV1BotProjectIdGet200Response
     */
    'bot': ApiV1BotProjectIdGet200ResponseBot;
}
/**
 * 
 * @export
 * @interface ApiV1BotProjectIdGet200ResponseBot
 */
export interface ApiV1BotProjectIdGet200ResponseBot {
    /**
     * 
     * @type {string}
     * @memberof ApiV1BotProjectIdGet200ResponseBot
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1BotProjectIdGet200ResponseBot
     */
    'name': string;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1BotProjectIdGet200ResponseBot
     */
    'isActive'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ApiV1BotProjectIdGet200ResponseBot
     */
    'publicKey': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1BotProjectIdGet200ResponseBot
     */
    'encryptedProjectKey'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1BotProjectIdGet200ResponseBot
     */
    'encryptedProjectKeyNonce'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1BotProjectIdGet200ResponseBot
     */
    'projectId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1BotProjectIdGet200ResponseBot
     */
    'senderId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1BotProjectIdGet200ResponseBot
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1BotProjectIdGet200ResponseBot
     */
    'updatedAt': string;
}
/**
 * 
 * @export
 * @interface ApiV1DynamicSecretsGet200Response
 */
export interface ApiV1DynamicSecretsGet200Response {
    /**
     * 
     * @type {Array<ApiV1DynamicSecretsGet200ResponseDynamicSecretsInner>}
     * @memberof ApiV1DynamicSecretsGet200Response
     */
    'dynamicSecrets': Array<ApiV1DynamicSecretsGet200ResponseDynamicSecretsInner>;
}
/**
 * 
 * @export
 * @interface ApiV1DynamicSecretsGet200ResponseDynamicSecretsInner
 */
export interface ApiV1DynamicSecretsGet200ResponseDynamicSecretsInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1DynamicSecretsGet200ResponseDynamicSecretsInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1DynamicSecretsGet200ResponseDynamicSecretsInner
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof ApiV1DynamicSecretsGet200ResponseDynamicSecretsInner
     */
    'version': number;
    /**
     * 
     * @type {string}
     * @memberof ApiV1DynamicSecretsGet200ResponseDynamicSecretsInner
     */
    'type': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1DynamicSecretsGet200ResponseDynamicSecretsInner
     */
    'defaultTTL': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1DynamicSecretsGet200ResponseDynamicSecretsInner
     */
    'maxTTL'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1DynamicSecretsGet200ResponseDynamicSecretsInner
     */
    'folderId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1DynamicSecretsGet200ResponseDynamicSecretsInner
     */
    'status'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1DynamicSecretsGet200ResponseDynamicSecretsInner
     */
    'statusDetails'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1DynamicSecretsGet200ResponseDynamicSecretsInner
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1DynamicSecretsGet200ResponseDynamicSecretsInner
     */
    'updatedAt': string;
}
/**
 * 
 * @export
 * @interface ApiV1DynamicSecretsLeasesLeaseIdDelete200Response
 */
export interface ApiV1DynamicSecretsLeasesLeaseIdDelete200Response {
    /**
     * 
     * @type {ApiV1DynamicSecretsNameLeasesGet200ResponseLeasesInner}
     * @memberof ApiV1DynamicSecretsLeasesLeaseIdDelete200Response
     */
    'lease': ApiV1DynamicSecretsNameLeasesGet200ResponseLeasesInner;
}
/**
 * 
 * @export
 * @interface ApiV1DynamicSecretsLeasesLeaseIdDeleteRequest
 */
export interface ApiV1DynamicSecretsLeasesLeaseIdDeleteRequest {
    /**
     * The slug of the project of the dynamic secret in.
     * @type {string}
     * @memberof ApiV1DynamicSecretsLeasesLeaseIdDeleteRequest
     */
    'projectSlug': string;
    /**
     * The path of the dynamic secret in.
     * @type {string}
     * @memberof ApiV1DynamicSecretsLeasesLeaseIdDeleteRequest
     */
    'path'?: string;
    /**
     * The slug of the environment of the dynamic secret in.
     * @type {string}
     * @memberof ApiV1DynamicSecretsLeasesLeaseIdDeleteRequest
     */
    'environmentSlug': string;
    /**
     * A boolean flag to delete the the dynamic secret from infisical without trying to remove it from external provider. Used when the dynamic secret got modified externally.
     * @type {boolean}
     * @memberof ApiV1DynamicSecretsLeasesLeaseIdDeleteRequest
     */
    'isForced'?: boolean;
}
/**
 * 
 * @export
 * @interface ApiV1DynamicSecretsLeasesLeaseIdGet200Response
 */
export interface ApiV1DynamicSecretsLeasesLeaseIdGet200Response {
    /**
     * 
     * @type {ApiV1DynamicSecretsLeasesLeaseIdGet200ResponseLease}
     * @memberof ApiV1DynamicSecretsLeasesLeaseIdGet200Response
     */
    'lease': ApiV1DynamicSecretsLeasesLeaseIdGet200ResponseLease;
}
/**
 * 
 * @export
 * @interface ApiV1DynamicSecretsLeasesLeaseIdGet200ResponseLease
 */
export interface ApiV1DynamicSecretsLeasesLeaseIdGet200ResponseLease {
    /**
     * 
     * @type {string}
     * @memberof ApiV1DynamicSecretsLeasesLeaseIdGet200ResponseLease
     */
    'id': string;
    /**
     * 
     * @type {number}
     * @memberof ApiV1DynamicSecretsLeasesLeaseIdGet200ResponseLease
     */
    'version': number;
    /**
     * 
     * @type {string}
     * @memberof ApiV1DynamicSecretsLeasesLeaseIdGet200ResponseLease
     */
    'externalEntityId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1DynamicSecretsLeasesLeaseIdGet200ResponseLease
     */
    'expireAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1DynamicSecretsLeasesLeaseIdGet200ResponseLease
     */
    'status'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1DynamicSecretsLeasesLeaseIdGet200ResponseLease
     */
    'statusDetails'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1DynamicSecretsLeasesLeaseIdGet200ResponseLease
     */
    'dynamicSecretId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1DynamicSecretsLeasesLeaseIdGet200ResponseLease
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1DynamicSecretsLeasesLeaseIdGet200ResponseLease
     */
    'updatedAt': string;
    /**
     * 
     * @type {ApiV1DynamicSecretsGet200ResponseDynamicSecretsInner}
     * @memberof ApiV1DynamicSecretsLeasesLeaseIdGet200ResponseLease
     */
    'dynamicSecret': ApiV1DynamicSecretsGet200ResponseDynamicSecretsInner;
}
/**
 * 
 * @export
 * @interface ApiV1DynamicSecretsLeasesLeaseIdRenewPostRequest
 */
export interface ApiV1DynamicSecretsLeasesLeaseIdRenewPostRequest {
    /**
     * The renew TTL that gets added with current expiry (ensure it\'s below max TTL) for a total less than creation time + max TTL.
     * @type {string}
     * @memberof ApiV1DynamicSecretsLeasesLeaseIdRenewPostRequest
     */
    'ttl'?: string;
    /**
     * The slug of the project of the dynamic secret in.
     * @type {string}
     * @memberof ApiV1DynamicSecretsLeasesLeaseIdRenewPostRequest
     */
    'projectSlug': string;
    /**
     * The path of the dynamic secret in.
     * @type {string}
     * @memberof ApiV1DynamicSecretsLeasesLeaseIdRenewPostRequest
     */
    'path'?: string;
    /**
     * The slug of the environment of the dynamic secret in.
     * @type {string}
     * @memberof ApiV1DynamicSecretsLeasesLeaseIdRenewPostRequest
     */
    'environmentSlug': string;
}
/**
 * 
 * @export
 * @interface ApiV1DynamicSecretsLeasesPost200Response
 */
export interface ApiV1DynamicSecretsLeasesPost200Response {
    /**
     * 
     * @type {ApiV1DynamicSecretsNameLeasesGet200ResponseLeasesInner}
     * @memberof ApiV1DynamicSecretsLeasesPost200Response
     */
    'lease': ApiV1DynamicSecretsNameLeasesGet200ResponseLeasesInner;
    /**
     * 
     * @type {ApiV1DynamicSecretsGet200ResponseDynamicSecretsInner}
     * @memberof ApiV1DynamicSecretsLeasesPost200Response
     */
    'dynamicSecret': ApiV1DynamicSecretsGet200ResponseDynamicSecretsInner;
    /**
     * 
     * @type {any}
     * @memberof ApiV1DynamicSecretsLeasesPost200Response
     */
    'data'?: any;
}
/**
 * 
 * @export
 * @interface ApiV1DynamicSecretsLeasesPostRequest
 */
export interface ApiV1DynamicSecretsLeasesPostRequest {
    /**
     * The name of the dynamic secret.
     * @type {string}
     * @memberof ApiV1DynamicSecretsLeasesPostRequest
     */
    'dynamicSecretName': string;
    /**
     * The slug of the project of the dynamic secret in.
     * @type {string}
     * @memberof ApiV1DynamicSecretsLeasesPostRequest
     */
    'projectSlug': string;
    /**
     * The lease lifetime ttl. If not provided the default TTL of dynamic secret will be used.
     * @type {string}
     * @memberof ApiV1DynamicSecretsLeasesPostRequest
     */
    'ttl'?: string;
    /**
     * The path of the dynamic secret in.
     * @type {string}
     * @memberof ApiV1DynamicSecretsLeasesPostRequest
     */
    'path'?: string;
    /**
     * The path of the dynamic secret in.
     * @type {string}
     * @memberof ApiV1DynamicSecretsLeasesPostRequest
     */
    'environmentSlug': string;
}
/**
 * 
 * @export
 * @interface ApiV1DynamicSecretsNameDeleteRequest
 */
export interface ApiV1DynamicSecretsNameDeleteRequest {
    /**
     * The slug of the project to delete dynamic secret in.
     * @type {string}
     * @memberof ApiV1DynamicSecretsNameDeleteRequest
     */
    'projectSlug': string;
    /**
     * The path to delete the dynamic secret in.
     * @type {string}
     * @memberof ApiV1DynamicSecretsNameDeleteRequest
     */
    'path'?: string;
    /**
     * The slug of the environment to delete the dynamic secret in.
     * @type {string}
     * @memberof ApiV1DynamicSecretsNameDeleteRequest
     */
    'environmentSlug': string;
    /**
     * A boolean flag to delete the the dynamic secret from infisical without trying to remove it from external provider. Used when the dynamic secret got modified externally.
     * @type {boolean}
     * @memberof ApiV1DynamicSecretsNameDeleteRequest
     */
    'isForced'?: boolean;
}
/**
 * 
 * @export
 * @interface ApiV1DynamicSecretsNameGet200Response
 */
export interface ApiV1DynamicSecretsNameGet200Response {
    /**
     * 
     * @type {ApiV1DynamicSecretsNameGet200ResponseDynamicSecret}
     * @memberof ApiV1DynamicSecretsNameGet200Response
     */
    'dynamicSecret': ApiV1DynamicSecretsNameGet200ResponseDynamicSecret;
}
/**
 * 
 * @export
 * @interface ApiV1DynamicSecretsNameGet200ResponseDynamicSecret
 */
export interface ApiV1DynamicSecretsNameGet200ResponseDynamicSecret {
    /**
     * 
     * @type {string}
     * @memberof ApiV1DynamicSecretsNameGet200ResponseDynamicSecret
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1DynamicSecretsNameGet200ResponseDynamicSecret
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof ApiV1DynamicSecretsNameGet200ResponseDynamicSecret
     */
    'version': number;
    /**
     * 
     * @type {string}
     * @memberof ApiV1DynamicSecretsNameGet200ResponseDynamicSecret
     */
    'type': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1DynamicSecretsNameGet200ResponseDynamicSecret
     */
    'defaultTTL': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1DynamicSecretsNameGet200ResponseDynamicSecret
     */
    'maxTTL'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1DynamicSecretsNameGet200ResponseDynamicSecret
     */
    'folderId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1DynamicSecretsNameGet200ResponseDynamicSecret
     */
    'status'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1DynamicSecretsNameGet200ResponseDynamicSecret
     */
    'statusDetails'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1DynamicSecretsNameGet200ResponseDynamicSecret
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1DynamicSecretsNameGet200ResponseDynamicSecret
     */
    'updatedAt': string;
    /**
     * 
     * @type {any}
     * @memberof ApiV1DynamicSecretsNameGet200ResponseDynamicSecret
     */
    'inputs'?: any;
}
/**
 * 
 * @export
 * @interface ApiV1DynamicSecretsNameLeasesGet200Response
 */
export interface ApiV1DynamicSecretsNameLeasesGet200Response {
    /**
     * 
     * @type {Array<ApiV1DynamicSecretsNameLeasesGet200ResponseLeasesInner>}
     * @memberof ApiV1DynamicSecretsNameLeasesGet200Response
     */
    'leases': Array<ApiV1DynamicSecretsNameLeasesGet200ResponseLeasesInner>;
}
/**
 * 
 * @export
 * @interface ApiV1DynamicSecretsNameLeasesGet200ResponseLeasesInner
 */
export interface ApiV1DynamicSecretsNameLeasesGet200ResponseLeasesInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1DynamicSecretsNameLeasesGet200ResponseLeasesInner
     */
    'id': string;
    /**
     * 
     * @type {number}
     * @memberof ApiV1DynamicSecretsNameLeasesGet200ResponseLeasesInner
     */
    'version': number;
    /**
     * 
     * @type {string}
     * @memberof ApiV1DynamicSecretsNameLeasesGet200ResponseLeasesInner
     */
    'externalEntityId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1DynamicSecretsNameLeasesGet200ResponseLeasesInner
     */
    'expireAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1DynamicSecretsNameLeasesGet200ResponseLeasesInner
     */
    'status'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1DynamicSecretsNameLeasesGet200ResponseLeasesInner
     */
    'statusDetails'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1DynamicSecretsNameLeasesGet200ResponseLeasesInner
     */
    'dynamicSecretId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1DynamicSecretsNameLeasesGet200ResponseLeasesInner
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1DynamicSecretsNameLeasesGet200ResponseLeasesInner
     */
    'updatedAt': string;
}
/**
 * 
 * @export
 * @interface ApiV1DynamicSecretsNamePatchRequest
 */
export interface ApiV1DynamicSecretsNamePatchRequest {
    /**
     * The slug of the project to update dynamic secret in.
     * @type {string}
     * @memberof ApiV1DynamicSecretsNamePatchRequest
     */
    'projectSlug': string;
    /**
     * The path to update the dynamic secret in.
     * @type {string}
     * @memberof ApiV1DynamicSecretsNamePatchRequest
     */
    'path'?: string;
    /**
     * The slug of the environment to update the dynamic secret in.
     * @type {string}
     * @memberof ApiV1DynamicSecretsNamePatchRequest
     */
    'environmentSlug': string;
    /**
     * 
     * @type {ApiV1DynamicSecretsNamePatchRequestData}
     * @memberof ApiV1DynamicSecretsNamePatchRequest
     */
    'data': ApiV1DynamicSecretsNamePatchRequestData;
}
/**
 * 
 * @export
 * @interface ApiV1DynamicSecretsNamePatchRequestData
 */
export interface ApiV1DynamicSecretsNamePatchRequestData {
    /**
     * The new partial values for the configurated provider of the dynamic secret
     * @type {any}
     * @memberof ApiV1DynamicSecretsNamePatchRequestData
     */
    'inputs'?: any;
    /**
     * The default TTL that will be applied for all the leases.
     * @type {string}
     * @memberof ApiV1DynamicSecretsNamePatchRequestData
     */
    'defaultTTL'?: string;
    /**
     * The maximum limit a TTL can be leases or renewed.
     * @type {string}
     * @memberof ApiV1DynamicSecretsNamePatchRequestData
     */
    'maxTTL'?: string | null;
    /**
     * The new name for the dynamic secret.
     * @type {string}
     * @memberof ApiV1DynamicSecretsNamePatchRequestData
     */
    'newName'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1DynamicSecretsPost200Response
 */
export interface ApiV1DynamicSecretsPost200Response {
    /**
     * 
     * @type {ApiV1DynamicSecretsGet200ResponseDynamicSecretsInner}
     * @memberof ApiV1DynamicSecretsPost200Response
     */
    'dynamicSecret': ApiV1DynamicSecretsGet200ResponseDynamicSecretsInner;
}
/**
 * 
 * @export
 * @interface ApiV1DynamicSecretsPostRequest
 */
export interface ApiV1DynamicSecretsPostRequest {
    /**
     * The slug of the project to create dynamic secret in.
     * @type {string}
     * @memberof ApiV1DynamicSecretsPostRequest
     */
    'projectSlug': string;
    /**
     * 
     * @type {ApiV1DynamicSecretsPostRequestProvider}
     * @memberof ApiV1DynamicSecretsPostRequest
     */
    'provider': ApiV1DynamicSecretsPostRequestProvider;
    /**
     * The default TTL that will be applied for all the leases.
     * @type {string}
     * @memberof ApiV1DynamicSecretsPostRequest
     */
    'defaultTTL': string;
    /**
     * The maximum limit a TTL can be leases or renewed.
     * @type {string}
     * @memberof ApiV1DynamicSecretsPostRequest
     */
    'maxTTL'?: string | null;
    /**
     * The path to create the dynamic secret in.
     * @type {string}
     * @memberof ApiV1DynamicSecretsPostRequest
     */
    'path'?: string;
    /**
     * The slug of the environment to create the dynamic secret in.
     * @type {string}
     * @memberof ApiV1DynamicSecretsPostRequest
     */
    'environmentSlug': string;
    /**
     * The name of the dynamic secret.
     * @type {string}
     * @memberof ApiV1DynamicSecretsPostRequest
     */
    'name': string;
}
/**
 * The type of dynamic secret.
 * @export
 * @interface ApiV1DynamicSecretsPostRequestProvider
 */
export interface ApiV1DynamicSecretsPostRequestProvider {
    /**
     * 
     * @type {string}
     * @memberof ApiV1DynamicSecretsPostRequestProvider
     */
    'type': ApiV1DynamicSecretsPostRequestProviderTypeEnum;
    /**
     * 
     * @type {ApiV1DynamicSecretsPostRequestProviderAnyOf4Inputs}
     * @memberof ApiV1DynamicSecretsPostRequestProvider
     */
    'inputs': ApiV1DynamicSecretsPostRequestProviderAnyOf4Inputs;
}

export const ApiV1DynamicSecretsPostRequestProviderTypeEnum = {
    SqlDatabase: 'sql-database',
    Cassandra: 'cassandra',
    AwsIam: 'aws-iam',
    Redis: 'redis',
    AwsElasticache: 'aws-elasticache'
} as const;

export type ApiV1DynamicSecretsPostRequestProviderTypeEnum = typeof ApiV1DynamicSecretsPostRequestProviderTypeEnum[keyof typeof ApiV1DynamicSecretsPostRequestProviderTypeEnum];

/**
 * 
 * @export
 * @interface ApiV1DynamicSecretsPostRequestProviderAnyOf
 */
export interface ApiV1DynamicSecretsPostRequestProviderAnyOf {
    /**
     * 
     * @type {string}
     * @memberof ApiV1DynamicSecretsPostRequestProviderAnyOf
     */
    'type': ApiV1DynamicSecretsPostRequestProviderAnyOfTypeEnum;
    /**
     * 
     * @type {ApiV1DynamicSecretsPostRequestProviderAnyOfInputs}
     * @memberof ApiV1DynamicSecretsPostRequestProviderAnyOf
     */
    'inputs': ApiV1DynamicSecretsPostRequestProviderAnyOfInputs;
}

export const ApiV1DynamicSecretsPostRequestProviderAnyOfTypeEnum = {
    SqlDatabase: 'sql-database'
} as const;

export type ApiV1DynamicSecretsPostRequestProviderAnyOfTypeEnum = typeof ApiV1DynamicSecretsPostRequestProviderAnyOfTypeEnum[keyof typeof ApiV1DynamicSecretsPostRequestProviderAnyOfTypeEnum];

/**
 * 
 * @export
 * @interface ApiV1DynamicSecretsPostRequestProviderAnyOf1
 */
export interface ApiV1DynamicSecretsPostRequestProviderAnyOf1 {
    /**
     * 
     * @type {string}
     * @memberof ApiV1DynamicSecretsPostRequestProviderAnyOf1
     */
    'type': ApiV1DynamicSecretsPostRequestProviderAnyOf1TypeEnum;
    /**
     * 
     * @type {ApiV1DynamicSecretsPostRequestProviderAnyOf1Inputs}
     * @memberof ApiV1DynamicSecretsPostRequestProviderAnyOf1
     */
    'inputs': ApiV1DynamicSecretsPostRequestProviderAnyOf1Inputs;
}

export const ApiV1DynamicSecretsPostRequestProviderAnyOf1TypeEnum = {
    Cassandra: 'cassandra'
} as const;

export type ApiV1DynamicSecretsPostRequestProviderAnyOf1TypeEnum = typeof ApiV1DynamicSecretsPostRequestProviderAnyOf1TypeEnum[keyof typeof ApiV1DynamicSecretsPostRequestProviderAnyOf1TypeEnum];

/**
 * 
 * @export
 * @interface ApiV1DynamicSecretsPostRequestProviderAnyOf1Inputs
 */
export interface ApiV1DynamicSecretsPostRequestProviderAnyOf1Inputs {
    /**
     * 
     * @type {string}
     * @memberof ApiV1DynamicSecretsPostRequestProviderAnyOf1Inputs
     */
    'host': string;
    /**
     * 
     * @type {number}
     * @memberof ApiV1DynamicSecretsPostRequestProviderAnyOf1Inputs
     */
    'port': number;
    /**
     * 
     * @type {string}
     * @memberof ApiV1DynamicSecretsPostRequestProviderAnyOf1Inputs
     */
    'localDataCenter': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1DynamicSecretsPostRequestProviderAnyOf1Inputs
     */
    'keyspace'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1DynamicSecretsPostRequestProviderAnyOf1Inputs
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1DynamicSecretsPostRequestProviderAnyOf1Inputs
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1DynamicSecretsPostRequestProviderAnyOf1Inputs
     */
    'creationStatement': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1DynamicSecretsPostRequestProviderAnyOf1Inputs
     */
    'revocationStatement': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1DynamicSecretsPostRequestProviderAnyOf1Inputs
     */
    'renewStatement'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1DynamicSecretsPostRequestProviderAnyOf1Inputs
     */
    'ca'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1DynamicSecretsPostRequestProviderAnyOf2
 */
export interface ApiV1DynamicSecretsPostRequestProviderAnyOf2 {
    /**
     * 
     * @type {string}
     * @memberof ApiV1DynamicSecretsPostRequestProviderAnyOf2
     */
    'type': ApiV1DynamicSecretsPostRequestProviderAnyOf2TypeEnum;
    /**
     * 
     * @type {ApiV1DynamicSecretsPostRequestProviderAnyOf2Inputs}
     * @memberof ApiV1DynamicSecretsPostRequestProviderAnyOf2
     */
    'inputs': ApiV1DynamicSecretsPostRequestProviderAnyOf2Inputs;
}

export const ApiV1DynamicSecretsPostRequestProviderAnyOf2TypeEnum = {
    AwsIam: 'aws-iam'
} as const;

export type ApiV1DynamicSecretsPostRequestProviderAnyOf2TypeEnum = typeof ApiV1DynamicSecretsPostRequestProviderAnyOf2TypeEnum[keyof typeof ApiV1DynamicSecretsPostRequestProviderAnyOf2TypeEnum];

/**
 * 
 * @export
 * @interface ApiV1DynamicSecretsPostRequestProviderAnyOf2Inputs
 */
export interface ApiV1DynamicSecretsPostRequestProviderAnyOf2Inputs {
    /**
     * 
     * @type {string}
     * @memberof ApiV1DynamicSecretsPostRequestProviderAnyOf2Inputs
     */
    'accessKey': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1DynamicSecretsPostRequestProviderAnyOf2Inputs
     */
    'secretAccessKey': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1DynamicSecretsPostRequestProviderAnyOf2Inputs
     */
    'region': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1DynamicSecretsPostRequestProviderAnyOf2Inputs
     */
    'awsPath'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1DynamicSecretsPostRequestProviderAnyOf2Inputs
     */
    'permissionBoundaryPolicyArn'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1DynamicSecretsPostRequestProviderAnyOf2Inputs
     */
    'policyDocument'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1DynamicSecretsPostRequestProviderAnyOf2Inputs
     */
    'userGroups'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1DynamicSecretsPostRequestProviderAnyOf2Inputs
     */
    'policyArns'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1DynamicSecretsPostRequestProviderAnyOf3
 */
export interface ApiV1DynamicSecretsPostRequestProviderAnyOf3 {
    /**
     * 
     * @type {string}
     * @memberof ApiV1DynamicSecretsPostRequestProviderAnyOf3
     */
    'type': ApiV1DynamicSecretsPostRequestProviderAnyOf3TypeEnum;
    /**
     * 
     * @type {ApiV1DynamicSecretsPostRequestProviderAnyOf3Inputs}
     * @memberof ApiV1DynamicSecretsPostRequestProviderAnyOf3
     */
    'inputs': ApiV1DynamicSecretsPostRequestProviderAnyOf3Inputs;
}

export const ApiV1DynamicSecretsPostRequestProviderAnyOf3TypeEnum = {
    Redis: 'redis'
} as const;

export type ApiV1DynamicSecretsPostRequestProviderAnyOf3TypeEnum = typeof ApiV1DynamicSecretsPostRequestProviderAnyOf3TypeEnum[keyof typeof ApiV1DynamicSecretsPostRequestProviderAnyOf3TypeEnum];

/**
 * 
 * @export
 * @interface ApiV1DynamicSecretsPostRequestProviderAnyOf3Inputs
 */
export interface ApiV1DynamicSecretsPostRequestProviderAnyOf3Inputs {
    /**
     * 
     * @type {string}
     * @memberof ApiV1DynamicSecretsPostRequestProviderAnyOf3Inputs
     */
    'host': string;
    /**
     * 
     * @type {number}
     * @memberof ApiV1DynamicSecretsPostRequestProviderAnyOf3Inputs
     */
    'port': number;
    /**
     * 
     * @type {string}
     * @memberof ApiV1DynamicSecretsPostRequestProviderAnyOf3Inputs
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1DynamicSecretsPostRequestProviderAnyOf3Inputs
     */
    'password'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1DynamicSecretsPostRequestProviderAnyOf3Inputs
     */
    'creationStatement': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1DynamicSecretsPostRequestProviderAnyOf3Inputs
     */
    'revocationStatement': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1DynamicSecretsPostRequestProviderAnyOf3Inputs
     */
    'renewStatement'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1DynamicSecretsPostRequestProviderAnyOf3Inputs
     */
    'ca'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1DynamicSecretsPostRequestProviderAnyOf4
 */
export interface ApiV1DynamicSecretsPostRequestProviderAnyOf4 {
    /**
     * 
     * @type {string}
     * @memberof ApiV1DynamicSecretsPostRequestProviderAnyOf4
     */
    'type': ApiV1DynamicSecretsPostRequestProviderAnyOf4TypeEnum;
    /**
     * 
     * @type {ApiV1DynamicSecretsPostRequestProviderAnyOf4Inputs}
     * @memberof ApiV1DynamicSecretsPostRequestProviderAnyOf4
     */
    'inputs': ApiV1DynamicSecretsPostRequestProviderAnyOf4Inputs;
}

export const ApiV1DynamicSecretsPostRequestProviderAnyOf4TypeEnum = {
    AwsElasticache: 'aws-elasticache'
} as const;

export type ApiV1DynamicSecretsPostRequestProviderAnyOf4TypeEnum = typeof ApiV1DynamicSecretsPostRequestProviderAnyOf4TypeEnum[keyof typeof ApiV1DynamicSecretsPostRequestProviderAnyOf4TypeEnum];

/**
 * 
 * @export
 * @interface ApiV1DynamicSecretsPostRequestProviderAnyOf4Inputs
 */
export interface ApiV1DynamicSecretsPostRequestProviderAnyOf4Inputs {
    /**
     * 
     * @type {string}
     * @memberof ApiV1DynamicSecretsPostRequestProviderAnyOf4Inputs
     */
    'clusterName': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1DynamicSecretsPostRequestProviderAnyOf4Inputs
     */
    'accessKeyId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1DynamicSecretsPostRequestProviderAnyOf4Inputs
     */
    'secretAccessKey': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1DynamicSecretsPostRequestProviderAnyOf4Inputs
     */
    'region': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1DynamicSecretsPostRequestProviderAnyOf4Inputs
     */
    'creationStatement': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1DynamicSecretsPostRequestProviderAnyOf4Inputs
     */
    'revocationStatement': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1DynamicSecretsPostRequestProviderAnyOf4Inputs
     */
    'ca'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1DynamicSecretsPostRequestProviderAnyOfInputs
 */
export interface ApiV1DynamicSecretsPostRequestProviderAnyOfInputs {
    /**
     * 
     * @type {string}
     * @memberof ApiV1DynamicSecretsPostRequestProviderAnyOfInputs
     */
    'client': ApiV1DynamicSecretsPostRequestProviderAnyOfInputsClientEnum;
    /**
     * 
     * @type {string}
     * @memberof ApiV1DynamicSecretsPostRequestProviderAnyOfInputs
     */
    'host': string;
    /**
     * 
     * @type {number}
     * @memberof ApiV1DynamicSecretsPostRequestProviderAnyOfInputs
     */
    'port': number;
    /**
     * 
     * @type {string}
     * @memberof ApiV1DynamicSecretsPostRequestProviderAnyOfInputs
     */
    'database': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1DynamicSecretsPostRequestProviderAnyOfInputs
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1DynamicSecretsPostRequestProviderAnyOfInputs
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1DynamicSecretsPostRequestProviderAnyOfInputs
     */
    'creationStatement': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1DynamicSecretsPostRequestProviderAnyOfInputs
     */
    'revocationStatement': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1DynamicSecretsPostRequestProviderAnyOfInputs
     */
    'renewStatement'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1DynamicSecretsPostRequestProviderAnyOfInputs
     */
    'ca'?: string;
}

export const ApiV1DynamicSecretsPostRequestProviderAnyOfInputsClientEnum = {
    Postgres: 'postgres',
    Mysql2: 'mysql2',
    Oracledb: 'oracledb',
    Mssql: 'mssql'
} as const;

export type ApiV1DynamicSecretsPostRequestProviderAnyOfInputsClientEnum = typeof ApiV1DynamicSecretsPostRequestProviderAnyOfInputsClientEnum[keyof typeof ApiV1DynamicSecretsPostRequestProviderAnyOfInputsClientEnum];

/**
 * 
 * @export
 * @interface ApiV1ExternalKmsGet200Response
 */
export interface ApiV1ExternalKmsGet200Response {
    /**
     * 
     * @type {Array<ApiV1ExternalKmsGet200ResponseExternalKmsListInner>}
     * @memberof ApiV1ExternalKmsGet200Response
     */
    'externalKmsList': Array<ApiV1ExternalKmsGet200ResponseExternalKmsListInner>;
}
/**
 * 
 * @export
 * @interface ApiV1ExternalKmsGet200ResponseExternalKmsListInner
 */
export interface ApiV1ExternalKmsGet200ResponseExternalKmsListInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1ExternalKmsGet200ResponseExternalKmsListInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ExternalKmsGet200ResponseExternalKmsListInner
     */
    'description'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1ExternalKmsGet200ResponseExternalKmsListInner
     */
    'isDisabled'?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ExternalKmsGet200ResponseExternalKmsListInner
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ExternalKmsGet200ResponseExternalKmsListInner
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ExternalKmsGet200ResponseExternalKmsListInner
     */
    'slug': string;
    /**
     * 
     * @type {ApiV1ExternalKmsGet200ResponseExternalKmsListInnerExternalKms}
     * @memberof ApiV1ExternalKmsGet200ResponseExternalKmsListInner
     */
    'externalKms': ApiV1ExternalKmsGet200ResponseExternalKmsListInnerExternalKms;
}
/**
 * 
 * @export
 * @interface ApiV1ExternalKmsGet200ResponseExternalKmsListInnerExternalKms
 */
export interface ApiV1ExternalKmsGet200ResponseExternalKmsListInnerExternalKms {
    /**
     * 
     * @type {string}
     * @memberof ApiV1ExternalKmsGet200ResponseExternalKmsListInnerExternalKms
     */
    'provider': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ExternalKmsGet200ResponseExternalKmsListInnerExternalKms
     */
    'status'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ExternalKmsGet200ResponseExternalKmsListInnerExternalKms
     */
    'statusDetails'?: string | null;
}
/**
 * 
 * @export
 * @interface ApiV1ExternalKmsIdGet200Response
 */
export interface ApiV1ExternalKmsIdGet200Response {
    /**
     * 
     * @type {ApiV1ExternalKmsIdGet200ResponseExternalKms}
     * @memberof ApiV1ExternalKmsIdGet200Response
     */
    'externalKms': ApiV1ExternalKmsIdGet200ResponseExternalKms;
}
/**
 * 
 * @export
 * @interface ApiV1ExternalKmsIdGet200ResponseExternalKms
 */
export interface ApiV1ExternalKmsIdGet200ResponseExternalKms {
    /**
     * 
     * @type {string}
     * @memberof ApiV1ExternalKmsIdGet200ResponseExternalKms
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ExternalKmsIdGet200ResponseExternalKms
     */
    'description'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1ExternalKmsIdGet200ResponseExternalKms
     */
    'isDisabled'?: boolean | null;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1ExternalKmsIdGet200ResponseExternalKms
     */
    'isReserved'?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ExternalKmsIdGet200ResponseExternalKms
     */
    'orgId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ExternalKmsIdGet200ResponseExternalKms
     */
    'slug': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ExternalKmsIdGet200ResponseExternalKms
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ExternalKmsIdGet200ResponseExternalKms
     */
    'updatedAt': string;
    /**
     * 
     * @type {ApiV1ExternalKmsIdGet200ResponseExternalKmsExternal}
     * @memberof ApiV1ExternalKmsIdGet200ResponseExternalKms
     */
    'external': ApiV1ExternalKmsIdGet200ResponseExternalKmsExternal;
}
/**
 * 
 * @export
 * @interface ApiV1ExternalKmsIdGet200ResponseExternalKmsExternal
 */
export interface ApiV1ExternalKmsIdGet200ResponseExternalKmsExternal {
    /**
     * 
     * @type {string}
     * @memberof ApiV1ExternalKmsIdGet200ResponseExternalKmsExternal
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ExternalKmsIdGet200ResponseExternalKmsExternal
     */
    'status'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ExternalKmsIdGet200ResponseExternalKmsExternal
     */
    'statusDetails'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ExternalKmsIdGet200ResponseExternalKmsExternal
     */
    'provider': string;
    /**
     * 
     * @type {ApiV1ExternalKmsPostRequestProviderInputs}
     * @memberof ApiV1ExternalKmsIdGet200ResponseExternalKmsExternal
     */
    'providerInput': ApiV1ExternalKmsPostRequestProviderInputs;
}
/**
 * 
 * @export
 * @interface ApiV1ExternalKmsIdPatchRequest
 */
export interface ApiV1ExternalKmsIdPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1ExternalKmsIdPatchRequest
     */
    'slug'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ExternalKmsIdPatchRequest
     */
    'description'?: string;
    /**
     * 
     * @type {ApiV1ExternalKmsIdPatchRequestProvider}
     * @memberof ApiV1ExternalKmsIdPatchRequest
     */
    'provider': ApiV1ExternalKmsIdPatchRequestProvider;
}
/**
 * 
 * @export
 * @interface ApiV1ExternalKmsIdPatchRequestProvider
 */
export interface ApiV1ExternalKmsIdPatchRequestProvider {
    /**
     * 
     * @type {string}
     * @memberof ApiV1ExternalKmsIdPatchRequestProvider
     */
    'type': ApiV1ExternalKmsIdPatchRequestProviderTypeEnum;
    /**
     * 
     * @type {ApiV1ExternalKmsIdPatchRequestProviderInputs}
     * @memberof ApiV1ExternalKmsIdPatchRequestProvider
     */
    'inputs': ApiV1ExternalKmsIdPatchRequestProviderInputs;
}

export const ApiV1ExternalKmsIdPatchRequestProviderTypeEnum = {
    Aws: 'aws'
} as const;

export type ApiV1ExternalKmsIdPatchRequestProviderTypeEnum = typeof ApiV1ExternalKmsIdPatchRequestProviderTypeEnum[keyof typeof ApiV1ExternalKmsIdPatchRequestProviderTypeEnum];

/**
 * 
 * @export
 * @interface ApiV1ExternalKmsIdPatchRequestProviderInputs
 */
export interface ApiV1ExternalKmsIdPatchRequestProviderInputs {
    /**
     * 
     * @type {ApiV1ExternalKmsPostRequestProviderInputsCredential}
     * @memberof ApiV1ExternalKmsIdPatchRequestProviderInputs
     */
    'credential'?: ApiV1ExternalKmsPostRequestProviderInputsCredential;
    /**
     * AWS region to connect
     * @type {string}
     * @memberof ApiV1ExternalKmsIdPatchRequestProviderInputs
     */
    'awsRegion'?: string;
    /**
     * A pre existing AWS KMS key id to be used for encryption. If not provided a kms key will be generated.
     * @type {string}
     * @memberof ApiV1ExternalKmsIdPatchRequestProviderInputs
     */
    'kmsKeyId'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1ExternalKmsPost200Response
 */
export interface ApiV1ExternalKmsPost200Response {
    /**
     * 
     * @type {ApiV1ExternalKmsPost200ResponseExternalKms}
     * @memberof ApiV1ExternalKmsPost200Response
     */
    'externalKms': ApiV1ExternalKmsPost200ResponseExternalKms;
}
/**
 * 
 * @export
 * @interface ApiV1ExternalKmsPost200ResponseExternalKms
 */
export interface ApiV1ExternalKmsPost200ResponseExternalKms {
    /**
     * 
     * @type {string}
     * @memberof ApiV1ExternalKmsPost200ResponseExternalKms
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ExternalKmsPost200ResponseExternalKms
     */
    'description'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1ExternalKmsPost200ResponseExternalKms
     */
    'isDisabled'?: boolean | null;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1ExternalKmsPost200ResponseExternalKms
     */
    'isReserved'?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ExternalKmsPost200ResponseExternalKms
     */
    'orgId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ExternalKmsPost200ResponseExternalKms
     */
    'slug': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ExternalKmsPost200ResponseExternalKms
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ExternalKmsPost200ResponseExternalKms
     */
    'updatedAt': string;
    /**
     * 
     * @type {ApiV1ExternalKmsPost200ResponseExternalKmsExternal}
     * @memberof ApiV1ExternalKmsPost200ResponseExternalKms
     */
    'external': ApiV1ExternalKmsPost200ResponseExternalKmsExternal;
}
/**
 * 
 * @export
 * @interface ApiV1ExternalKmsPost200ResponseExternalKmsExternal
 */
export interface ApiV1ExternalKmsPost200ResponseExternalKmsExternal {
    /**
     * 
     * @type {string}
     * @memberof ApiV1ExternalKmsPost200ResponseExternalKmsExternal
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ExternalKmsPost200ResponseExternalKmsExternal
     */
    'status'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ExternalKmsPost200ResponseExternalKmsExternal
     */
    'statusDetails'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ExternalKmsPost200ResponseExternalKmsExternal
     */
    'provider': string;
}
/**
 * 
 * @export
 * @interface ApiV1ExternalKmsPostRequest
 */
export interface ApiV1ExternalKmsPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1ExternalKmsPostRequest
     */
    'slug': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ExternalKmsPostRequest
     */
    'description'?: string;
    /**
     * 
     * @type {ApiV1ExternalKmsPostRequestProvider}
     * @memberof ApiV1ExternalKmsPostRequest
     */
    'provider': ApiV1ExternalKmsPostRequestProvider;
}
/**
 * 
 * @export
 * @interface ApiV1ExternalKmsPostRequestProvider
 */
export interface ApiV1ExternalKmsPostRequestProvider {
    /**
     * 
     * @type {string}
     * @memberof ApiV1ExternalKmsPostRequestProvider
     */
    'type': ApiV1ExternalKmsPostRequestProviderTypeEnum;
    /**
     * 
     * @type {ApiV1ExternalKmsPostRequestProviderInputs}
     * @memberof ApiV1ExternalKmsPostRequestProvider
     */
    'inputs': ApiV1ExternalKmsPostRequestProviderInputs;
}

export const ApiV1ExternalKmsPostRequestProviderTypeEnum = {
    Aws: 'aws'
} as const;

export type ApiV1ExternalKmsPostRequestProviderTypeEnum = typeof ApiV1ExternalKmsPostRequestProviderTypeEnum[keyof typeof ApiV1ExternalKmsPostRequestProviderTypeEnum];

/**
 * 
 * @export
 * @interface ApiV1ExternalKmsPostRequestProviderInputs
 */
export interface ApiV1ExternalKmsPostRequestProviderInputs {
    /**
     * 
     * @type {ApiV1ExternalKmsPostRequestProviderInputsCredential}
     * @memberof ApiV1ExternalKmsPostRequestProviderInputs
     */
    'credential': ApiV1ExternalKmsPostRequestProviderInputsCredential;
    /**
     * AWS region to connect
     * @type {string}
     * @memberof ApiV1ExternalKmsPostRequestProviderInputs
     */
    'awsRegion': string;
    /**
     * A pre existing AWS KMS key id to be used for encryption. If not provided a kms key will be generated.
     * @type {string}
     * @memberof ApiV1ExternalKmsPostRequestProviderInputs
     */
    'kmsKeyId'?: string;
}
/**
 * AWS credential information to connect
 * @export
 * @interface ApiV1ExternalKmsPostRequestProviderInputsCredential
 */
export interface ApiV1ExternalKmsPostRequestProviderInputsCredential {
    /**
     * 
     * @type {string}
     * @memberof ApiV1ExternalKmsPostRequestProviderInputsCredential
     */
    'type': ApiV1ExternalKmsPostRequestProviderInputsCredentialTypeEnum;
    /**
     * 
     * @type {ApiV1ExternalKmsPostRequestProviderInputsCredentialAnyOf1Data}
     * @memberof ApiV1ExternalKmsPostRequestProviderInputsCredential
     */
    'data': ApiV1ExternalKmsPostRequestProviderInputsCredentialAnyOf1Data;
}

export const ApiV1ExternalKmsPostRequestProviderInputsCredentialTypeEnum = {
    AccessKey: 'access-key',
    AssumeRole: 'assume-role'
} as const;

export type ApiV1ExternalKmsPostRequestProviderInputsCredentialTypeEnum = typeof ApiV1ExternalKmsPostRequestProviderInputsCredentialTypeEnum[keyof typeof ApiV1ExternalKmsPostRequestProviderInputsCredentialTypeEnum];

/**
 * 
 * @export
 * @interface ApiV1ExternalKmsPostRequestProviderInputsCredentialAnyOf
 */
export interface ApiV1ExternalKmsPostRequestProviderInputsCredentialAnyOf {
    /**
     * 
     * @type {string}
     * @memberof ApiV1ExternalKmsPostRequestProviderInputsCredentialAnyOf
     */
    'type': ApiV1ExternalKmsPostRequestProviderInputsCredentialAnyOfTypeEnum;
    /**
     * 
     * @type {ApiV1ExternalKmsPostRequestProviderInputsCredentialAnyOfData}
     * @memberof ApiV1ExternalKmsPostRequestProviderInputsCredentialAnyOf
     */
    'data': ApiV1ExternalKmsPostRequestProviderInputsCredentialAnyOfData;
}

export const ApiV1ExternalKmsPostRequestProviderInputsCredentialAnyOfTypeEnum = {
    AccessKey: 'access-key'
} as const;

export type ApiV1ExternalKmsPostRequestProviderInputsCredentialAnyOfTypeEnum = typeof ApiV1ExternalKmsPostRequestProviderInputsCredentialAnyOfTypeEnum[keyof typeof ApiV1ExternalKmsPostRequestProviderInputsCredentialAnyOfTypeEnum];

/**
 * 
 * @export
 * @interface ApiV1ExternalKmsPostRequestProviderInputsCredentialAnyOf1
 */
export interface ApiV1ExternalKmsPostRequestProviderInputsCredentialAnyOf1 {
    /**
     * 
     * @type {string}
     * @memberof ApiV1ExternalKmsPostRequestProviderInputsCredentialAnyOf1
     */
    'type': ApiV1ExternalKmsPostRequestProviderInputsCredentialAnyOf1TypeEnum;
    /**
     * 
     * @type {ApiV1ExternalKmsPostRequestProviderInputsCredentialAnyOf1Data}
     * @memberof ApiV1ExternalKmsPostRequestProviderInputsCredentialAnyOf1
     */
    'data': ApiV1ExternalKmsPostRequestProviderInputsCredentialAnyOf1Data;
}

export const ApiV1ExternalKmsPostRequestProviderInputsCredentialAnyOf1TypeEnum = {
    AssumeRole: 'assume-role'
} as const;

export type ApiV1ExternalKmsPostRequestProviderInputsCredentialAnyOf1TypeEnum = typeof ApiV1ExternalKmsPostRequestProviderInputsCredentialAnyOf1TypeEnum[keyof typeof ApiV1ExternalKmsPostRequestProviderInputsCredentialAnyOf1TypeEnum];

/**
 * 
 * @export
 * @interface ApiV1ExternalKmsPostRequestProviderInputsCredentialAnyOf1Data
 */
export interface ApiV1ExternalKmsPostRequestProviderInputsCredentialAnyOf1Data {
    /**
     * AWS user role to be assumed by infisical
     * @type {string}
     * @memberof ApiV1ExternalKmsPostRequestProviderInputsCredentialAnyOf1Data
     */
    'assumeRoleArn': string;
    /**
     * AWS assume role external id for furthur security in authentication
     * @type {string}
     * @memberof ApiV1ExternalKmsPostRequestProviderInputsCredentialAnyOf1Data
     */
    'externalId'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1ExternalKmsPostRequestProviderInputsCredentialAnyOfData
 */
export interface ApiV1ExternalKmsPostRequestProviderInputsCredentialAnyOfData {
    /**
     * AWS user account access key
     * @type {string}
     * @memberof ApiV1ExternalKmsPostRequestProviderInputsCredentialAnyOfData
     */
    'accessKey': string;
    /**
     * AWS user account secret key
     * @type {string}
     * @memberof ApiV1ExternalKmsPostRequestProviderInputsCredentialAnyOfData
     */
    'secretKey': string;
}
/**
 * 
 * @export
 * @interface ApiV1FoldersBatchPatchRequest
 */
export interface ApiV1FoldersBatchPatchRequest {
    /**
     * The slug of the project where the folder is located.
     * @type {string}
     * @memberof ApiV1FoldersBatchPatchRequest
     */
    'projectSlug': string;
    /**
     * 
     * @type {Array<ApiV1FoldersBatchPatchRequestFoldersInner>}
     * @memberof ApiV1FoldersBatchPatchRequest
     */
    'folders': Array<ApiV1FoldersBatchPatchRequestFoldersInner>;
}
/**
 * 
 * @export
 * @interface ApiV1FoldersBatchPatchRequestFoldersInner
 */
export interface ApiV1FoldersBatchPatchRequestFoldersInner {
    /**
     * The ID of the folder to update.
     * @type {string}
     * @memberof ApiV1FoldersBatchPatchRequestFoldersInner
     */
    'id': string;
    /**
     * The slug of the environment where the folder is located.
     * @type {string}
     * @memberof ApiV1FoldersBatchPatchRequestFoldersInner
     */
    'environment': string;
    /**
     * The new name of the folder.
     * @type {string}
     * @memberof ApiV1FoldersBatchPatchRequestFoldersInner
     */
    'name': string;
    /**
     * The path of the folder to update.
     * @type {string}
     * @memberof ApiV1FoldersBatchPatchRequestFoldersInner
     */
    'path'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1FoldersFolderIdOrNameDeleteRequest
 */
export interface ApiV1FoldersFolderIdOrNameDeleteRequest {
    /**
     * The ID of the project to delete the folder from.
     * @type {string}
     * @memberof ApiV1FoldersFolderIdOrNameDeleteRequest
     */
    'workspaceId': string;
    /**
     * The slug of the environment where the folder is located.
     * @type {string}
     * @memberof ApiV1FoldersFolderIdOrNameDeleteRequest
     */
    'environment': string;
    /**
     * The path of the folder to delete.
     * @type {string}
     * @memberof ApiV1FoldersFolderIdOrNameDeleteRequest
     */
    'path'?: string;
    /**
     * The directory of the folder to delete. (Deprecated in favor of path)
     * @type {string}
     * @memberof ApiV1FoldersFolderIdOrNameDeleteRequest
     */
    'directory'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1FoldersFolderIdPatchRequest
 */
export interface ApiV1FoldersFolderIdPatchRequest {
    /**
     * The ID of the project where the folder is located.
     * @type {string}
     * @memberof ApiV1FoldersFolderIdPatchRequest
     */
    'workspaceId': string;
    /**
     * The slug of the environment where the folder is located.
     * @type {string}
     * @memberof ApiV1FoldersFolderIdPatchRequest
     */
    'environment': string;
    /**
     * The new name of the folder.
     * @type {string}
     * @memberof ApiV1FoldersFolderIdPatchRequest
     */
    'name': string;
    /**
     * The path of the folder to update.
     * @type {string}
     * @memberof ApiV1FoldersFolderIdPatchRequest
     */
    'path'?: string;
    /**
     * The new directory of the folder to update. (Deprecated in favor of path)
     * @type {string}
     * @memberof ApiV1FoldersFolderIdPatchRequest
     */
    'directory'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1FoldersGet200Response
 */
export interface ApiV1FoldersGet200Response {
    /**
     * 
     * @type {Array<ApiV1FoldersGet200ResponseFoldersInner>}
     * @memberof ApiV1FoldersGet200Response
     */
    'folders': Array<ApiV1FoldersGet200ResponseFoldersInner>;
}
/**
 * 
 * @export
 * @interface ApiV1FoldersGet200ResponseFoldersInner
 */
export interface ApiV1FoldersGet200ResponseFoldersInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1FoldersGet200ResponseFoldersInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1FoldersGet200ResponseFoldersInner
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof ApiV1FoldersGet200ResponseFoldersInner
     */
    'version'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1FoldersGet200ResponseFoldersInner
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1FoldersGet200ResponseFoldersInner
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1FoldersGet200ResponseFoldersInner
     */
    'envId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1FoldersGet200ResponseFoldersInner
     */
    'parentId'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1FoldersGet200ResponseFoldersInner
     */
    'isReserved'?: boolean | null;
}
/**
 * 
 * @export
 * @interface ApiV1FoldersPost200Response
 */
export interface ApiV1FoldersPost200Response {
    /**
     * 
     * @type {ApiV1FoldersGet200ResponseFoldersInner}
     * @memberof ApiV1FoldersPost200Response
     */
    'folder': ApiV1FoldersGet200ResponseFoldersInner;
}
/**
 * 
 * @export
 * @interface ApiV1FoldersPostRequest
 */
export interface ApiV1FoldersPostRequest {
    /**
     * The ID of the project to create the folder in.
     * @type {string}
     * @memberof ApiV1FoldersPostRequest
     */
    'workspaceId': string;
    /**
     * The slug of the environment to create the folder in.
     * @type {string}
     * @memberof ApiV1FoldersPostRequest
     */
    'environment': string;
    /**
     * The name of the folder to create.
     * @type {string}
     * @memberof ApiV1FoldersPostRequest
     */
    'name': string;
    /**
     * The path of the folder to create.
     * @type {string}
     * @memberof ApiV1FoldersPostRequest
     */
    'path'?: string;
    /**
     * The directory of the folder to create. (Deprecated in favor of path)
     * @type {string}
     * @memberof ApiV1FoldersPostRequest
     */
    'directory'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1GroupsCurrentSlugPatchRequest
 */
export interface ApiV1GroupsCurrentSlugPatchRequest {
    /**
     * The new name of the group to update to.
     * @type {string}
     * @memberof ApiV1GroupsCurrentSlugPatchRequest
     */
    'name'?: string;
    /**
     * The new slug of the group to update to.
     * @type {string}
     * @memberof ApiV1GroupsCurrentSlugPatchRequest
     */
    'slug'?: string;
    /**
     * The new role of the group to update to.
     * @type {string}
     * @memberof ApiV1GroupsCurrentSlugPatchRequest
     */
    'role'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1GroupsPost200Response
 */
export interface ApiV1GroupsPost200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiV1GroupsPost200Response
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1GroupsPost200Response
     */
    'orgId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1GroupsPost200Response
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1GroupsPost200Response
     */
    'slug': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1GroupsPost200Response
     */
    'role': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1GroupsPost200Response
     */
    'roleId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1GroupsPost200Response
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1GroupsPost200Response
     */
    'updatedAt': string;
}
/**
 * 
 * @export
 * @interface ApiV1GroupsPostRequest
 */
export interface ApiV1GroupsPostRequest {
    /**
     * The name of the group to create.
     * @type {string}
     * @memberof ApiV1GroupsPostRequest
     */
    'name': string;
    /**
     * The slug of the group to create.
     * @type {string}
     * @memberof ApiV1GroupsPostRequest
     */
    'slug'?: string;
    /**
     * The role of the group to create.
     * @type {string}
     * @memberof ApiV1GroupsPostRequest
     */
    'role'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1GroupsSlugUsersGet200Response
 */
export interface ApiV1GroupsSlugUsersGet200Response {
    /**
     * 
     * @type {Array<ApiV1GroupsSlugUsersGet200ResponseUsersInner>}
     * @memberof ApiV1GroupsSlugUsersGet200Response
     */
    'users': Array<ApiV1GroupsSlugUsersGet200ResponseUsersInner>;
    /**
     * 
     * @type {number}
     * @memberof ApiV1GroupsSlugUsersGet200Response
     */
    'totalCount': number;
}
/**
 * 
 * @export
 * @interface ApiV1GroupsSlugUsersGet200ResponseUsersInner
 */
export interface ApiV1GroupsSlugUsersGet200ResponseUsersInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1GroupsSlugUsersGet200ResponseUsersInner
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1GroupsSlugUsersGet200ResponseUsersInner
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1GroupsSlugUsersGet200ResponseUsersInner
     */
    'firstName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1GroupsSlugUsersGet200ResponseUsersInner
     */
    'lastName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1GroupsSlugUsersGet200ResponseUsersInner
     */
    'id': string;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1GroupsSlugUsersGet200ResponseUsersInner
     */
    'isPartOfGroup': boolean;
}
/**
 * 
 * @export
 * @interface ApiV1GroupsSlugUsersUsernamePost200Response
 */
export interface ApiV1GroupsSlugUsersUsernamePost200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiV1GroupsSlugUsersUsernamePost200Response
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1GroupsSlugUsersUsernamePost200Response
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1GroupsSlugUsersUsernamePost200Response
     */
    'firstName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1GroupsSlugUsersUsernamePost200Response
     */
    'lastName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1GroupsSlugUsersUsernamePost200Response
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface ApiV1IdentitiesGet200Response
 */
export interface ApiV1IdentitiesGet200Response {
    /**
     * 
     * @type {Array<ApiV1IdentitiesGet200ResponseIdentitiesInner>}
     * @memberof ApiV1IdentitiesGet200Response
     */
    'identities': Array<ApiV1IdentitiesGet200ResponseIdentitiesInner>;
}
/**
 * 
 * @export
 * @interface ApiV1IdentitiesGet200ResponseIdentitiesInner
 */
export interface ApiV1IdentitiesGet200ResponseIdentitiesInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1IdentitiesGet200ResponseIdentitiesInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1IdentitiesGet200ResponseIdentitiesInner
     */
    'role': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1IdentitiesGet200ResponseIdentitiesInner
     */
    'roleId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1IdentitiesGet200ResponseIdentitiesInner
     */
    'orgId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1IdentitiesGet200ResponseIdentitiesInner
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1IdentitiesGet200ResponseIdentitiesInner
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1IdentitiesGet200ResponseIdentitiesInner
     */
    'identityId': string;
    /**
     * 
     * @type {ApiV1OrganizationOrganizationIdGroupsGet200ResponseGroupsInnerCustomRole}
     * @memberof ApiV1IdentitiesGet200ResponseIdentitiesInner
     */
    'customRole'?: ApiV1OrganizationOrganizationIdGroupsGet200ResponseGroupsInnerCustomRole;
    /**
     * 
     * @type {ApiV1IdentitiesGet200ResponseIdentitiesInnerIdentity}
     * @memberof ApiV1IdentitiesGet200ResponseIdentitiesInner
     */
    'identity': ApiV1IdentitiesGet200ResponseIdentitiesInnerIdentity;
}
/**
 * 
 * @export
 * @interface ApiV1IdentitiesGet200ResponseIdentitiesInnerIdentity
 */
export interface ApiV1IdentitiesGet200ResponseIdentitiesInnerIdentity {
    /**
     * 
     * @type {string}
     * @memberof ApiV1IdentitiesGet200ResponseIdentitiesInnerIdentity
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1IdentitiesGet200ResponseIdentitiesInnerIdentity
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1IdentitiesGet200ResponseIdentitiesInnerIdentity
     */
    'authMethod'?: string | null;
}
/**
 * 
 * @export
 * @interface ApiV1IdentitiesIdentityIdGet200Response
 */
export interface ApiV1IdentitiesIdentityIdGet200Response {
    /**
     * 
     * @type {ApiV1IdentitiesGet200ResponseIdentitiesInner}
     * @memberof ApiV1IdentitiesIdentityIdGet200Response
     */
    'identity': ApiV1IdentitiesGet200ResponseIdentitiesInner;
}
/**
 * 
 * @export
 * @interface ApiV1IdentitiesIdentityIdIdentityMembershipsGet200Response
 */
export interface ApiV1IdentitiesIdentityIdIdentityMembershipsGet200Response {
    /**
     * 
     * @type {Array<ApiV1IdentitiesIdentityIdIdentityMembershipsGet200ResponseIdentityMembershipsInner>}
     * @memberof ApiV1IdentitiesIdentityIdIdentityMembershipsGet200Response
     */
    'identityMemberships': Array<ApiV1IdentitiesIdentityIdIdentityMembershipsGet200ResponseIdentityMembershipsInner>;
}
/**
 * 
 * @export
 * @interface ApiV1IdentitiesIdentityIdIdentityMembershipsGet200ResponseIdentityMembershipsInner
 */
export interface ApiV1IdentitiesIdentityIdIdentityMembershipsGet200ResponseIdentityMembershipsInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1IdentitiesIdentityIdIdentityMembershipsGet200ResponseIdentityMembershipsInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1IdentitiesIdentityIdIdentityMembershipsGet200ResponseIdentityMembershipsInner
     */
    'identityId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1IdentitiesIdentityIdIdentityMembershipsGet200ResponseIdentityMembershipsInner
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1IdentitiesIdentityIdIdentityMembershipsGet200ResponseIdentityMembershipsInner
     */
    'updatedAt': string;
    /**
     * 
     * @type {Array<ApiV1WorkspaceWorkspaceIdUsersGet200ResponseUsersInnerRolesInner>}
     * @memberof ApiV1IdentitiesIdentityIdIdentityMembershipsGet200ResponseIdentityMembershipsInner
     */
    'roles': Array<ApiV1WorkspaceWorkspaceIdUsersGet200ResponseUsersInnerRolesInner>;
    /**
     * 
     * @type {ApiV1IdentitiesGet200ResponseIdentitiesInnerIdentity}
     * @memberof ApiV1IdentitiesIdentityIdIdentityMembershipsGet200ResponseIdentityMembershipsInner
     */
    'identity': ApiV1IdentitiesGet200ResponseIdentitiesInnerIdentity;
    /**
     * 
     * @type {ApiV1WorkspaceWorkspaceIdUsersGet200ResponseUsersInnerProject}
     * @memberof ApiV1IdentitiesIdentityIdIdentityMembershipsGet200ResponseIdentityMembershipsInner
     */
    'project': ApiV1WorkspaceWorkspaceIdUsersGet200ResponseUsersInnerProject;
}
/**
 * 
 * @export
 * @interface ApiV1IdentitiesIdentityIdPatchRequest
 */
export interface ApiV1IdentitiesIdentityIdPatchRequest {
    /**
     * The new name of the identity.
     * @type {string}
     * @memberof ApiV1IdentitiesIdentityIdPatchRequest
     */
    'name'?: string;
    /**
     * The new role of the identity.
     * @type {string}
     * @memberof ApiV1IdentitiesIdentityIdPatchRequest
     */
    'role'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1IdentitiesPost200Response
 */
export interface ApiV1IdentitiesPost200Response {
    /**
     * 
     * @type {ApiV1IdentitiesPost200ResponseIdentity}
     * @memberof ApiV1IdentitiesPost200Response
     */
    'identity': ApiV1IdentitiesPost200ResponseIdentity;
}
/**
 * 
 * @export
 * @interface ApiV1IdentitiesPost200ResponseIdentity
 */
export interface ApiV1IdentitiesPost200ResponseIdentity {
    /**
     * 
     * @type {string}
     * @memberof ApiV1IdentitiesPost200ResponseIdentity
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1IdentitiesPost200ResponseIdentity
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1IdentitiesPost200ResponseIdentity
     */
    'authMethod'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1IdentitiesPost200ResponseIdentity
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1IdentitiesPost200ResponseIdentity
     */
    'updatedAt': string;
}
/**
 * 
 * @export
 * @interface ApiV1IdentitiesPostRequest
 */
export interface ApiV1IdentitiesPostRequest {
    /**
     * The name of the identity to create.
     * @type {string}
     * @memberof ApiV1IdentitiesPostRequest
     */
    'name': string;
    /**
     * The organization ID to which the identity belongs.
     * @type {string}
     * @memberof ApiV1IdentitiesPostRequest
     */
    'organizationId': string;
    /**
     * The role of the identity. Possible values are \'no-access\', \'member\', and \'admin\'.
     * @type {string}
     * @memberof ApiV1IdentitiesPostRequest
     */
    'role'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1IntegrationAuthAccessTokenPostRequest
 */
export interface ApiV1IntegrationAuthAccessTokenPostRequest {
    /**
     * The ID of the project to create the integration auth for.
     * @type {string}
     * @memberof ApiV1IntegrationAuthAccessTokenPostRequest
     */
    'workspaceId': string;
    /**
     * The slug of integration for the auth object.
     * @type {string}
     * @memberof ApiV1IntegrationAuthAccessTokenPostRequest
     */
    'integration': string;
    /**
     * The unique authorized access id of the external integration provider.
     * @type {string}
     * @memberof ApiV1IntegrationAuthAccessTokenPostRequest
     */
    'accessId'?: string;
    /**
     * The unique authorized access token of the external integration provider.
     * @type {string}
     * @memberof ApiV1IntegrationAuthAccessTokenPostRequest
     */
    'accessToken'?: string;
    /**
     * The AWS IAM Role to be assumed by Infisical
     * @type {string}
     * @memberof ApiV1IntegrationAuthAccessTokenPostRequest
     */
    'awsAssumeIamRoleArn'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1IntegrationAuthAccessTokenPostRequest
     */
    'url'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1IntegrationAuthAccessTokenPostRequest
     */
    'namespace'?: string;
    /**
     * The refresh token for integration authorization.
     * @type {string}
     * @memberof ApiV1IntegrationAuthAccessTokenPostRequest
     */
    'refreshToken'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1IntegrationAuthDelete200Response
 */
export interface ApiV1IntegrationAuthDelete200Response {
    /**
     * 
     * @type {Array<ApiV1WorkspaceWorkspaceIdAuthorizationsGet200ResponseAuthorizationsInner>}
     * @memberof ApiV1IntegrationAuthDelete200Response
     */
    'integrationAuth': Array<ApiV1WorkspaceWorkspaceIdAuthorizationsGet200ResponseAuthorizationsInner>;
}
/**
 * 
 * @export
 * @interface ApiV1IntegrationAuthIntegrationAuthIdAppsGet200Response
 */
export interface ApiV1IntegrationAuthIntegrationAuthIdAppsGet200Response {
    /**
     * 
     * @type {Array<ApiV1IntegrationAuthIntegrationAuthIdAppsGet200ResponseAppsInner>}
     * @memberof ApiV1IntegrationAuthIntegrationAuthIdAppsGet200Response
     */
    'apps': Array<ApiV1IntegrationAuthIntegrationAuthIdAppsGet200ResponseAppsInner>;
}
/**
 * 
 * @export
 * @interface ApiV1IntegrationAuthIntegrationAuthIdAppsGet200ResponseAppsInner
 */
export interface ApiV1IntegrationAuthIntegrationAuthIdAppsGet200ResponseAppsInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1IntegrationAuthIntegrationAuthIdAppsGet200ResponseAppsInner
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1IntegrationAuthIntegrationAuthIdAppsGet200ResponseAppsInner
     */
    'appId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1IntegrationAuthIntegrationAuthIdAppsGet200ResponseAppsInner
     */
    'owner'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1IntegrationAuthIntegrationAuthIdAwsSecretsManagerKmsKeysGet200Response
 */
export interface ApiV1IntegrationAuthIntegrationAuthIdAwsSecretsManagerKmsKeysGet200Response {
    /**
     * 
     * @type {Array<ApiV1IntegrationAuthIntegrationAuthIdAwsSecretsManagerKmsKeysGet200ResponseKmsKeysInner>}
     * @memberof ApiV1IntegrationAuthIntegrationAuthIdAwsSecretsManagerKmsKeysGet200Response
     */
    'kmsKeys': Array<ApiV1IntegrationAuthIntegrationAuthIdAwsSecretsManagerKmsKeysGet200ResponseKmsKeysInner>;
}
/**
 * 
 * @export
 * @interface ApiV1IntegrationAuthIntegrationAuthIdAwsSecretsManagerKmsKeysGet200ResponseKmsKeysInner
 */
export interface ApiV1IntegrationAuthIntegrationAuthIdAwsSecretsManagerKmsKeysGet200ResponseKmsKeysInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1IntegrationAuthIntegrationAuthIdAwsSecretsManagerKmsKeysGet200ResponseKmsKeysInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1IntegrationAuthIntegrationAuthIdAwsSecretsManagerKmsKeysGet200ResponseKmsKeysInner
     */
    'alias': string;
}
/**
 * 
 * @export
 * @interface ApiV1IntegrationAuthIntegrationAuthIdBitbucketWorkspacesGet200Response
 */
export interface ApiV1IntegrationAuthIntegrationAuthIdBitbucketWorkspacesGet200Response {
    /**
     * 
     * @type {Array<ApiV1IntegrationAuthIntegrationAuthIdBitbucketWorkspacesGet200ResponseWorkspacesInner>}
     * @memberof ApiV1IntegrationAuthIntegrationAuthIdBitbucketWorkspacesGet200Response
     */
    'workspaces': Array<ApiV1IntegrationAuthIntegrationAuthIdBitbucketWorkspacesGet200ResponseWorkspacesInner>;
}
/**
 * 
 * @export
 * @interface ApiV1IntegrationAuthIntegrationAuthIdBitbucketWorkspacesGet200ResponseWorkspacesInner
 */
export interface ApiV1IntegrationAuthIntegrationAuthIdBitbucketWorkspacesGet200ResponseWorkspacesInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1IntegrationAuthIntegrationAuthIdBitbucketWorkspacesGet200ResponseWorkspacesInner
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1IntegrationAuthIntegrationAuthIdBitbucketWorkspacesGet200ResponseWorkspacesInner
     */
    'slug': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1IntegrationAuthIntegrationAuthIdBitbucketWorkspacesGet200ResponseWorkspacesInner
     */
    'uuid': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1IntegrationAuthIntegrationAuthIdBitbucketWorkspacesGet200ResponseWorkspacesInner
     */
    'type': string;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1IntegrationAuthIntegrationAuthIdBitbucketWorkspacesGet200ResponseWorkspacesInner
     */
    'is_private': boolean;
    /**
     * 
     * @type {string}
     * @memberof ApiV1IntegrationAuthIntegrationAuthIdBitbucketWorkspacesGet200ResponseWorkspacesInner
     */
    'created_on': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1IntegrationAuthIntegrationAuthIdBitbucketWorkspacesGet200ResponseWorkspacesInner
     */
    'updated_on'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1IntegrationAuthIntegrationAuthIdChecklyGroupsGet200Response
 */
export interface ApiV1IntegrationAuthIntegrationAuthIdChecklyGroupsGet200Response {
    /**
     * 
     * @type {Array<ApiV1IntegrationAuthIntegrationAuthIdChecklyGroupsGet200ResponseGroupsInner>}
     * @memberof ApiV1IntegrationAuthIntegrationAuthIdChecklyGroupsGet200Response
     */
    'groups': Array<ApiV1IntegrationAuthIntegrationAuthIdChecklyGroupsGet200ResponseGroupsInner>;
}
/**
 * 
 * @export
 * @interface ApiV1IntegrationAuthIntegrationAuthIdChecklyGroupsGet200ResponseGroupsInner
 */
export interface ApiV1IntegrationAuthIntegrationAuthIdChecklyGroupsGet200ResponseGroupsInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1IntegrationAuthIntegrationAuthIdChecklyGroupsGet200ResponseGroupsInner
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof ApiV1IntegrationAuthIntegrationAuthIdChecklyGroupsGet200ResponseGroupsInner
     */
    'groupId': number;
}
/**
 * 
 * @export
 * @interface ApiV1IntegrationAuthIntegrationAuthIdGet200Response
 */
export interface ApiV1IntegrationAuthIntegrationAuthIdGet200Response {
    /**
     * 
     * @type {ApiV1WorkspaceWorkspaceIdAuthorizationsGet200ResponseAuthorizationsInner}
     * @memberof ApiV1IntegrationAuthIntegrationAuthIdGet200Response
     */
    'integrationAuth': ApiV1WorkspaceWorkspaceIdAuthorizationsGet200ResponseAuthorizationsInner;
}
/**
 * 
 * @export
 * @interface ApiV1IntegrationAuthIntegrationAuthIdGithubEnvsGet200Response
 */
export interface ApiV1IntegrationAuthIntegrationAuthIdGithubEnvsGet200Response {
    /**
     * 
     * @type {Array<ApiV1IntegrationAuthIntegrationAuthIdGithubEnvsGet200ResponseEnvsInner>}
     * @memberof ApiV1IntegrationAuthIntegrationAuthIdGithubEnvsGet200Response
     */
    'envs': Array<ApiV1IntegrationAuthIntegrationAuthIdGithubEnvsGet200ResponseEnvsInner>;
}
/**
 * 
 * @export
 * @interface ApiV1IntegrationAuthIntegrationAuthIdGithubEnvsGet200ResponseEnvsInner
 */
export interface ApiV1IntegrationAuthIntegrationAuthIdGithubEnvsGet200ResponseEnvsInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1IntegrationAuthIntegrationAuthIdGithubEnvsGet200ResponseEnvsInner
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1IntegrationAuthIntegrationAuthIdGithubEnvsGet200ResponseEnvsInner
     */
    'envId': string;
}
/**
 * 
 * @export
 * @interface ApiV1IntegrationAuthIntegrationAuthIdGithubOrgsGet200Response
 */
export interface ApiV1IntegrationAuthIntegrationAuthIdGithubOrgsGet200Response {
    /**
     * 
     * @type {Array<ApiV1IntegrationAuthIntegrationAuthIdGithubOrgsGet200ResponseOrgsInner>}
     * @memberof ApiV1IntegrationAuthIntegrationAuthIdGithubOrgsGet200Response
     */
    'orgs': Array<ApiV1IntegrationAuthIntegrationAuthIdGithubOrgsGet200ResponseOrgsInner>;
}
/**
 * 
 * @export
 * @interface ApiV1IntegrationAuthIntegrationAuthIdGithubOrgsGet200ResponseOrgsInner
 */
export interface ApiV1IntegrationAuthIntegrationAuthIdGithubOrgsGet200ResponseOrgsInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1IntegrationAuthIntegrationAuthIdGithubOrgsGet200ResponseOrgsInner
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1IntegrationAuthIntegrationAuthIdGithubOrgsGet200ResponseOrgsInner
     */
    'orgId': string;
}
/**
 * 
 * @export
 * @interface ApiV1IntegrationAuthIntegrationAuthIdHerokuPipelinesGet200Response
 */
export interface ApiV1IntegrationAuthIntegrationAuthIdHerokuPipelinesGet200Response {
    /**
     * 
     * @type {Array<ApiV1IntegrationAuthIntegrationAuthIdHerokuPipelinesGet200ResponsePipelinesInner>}
     * @memberof ApiV1IntegrationAuthIntegrationAuthIdHerokuPipelinesGet200Response
     */
    'pipelines': Array<ApiV1IntegrationAuthIntegrationAuthIdHerokuPipelinesGet200ResponsePipelinesInner>;
}
/**
 * 
 * @export
 * @interface ApiV1IntegrationAuthIntegrationAuthIdHerokuPipelinesGet200ResponsePipelinesInner
 */
export interface ApiV1IntegrationAuthIntegrationAuthIdHerokuPipelinesGet200ResponsePipelinesInner {
    /**
     * 
     * @type {ApiV1IntegrationAuthIntegrationAuthIdHerokuPipelinesGet200ResponsePipelinesInnerApp}
     * @memberof ApiV1IntegrationAuthIntegrationAuthIdHerokuPipelinesGet200ResponsePipelinesInner
     */
    'app': ApiV1IntegrationAuthIntegrationAuthIdHerokuPipelinesGet200ResponsePipelinesInnerApp;
    /**
     * 
     * @type {string}
     * @memberof ApiV1IntegrationAuthIntegrationAuthIdHerokuPipelinesGet200ResponsePipelinesInner
     */
    'stage': string;
    /**
     * 
     * @type {ApiV1IntegrationAuthIntegrationAuthIdHerokuPipelinesGet200ResponsePipelinesInnerPipeline}
     * @memberof ApiV1IntegrationAuthIntegrationAuthIdHerokuPipelinesGet200ResponsePipelinesInner
     */
    'pipeline': ApiV1IntegrationAuthIntegrationAuthIdHerokuPipelinesGet200ResponsePipelinesInnerPipeline;
}
/**
 * 
 * @export
 * @interface ApiV1IntegrationAuthIntegrationAuthIdHerokuPipelinesGet200ResponsePipelinesInnerApp
 */
export interface ApiV1IntegrationAuthIntegrationAuthIdHerokuPipelinesGet200ResponsePipelinesInnerApp {
    /**
     * 
     * @type {string}
     * @memberof ApiV1IntegrationAuthIntegrationAuthIdHerokuPipelinesGet200ResponsePipelinesInnerApp
     */
    'appId': string;
}
/**
 * 
 * @export
 * @interface ApiV1IntegrationAuthIntegrationAuthIdHerokuPipelinesGet200ResponsePipelinesInnerPipeline
 */
export interface ApiV1IntegrationAuthIntegrationAuthIdHerokuPipelinesGet200ResponsePipelinesInnerPipeline {
    /**
     * 
     * @type {string}
     * @memberof ApiV1IntegrationAuthIntegrationAuthIdHerokuPipelinesGet200ResponsePipelinesInnerPipeline
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1IntegrationAuthIntegrationAuthIdHerokuPipelinesGet200ResponsePipelinesInnerPipeline
     */
    'pipelineId': string;
}
/**
 * 
 * @export
 * @interface ApiV1IntegrationAuthIntegrationAuthIdNorthflankSecretGroupsGet200Response
 */
export interface ApiV1IntegrationAuthIntegrationAuthIdNorthflankSecretGroupsGet200Response {
    /**
     * 
     * @type {Array<ApiV1IntegrationAuthIntegrationAuthIdNorthflankSecretGroupsGet200ResponseSecretGroupsInner>}
     * @memberof ApiV1IntegrationAuthIntegrationAuthIdNorthflankSecretGroupsGet200Response
     */
    'secretGroups': Array<ApiV1IntegrationAuthIntegrationAuthIdNorthflankSecretGroupsGet200ResponseSecretGroupsInner>;
}
/**
 * 
 * @export
 * @interface ApiV1IntegrationAuthIntegrationAuthIdNorthflankSecretGroupsGet200ResponseSecretGroupsInner
 */
export interface ApiV1IntegrationAuthIntegrationAuthIdNorthflankSecretGroupsGet200ResponseSecretGroupsInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1IntegrationAuthIntegrationAuthIdNorthflankSecretGroupsGet200ResponseSecretGroupsInner
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1IntegrationAuthIntegrationAuthIdNorthflankSecretGroupsGet200ResponseSecretGroupsInner
     */
    'groupId': string;
}
/**
 * 
 * @export
 * @interface ApiV1IntegrationAuthIntegrationAuthIdQoveryAppsGet200Response
 */
export interface ApiV1IntegrationAuthIntegrationAuthIdQoveryAppsGet200Response {
    /**
     * 
     * @type {Array<ApiV1IntegrationAuthIntegrationAuthIdQoveryAppsGet200ResponseAppsInner>}
     * @memberof ApiV1IntegrationAuthIntegrationAuthIdQoveryAppsGet200Response
     */
    'apps': Array<ApiV1IntegrationAuthIntegrationAuthIdQoveryAppsGet200ResponseAppsInner>;
}
/**
 * 
 * @export
 * @interface ApiV1IntegrationAuthIntegrationAuthIdQoveryAppsGet200ResponseAppsInner
 */
export interface ApiV1IntegrationAuthIntegrationAuthIdQoveryAppsGet200ResponseAppsInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1IntegrationAuthIntegrationAuthIdQoveryAppsGet200ResponseAppsInner
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1IntegrationAuthIntegrationAuthIdQoveryAppsGet200ResponseAppsInner
     */
    'appId': string;
}
/**
 * 
 * @export
 * @interface ApiV1IntegrationAuthIntegrationAuthIdQoveryContainersGet200Response
 */
export interface ApiV1IntegrationAuthIntegrationAuthIdQoveryContainersGet200Response {
    /**
     * 
     * @type {Array<ApiV1IntegrationAuthIntegrationAuthIdQoveryAppsGet200ResponseAppsInner>}
     * @memberof ApiV1IntegrationAuthIntegrationAuthIdQoveryContainersGet200Response
     */
    'containers': Array<ApiV1IntegrationAuthIntegrationAuthIdQoveryAppsGet200ResponseAppsInner>;
}
/**
 * 
 * @export
 * @interface ApiV1IntegrationAuthIntegrationAuthIdQoveryEnvironmentsGet200Response
 */
export interface ApiV1IntegrationAuthIntegrationAuthIdQoveryEnvironmentsGet200Response {
    /**
     * 
     * @type {Array<ApiV1IntegrationAuthIntegrationAuthIdQoveryEnvironmentsGet200ResponseEnvironmentsInner>}
     * @memberof ApiV1IntegrationAuthIntegrationAuthIdQoveryEnvironmentsGet200Response
     */
    'environments': Array<ApiV1IntegrationAuthIntegrationAuthIdQoveryEnvironmentsGet200ResponseEnvironmentsInner>;
}
/**
 * 
 * @export
 * @interface ApiV1IntegrationAuthIntegrationAuthIdQoveryEnvironmentsGet200ResponseEnvironmentsInner
 */
export interface ApiV1IntegrationAuthIntegrationAuthIdQoveryEnvironmentsGet200ResponseEnvironmentsInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1IntegrationAuthIntegrationAuthIdQoveryEnvironmentsGet200ResponseEnvironmentsInner
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1IntegrationAuthIntegrationAuthIdQoveryEnvironmentsGet200ResponseEnvironmentsInner
     */
    'environmentId': string;
}
/**
 * 
 * @export
 * @interface ApiV1IntegrationAuthIntegrationAuthIdQoveryJobsGet200Response
 */
export interface ApiV1IntegrationAuthIntegrationAuthIdQoveryJobsGet200Response {
    /**
     * 
     * @type {Array<ApiV1IntegrationAuthIntegrationAuthIdQoveryAppsGet200ResponseAppsInner>}
     * @memberof ApiV1IntegrationAuthIntegrationAuthIdQoveryJobsGet200Response
     */
    'jobs': Array<ApiV1IntegrationAuthIntegrationAuthIdQoveryAppsGet200ResponseAppsInner>;
}
/**
 * 
 * @export
 * @interface ApiV1IntegrationAuthIntegrationAuthIdQoveryProjectsGet200Response
 */
export interface ApiV1IntegrationAuthIntegrationAuthIdQoveryProjectsGet200Response {
    /**
     * 
     * @type {Array<ApiV1IntegrationAuthIntegrationAuthIdQoveryProjectsGet200ResponseProjectsInner>}
     * @memberof ApiV1IntegrationAuthIntegrationAuthIdQoveryProjectsGet200Response
     */
    'projects': Array<ApiV1IntegrationAuthIntegrationAuthIdQoveryProjectsGet200ResponseProjectsInner>;
}
/**
 * 
 * @export
 * @interface ApiV1IntegrationAuthIntegrationAuthIdQoveryProjectsGet200ResponseProjectsInner
 */
export interface ApiV1IntegrationAuthIntegrationAuthIdQoveryProjectsGet200ResponseProjectsInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1IntegrationAuthIntegrationAuthIdQoveryProjectsGet200ResponseProjectsInner
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1IntegrationAuthIntegrationAuthIdQoveryProjectsGet200ResponseProjectsInner
     */
    'projectId': string;
}
/**
 * 
 * @export
 * @interface ApiV1IntegrationAuthIntegrationAuthIdRailwayServicesGet200Response
 */
export interface ApiV1IntegrationAuthIntegrationAuthIdRailwayServicesGet200Response {
    /**
     * 
     * @type {Array<ApiV1IntegrationAuthIntegrationAuthIdRailwayServicesGet200ResponseServicesInner>}
     * @memberof ApiV1IntegrationAuthIntegrationAuthIdRailwayServicesGet200Response
     */
    'services': Array<ApiV1IntegrationAuthIntegrationAuthIdRailwayServicesGet200ResponseServicesInner>;
}
/**
 * 
 * @export
 * @interface ApiV1IntegrationAuthIntegrationAuthIdRailwayServicesGet200ResponseServicesInner
 */
export interface ApiV1IntegrationAuthIntegrationAuthIdRailwayServicesGet200ResponseServicesInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1IntegrationAuthIntegrationAuthIdRailwayServicesGet200ResponseServicesInner
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1IntegrationAuthIntegrationAuthIdRailwayServicesGet200ResponseServicesInner
     */
    'serviceId': string;
}
/**
 * 
 * @export
 * @interface ApiV1IntegrationAuthIntegrationAuthIdTeamcityBuildConfigsGet200Response
 */
export interface ApiV1IntegrationAuthIntegrationAuthIdTeamcityBuildConfigsGet200Response {
    /**
     * 
     * @type {Array<ApiV1IntegrationAuthIntegrationAuthIdTeamcityBuildConfigsGet200ResponseBuildConfigsInner>}
     * @memberof ApiV1IntegrationAuthIntegrationAuthIdTeamcityBuildConfigsGet200Response
     */
    'buildConfigs': Array<ApiV1IntegrationAuthIntegrationAuthIdTeamcityBuildConfigsGet200ResponseBuildConfigsInner>;
}
/**
 * 
 * @export
 * @interface ApiV1IntegrationAuthIntegrationAuthIdTeamcityBuildConfigsGet200ResponseBuildConfigsInner
 */
export interface ApiV1IntegrationAuthIntegrationAuthIdTeamcityBuildConfigsGet200ResponseBuildConfigsInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1IntegrationAuthIntegrationAuthIdTeamcityBuildConfigsGet200ResponseBuildConfigsInner
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1IntegrationAuthIntegrationAuthIdTeamcityBuildConfigsGet200ResponseBuildConfigsInner
     */
    'buildConfigId': string;
}
/**
 * 
 * @export
 * @interface ApiV1IntegrationAuthIntegrationAuthIdTeamsGet200Response
 */
export interface ApiV1IntegrationAuthIntegrationAuthIdTeamsGet200Response {
    /**
     * 
     * @type {Array<ApiV1WorkspaceWorkspaceIdUsersGet200ResponseUsersInnerProject>}
     * @memberof ApiV1IntegrationAuthIntegrationAuthIdTeamsGet200Response
     */
    'teams': Array<ApiV1WorkspaceWorkspaceIdUsersGet200ResponseUsersInnerProject>;
}
/**
 * 
 * @export
 * @interface ApiV1IntegrationAuthIntegrationAuthIdVercelBranchesGet200Response
 */
export interface ApiV1IntegrationAuthIntegrationAuthIdVercelBranchesGet200Response {
    /**
     * 
     * @type {Array<string>}
     * @memberof ApiV1IntegrationAuthIntegrationAuthIdVercelBranchesGet200Response
     */
    'branches': Array<string>;
}
/**
 * 
 * @export
 * @interface ApiV1IntegrationAuthIntegrationOptionsGet200Response
 */
export interface ApiV1IntegrationAuthIntegrationOptionsGet200Response {
    /**
     * 
     * @type {Array<ApiV1IntegrationAuthIntegrationOptionsGet200ResponseIntegrationOptionsInner>}
     * @memberof ApiV1IntegrationAuthIntegrationOptionsGet200Response
     */
    'integrationOptions': Array<ApiV1IntegrationAuthIntegrationOptionsGet200ResponseIntegrationOptionsInner>;
}
/**
 * 
 * @export
 * @interface ApiV1IntegrationAuthIntegrationOptionsGet200ResponseIntegrationOptionsInner
 */
export interface ApiV1IntegrationAuthIntegrationOptionsGet200ResponseIntegrationOptionsInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1IntegrationAuthIntegrationOptionsGet200ResponseIntegrationOptionsInner
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1IntegrationAuthIntegrationOptionsGet200ResponseIntegrationOptionsInner
     */
    'slug': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1IntegrationAuthIntegrationOptionsGet200ResponseIntegrationOptionsInner
     */
    'clientSlug'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1IntegrationAuthIntegrationOptionsGet200ResponseIntegrationOptionsInner
     */
    'image': string;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1IntegrationAuthIntegrationOptionsGet200ResponseIntegrationOptionsInner
     */
    'isAvailable'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ApiV1IntegrationAuthIntegrationOptionsGet200ResponseIntegrationOptionsInner
     */
    'type': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1IntegrationAuthIntegrationOptionsGet200ResponseIntegrationOptionsInner
     */
    'clientId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1IntegrationAuthIntegrationOptionsGet200ResponseIntegrationOptionsInner
     */
    'docsLink'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1IntegrationAuthOauthTokenPostRequest
 */
export interface ApiV1IntegrationAuthOauthTokenPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1IntegrationAuthOauthTokenPostRequest
     */
    'workspaceId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1IntegrationAuthOauthTokenPostRequest
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1IntegrationAuthOauthTokenPostRequest
     */
    'integration': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1IntegrationAuthOauthTokenPostRequest
     */
    'url'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1IntegrationIntegrationIdPatchRequest
 */
export interface ApiV1IntegrationIntegrationIdPatchRequest {
    /**
     * The name of the external integration providers app entity that you want to sync secrets with. Used in Netlify, GitHub, Vercel integrations.
     * @type {string}
     * @memberof ApiV1IntegrationIntegrationIdPatchRequest
     */
    'app'?: string;
    /**
     * The ID of the external integration providers app entity that you want to sync secrets with. Used in Netlify, GitHub, Vercel integrations.
     * @type {string}
     * @memberof ApiV1IntegrationIntegrationIdPatchRequest
     */
    'appId'?: string;
    /**
     * Whether the integration should be active or disabled.
     * @type {boolean}
     * @memberof ApiV1IntegrationIntegrationIdPatchRequest
     */
    'isActive': boolean;
    /**
     * The path of the secrets to sync secrets from.
     * @type {string}
     * @memberof ApiV1IntegrationIntegrationIdPatchRequest
     */
    'secretPath'?: string;
    /**
     * The target environment of the integration provider. Used in cloudflare pages, TeamCity, Gitlab integrations.
     * @type {string}
     * @memberof ApiV1IntegrationIntegrationIdPatchRequest
     */
    'targetEnvironment': string;
    /**
     * External integration providers service entity owner. Used in Github.
     * @type {string}
     * @memberof ApiV1IntegrationIntegrationIdPatchRequest
     */
    'owner': string;
    /**
     * The environment to sync secrets from.
     * @type {string}
     * @memberof ApiV1IntegrationIntegrationIdPatchRequest
     */
    'environment': string;
    /**
     * 
     * @type {ApiV1IntegrationIntegrationIdPatchRequestMetadata}
     * @memberof ApiV1IntegrationIntegrationIdPatchRequest
     */
    'metadata'?: ApiV1IntegrationIntegrationIdPatchRequestMetadata;
}
/**
 * 
 * @export
 * @interface ApiV1IntegrationIntegrationIdPatchRequestMetadata
 */
export interface ApiV1IntegrationIntegrationIdPatchRequestMetadata {
    /**
     * The prefix for the saved secret. Used by GCP.
     * @type {string}
     * @memberof ApiV1IntegrationIntegrationIdPatchRequestMetadata
     */
    'secretPrefix'?: string;
    /**
     * The suffix for the saved secret. Used by GCP.
     * @type {string}
     * @memberof ApiV1IntegrationIntegrationIdPatchRequestMetadata
     */
    'secretSuffix'?: string;
    /**
     * Type of syncing behavoir with the integration.
     * @type {string}
     * @memberof ApiV1IntegrationIntegrationIdPatchRequestMetadata
     */
    'initialSyncBehavior'?: string;
    /**
     * The mapping behavior of the integration.
     * @type {string}
     * @memberof ApiV1IntegrationIntegrationIdPatchRequestMetadata
     */
    'mappingBehavior'?: ApiV1IntegrationIntegrationIdPatchRequestMetadataMappingBehaviorEnum;
    /**
     * Used by Render to trigger auto deploy.
     * @type {boolean}
     * @memberof ApiV1IntegrationIntegrationIdPatchRequestMetadata
     */
    'shouldAutoRedeploy'?: boolean;
    /**
     * 
     * @type {ApiV1IntegrationPostRequestMetadataSecretGCPLabel}
     * @memberof ApiV1IntegrationIntegrationIdPatchRequestMetadata
     */
    'secretGCPLabel'?: ApiV1IntegrationPostRequestMetadataSecretGCPLabel;
    /**
     * The tags for AWS secrets.
     * @type {Array<ApiV1AuditLogStreamsIdGet200ResponseAuditLogStreamHeadersInner>}
     * @memberof ApiV1IntegrationIntegrationIdPatchRequestMetadata
     */
    'secretAWSTag'?: Array<ApiV1AuditLogStreamsIdGet200ResponseAuditLogStreamHeadersInner>;
    /**
     * The ID of the encryption key from AWS KMS.
     * @type {string}
     * @memberof ApiV1IntegrationIntegrationIdPatchRequestMetadata
     */
    'kmsKeyId'?: string;
    /**
     * The flag to disable deletion of secrets in AWS Parameter Store.
     * @type {boolean}
     * @memberof ApiV1IntegrationIntegrationIdPatchRequestMetadata
     */
    'shouldDisableDelete'?: boolean;
    /**
     * The flag to enable deletion of secrets
     * @type {boolean}
     * @memberof ApiV1IntegrationIntegrationIdPatchRequestMetadata
     */
    'shouldEnableDelete'?: boolean;
    /**
     * Specifies if the secrets synced from Infisical to Gitlab should be marked as \'Masked\'.
     * @type {boolean}
     * @memberof ApiV1IntegrationIntegrationIdPatchRequestMetadata
     */
    'shouldMaskSecrets'?: boolean;
    /**
     * Specifies if the secrets synced from Infisical to Gitlab should be marked as \'Protected\'.
     * @type {boolean}
     * @memberof ApiV1IntegrationIntegrationIdPatchRequestMetadata
     */
    'shouldProtectSecrets'?: boolean;
}

export const ApiV1IntegrationIntegrationIdPatchRequestMetadataMappingBehaviorEnum = {
    OneToOne: 'one-to-one',
    ManyToOne: 'many-to-one'
} as const;

export type ApiV1IntegrationIntegrationIdPatchRequestMetadataMappingBehaviorEnum = typeof ApiV1IntegrationIntegrationIdPatchRequestMetadataMappingBehaviorEnum[keyof typeof ApiV1IntegrationIntegrationIdPatchRequestMetadataMappingBehaviorEnum];

/**
 * 
 * @export
 * @interface ApiV1IntegrationPost200Response
 */
export interface ApiV1IntegrationPost200Response {
    /**
     * 
     * @type {ApiV1IntegrationPost200ResponseIntegration}
     * @memberof ApiV1IntegrationPost200Response
     */
    'integration': ApiV1IntegrationPost200ResponseIntegration;
}
/**
 * 
 * @export
 * @interface ApiV1IntegrationPost200ResponseIntegration
 */
export interface ApiV1IntegrationPost200ResponseIntegration {
    /**
     * 
     * @type {string}
     * @memberof ApiV1IntegrationPost200ResponseIntegration
     */
    'id': string;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1IntegrationPost200ResponseIntegration
     */
    'isActive': boolean;
    /**
     * 
     * @type {string}
     * @memberof ApiV1IntegrationPost200ResponseIntegration
     */
    'url'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1IntegrationPost200ResponseIntegration
     */
    'app'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1IntegrationPost200ResponseIntegration
     */
    'appId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1IntegrationPost200ResponseIntegration
     */
    'targetEnvironment'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1IntegrationPost200ResponseIntegration
     */
    'targetEnvironmentId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1IntegrationPost200ResponseIntegration
     */
    'targetService'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1IntegrationPost200ResponseIntegration
     */
    'targetServiceId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1IntegrationPost200ResponseIntegration
     */
    'owner'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1IntegrationPost200ResponseIntegration
     */
    'path'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1IntegrationPost200ResponseIntegration
     */
    'region'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1IntegrationPost200ResponseIntegration
     */
    'scope'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1IntegrationPost200ResponseIntegration
     */
    'integration': string;
    /**
     * 
     * @type {any}
     * @memberof ApiV1IntegrationPost200ResponseIntegration
     */
    'metadata'?: any | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1IntegrationPost200ResponseIntegration
     */
    'integrationAuthId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1IntegrationPost200ResponseIntegration
     */
    'envId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1IntegrationPost200ResponseIntegration
     */
    'secretPath'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1IntegrationPost200ResponseIntegration
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1IntegrationPost200ResponseIntegration
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1IntegrationPost200ResponseIntegration
     */
    'lastUsed'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1IntegrationPost200ResponseIntegration
     */
    'isSynced'?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1IntegrationPost200ResponseIntegration
     */
    'syncMessage'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1IntegrationPost200ResponseIntegration
     */
    'lastSyncJobId'?: string | null;
}
/**
 * 
 * @export
 * @interface ApiV1IntegrationPostRequest
 */
export interface ApiV1IntegrationPostRequest {
    /**
     * The ID of the integration auth object to link with integration.
     * @type {string}
     * @memberof ApiV1IntegrationPostRequest
     */
    'integrationAuthId': string;
    /**
     * The name of the external integration providers app entity that you want to sync secrets with. Used in Netlify, GitHub, Vercel integrations.
     * @type {string}
     * @memberof ApiV1IntegrationPostRequest
     */
    'app'?: string;
    /**
     * Whether the integration should be active or disabled.
     * @type {boolean}
     * @memberof ApiV1IntegrationPostRequest
     */
    'isActive'?: boolean;
    /**
     * The ID of the external integration providers app entity that you want to sync secrets with. Used in Netlify, GitHub, Vercel integrations.
     * @type {string}
     * @memberof ApiV1IntegrationPostRequest
     */
    'appId'?: string;
    /**
     * The path of the secrets to sync secrets from.
     * @type {string}
     * @memberof ApiV1IntegrationPostRequest
     */
    'secretPath'?: string;
    /**
     * The environment to sync secret from.
     * @type {string}
     * @memberof ApiV1IntegrationPostRequest
     */
    'sourceEnvironment': string;
    /**
     * The target environment of the integration provider. Used in cloudflare pages, TeamCity, Gitlab integrations.
     * @type {string}
     * @memberof ApiV1IntegrationPostRequest
     */
    'targetEnvironment'?: string;
    /**
     * The target environment id of the integration provider. Used in cloudflare pages, teamcity, gitlab integrations.
     * @type {string}
     * @memberof ApiV1IntegrationPostRequest
     */
    'targetEnvironmentId'?: string;
    /**
     * The service based grouping identifier of the external provider. Used in Terraform cloud, Checkly, Railway and NorthFlank
     * @type {string}
     * @memberof ApiV1IntegrationPostRequest
     */
    'targetService'?: string;
    /**
     * The service based grouping identifier ID of the external provider. Used in Terraform cloud, Checkly, Railway and NorthFlank
     * @type {string}
     * @memberof ApiV1IntegrationPostRequest
     */
    'targetServiceId'?: string;
    /**
     * External integration providers service entity owner. Used in Github.
     * @type {string}
     * @memberof ApiV1IntegrationPostRequest
     */
    'owner'?: string;
    /**
     * The self-hosted URL of the platform to integrate with
     * @type {string}
     * @memberof ApiV1IntegrationPostRequest
     */
    'url'?: string;
    /**
     * Path to save the synced secrets. Used by Gitlab, AWS Parameter Store, Vault
     * @type {string}
     * @memberof ApiV1IntegrationPostRequest
     */
    'path'?: string;
    /**
     * AWS region to sync secrets to.
     * @type {string}
     * @memberof ApiV1IntegrationPostRequest
     */
    'region'?: string;
    /**
     * Scope of the provider. Used by Github, Qovery
     * @type {string}
     * @memberof ApiV1IntegrationPostRequest
     */
    'scope'?: string;
    /**
     * 
     * @type {ApiV1IntegrationPostRequestMetadata}
     * @memberof ApiV1IntegrationPostRequest
     */
    'metadata'?: ApiV1IntegrationPostRequestMetadata;
}
/**
 * 
 * @export
 * @interface ApiV1IntegrationPostRequestMetadata
 */
export interface ApiV1IntegrationPostRequestMetadata {
    /**
     * The prefix for the saved secret. Used by GCP.
     * @type {string}
     * @memberof ApiV1IntegrationPostRequestMetadata
     */
    'secretPrefix'?: string;
    /**
     * The suffix for the saved secret. Used by GCP.
     * @type {string}
     * @memberof ApiV1IntegrationPostRequestMetadata
     */
    'secretSuffix'?: string;
    /**
     * Type of syncing behavoir with the integration.
     * @type {string}
     * @memberof ApiV1IntegrationPostRequestMetadata
     */
    'initialSyncBehavior'?: string;
    /**
     * The mapping behavior of the integration.
     * @type {string}
     * @memberof ApiV1IntegrationPostRequestMetadata
     */
    'mappingBehavior'?: ApiV1IntegrationPostRequestMetadataMappingBehaviorEnum;
    /**
     * Used by Render to trigger auto deploy.
     * @type {boolean}
     * @memberof ApiV1IntegrationPostRequestMetadata
     */
    'shouldAutoRedeploy'?: boolean;
    /**
     * 
     * @type {ApiV1IntegrationPostRequestMetadataSecretGCPLabel}
     * @memberof ApiV1IntegrationPostRequestMetadata
     */
    'secretGCPLabel'?: ApiV1IntegrationPostRequestMetadataSecretGCPLabel;
    /**
     * The tags for AWS secrets.
     * @type {Array<ApiV1AuditLogStreamsIdGet200ResponseAuditLogStreamHeadersInner>}
     * @memberof ApiV1IntegrationPostRequestMetadata
     */
    'secretAWSTag'?: Array<ApiV1AuditLogStreamsIdGet200ResponseAuditLogStreamHeadersInner>;
    /**
     * The ID of the encryption key from AWS KMS.
     * @type {string}
     * @memberof ApiV1IntegrationPostRequestMetadata
     */
    'kmsKeyId'?: string;
    /**
     * The flag to disable deletion of secrets in AWS Parameter Store.
     * @type {boolean}
     * @memberof ApiV1IntegrationPostRequestMetadata
     */
    'shouldDisableDelete'?: boolean;
    /**
     * The flag to enable deletion of secrets
     * @type {boolean}
     * @memberof ApiV1IntegrationPostRequestMetadata
     */
    'shouldEnableDelete'?: boolean;
    /**
     * Specifies if the secrets synced from Infisical to Gitlab should be marked as \'Masked\'.
     * @type {boolean}
     * @memberof ApiV1IntegrationPostRequestMetadata
     */
    'shouldMaskSecrets'?: boolean;
    /**
     * Specifies if the secrets synced from Infisical to Gitlab should be marked as \'Protected\'.
     * @type {boolean}
     * @memberof ApiV1IntegrationPostRequestMetadata
     */
    'shouldProtectSecrets'?: boolean;
}

export const ApiV1IntegrationPostRequestMetadataMappingBehaviorEnum = {
    OneToOne: 'one-to-one',
    ManyToOne: 'many-to-one'
} as const;

export type ApiV1IntegrationPostRequestMetadataMappingBehaviorEnum = typeof ApiV1IntegrationPostRequestMetadataMappingBehaviorEnum[keyof typeof ApiV1IntegrationPostRequestMetadataMappingBehaviorEnum];

/**
 * The label for GCP secrets.
 * @export
 * @interface ApiV1IntegrationPostRequestMetadataSecretGCPLabel
 */
export interface ApiV1IntegrationPostRequestMetadataSecretGCPLabel {
    /**
     * 
     * @type {string}
     * @memberof ApiV1IntegrationPostRequestMetadataSecretGCPLabel
     */
    'labelName': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1IntegrationPostRequestMetadataSecretGCPLabel
     */
    'labelValue': string;
}
/**
 * 
 * @export
 * @interface ApiV1InviteOrgSignupPost200Response
 */
export interface ApiV1InviteOrgSignupPost200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiV1InviteOrgSignupPost200Response
     */
    'message': string;
    /**
     * 
     * @type {Array<ApiV1InviteOrgSignupPost200ResponseCompleteInviteLinksInner>}
     * @memberof ApiV1InviteOrgSignupPost200Response
     */
    'completeInviteLinks'?: Array<ApiV1InviteOrgSignupPost200ResponseCompleteInviteLinksInner>;
}
/**
 * 
 * @export
 * @interface ApiV1InviteOrgSignupPost200ResponseCompleteInviteLinksInner
 */
export interface ApiV1InviteOrgSignupPost200ResponseCompleteInviteLinksInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1InviteOrgSignupPost200ResponseCompleteInviteLinksInner
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1InviteOrgSignupPost200ResponseCompleteInviteLinksInner
     */
    'link': string;
}
/**
 * 
 * @export
 * @interface ApiV1InviteOrgSignupPostRequest
 */
export interface ApiV1InviteOrgSignupPostRequest {
    /**
     * 
     * @type {Array<string>}
     * @memberof ApiV1InviteOrgSignupPostRequest
     */
    'inviteeEmails': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ApiV1InviteOrgSignupPostRequest
     */
    'organizationId': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ApiV1InviteOrgSignupPostRequest
     */
    'projectIds'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ApiV1InviteOrgSignupPostRequest
     */
    'projectRoleSlug'?: ApiV1InviteOrgSignupPostRequestProjectRoleSlugEnum;
    /**
     * 
     * @type {string}
     * @memberof ApiV1InviteOrgSignupPostRequest
     */
    'organizationRoleSlug': ApiV1InviteOrgSignupPostRequestOrganizationRoleSlugEnum;
}

export const ApiV1InviteOrgSignupPostRequestProjectRoleSlugEnum = {
    Admin: 'admin',
    Member: 'member',
    Custom: 'custom',
    Viewer: 'viewer',
    NoAccess: 'no-access'
} as const;

export type ApiV1InviteOrgSignupPostRequestProjectRoleSlugEnum = typeof ApiV1InviteOrgSignupPostRequestProjectRoleSlugEnum[keyof typeof ApiV1InviteOrgSignupPostRequestProjectRoleSlugEnum];
export const ApiV1InviteOrgSignupPostRequestOrganizationRoleSlugEnum = {
    Admin: 'admin',
    Member: 'member',
    NoAccess: 'no-access',
    Custom: 'custom'
} as const;

export type ApiV1InviteOrgSignupPostRequestOrganizationRoleSlugEnum = typeof ApiV1InviteOrgSignupPostRequestOrganizationRoleSlugEnum[keyof typeof ApiV1InviteOrgSignupPostRequestOrganizationRoleSlugEnum];

/**
 * 
 * @export
 * @interface ApiV1InviteOrgVerifyPost200Response
 */
export interface ApiV1InviteOrgVerifyPost200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiV1InviteOrgVerifyPost200Response
     */
    'message': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1InviteOrgVerifyPost200Response
     */
    'token'?: string;
    /**
     * 
     * @type {ApiV1PasswordEmailPasswordResetVerifyPost200ResponseUser}
     * @memberof ApiV1InviteOrgVerifyPost200Response
     */
    'user': ApiV1PasswordEmailPasswordResetVerifyPost200ResponseUser;
}
/**
 * 
 * @export
 * @interface ApiV1InviteOrgVerifyPostRequest
 */
export interface ApiV1InviteOrgVerifyPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1InviteOrgVerifyPostRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1InviteOrgVerifyPostRequest
     */
    'organizationId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1InviteOrgVerifyPostRequest
     */
    'code': string;
}
/**
 * 
 * @export
 * @interface ApiV1LdapConfigConfigIdGroupMapsGet200ResponseInner
 */
export interface ApiV1LdapConfigConfigIdGroupMapsGet200ResponseInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1LdapConfigConfigIdGroupMapsGet200ResponseInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1LdapConfigConfigIdGroupMapsGet200ResponseInner
     */
    'ldapConfigId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1LdapConfigConfigIdGroupMapsGet200ResponseInner
     */
    'ldapGroupCN': string;
    /**
     * 
     * @type {ApiV1SecretApprovalsGet200ResponseApprovalsInnerEnvironment}
     * @memberof ApiV1LdapConfigConfigIdGroupMapsGet200ResponseInner
     */
    'group': ApiV1SecretApprovalsGet200ResponseApprovalsInnerEnvironment;
}
/**
 * 
 * @export
 * @interface ApiV1LdapConfigConfigIdGroupMapsPost200Response
 */
export interface ApiV1LdapConfigConfigIdGroupMapsPost200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiV1LdapConfigConfigIdGroupMapsPost200Response
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1LdapConfigConfigIdGroupMapsPost200Response
     */
    'ldapConfigId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1LdapConfigConfigIdGroupMapsPost200Response
     */
    'ldapGroupCN': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1LdapConfigConfigIdGroupMapsPost200Response
     */
    'groupId': string;
}
/**
 * 
 * @export
 * @interface ApiV1LdapConfigConfigIdGroupMapsPostRequest
 */
export interface ApiV1LdapConfigConfigIdGroupMapsPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1LdapConfigConfigIdGroupMapsPostRequest
     */
    'ldapGroupCN': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1LdapConfigConfigIdGroupMapsPostRequest
     */
    'groupSlug': string;
}
/**
 * 
 * @export
 * @interface ApiV1LdapConfigGet200Response
 */
export interface ApiV1LdapConfigGet200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiV1LdapConfigGet200Response
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1LdapConfigGet200Response
     */
    'organization': string;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1LdapConfigGet200Response
     */
    'isActive': boolean;
    /**
     * 
     * @type {string}
     * @memberof ApiV1LdapConfigGet200Response
     */
    'url': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1LdapConfigGet200Response
     */
    'bindDN': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1LdapConfigGet200Response
     */
    'bindPass': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1LdapConfigGet200Response
     */
    'uniqueUserAttribute': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1LdapConfigGet200Response
     */
    'searchBase': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1LdapConfigGet200Response
     */
    'searchFilter': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1LdapConfigGet200Response
     */
    'groupSearchBase': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1LdapConfigGet200Response
     */
    'groupSearchFilter': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1LdapConfigGet200Response
     */
    'caCert': string;
}
/**
 * 
 * @export
 * @interface ApiV1LdapConfigPatchRequest
 */
export interface ApiV1LdapConfigPatchRequest {
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1LdapConfigPatchRequest
     */
    'isActive'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ApiV1LdapConfigPatchRequest
     */
    'url'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1LdapConfigPatchRequest
     */
    'bindDN'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1LdapConfigPatchRequest
     */
    'bindPass'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1LdapConfigPatchRequest
     */
    'uniqueUserAttribute'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1LdapConfigPatchRequest
     */
    'searchBase'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1LdapConfigPatchRequest
     */
    'searchFilter'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1LdapConfigPatchRequest
     */
    'groupSearchBase'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1LdapConfigPatchRequest
     */
    'groupSearchFilter'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1LdapConfigPatchRequest
     */
    'caCert'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1LdapConfigPatchRequest
     */
    'organizationId': string;
}
/**
 * 
 * @export
 * @interface ApiV1LdapConfigPost200Response
 */
export interface ApiV1LdapConfigPost200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiV1LdapConfigPost200Response
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1LdapConfigPost200Response
     */
    'orgId': string;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1LdapConfigPost200Response
     */
    'isActive': boolean;
    /**
     * 
     * @type {string}
     * @memberof ApiV1LdapConfigPost200Response
     */
    'url': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1LdapConfigPost200Response
     */
    'encryptedBindDN': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1LdapConfigPost200Response
     */
    'bindDNIV': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1LdapConfigPost200Response
     */
    'bindDNTag': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1LdapConfigPost200Response
     */
    'encryptedBindPass': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1LdapConfigPost200Response
     */
    'bindPassIV': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1LdapConfigPost200Response
     */
    'bindPassTag': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1LdapConfigPost200Response
     */
    'searchBase': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1LdapConfigPost200Response
     */
    'encryptedCACert': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1LdapConfigPost200Response
     */
    'caCertIV': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1LdapConfigPost200Response
     */
    'caCertTag': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1LdapConfigPost200Response
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1LdapConfigPost200Response
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1LdapConfigPost200Response
     */
    'groupSearchBase'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1LdapConfigPost200Response
     */
    'groupSearchFilter'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1LdapConfigPost200Response
     */
    'searchFilter'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1LdapConfigPost200Response
     */
    'uniqueUserAttribute'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1LdapConfigPostRequest
 */
export interface ApiV1LdapConfigPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1LdapConfigPostRequest
     */
    'organizationId': string;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1LdapConfigPostRequest
     */
    'isActive': boolean;
    /**
     * 
     * @type {string}
     * @memberof ApiV1LdapConfigPostRequest
     */
    'url': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1LdapConfigPostRequest
     */
    'bindDN': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1LdapConfigPostRequest
     */
    'bindPass': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1LdapConfigPostRequest
     */
    'uniqueUserAttribute'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1LdapConfigPostRequest
     */
    'searchBase': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1LdapConfigPostRequest
     */
    'searchFilter'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1LdapConfigPostRequest
     */
    'groupSearchBase': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1LdapConfigPostRequest
     */
    'groupSearchFilter'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1LdapConfigPostRequest
     */
    'caCert'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1LdapLoginPostRequest
 */
export interface ApiV1LdapLoginPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1LdapLoginPostRequest
     */
    'organizationSlug': string;
}
/**
 * 
 * @export
 * @interface ApiV1OrganizationAdminProjectsGet200Response
 */
export interface ApiV1OrganizationAdminProjectsGet200Response {
    /**
     * 
     * @type {Array<ApiV1OrganizationAdminProjectsGet200ResponseProjectsInner>}
     * @memberof ApiV1OrganizationAdminProjectsGet200Response
     */
    'projects': Array<ApiV1OrganizationAdminProjectsGet200ResponseProjectsInner>;
    /**
     * 
     * @type {number}
     * @memberof ApiV1OrganizationAdminProjectsGet200Response
     */
    'count': number;
}
/**
 * 
 * @export
 * @interface ApiV1OrganizationAdminProjectsGet200ResponseProjectsInner
 */
export interface ApiV1OrganizationAdminProjectsGet200ResponseProjectsInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationAdminProjectsGet200ResponseProjectsInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationAdminProjectsGet200ResponseProjectsInner
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationAdminProjectsGet200ResponseProjectsInner
     */
    'slug': string;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1OrganizationAdminProjectsGet200ResponseProjectsInner
     */
    'autoCapitalization'?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationAdminProjectsGet200ResponseProjectsInner
     */
    'orgId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationAdminProjectsGet200ResponseProjectsInner
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationAdminProjectsGet200ResponseProjectsInner
     */
    'updatedAt': string;
    /**
     * 
     * @type {number}
     * @memberof ApiV1OrganizationAdminProjectsGet200ResponseProjectsInner
     */
    'version'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationAdminProjectsGet200ResponseProjectsInner
     */
    'upgradeStatus'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ApiV1OrganizationAdminProjectsGet200ResponseProjectsInner
     */
    'pitVersionLimit'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationAdminProjectsGet200ResponseProjectsInner
     */
    'kmsCertificateKeyId'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ApiV1OrganizationAdminProjectsGet200ResponseProjectsInner
     */
    'auditLogsRetentionDays'?: number | null;
}
/**
 * 
 * @export
 * @interface ApiV1OrganizationAdminProjectsProjectIdGrantAdminAccessPost200Response
 */
export interface ApiV1OrganizationAdminProjectsProjectIdGrantAdminAccessPost200Response {
    /**
     * 
     * @type {ApiV1OrganizationAdminProjectsProjectIdGrantAdminAccessPost200ResponseMembership}
     * @memberof ApiV1OrganizationAdminProjectsProjectIdGrantAdminAccessPost200Response
     */
    'membership': ApiV1OrganizationAdminProjectsProjectIdGrantAdminAccessPost200ResponseMembership;
}
/**
 * 
 * @export
 * @interface ApiV1OrganizationAdminProjectsProjectIdGrantAdminAccessPost200ResponseMembership
 */
export interface ApiV1OrganizationAdminProjectsProjectIdGrantAdminAccessPost200ResponseMembership {
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationAdminProjectsProjectIdGrantAdminAccessPost200ResponseMembership
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationAdminProjectsProjectIdGrantAdminAccessPost200ResponseMembership
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationAdminProjectsProjectIdGrantAdminAccessPost200ResponseMembership
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationAdminProjectsProjectIdGrantAdminAccessPost200ResponseMembership
     */
    'userId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationAdminProjectsProjectIdGrantAdminAccessPost200ResponseMembership
     */
    'projectId': string;
}
/**
 * 
 * @export
 * @interface ApiV1OrganizationGet200Response
 */
export interface ApiV1OrganizationGet200Response {
    /**
     * 
     * @type {Array<ApiV1OrganizationGet200ResponseOrganizationsInner>}
     * @memberof ApiV1OrganizationGet200Response
     */
    'organizations': Array<ApiV1OrganizationGet200ResponseOrganizationsInner>;
}
/**
 * 
 * @export
 * @interface ApiV1OrganizationGet200ResponseOrganizationsInner
 */
export interface ApiV1OrganizationGet200ResponseOrganizationsInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationGet200ResponseOrganizationsInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationGet200ResponseOrganizationsInner
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationGet200ResponseOrganizationsInner
     */
    'customerId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationGet200ResponseOrganizationsInner
     */
    'slug': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationGet200ResponseOrganizationsInner
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationGet200ResponseOrganizationsInner
     */
    'updatedAt': string;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1OrganizationGet200ResponseOrganizationsInner
     */
    'authEnforced'?: boolean | null;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1OrganizationGet200ResponseOrganizationsInner
     */
    'scimEnabled'?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationGet200ResponseOrganizationsInner
     */
    'kmsDefaultKeyId'?: string | null;
    /**
     * 
     * @type {any}
     * @memberof ApiV1OrganizationGet200ResponseOrganizationsInner
     */
    'kmsEncryptedDataKey'?: any | null;
}
/**
 * 
 * @export
 * @interface ApiV1OrganizationOrganizationIdGet200Response
 */
export interface ApiV1OrganizationOrganizationIdGet200Response {
    /**
     * 
     * @type {ApiV1OrganizationGet200ResponseOrganizationsInner}
     * @memberof ApiV1OrganizationOrganizationIdGet200Response
     */
    'organization': ApiV1OrganizationGet200ResponseOrganizationsInner;
}
/**
 * 
 * @export
 * @interface ApiV1OrganizationOrganizationIdGroupsGet200Response
 */
export interface ApiV1OrganizationOrganizationIdGroupsGet200Response {
    /**
     * 
     * @type {Array<ApiV1OrganizationOrganizationIdGroupsGet200ResponseGroupsInner>}
     * @memberof ApiV1OrganizationOrganizationIdGroupsGet200Response
     */
    'groups': Array<ApiV1OrganizationOrganizationIdGroupsGet200ResponseGroupsInner>;
}
/**
 * 
 * @export
 * @interface ApiV1OrganizationOrganizationIdGroupsGet200ResponseGroupsInner
 */
export interface ApiV1OrganizationOrganizationIdGroupsGet200ResponseGroupsInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationOrganizationIdGroupsGet200ResponseGroupsInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationOrganizationIdGroupsGet200ResponseGroupsInner
     */
    'orgId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationOrganizationIdGroupsGet200ResponseGroupsInner
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationOrganizationIdGroupsGet200ResponseGroupsInner
     */
    'slug': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationOrganizationIdGroupsGet200ResponseGroupsInner
     */
    'role': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationOrganizationIdGroupsGet200ResponseGroupsInner
     */
    'roleId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationOrganizationIdGroupsGet200ResponseGroupsInner
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationOrganizationIdGroupsGet200ResponseGroupsInner
     */
    'updatedAt': string;
    /**
     * 
     * @type {ApiV1OrganizationOrganizationIdGroupsGet200ResponseGroupsInnerCustomRole}
     * @memberof ApiV1OrganizationOrganizationIdGroupsGet200ResponseGroupsInner
     */
    'customRole'?: ApiV1OrganizationOrganizationIdGroupsGet200ResponseGroupsInnerCustomRole;
}
/**
 * 
 * @export
 * @interface ApiV1OrganizationOrganizationIdGroupsGet200ResponseGroupsInnerCustomRole
 */
export interface ApiV1OrganizationOrganizationIdGroupsGet200ResponseGroupsInnerCustomRole {
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationOrganizationIdGroupsGet200ResponseGroupsInnerCustomRole
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationOrganizationIdGroupsGet200ResponseGroupsInnerCustomRole
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationOrganizationIdGroupsGet200ResponseGroupsInnerCustomRole
     */
    'slug': string;
    /**
     * 
     * @type {any}
     * @memberof ApiV1OrganizationOrganizationIdGroupsGet200ResponseGroupsInnerCustomRole
     */
    'permissions'?: any;
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationOrganizationIdGroupsGet200ResponseGroupsInnerCustomRole
     */
    'description'?: string | null;
}
/**
 * 
 * @export
 * @interface ApiV1OrganizationOrganizationIdIncidentContactOrgGet200Response
 */
export interface ApiV1OrganizationOrganizationIdIncidentContactOrgGet200Response {
    /**
     * 
     * @type {Array<ApiV1OrganizationOrganizationIdIncidentContactOrgGet200ResponseIncidentContactsOrgInner>}
     * @memberof ApiV1OrganizationOrganizationIdIncidentContactOrgGet200Response
     */
    'incidentContactsOrg': Array<ApiV1OrganizationOrganizationIdIncidentContactOrgGet200ResponseIncidentContactsOrgInner>;
}
/**
 * 
 * @export
 * @interface ApiV1OrganizationOrganizationIdIncidentContactOrgGet200ResponseIncidentContactsOrgInner
 */
export interface ApiV1OrganizationOrganizationIdIncidentContactOrgGet200ResponseIncidentContactsOrgInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationOrganizationIdIncidentContactOrgGet200ResponseIncidentContactsOrgInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationOrganizationIdIncidentContactOrgGet200ResponseIncidentContactsOrgInner
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationOrganizationIdIncidentContactOrgGet200ResponseIncidentContactsOrgInner
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationOrganizationIdIncidentContactOrgGet200ResponseIncidentContactsOrgInner
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationOrganizationIdIncidentContactOrgGet200ResponseIncidentContactsOrgInner
     */
    'orgId': string;
}
/**
 * 
 * @export
 * @interface ApiV1OrganizationOrganizationIdIncidentContactOrgPost200Response
 */
export interface ApiV1OrganizationOrganizationIdIncidentContactOrgPost200Response {
    /**
     * 
     * @type {ApiV1OrganizationOrganizationIdIncidentContactOrgGet200ResponseIncidentContactsOrgInner}
     * @memberof ApiV1OrganizationOrganizationIdIncidentContactOrgPost200Response
     */
    'incidentContactsOrg': ApiV1OrganizationOrganizationIdIncidentContactOrgGet200ResponseIncidentContactsOrgInner;
}
/**
 * 
 * @export
 * @interface ApiV1OrganizationOrganizationIdPatch200Response
 */
export interface ApiV1OrganizationOrganizationIdPatch200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationOrganizationIdPatch200Response
     */
    'message': string;
    /**
     * 
     * @type {ApiV1OrganizationGet200ResponseOrganizationsInner}
     * @memberof ApiV1OrganizationOrganizationIdPatch200Response
     */
    'organization': ApiV1OrganizationGet200ResponseOrganizationsInner;
}
/**
 * 
 * @export
 * @interface ApiV1OrganizationOrganizationIdPatchRequest
 */
export interface ApiV1OrganizationOrganizationIdPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationOrganizationIdPatchRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationOrganizationIdPatchRequest
     */
    'slug'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1OrganizationOrganizationIdPatchRequest
     */
    'authEnforced'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1OrganizationOrganizationIdPatchRequest
     */
    'scimEnabled'?: boolean;
}
/**
 * 
 * @export
 * @interface ApiV1OrganizationOrganizationIdPermissionsGet200Response
 */
export interface ApiV1OrganizationOrganizationIdPermissionsGet200Response {
    /**
     * 
     * @type {ApiV1OrganizationOrganizationIdPermissionsGet200ResponseMembership}
     * @memberof ApiV1OrganizationOrganizationIdPermissionsGet200Response
     */
    'membership': ApiV1OrganizationOrganizationIdPermissionsGet200ResponseMembership;
    /**
     * 
     * @type {Array<string>}
     * @memberof ApiV1OrganizationOrganizationIdPermissionsGet200Response
     */
    'permissions': Array<string>;
}
/**
 * 
 * @export
 * @interface ApiV1OrganizationOrganizationIdPermissionsGet200ResponseMembership
 */
export interface ApiV1OrganizationOrganizationIdPermissionsGet200ResponseMembership {
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationOrganizationIdPermissionsGet200ResponseMembership
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationOrganizationIdPermissionsGet200ResponseMembership
     */
    'role': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationOrganizationIdPermissionsGet200ResponseMembership
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationOrganizationIdPermissionsGet200ResponseMembership
     */
    'inviteEmail'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationOrganizationIdPermissionsGet200ResponseMembership
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationOrganizationIdPermissionsGet200ResponseMembership
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationOrganizationIdPermissionsGet200ResponseMembership
     */
    'userId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationOrganizationIdPermissionsGet200ResponseMembership
     */
    'orgId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationOrganizationIdPermissionsGet200ResponseMembership
     */
    'roleId'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ApiV1OrganizationOrganizationIdPermissionsGet200ResponseMembership
     */
    'projectFavorites'?: Array<string> | null;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1OrganizationOrganizationIdPermissionsGet200ResponseMembership
     */
    'isActive'?: boolean;
}
/**
 * 
 * @export
 * @interface ApiV1OrganizationOrganizationIdRolesGet200Response
 */
export interface ApiV1OrganizationOrganizationIdRolesGet200Response {
    /**
     * 
     * @type {ApiV1OrganizationOrganizationIdRolesGet200ResponseData}
     * @memberof ApiV1OrganizationOrganizationIdRolesGet200Response
     */
    'data': ApiV1OrganizationOrganizationIdRolesGet200ResponseData;
}
/**
 * 
 * @export
 * @interface ApiV1OrganizationOrganizationIdRolesGet200ResponseData
 */
export interface ApiV1OrganizationOrganizationIdRolesGet200ResponseData {
    /**
     * 
     * @type {Array<ApiV1OrganizationOrganizationIdRolesGet200ResponseDataRolesInner>}
     * @memberof ApiV1OrganizationOrganizationIdRolesGet200ResponseData
     */
    'roles': Array<ApiV1OrganizationOrganizationIdRolesGet200ResponseDataRolesInner>;
}
/**
 * 
 * @export
 * @interface ApiV1OrganizationOrganizationIdRolesGet200ResponseDataRolesInner
 */
export interface ApiV1OrganizationOrganizationIdRolesGet200ResponseDataRolesInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationOrganizationIdRolesGet200ResponseDataRolesInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationOrganizationIdRolesGet200ResponseDataRolesInner
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationOrganizationIdRolesGet200ResponseDataRolesInner
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationOrganizationIdRolesGet200ResponseDataRolesInner
     */
    'slug': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationOrganizationIdRolesGet200ResponseDataRolesInner
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationOrganizationIdRolesGet200ResponseDataRolesInner
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationOrganizationIdRolesGet200ResponseDataRolesInner
     */
    'orgId': string;
    /**
     * 
     * @type {any}
     * @memberof ApiV1OrganizationOrganizationIdRolesGet200ResponseDataRolesInner
     */
    'permissions'?: any;
}
/**
 * 
 * @export
 * @interface ApiV1OrganizationOrganizationIdRolesPost200Response
 */
export interface ApiV1OrganizationOrganizationIdRolesPost200Response {
    /**
     * 
     * @type {ApiV1OrganizationOrganizationIdRolesPost200ResponseRole}
     * @memberof ApiV1OrganizationOrganizationIdRolesPost200Response
     */
    'role': ApiV1OrganizationOrganizationIdRolesPost200ResponseRole;
}
/**
 * 
 * @export
 * @interface ApiV1OrganizationOrganizationIdRolesPost200ResponseRole
 */
export interface ApiV1OrganizationOrganizationIdRolesPost200ResponseRole {
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationOrganizationIdRolesPost200ResponseRole
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationOrganizationIdRolesPost200ResponseRole
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationOrganizationIdRolesPost200ResponseRole
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationOrganizationIdRolesPost200ResponseRole
     */
    'slug': string;
    /**
     * 
     * @type {any}
     * @memberof ApiV1OrganizationOrganizationIdRolesPost200ResponseRole
     */
    'permissions'?: any;
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationOrganizationIdRolesPost200ResponseRole
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationOrganizationIdRolesPost200ResponseRole
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationOrganizationIdRolesPost200ResponseRole
     */
    'orgId': string;
}
/**
 * 
 * @export
 * @interface ApiV1OrganizationOrganizationIdRolesPostRequest
 */
export interface ApiV1OrganizationOrganizationIdRolesPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationOrganizationIdRolesPostRequest
     */
    'slug': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationOrganizationIdRolesPostRequest
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationOrganizationIdRolesPostRequest
     */
    'description'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ApiV1OrganizationOrganizationIdRolesPostRequest
     */
    'permissions': Array<string>;
}
/**
 * 
 * @export
 * @interface ApiV1OrganizationOrganizationIdRolesRoleIdPatchRequest
 */
export interface ApiV1OrganizationOrganizationIdRolesRoleIdPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationOrganizationIdRolesRoleIdPatchRequest
     */
    'slug': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationOrganizationIdRolesRoleIdPatchRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationOrganizationIdRolesRoleIdPatchRequest
     */
    'description'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ApiV1OrganizationOrganizationIdRolesRoleIdPatchRequest
     */
    'permissions'?: Array<string>;
}
/**
 * 
 * @export
 * @interface ApiV1OrganizationOrganizationIdUsersGet200Response
 */
export interface ApiV1OrganizationOrganizationIdUsersGet200Response {
    /**
     * 
     * @type {Array<ApiV1OrganizationOrganizationIdUsersGet200ResponseUsersInner>}
     * @memberof ApiV1OrganizationOrganizationIdUsersGet200Response
     */
    'users': Array<ApiV1OrganizationOrganizationIdUsersGet200ResponseUsersInner>;
}
/**
 * 
 * @export
 * @interface ApiV1OrganizationOrganizationIdUsersGet200ResponseUsersInner
 */
export interface ApiV1OrganizationOrganizationIdUsersGet200ResponseUsersInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationOrganizationIdUsersGet200ResponseUsersInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationOrganizationIdUsersGet200ResponseUsersInner
     */
    'role': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationOrganizationIdUsersGet200ResponseUsersInner
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationOrganizationIdUsersGet200ResponseUsersInner
     */
    'inviteEmail'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationOrganizationIdUsersGet200ResponseUsersInner
     */
    'userId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationOrganizationIdUsersGet200ResponseUsersInner
     */
    'orgId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationOrganizationIdUsersGet200ResponseUsersInner
     */
    'roleId'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ApiV1OrganizationOrganizationIdUsersGet200ResponseUsersInner
     */
    'projectFavorites'?: Array<string> | null;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1OrganizationOrganizationIdUsersGet200ResponseUsersInner
     */
    'isActive'?: boolean;
    /**
     * 
     * @type {ApiV1OrganizationOrganizationIdUsersGet200ResponseUsersInnerUser}
     * @memberof ApiV1OrganizationOrganizationIdUsersGet200ResponseUsersInner
     */
    'user': ApiV1OrganizationOrganizationIdUsersGet200ResponseUsersInnerUser;
}
/**
 * 
 * @export
 * @interface ApiV1OrganizationOrganizationIdUsersGet200ResponseUsersInnerUser
 */
export interface ApiV1OrganizationOrganizationIdUsersGet200ResponseUsersInnerUser {
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationOrganizationIdUsersGet200ResponseUsersInnerUser
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationOrganizationIdUsersGet200ResponseUsersInnerUser
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationOrganizationIdUsersGet200ResponseUsersInnerUser
     */
    'firstName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationOrganizationIdUsersGet200ResponseUsersInnerUser
     */
    'lastName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationOrganizationIdUsersGet200ResponseUsersInnerUser
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationOrganizationIdUsersGet200ResponseUsersInnerUser
     */
    'publicKey': string | null;
}
/**
 * 
 * @export
 * @interface ApiV1OrganizationsOrganizationIdBillingDetailsPatchRequest
 */
export interface ApiV1OrganizationsOrganizationIdBillingDetailsPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationsOrganizationIdBillingDetailsPatchRequest
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationsOrganizationIdBillingDetailsPatchRequest
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1OrganizationsOrganizationIdBillingDetailsPaymentMethodsPostRequest
 */
export interface ApiV1OrganizationsOrganizationIdBillingDetailsPaymentMethodsPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationsOrganizationIdBillingDetailsPaymentMethodsPostRequest
     */
    'success_url': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationsOrganizationIdBillingDetailsPaymentMethodsPostRequest
     */
    'cancel_url': string;
}
/**
 * 
 * @export
 * @interface ApiV1OrganizationsOrganizationIdBillingDetailsTaxIdsPostRequest
 */
export interface ApiV1OrganizationsOrganizationIdBillingDetailsTaxIdsPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationsOrganizationIdBillingDetailsTaxIdsPostRequest
     */
    'type': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationsOrganizationIdBillingDetailsTaxIdsPostRequest
     */
    'value': string;
}
/**
 * 
 * @export
 * @interface ApiV1OrganizationsOrganizationIdPlanGet200Response
 */
export interface ApiV1OrganizationsOrganizationIdPlanGet200Response {
    /**
     * 
     * @type {any}
     * @memberof ApiV1OrganizationsOrganizationIdPlanGet200Response
     */
    'plan'?: any;
}
/**
 * 
 * @export
 * @interface ApiV1OrganizationsOrganizationIdSessionTrialPostRequest
 */
export interface ApiV1OrganizationsOrganizationIdSessionTrialPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1OrganizationsOrganizationIdSessionTrialPostRequest
     */
    'success_url': string;
}
/**
 * 
 * @export
 * @interface ApiV1PasswordBackupPrivateKeyGet200Response
 */
export interface ApiV1PasswordBackupPrivateKeyGet200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiV1PasswordBackupPrivateKeyGet200Response
     */
    'message': string;
    /**
     * 
     * @type {ApiV1PasswordBackupPrivateKeyGet200ResponseBackupPrivateKey}
     * @memberof ApiV1PasswordBackupPrivateKeyGet200Response
     */
    'backupPrivateKey': ApiV1PasswordBackupPrivateKeyGet200ResponseBackupPrivateKey;
}
/**
 * 
 * @export
 * @interface ApiV1PasswordBackupPrivateKeyGet200ResponseBackupPrivateKey
 */
export interface ApiV1PasswordBackupPrivateKeyGet200ResponseBackupPrivateKey {
    /**
     * 
     * @type {string}
     * @memberof ApiV1PasswordBackupPrivateKeyGet200ResponseBackupPrivateKey
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PasswordBackupPrivateKeyGet200ResponseBackupPrivateKey
     */
    'encryptedPrivateKey': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PasswordBackupPrivateKeyGet200ResponseBackupPrivateKey
     */
    'iv': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PasswordBackupPrivateKeyGet200ResponseBackupPrivateKey
     */
    'tag': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PasswordBackupPrivateKeyGet200ResponseBackupPrivateKey
     */
    'algorithm': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PasswordBackupPrivateKeyGet200ResponseBackupPrivateKey
     */
    'keyEncoding': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PasswordBackupPrivateKeyGet200ResponseBackupPrivateKey
     */
    'salt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PasswordBackupPrivateKeyGet200ResponseBackupPrivateKey
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PasswordBackupPrivateKeyGet200ResponseBackupPrivateKey
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PasswordBackupPrivateKeyGet200ResponseBackupPrivateKey
     */
    'userId': string;
}
/**
 * 
 * @export
 * @interface ApiV1PasswordBackupPrivateKeyPostRequest
 */
export interface ApiV1PasswordBackupPrivateKeyPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1PasswordBackupPrivateKeyPostRequest
     */
    'clientProof': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PasswordBackupPrivateKeyPostRequest
     */
    'encryptedPrivateKey': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PasswordBackupPrivateKeyPostRequest
     */
    'iv': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PasswordBackupPrivateKeyPostRequest
     */
    'tag': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PasswordBackupPrivateKeyPostRequest
     */
    'salt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PasswordBackupPrivateKeyPostRequest
     */
    'verifier': string;
}
/**
 * 
 * @export
 * @interface ApiV1PasswordChangePasswordPostRequest
 */
export interface ApiV1PasswordChangePasswordPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1PasswordChangePasswordPostRequest
     */
    'clientProof': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PasswordChangePasswordPostRequest
     */
    'protectedKey': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PasswordChangePasswordPostRequest
     */
    'protectedKeyIV': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PasswordChangePasswordPostRequest
     */
    'protectedKeyTag': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PasswordChangePasswordPostRequest
     */
    'encryptedPrivateKey': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PasswordChangePasswordPostRequest
     */
    'encryptedPrivateKeyIV': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PasswordChangePasswordPostRequest
     */
    'encryptedPrivateKeyTag': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PasswordChangePasswordPostRequest
     */
    'salt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PasswordChangePasswordPostRequest
     */
    'verifier': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PasswordChangePasswordPostRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface ApiV1PasswordEmailPasswordResetPostRequest
 */
export interface ApiV1PasswordEmailPasswordResetPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1PasswordEmailPasswordResetPostRequest
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface ApiV1PasswordEmailPasswordResetVerifyPost200Response
 */
export interface ApiV1PasswordEmailPasswordResetVerifyPost200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiV1PasswordEmailPasswordResetVerifyPost200Response
     */
    'message': string;
    /**
     * 
     * @type {ApiV1PasswordEmailPasswordResetVerifyPost200ResponseUser}
     * @memberof ApiV1PasswordEmailPasswordResetVerifyPost200Response
     */
    'user': ApiV1PasswordEmailPasswordResetVerifyPost200ResponseUser;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PasswordEmailPasswordResetVerifyPost200Response
     */
    'token': string;
}
/**
 * 
 * @export
 * @interface ApiV1PasswordEmailPasswordResetVerifyPost200ResponseUser
 */
export interface ApiV1PasswordEmailPasswordResetVerifyPost200ResponseUser {
    /**
     * 
     * @type {string}
     * @memberof ApiV1PasswordEmailPasswordResetVerifyPost200ResponseUser
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PasswordEmailPasswordResetVerifyPost200ResponseUser
     */
    'email'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ApiV1PasswordEmailPasswordResetVerifyPost200ResponseUser
     */
    'authMethods'?: Array<string> | null;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1PasswordEmailPasswordResetVerifyPost200ResponseUser
     */
    'superAdmin'?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PasswordEmailPasswordResetVerifyPost200ResponseUser
     */
    'firstName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PasswordEmailPasswordResetVerifyPost200ResponseUser
     */
    'lastName'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1PasswordEmailPasswordResetVerifyPost200ResponseUser
     */
    'isAccepted'?: boolean | null;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1PasswordEmailPasswordResetVerifyPost200ResponseUser
     */
    'isMfaEnabled'?: boolean | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ApiV1PasswordEmailPasswordResetVerifyPost200ResponseUser
     */
    'mfaMethods'?: Array<string> | null;
    /**
     * 
     * @type {any}
     * @memberof ApiV1PasswordEmailPasswordResetVerifyPost200ResponseUser
     */
    'devices'?: any | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PasswordEmailPasswordResetVerifyPost200ResponseUser
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PasswordEmailPasswordResetVerifyPost200ResponseUser
     */
    'updatedAt': string;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1PasswordEmailPasswordResetVerifyPost200ResponseUser
     */
    'isGhost'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PasswordEmailPasswordResetVerifyPost200ResponseUser
     */
    'username': string;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1PasswordEmailPasswordResetVerifyPost200ResponseUser
     */
    'isEmailVerified'?: boolean | null;
    /**
     * 
     * @type {number}
     * @memberof ApiV1PasswordEmailPasswordResetVerifyPost200ResponseUser
     */
    'consecutiveFailedMfaAttempts'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1PasswordEmailPasswordResetVerifyPost200ResponseUser
     */
    'isLocked'?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PasswordEmailPasswordResetVerifyPost200ResponseUser
     */
    'temporaryLockDateEnd'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ApiV1PasswordEmailPasswordResetVerifyPost200ResponseUser
     */
    'consecutiveFailedPasswordAttempts'?: number | null;
}
/**
 * 
 * @export
 * @interface ApiV1PasswordEmailPasswordResetVerifyPostRequest
 */
export interface ApiV1PasswordEmailPasswordResetVerifyPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1PasswordEmailPasswordResetVerifyPostRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PasswordEmailPasswordResetVerifyPostRequest
     */
    'code': string;
}
/**
 * 
 * @export
 * @interface ApiV1PasswordPasswordResetPostRequest
 */
export interface ApiV1PasswordPasswordResetPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1PasswordPasswordResetPostRequest
     */
    'protectedKey': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PasswordPasswordResetPostRequest
     */
    'protectedKeyIV': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PasswordPasswordResetPostRequest
     */
    'protectedKeyTag': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PasswordPasswordResetPostRequest
     */
    'encryptedPrivateKey': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PasswordPasswordResetPostRequest
     */
    'encryptedPrivateKeyIV': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PasswordPasswordResetPostRequest
     */
    'encryptedPrivateKeyTag': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PasswordPasswordResetPostRequest
     */
    'salt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PasswordPasswordResetPostRequest
     */
    'verifier': string;
}
/**
 * 
 * @export
 * @interface ApiV1PasswordSrp1Post200Response
 */
export interface ApiV1PasswordSrp1Post200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiV1PasswordSrp1Post200Response
     */
    'serverPublicKey': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PasswordSrp1Post200Response
     */
    'salt': string;
}
/**
 * 
 * @export
 * @interface ApiV1PasswordSrp1PostRequest
 */
export interface ApiV1PasswordSrp1PostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1PasswordSrp1PostRequest
     */
    'clientPublicKey': string;
}
/**
 * 
 * @export
 * @interface ApiV1PkiAlertsAlertIdPatchRequest
 */
export interface ApiV1PkiAlertsAlertIdPatchRequest {
    /**
     * The name of the alert to update to
     * @type {string}
     * @memberof ApiV1PkiAlertsAlertIdPatchRequest
     */
    'name'?: string;
    /**
     * The number of days before the certificate expires to trigger the alert to update to
     * @type {number}
     * @memberof ApiV1PkiAlertsAlertIdPatchRequest
     */
    'alertBeforeDays'?: number;
    /**
     * The ID of the PKI collection to bind to the alert to update to
     * @type {string}
     * @memberof ApiV1PkiAlertsAlertIdPatchRequest
     */
    'pkiCollectionId'?: string;
    /**
     * The email addresses to send the alert email to update to
     * @type {Array<string>}
     * @memberof ApiV1PkiAlertsAlertIdPatchRequest
     */
    'emails'?: Array<string>;
}
/**
 * 
 * @export
 * @interface ApiV1PkiAlertsPost200Response
 */
export interface ApiV1PkiAlertsPost200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiV1PkiAlertsPost200Response
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PkiAlertsPost200Response
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PkiAlertsPost200Response
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PkiAlertsPost200Response
     */
    'projectId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PkiAlertsPost200Response
     */
    'pkiCollectionId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PkiAlertsPost200Response
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof ApiV1PkiAlertsPost200Response
     */
    'alertBeforeDays': number;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PkiAlertsPost200Response
     */
    'recipientEmails': string;
}
/**
 * 
 * @export
 * @interface ApiV1PkiAlertsPostRequest
 */
export interface ApiV1PkiAlertsPostRequest {
    /**
     * The ID of the project to create the alert in
     * @type {string}
     * @memberof ApiV1PkiAlertsPostRequest
     */
    'projectId': string;
    /**
     * The ID of the PKI collection to bind to the alert
     * @type {string}
     * @memberof ApiV1PkiAlertsPostRequest
     */
    'pkiCollectionId': string;
    /**
     * The name of the alert
     * @type {string}
     * @memberof ApiV1PkiAlertsPostRequest
     */
    'name': string;
    /**
     * The number of days before the certificate expires to trigger the alert
     * @type {number}
     * @memberof ApiV1PkiAlertsPostRequest
     */
    'alertBeforeDays': number;
    /**
     * The email addresses to send the alert email to
     * @type {Array<string>}
     * @memberof ApiV1PkiAlertsPostRequest
     */
    'emails': Array<string>;
}
/**
 * 
 * @export
 * @interface ApiV1PkiCaCaIdCaCertificatesGet200ResponseInner
 */
export interface ApiV1PkiCaCaIdCaCertificatesGet200ResponseInner {
    /**
     * The certificate body of the CA certificate
     * @type {string}
     * @memberof ApiV1PkiCaCaIdCaCertificatesGet200ResponseInner
     */
    'certificate': string;
    /**
     * The certificate chain of the CA certificate
     * @type {string}
     * @memberof ApiV1PkiCaCaIdCaCertificatesGet200ResponseInner
     */
    'certificateChain': string;
    /**
     * The serial number of the CA certificate
     * @type {string}
     * @memberof ApiV1PkiCaCaIdCaCertificatesGet200ResponseInner
     */
    'serialNumber': string;
    /**
     * The version of the CA certificate. The version is incremented for each CA renewal operation.
     * @type {number}
     * @memberof ApiV1PkiCaCaIdCaCertificatesGet200ResponseInner
     */
    'version': number;
}
/**
 * 
 * @export
 * @interface ApiV1PkiCaCaIdCertificateGet200Response
 */
export interface ApiV1PkiCaCaIdCertificateGet200Response {
    /**
     * The certificate body of the CA
     * @type {string}
     * @memberof ApiV1PkiCaCaIdCertificateGet200Response
     */
    'certificate': string;
    /**
     * The certificate chain of the CA
     * @type {string}
     * @memberof ApiV1PkiCaCaIdCertificateGet200Response
     */
    'certificateChain': string;
    /**
     * The serial number of the CA certificate
     * @type {string}
     * @memberof ApiV1PkiCaCaIdCertificateGet200Response
     */
    'serialNumber': string;
}
/**
 * 
 * @export
 * @interface ApiV1PkiCaCaIdCrlsGet200ResponseInner
 */
export interface ApiV1PkiCaCaIdCrlsGet200ResponseInner {
    /**
     * The ID of certificate revocation list (CRL)
     * @type {string}
     * @memberof ApiV1PkiCaCaIdCrlsGet200ResponseInner
     */
    'id': string;
    /**
     * The certificate revocation list (CRL)
     * @type {string}
     * @memberof ApiV1PkiCaCaIdCrlsGet200ResponseInner
     */
    'crl': string;
}
/**
 * 
 * @export
 * @interface ApiV1PkiCaCaIdCsrGet200Response
 */
export interface ApiV1PkiCaCaIdCsrGet200Response {
    /**
     * The generated CSR from the CA
     * @type {string}
     * @memberof ApiV1PkiCaCaIdCsrGet200Response
     */
    'csr': string;
}
/**
 * 
 * @export
 * @interface ApiV1PkiCaCaIdImportCertificatePost200Response
 */
export interface ApiV1PkiCaCaIdImportCertificatePost200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiV1PkiCaCaIdImportCertificatePost200Response
     */
    'message': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PkiCaCaIdImportCertificatePost200Response
     */
    'caId': string;
}
/**
 * 
 * @export
 * @interface ApiV1PkiCaCaIdImportCertificatePostRequest
 */
export interface ApiV1PkiCaCaIdImportCertificatePostRequest {
    /**
     * The certificate body to import
     * @type {string}
     * @memberof ApiV1PkiCaCaIdImportCertificatePostRequest
     */
    'certificate': string;
    /**
     * The certificate chain to import
     * @type {string}
     * @memberof ApiV1PkiCaCaIdImportCertificatePostRequest
     */
    'certificateChain': string;
}
/**
 * 
 * @export
 * @interface ApiV1PkiCaCaIdIssueCertificatePost200Response
 */
export interface ApiV1PkiCaCaIdIssueCertificatePost200Response {
    /**
     * The issued certificate
     * @type {string}
     * @memberof ApiV1PkiCaCaIdIssueCertificatePost200Response
     */
    'certificate': string;
    /**
     * The certificate of the issuing CA
     * @type {string}
     * @memberof ApiV1PkiCaCaIdIssueCertificatePost200Response
     */
    'issuingCaCertificate': string;
    /**
     * The certificate chain of the issued certificate
     * @type {string}
     * @memberof ApiV1PkiCaCaIdIssueCertificatePost200Response
     */
    'certificateChain': string;
    /**
     * The private key of the issued certificate
     * @type {string}
     * @memberof ApiV1PkiCaCaIdIssueCertificatePost200Response
     */
    'privateKey': string;
    /**
     * The serial number of the issued certificate
     * @type {string}
     * @memberof ApiV1PkiCaCaIdIssueCertificatePost200Response
     */
    'serialNumber': string;
}
/**
 * 
 * @export
 * @interface ApiV1PkiCaCaIdIssueCertificatePostRequest
 */
export interface ApiV1PkiCaCaIdIssueCertificatePostRequest {
    /**
     * The ID of the PKI collection to add the certificate to
     * @type {string}
     * @memberof ApiV1PkiCaCaIdIssueCertificatePostRequest
     */
    'pkiCollectionId'?: string;
    /**
     * A friendly name for the certificate
     * @type {string}
     * @memberof ApiV1PkiCaCaIdIssueCertificatePostRequest
     */
    'friendlyName'?: string;
    /**
     * The common name (CN) for the certificate
     * @type {string}
     * @memberof ApiV1PkiCaCaIdIssueCertificatePostRequest
     */
    'commonName': string;
    /**
     * A comma-delimited list of Subject Alternative Names (SANs) for the certificate; these can be host names or email addresses.
     * @type {string}
     * @memberof ApiV1PkiCaCaIdIssueCertificatePostRequest
     */
    'altNames'?: string;
    /**
     * The time to live for the certificate such as 1m, 1h, 1d, 1y, ...
     * @type {string}
     * @memberof ApiV1PkiCaCaIdIssueCertificatePostRequest
     */
    'ttl': string;
    /**
     * The date and time when the certificate becomes valid in YYYY-MM-DDTHH:mm:ss.sssZ format
     * @type {string}
     * @memberof ApiV1PkiCaCaIdIssueCertificatePostRequest
     */
    'notBefore'?: string;
    /**
     * The date and time when the certificate expires in YYYY-MM-DDTHH:mm:ss.sssZ format
     * @type {string}
     * @memberof ApiV1PkiCaCaIdIssueCertificatePostRequest
     */
    'notAfter'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1PkiCaCaIdPatchRequest
 */
export interface ApiV1PkiCaCaIdPatchRequest {
    /**
     * The status of the CA to update to. This can be one of active or disabled
     * @type {string}
     * @memberof ApiV1PkiCaCaIdPatchRequest
     */
    'status'?: ApiV1PkiCaCaIdPatchRequestStatusEnum;
}

export const ApiV1PkiCaCaIdPatchRequestStatusEnum = {
    Active: 'active',
    Disabled: 'disabled'
} as const;

export type ApiV1PkiCaCaIdPatchRequestStatusEnum = typeof ApiV1PkiCaCaIdPatchRequestStatusEnum[keyof typeof ApiV1PkiCaCaIdPatchRequestStatusEnum];

/**
 * 
 * @export
 * @interface ApiV1PkiCaCaIdRenewPost200Response
 */
export interface ApiV1PkiCaCaIdRenewPost200Response {
    /**
     * The renewed CA certificate body
     * @type {string}
     * @memberof ApiV1PkiCaCaIdRenewPost200Response
     */
    'certificate': string;
    /**
     * The certificate chain of the CA
     * @type {string}
     * @memberof ApiV1PkiCaCaIdRenewPost200Response
     */
    'certificateChain': string;
    /**
     * The serial number of the renewed CA certificate
     * @type {string}
     * @memberof ApiV1PkiCaCaIdRenewPost200Response
     */
    'serialNumber': string;
}
/**
 * 
 * @export
 * @interface ApiV1PkiCaCaIdRenewPostRequest
 */
export interface ApiV1PkiCaCaIdRenewPostRequest {
    /**
     * The type of behavior to use for the renewal operation. Currently Infisical is only able to renew a CA certificate with the same key pair.
     * @type {string}
     * @memberof ApiV1PkiCaCaIdRenewPostRequest
     */
    'type': ApiV1PkiCaCaIdRenewPostRequestTypeEnum;
    /**
     * The expiry date and time for the renewed CA certificate in YYYY-MM-DDTHH:mm:ss.sssZ format
     * @type {string}
     * @memberof ApiV1PkiCaCaIdRenewPostRequest
     */
    'notAfter': string;
}

export const ApiV1PkiCaCaIdRenewPostRequestTypeEnum = {
    Existing: 'existing'
} as const;

export type ApiV1PkiCaCaIdRenewPostRequestTypeEnum = typeof ApiV1PkiCaCaIdRenewPostRequestTypeEnum[keyof typeof ApiV1PkiCaCaIdRenewPostRequestTypeEnum];

/**
 * 
 * @export
 * @interface ApiV1PkiCaCaIdSignCertificatePost200Response
 */
export interface ApiV1PkiCaCaIdSignCertificatePost200Response {
    /**
     * The issued certificate
     * @type {string}
     * @memberof ApiV1PkiCaCaIdSignCertificatePost200Response
     */
    'certificate': string;
    /**
     * The certificate of the issuing CA
     * @type {string}
     * @memberof ApiV1PkiCaCaIdSignCertificatePost200Response
     */
    'issuingCaCertificate': string;
    /**
     * The certificate chain of the issued certificate
     * @type {string}
     * @memberof ApiV1PkiCaCaIdSignCertificatePost200Response
     */
    'certificateChain': string;
    /**
     * The serial number of the issued certificate
     * @type {string}
     * @memberof ApiV1PkiCaCaIdSignCertificatePost200Response
     */
    'serialNumber': string;
}
/**
 * 
 * @export
 * @interface ApiV1PkiCaCaIdSignCertificatePostRequest
 */
export interface ApiV1PkiCaCaIdSignCertificatePostRequest {
    /**
     * The pem-encoded CSR to sign with the CA to be used for certificate issuance
     * @type {string}
     * @memberof ApiV1PkiCaCaIdSignCertificatePostRequest
     */
    'csr': string;
    /**
     * The ID of the PKI collection to add the certificate to
     * @type {string}
     * @memberof ApiV1PkiCaCaIdSignCertificatePostRequest
     */
    'pkiCollectionId'?: string;
    /**
     * A friendly name for the certificate
     * @type {string}
     * @memberof ApiV1PkiCaCaIdSignCertificatePostRequest
     */
    'friendlyName'?: string;
    /**
     * The common name (CN) for the certificate
     * @type {string}
     * @memberof ApiV1PkiCaCaIdSignCertificatePostRequest
     */
    'commonName'?: string;
    /**
     * A comma-delimited list of Subject Alternative Names (SANs) for the certificate; these can be host names or email addresses.
     * @type {string}
     * @memberof ApiV1PkiCaCaIdSignCertificatePostRequest
     */
    'altNames'?: string;
    /**
     * The time to live for the certificate such as 1m, 1h, 1d, 1y, ...
     * @type {string}
     * @memberof ApiV1PkiCaCaIdSignCertificatePostRequest
     */
    'ttl': string;
    /**
     * The date and time when the certificate becomes valid in YYYY-MM-DDTHH:mm:ss.sssZ format
     * @type {string}
     * @memberof ApiV1PkiCaCaIdSignCertificatePostRequest
     */
    'notBefore'?: string;
    /**
     * The date and time when the certificate expires in YYYY-MM-DDTHH:mm:ss.sssZ format
     * @type {string}
     * @memberof ApiV1PkiCaCaIdSignCertificatePostRequest
     */
    'notAfter'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1PkiCaCaIdSignIntermediatePost200Response
 */
export interface ApiV1PkiCaCaIdSignIntermediatePost200Response {
    /**
     * The signed intermediate certificate
     * @type {string}
     * @memberof ApiV1PkiCaCaIdSignIntermediatePost200Response
     */
    'certificate': string;
    /**
     * The certificate chain of the intermediate certificate
     * @type {string}
     * @memberof ApiV1PkiCaCaIdSignIntermediatePost200Response
     */
    'certificateChain': string;
    /**
     * The certificate of the issuing CA
     * @type {string}
     * @memberof ApiV1PkiCaCaIdSignIntermediatePost200Response
     */
    'issuingCaCertificate': string;
    /**
     * The serial number of the intermediate certificate
     * @type {string}
     * @memberof ApiV1PkiCaCaIdSignIntermediatePost200Response
     */
    'serialNumber': string;
}
/**
 * 
 * @export
 * @interface ApiV1PkiCaCaIdSignIntermediatePostRequest
 */
export interface ApiV1PkiCaCaIdSignIntermediatePostRequest {
    /**
     * The pem-encoded CSR to sign with the CA
     * @type {string}
     * @memberof ApiV1PkiCaCaIdSignIntermediatePostRequest
     */
    'csr': string;
    /**
     * The date and time when the intermediate CA becomes valid in YYYY-MM-DDTHH:mm:ss.sssZ format
     * @type {string}
     * @memberof ApiV1PkiCaCaIdSignIntermediatePostRequest
     */
    'notBefore'?: string;
    /**
     * The date and time when the intermediate CA expires in YYYY-MM-DDTHH:mm:ss.sssZ format
     * @type {string}
     * @memberof ApiV1PkiCaCaIdSignIntermediatePostRequest
     */
    'notAfter': string;
    /**
     * The maximum number of intermediate CAs that may follow this CA in the certificate / CA chain. A maxPathLength of -1 implies no path limit on the chain.
     * @type {number}
     * @memberof ApiV1PkiCaCaIdSignIntermediatePostRequest
     */
    'maxPathLength'?: number;
}
/**
 * 
 * @export
 * @interface ApiV1PkiCaPost200Response
 */
export interface ApiV1PkiCaPost200Response {
    /**
     * 
     * @type {ApiV1PkiCaPost200ResponseCa}
     * @memberof ApiV1PkiCaPost200Response
     */
    'ca': ApiV1PkiCaPost200ResponseCa;
}
/**
 * 
 * @export
 * @interface ApiV1PkiCaPost200ResponseCa
 */
export interface ApiV1PkiCaPost200ResponseCa {
    /**
     * 
     * @type {string}
     * @memberof ApiV1PkiCaPost200ResponseCa
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PkiCaPost200ResponseCa
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PkiCaPost200ResponseCa
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PkiCaPost200ResponseCa
     */
    'parentCaId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PkiCaPost200ResponseCa
     */
    'projectId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PkiCaPost200ResponseCa
     */
    'type': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PkiCaPost200ResponseCa
     */
    'status': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PkiCaPost200ResponseCa
     */
    'friendlyName': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PkiCaPost200ResponseCa
     */
    'organization': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PkiCaPost200ResponseCa
     */
    'ou': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PkiCaPost200ResponseCa
     */
    'country': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PkiCaPost200ResponseCa
     */
    'province': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PkiCaPost200ResponseCa
     */
    'locality': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PkiCaPost200ResponseCa
     */
    'commonName': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PkiCaPost200ResponseCa
     */
    'dn': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PkiCaPost200ResponseCa
     */
    'serialNumber'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ApiV1PkiCaPost200ResponseCa
     */
    'maxPathLength'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PkiCaPost200ResponseCa
     */
    'keyAlgorithm': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PkiCaPost200ResponseCa
     */
    'notBefore'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PkiCaPost200ResponseCa
     */
    'notAfter'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PkiCaPost200ResponseCa
     */
    'activeCaCertId'?: string | null;
}
/**
 * 
 * @export
 * @interface ApiV1PkiCaPostRequest
 */
export interface ApiV1PkiCaPostRequest {
    /**
     * Slug of the project to create the CA in.
     * @type {string}
     * @memberof ApiV1PkiCaPostRequest
     */
    'projectSlug': string;
    /**
     * The type of CA to create
     * @type {string}
     * @memberof ApiV1PkiCaPostRequest
     */
    'type': ApiV1PkiCaPostRequestTypeEnum;
    /**
     * A friendly name for the CA
     * @type {string}
     * @memberof ApiV1PkiCaPostRequest
     */
    'friendlyName'?: string;
    /**
     * The common name (CN) for the CA
     * @type {string}
     * @memberof ApiV1PkiCaPostRequest
     */
    'commonName': string;
    /**
     * The organization (O) for the CA
     * @type {string}
     * @memberof ApiV1PkiCaPostRequest
     */
    'organization': string;
    /**
     * The organization unit (OU) for the CA
     * @type {string}
     * @memberof ApiV1PkiCaPostRequest
     */
    'ou': string;
    /**
     * The country name (C) for the CA
     * @type {string}
     * @memberof ApiV1PkiCaPostRequest
     */
    'country': string;
    /**
     * The state of province name for the CA
     * @type {string}
     * @memberof ApiV1PkiCaPostRequest
     */
    'province': string;
    /**
     * The locality name for the CA
     * @type {string}
     * @memberof ApiV1PkiCaPostRequest
     */
    'locality': string;
    /**
     * The date and time when the CA becomes valid in YYYY-MM-DDTHH:mm:ss.sssZ format
     * @type {string}
     * @memberof ApiV1PkiCaPostRequest
     */
    'notBefore'?: string;
    /**
     * The date and time when the CA expires in YYYY-MM-DDTHH:mm:ss.sssZ format
     * @type {string}
     * @memberof ApiV1PkiCaPostRequest
     */
    'notAfter'?: string;
    /**
     * The maximum number of intermediate CAs that may follow this CA in the certificate / CA chain. A maxPathLength of -1 implies no path limit on the chain.
     * @type {number}
     * @memberof ApiV1PkiCaPostRequest
     */
    'maxPathLength'?: number;
    /**
     * The type of public key algorithm and size, in bits, of the key pair for the CA; when you create an intermediate CA, you must use a key algorithm supported by the parent CA.
     * @type {string}
     * @memberof ApiV1PkiCaPostRequest
     */
    'keyAlgorithm'?: ApiV1PkiCaPostRequestKeyAlgorithmEnum;
}

export const ApiV1PkiCaPostRequestTypeEnum = {
    Root: 'root',
    Intermediate: 'intermediate'
} as const;

export type ApiV1PkiCaPostRequestTypeEnum = typeof ApiV1PkiCaPostRequestTypeEnum[keyof typeof ApiV1PkiCaPostRequestTypeEnum];
export const ApiV1PkiCaPostRequestKeyAlgorithmEnum = {
    Rsa2048: 'RSA_2048',
    Rsa4096: 'RSA_4096',
    EcPrime256v1: 'EC_prime256v1',
    EcSecp384r1: 'EC_secp384r1'
} as const;

export type ApiV1PkiCaPostRequestKeyAlgorithmEnum = typeof ApiV1PkiCaPostRequestKeyAlgorithmEnum[keyof typeof ApiV1PkiCaPostRequestKeyAlgorithmEnum];

/**
 * 
 * @export
 * @interface ApiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigGet200Response
 */
export interface ApiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigGet200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigGet200Response
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigGet200Response
     */
    'certificateTemplateId': string;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigGet200Response
     */
    'isEnabled': boolean;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigGet200Response
     */
    'caChain': string;
}
/**
 * 
 * @export
 * @interface ApiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPatchRequest
 */
export interface ApiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPatchRequest
     */
    'caChain'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPatchRequest
     */
    'passphrase'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPatchRequest
     */
    'isEnabled'?: boolean;
}
/**
 * 
 * @export
 * @interface ApiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPost200Response
 */
export interface ApiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPost200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPost200Response
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPost200Response
     */
    'certificateTemplateId': string;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPost200Response
     */
    'isEnabled': boolean;
}
/**
 * 
 * @export
 * @interface ApiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPostRequest
 */
export interface ApiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPostRequest
     */
    'caChain': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPostRequest
     */
    'passphrase': string;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPostRequest
     */
    'isEnabled'?: boolean;
}
/**
 * 
 * @export
 * @interface ApiV1PkiCertificateTemplatesCertificateTemplateIdGet200Response
 */
export interface ApiV1PkiCertificateTemplatesCertificateTemplateIdGet200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiV1PkiCertificateTemplatesCertificateTemplateIdGet200Response
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PkiCertificateTemplatesCertificateTemplateIdGet200Response
     */
    'caId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PkiCertificateTemplatesCertificateTemplateIdGet200Response
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PkiCertificateTemplatesCertificateTemplateIdGet200Response
     */
    'commonName': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PkiCertificateTemplatesCertificateTemplateIdGet200Response
     */
    'subjectAlternativeName': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PkiCertificateTemplatesCertificateTemplateIdGet200Response
     */
    'pkiCollectionId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PkiCertificateTemplatesCertificateTemplateIdGet200Response
     */
    'ttl': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PkiCertificateTemplatesCertificateTemplateIdGet200Response
     */
    'projectId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PkiCertificateTemplatesCertificateTemplateIdGet200Response
     */
    'caName': string;
}
/**
 * 
 * @export
 * @interface ApiV1PkiCertificateTemplatesCertificateTemplateIdPatchRequest
 */
export interface ApiV1PkiCertificateTemplatesCertificateTemplateIdPatchRequest {
    /**
     * The ID of the certificate authority to update the association with the template
     * @type {string}
     * @memberof ApiV1PkiCertificateTemplatesCertificateTemplateIdPatchRequest
     */
    'caId'?: string;
    /**
     * The ID of the PKI collection to update the binding to the template
     * @type {string}
     * @memberof ApiV1PkiCertificateTemplatesCertificateTemplateIdPatchRequest
     */
    'pkiCollectionId'?: string;
    /**
     * The updated name of the template
     * @type {string}
     * @memberof ApiV1PkiCertificateTemplatesCertificateTemplateIdPatchRequest
     */
    'name'?: string;
    /**
     * The updated regular expression string for validating common names
     * @type {string}
     * @memberof ApiV1PkiCertificateTemplatesCertificateTemplateIdPatchRequest
     */
    'commonName'?: string;
    /**
     * The updated regular expression string for validating subject alternative names
     * @type {string}
     * @memberof ApiV1PkiCertificateTemplatesCertificateTemplateIdPatchRequest
     */
    'subjectAlternativeName'?: string;
    /**
     * The updated max TTL for the template
     * @type {string}
     * @memberof ApiV1PkiCertificateTemplatesCertificateTemplateIdPatchRequest
     */
    'ttl'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1PkiCertificateTemplatesPostRequest
 */
export interface ApiV1PkiCertificateTemplatesPostRequest {
    /**
     * The ID of the certificate authority to associate the template with
     * @type {string}
     * @memberof ApiV1PkiCertificateTemplatesPostRequest
     */
    'caId': string;
    /**
     * The ID of the PKI collection to bind to the template
     * @type {string}
     * @memberof ApiV1PkiCertificateTemplatesPostRequest
     */
    'pkiCollectionId'?: string;
    /**
     * The name of the template
     * @type {string}
     * @memberof ApiV1PkiCertificateTemplatesPostRequest
     */
    'name': string;
    /**
     * The regular expression string to use for validating common names
     * @type {string}
     * @memberof ApiV1PkiCertificateTemplatesPostRequest
     */
    'commonName': string;
    /**
     * The regular expression string to use for validating subject alternative names
     * @type {string}
     * @memberof ApiV1PkiCertificateTemplatesPostRequest
     */
    'subjectAlternativeName': string;
    /**
     * The max TTL for the template
     * @type {string}
     * @memberof ApiV1PkiCertificateTemplatesPostRequest
     */
    'ttl': string;
}
/**
 * 
 * @export
 * @interface ApiV1PkiCertificatesIssueCertificatePostRequest
 */
export interface ApiV1PkiCertificatesIssueCertificatePostRequest {
    /**
     * The ID of the CA to issue the certificate from
     * @type {string}
     * @memberof ApiV1PkiCertificatesIssueCertificatePostRequest
     */
    'caId'?: string;
    /**
     * The ID of the certificate template to issue the certificate from
     * @type {string}
     * @memberof ApiV1PkiCertificatesIssueCertificatePostRequest
     */
    'certificateTemplateId'?: string;
    /**
     * The ID of the PKI collection to add the certificate to
     * @type {string}
     * @memberof ApiV1PkiCertificatesIssueCertificatePostRequest
     */
    'pkiCollectionId'?: string;
    /**
     * A friendly name for the certificate
     * @type {string}
     * @memberof ApiV1PkiCertificatesIssueCertificatePostRequest
     */
    'friendlyName'?: string;
    /**
     * The common name (CN) for the certificate
     * @type {string}
     * @memberof ApiV1PkiCertificatesIssueCertificatePostRequest
     */
    'commonName': string;
    /**
     * A comma-delimited list of Subject Alternative Names (SANs) for the certificate; these can be host names or email addresses.
     * @type {string}
     * @memberof ApiV1PkiCertificatesIssueCertificatePostRequest
     */
    'altNames'?: string;
    /**
     * The time to live for the certificate such as 1m, 1h, 1d, 1y, ...
     * @type {string}
     * @memberof ApiV1PkiCertificatesIssueCertificatePostRequest
     */
    'ttl': string;
    /**
     * The date and time when the certificate becomes valid in YYYY-MM-DDTHH:mm:ss.sssZ format
     * @type {string}
     * @memberof ApiV1PkiCertificatesIssueCertificatePostRequest
     */
    'notBefore'?: string;
    /**
     * The date and time when the certificate expires in YYYY-MM-DDTHH:mm:ss.sssZ format
     * @type {string}
     * @memberof ApiV1PkiCertificatesIssueCertificatePostRequest
     */
    'notAfter'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1PkiCertificatesSerialNumberCertificateGet200Response
 */
export interface ApiV1PkiCertificatesSerialNumberCertificateGet200Response {
    /**
     * The certificate body of the certificate
     * @type {string}
     * @memberof ApiV1PkiCertificatesSerialNumberCertificateGet200Response
     */
    'certificate': string;
    /**
     * The certificate chain of the certificate
     * @type {string}
     * @memberof ApiV1PkiCertificatesSerialNumberCertificateGet200Response
     */
    'certificateChain': string;
    /**
     * The serial number of the certificate
     * @type {string}
     * @memberof ApiV1PkiCertificatesSerialNumberCertificateGet200Response
     */
    'serialNumber': string;
}
/**
 * 
 * @export
 * @interface ApiV1PkiCertificatesSerialNumberGet200Response
 */
export interface ApiV1PkiCertificatesSerialNumberGet200Response {
    /**
     * 
     * @type {ApiV1PkiCertificatesSerialNumberGet200ResponseCertificate}
     * @memberof ApiV1PkiCertificatesSerialNumberGet200Response
     */
    'certificate': ApiV1PkiCertificatesSerialNumberGet200ResponseCertificate;
}
/**
 * 
 * @export
 * @interface ApiV1PkiCertificatesSerialNumberGet200ResponseCertificate
 */
export interface ApiV1PkiCertificatesSerialNumberGet200ResponseCertificate {
    /**
     * 
     * @type {string}
     * @memberof ApiV1PkiCertificatesSerialNumberGet200ResponseCertificate
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PkiCertificatesSerialNumberGet200ResponseCertificate
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PkiCertificatesSerialNumberGet200ResponseCertificate
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PkiCertificatesSerialNumberGet200ResponseCertificate
     */
    'caId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PkiCertificatesSerialNumberGet200ResponseCertificate
     */
    'status': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PkiCertificatesSerialNumberGet200ResponseCertificate
     */
    'serialNumber': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PkiCertificatesSerialNumberGet200ResponseCertificate
     */
    'friendlyName': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PkiCertificatesSerialNumberGet200ResponseCertificate
     */
    'commonName': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PkiCertificatesSerialNumberGet200ResponseCertificate
     */
    'notBefore': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PkiCertificatesSerialNumberGet200ResponseCertificate
     */
    'notAfter': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PkiCertificatesSerialNumberGet200ResponseCertificate
     */
    'revokedAt'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ApiV1PkiCertificatesSerialNumberGet200ResponseCertificate
     */
    'revocationReason'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PkiCertificatesSerialNumberGet200ResponseCertificate
     */
    'altNames'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PkiCertificatesSerialNumberGet200ResponseCertificate
     */
    'caCertId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PkiCertificatesSerialNumberGet200ResponseCertificate
     */
    'certificateTemplateId'?: string | null;
}
/**
 * 
 * @export
 * @interface ApiV1PkiCertificatesSerialNumberRevokePost200Response
 */
export interface ApiV1PkiCertificatesSerialNumberRevokePost200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiV1PkiCertificatesSerialNumberRevokePost200Response
     */
    'message': string;
    /**
     * The serial number of the revoked certificate.
     * @type {string}
     * @memberof ApiV1PkiCertificatesSerialNumberRevokePost200Response
     */
    'serialNumber': string;
    /**
     * The date and time when the certificate was revoked
     * @type {string}
     * @memberof ApiV1PkiCertificatesSerialNumberRevokePost200Response
     */
    'revokedAt': string;
}
/**
 * 
 * @export
 * @interface ApiV1PkiCertificatesSerialNumberRevokePostRequest
 */
export interface ApiV1PkiCertificatesSerialNumberRevokePostRequest {
    /**
     * The reason for revoking the certificate.
     * @type {string}
     * @memberof ApiV1PkiCertificatesSerialNumberRevokePostRequest
     */
    'revocationReason': ApiV1PkiCertificatesSerialNumberRevokePostRequestRevocationReasonEnum;
}

export const ApiV1PkiCertificatesSerialNumberRevokePostRequestRevocationReasonEnum = {
    Unspecified: 'UNSPECIFIED',
    KeyCompromise: 'KEY_COMPROMISE',
    CaCompromise: 'CA_COMPROMISE',
    AffiliationChanged: 'AFFILIATION_CHANGED',
    Superseded: 'SUPERSEDED',
    CessationOfOperation: 'CESSATION_OF_OPERATION',
    CertificateHold: 'CERTIFICATE_HOLD',
    PrivilegeWithdrawn: 'PRIVILEGE_WITHDRAWN',
    AACompromise: 'A_A_COMPROMISE'
} as const;

export type ApiV1PkiCertificatesSerialNumberRevokePostRequestRevocationReasonEnum = typeof ApiV1PkiCertificatesSerialNumberRevokePostRequestRevocationReasonEnum[keyof typeof ApiV1PkiCertificatesSerialNumberRevokePostRequestRevocationReasonEnum];

/**
 * 
 * @export
 * @interface ApiV1PkiCertificatesSignCertificatePostRequest
 */
export interface ApiV1PkiCertificatesSignCertificatePostRequest {
    /**
     * The ID of the CA to issue the certificate from
     * @type {string}
     * @memberof ApiV1PkiCertificatesSignCertificatePostRequest
     */
    'caId'?: string;
    /**
     * The ID of the certificate template to issue the certificate from
     * @type {string}
     * @memberof ApiV1PkiCertificatesSignCertificatePostRequest
     */
    'certificateTemplateId'?: string;
    /**
     * The ID of the PKI collection to add the certificate to
     * @type {string}
     * @memberof ApiV1PkiCertificatesSignCertificatePostRequest
     */
    'pkiCollectionId'?: string;
    /**
     * The pem-encoded CSR to sign with the CA to be used for certificate issuance
     * @type {string}
     * @memberof ApiV1PkiCertificatesSignCertificatePostRequest
     */
    'csr': string;
    /**
     * A friendly name for the certificate
     * @type {string}
     * @memberof ApiV1PkiCertificatesSignCertificatePostRequest
     */
    'friendlyName'?: string;
    /**
     * The common name (CN) for the certificate
     * @type {string}
     * @memberof ApiV1PkiCertificatesSignCertificatePostRequest
     */
    'commonName'?: string;
    /**
     * A comma-delimited list of Subject Alternative Names (SANs) for the certificate; these can be host names or email addresses.
     * @type {string}
     * @memberof ApiV1PkiCertificatesSignCertificatePostRequest
     */
    'altNames'?: string;
    /**
     * The time to live for the certificate such as 1m, 1h, 1d, 1y, ...
     * @type {string}
     * @memberof ApiV1PkiCertificatesSignCertificatePostRequest
     */
    'ttl': string;
    /**
     * The date and time when the certificate becomes valid in YYYY-MM-DDTHH:mm:ss.sssZ format
     * @type {string}
     * @memberof ApiV1PkiCertificatesSignCertificatePostRequest
     */
    'notBefore'?: string;
    /**
     * The date and time when the certificate expires in YYYY-MM-DDTHH:mm:ss.sssZ format
     * @type {string}
     * @memberof ApiV1PkiCertificatesSignCertificatePostRequest
     */
    'notAfter'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1PkiCollectionsCollectionIdItemsCollectionItemIdDelete200Response
 */
export interface ApiV1PkiCollectionsCollectionIdItemsCollectionItemIdDelete200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiV1PkiCollectionsCollectionIdItemsCollectionItemIdDelete200Response
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PkiCollectionsCollectionIdItemsCollectionItemIdDelete200Response
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PkiCollectionsCollectionIdItemsCollectionItemIdDelete200Response
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PkiCollectionsCollectionIdItemsCollectionItemIdDelete200Response
     */
    'pkiCollectionId': string;
    /**
     * The type of the deleted PKI collection item
     * @type {string}
     * @memberof ApiV1PkiCollectionsCollectionIdItemsCollectionItemIdDelete200Response
     */
    'type': ApiV1PkiCollectionsCollectionIdItemsCollectionItemIdDelete200ResponseTypeEnum;
    /**
     * The resource ID of the deleted PKI collection item
     * @type {string}
     * @memberof ApiV1PkiCollectionsCollectionIdItemsCollectionItemIdDelete200Response
     */
    'itemId': string;
}

export const ApiV1PkiCollectionsCollectionIdItemsCollectionItemIdDelete200ResponseTypeEnum = {
    Certificate: 'certificate',
    Ca: 'ca'
} as const;

export type ApiV1PkiCollectionsCollectionIdItemsCollectionItemIdDelete200ResponseTypeEnum = typeof ApiV1PkiCollectionsCollectionIdItemsCollectionItemIdDelete200ResponseTypeEnum[keyof typeof ApiV1PkiCollectionsCollectionIdItemsCollectionItemIdDelete200ResponseTypeEnum];

/**
 * 
 * @export
 * @interface ApiV1PkiCollectionsCollectionIdItemsGet200Response
 */
export interface ApiV1PkiCollectionsCollectionIdItemsGet200Response {
    /**
     * 
     * @type {Array<ApiV1PkiCollectionsCollectionIdItemsGet200ResponseCollectionItemsInner>}
     * @memberof ApiV1PkiCollectionsCollectionIdItemsGet200Response
     */
    'collectionItems': Array<ApiV1PkiCollectionsCollectionIdItemsGet200ResponseCollectionItemsInner>;
    /**
     * 
     * @type {number}
     * @memberof ApiV1PkiCollectionsCollectionIdItemsGet200Response
     */
    'totalCount': number;
}
/**
 * 
 * @export
 * @interface ApiV1PkiCollectionsCollectionIdItemsGet200ResponseCollectionItemsInner
 */
export interface ApiV1PkiCollectionsCollectionIdItemsGet200ResponseCollectionItemsInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1PkiCollectionsCollectionIdItemsGet200ResponseCollectionItemsInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PkiCollectionsCollectionIdItemsGet200ResponseCollectionItemsInner
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PkiCollectionsCollectionIdItemsGet200ResponseCollectionItemsInner
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PkiCollectionsCollectionIdItemsGet200ResponseCollectionItemsInner
     */
    'pkiCollectionId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PkiCollectionsCollectionIdItemsGet200ResponseCollectionItemsInner
     */
    'type': ApiV1PkiCollectionsCollectionIdItemsGet200ResponseCollectionItemsInnerTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PkiCollectionsCollectionIdItemsGet200ResponseCollectionItemsInner
     */
    'itemId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PkiCollectionsCollectionIdItemsGet200ResponseCollectionItemsInner
     */
    'notBefore': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PkiCollectionsCollectionIdItemsGet200ResponseCollectionItemsInner
     */
    'notAfter': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PkiCollectionsCollectionIdItemsGet200ResponseCollectionItemsInner
     */
    'friendlyName': string;
}

export const ApiV1PkiCollectionsCollectionIdItemsGet200ResponseCollectionItemsInnerTypeEnum = {
    Certificate: 'certificate',
    Ca: 'ca'
} as const;

export type ApiV1PkiCollectionsCollectionIdItemsGet200ResponseCollectionItemsInnerTypeEnum = typeof ApiV1PkiCollectionsCollectionIdItemsGet200ResponseCollectionItemsInnerTypeEnum[keyof typeof ApiV1PkiCollectionsCollectionIdItemsGet200ResponseCollectionItemsInnerTypeEnum];

/**
 * 
 * @export
 * @interface ApiV1PkiCollectionsCollectionIdItemsPost200Response
 */
export interface ApiV1PkiCollectionsCollectionIdItemsPost200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiV1PkiCollectionsCollectionIdItemsPost200Response
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PkiCollectionsCollectionIdItemsPost200Response
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PkiCollectionsCollectionIdItemsPost200Response
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PkiCollectionsCollectionIdItemsPost200Response
     */
    'pkiCollectionId': string;
    /**
     * The type of the PKI collection item to add
     * @type {string}
     * @memberof ApiV1PkiCollectionsCollectionIdItemsPost200Response
     */
    'type': ApiV1PkiCollectionsCollectionIdItemsPost200ResponseTypeEnum;
    /**
     * The resource ID of the PKI collection item to add
     * @type {string}
     * @memberof ApiV1PkiCollectionsCollectionIdItemsPost200Response
     */
    'itemId': string;
}

export const ApiV1PkiCollectionsCollectionIdItemsPost200ResponseTypeEnum = {
    Certificate: 'certificate',
    Ca: 'ca'
} as const;

export type ApiV1PkiCollectionsCollectionIdItemsPost200ResponseTypeEnum = typeof ApiV1PkiCollectionsCollectionIdItemsPost200ResponseTypeEnum[keyof typeof ApiV1PkiCollectionsCollectionIdItemsPost200ResponseTypeEnum];

/**
 * 
 * @export
 * @interface ApiV1PkiCollectionsCollectionIdItemsPostRequest
 */
export interface ApiV1PkiCollectionsCollectionIdItemsPostRequest {
    /**
     * The type of the PKI collection item to add
     * @type {string}
     * @memberof ApiV1PkiCollectionsCollectionIdItemsPostRequest
     */
    'type': ApiV1PkiCollectionsCollectionIdItemsPostRequestTypeEnum;
    /**
     * The resource ID of the PKI collection item to add
     * @type {string}
     * @memberof ApiV1PkiCollectionsCollectionIdItemsPostRequest
     */
    'itemId': string;
}

export const ApiV1PkiCollectionsCollectionIdItemsPostRequestTypeEnum = {
    Certificate: 'certificate',
    Ca: 'ca'
} as const;

export type ApiV1PkiCollectionsCollectionIdItemsPostRequestTypeEnum = typeof ApiV1PkiCollectionsCollectionIdItemsPostRequestTypeEnum[keyof typeof ApiV1PkiCollectionsCollectionIdItemsPostRequestTypeEnum];

/**
 * 
 * @export
 * @interface ApiV1PkiCollectionsCollectionIdPatchRequest
 */
export interface ApiV1PkiCollectionsCollectionIdPatchRequest {
    /**
     * The name of the PKI collection to update to
     * @type {string}
     * @memberof ApiV1PkiCollectionsCollectionIdPatchRequest
     */
    'name'?: string;
    /**
     * The description for the PKI collection to update to
     * @type {string}
     * @memberof ApiV1PkiCollectionsCollectionIdPatchRequest
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1PkiCollectionsPost200Response
 */
export interface ApiV1PkiCollectionsPost200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiV1PkiCollectionsPost200Response
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PkiCollectionsPost200Response
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PkiCollectionsPost200Response
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PkiCollectionsPost200Response
     */
    'projectId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PkiCollectionsPost200Response
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1PkiCollectionsPost200Response
     */
    'description': string;
}
/**
 * 
 * @export
 * @interface ApiV1PkiCollectionsPostRequest
 */
export interface ApiV1PkiCollectionsPostRequest {
    /**
     * The ID of the project to create the PKI collection in
     * @type {string}
     * @memberof ApiV1PkiCollectionsPostRequest
     */
    'projectId': string;
    /**
     * The name of the PKI collection
     * @type {string}
     * @memberof ApiV1PkiCollectionsPostRequest
     */
    'name': string;
    /**
     * A description for the PKI collection
     * @type {string}
     * @memberof ApiV1PkiCollectionsPostRequest
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1RateLimitGet200Response
 */
export interface ApiV1RateLimitGet200Response {
    /**
     * 
     * @type {ApiV1RateLimitGet200ResponseRateLimit}
     * @memberof ApiV1RateLimitGet200Response
     */
    'rateLimit': ApiV1RateLimitGet200ResponseRateLimit;
}
/**
 * 
 * @export
 * @interface ApiV1RateLimitGet200ResponseRateLimit
 */
export interface ApiV1RateLimitGet200ResponseRateLimit {
    /**
     * 
     * @type {string}
     * @memberof ApiV1RateLimitGet200ResponseRateLimit
     */
    'id': string;
    /**
     * 
     * @type {number}
     * @memberof ApiV1RateLimitGet200ResponseRateLimit
     */
    'readRateLimit'?: number;
    /**
     * 
     * @type {number}
     * @memberof ApiV1RateLimitGet200ResponseRateLimit
     */
    'writeRateLimit'?: number;
    /**
     * 
     * @type {number}
     * @memberof ApiV1RateLimitGet200ResponseRateLimit
     */
    'secretsRateLimit'?: number;
    /**
     * 
     * @type {number}
     * @memberof ApiV1RateLimitGet200ResponseRateLimit
     */
    'authRateLimit'?: number;
    /**
     * 
     * @type {number}
     * @memberof ApiV1RateLimitGet200ResponseRateLimit
     */
    'inviteUserRateLimit'?: number;
    /**
     * 
     * @type {number}
     * @memberof ApiV1RateLimitGet200ResponseRateLimit
     */
    'mfaRateLimit'?: number;
    /**
     * 
     * @type {number}
     * @memberof ApiV1RateLimitGet200ResponseRateLimit
     */
    'publicEndpointLimit'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiV1RateLimitGet200ResponseRateLimit
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1RateLimitGet200ResponseRateLimit
     */
    'updatedAt': string;
}
/**
 * 
 * @export
 * @interface ApiV1RateLimitPutRequest
 */
export interface ApiV1RateLimitPutRequest {
    /**
     * 
     * @type {number}
     * @memberof ApiV1RateLimitPutRequest
     */
    'readRateLimit': number;
    /**
     * 
     * @type {number}
     * @memberof ApiV1RateLimitPutRequest
     */
    'writeRateLimit': number;
    /**
     * 
     * @type {number}
     * @memberof ApiV1RateLimitPutRequest
     */
    'secretsRateLimit': number;
    /**
     * 
     * @type {number}
     * @memberof ApiV1RateLimitPutRequest
     */
    'authRateLimit': number;
    /**
     * 
     * @type {number}
     * @memberof ApiV1RateLimitPutRequest
     */
    'inviteUserRateLimit': number;
    /**
     * 
     * @type {number}
     * @memberof ApiV1RateLimitPutRequest
     */
    'mfaRateLimit': number;
    /**
     * 
     * @type {number}
     * @memberof ApiV1RateLimitPutRequest
     */
    'publicEndpointLimit': number;
}
/**
 * 
 * @export
 * @interface ApiV1ScimGroupsGet200Response
 */
export interface ApiV1ScimGroupsGet200Response {
    /**
     * 
     * @type {Array<ApiV1ScimGroupsGet200ResponseResourcesInner>}
     * @memberof ApiV1ScimGroupsGet200Response
     */
    'Resources': Array<ApiV1ScimGroupsGet200ResponseResourcesInner>;
    /**
     * 
     * @type {number}
     * @memberof ApiV1ScimGroupsGet200Response
     */
    'itemsPerPage': number;
    /**
     * 
     * @type {Array<string>}
     * @memberof ApiV1ScimGroupsGet200Response
     */
    'schemas': Array<string>;
    /**
     * 
     * @type {number}
     * @memberof ApiV1ScimGroupsGet200Response
     */
    'startIndex': number;
    /**
     * 
     * @type {number}
     * @memberof ApiV1ScimGroupsGet200Response
     */
    'totalResults': number;
}
/**
 * 
 * @export
 * @interface ApiV1ScimGroupsGet200ResponseResourcesInner
 */
export interface ApiV1ScimGroupsGet200ResponseResourcesInner {
    /**
     * 
     * @type {Array<string>}
     * @memberof ApiV1ScimGroupsGet200ResponseResourcesInner
     */
    'schemas': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ScimGroupsGet200ResponseResourcesInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ScimGroupsGet200ResponseResourcesInner
     */
    'displayName': string;
    /**
     * 
     * @type {Array<ApiV1ScimUsersOrgMembershipIdGet201ResponseGroupsInner>}
     * @memberof ApiV1ScimGroupsGet200ResponseResourcesInner
     */
    'members': Array<ApiV1ScimUsersOrgMembershipIdGet201ResponseGroupsInner>;
    /**
     * 
     * @type {ApiV1ScimGroupsGet200ResponseResourcesInnerMeta}
     * @memberof ApiV1ScimGroupsGet200ResponseResourcesInner
     */
    'meta': ApiV1ScimGroupsGet200ResponseResourcesInnerMeta;
}
/**
 * 
 * @export
 * @interface ApiV1ScimGroupsGet200ResponseResourcesInnerMeta
 */
export interface ApiV1ScimGroupsGet200ResponseResourcesInnerMeta {
    /**
     * 
     * @type {string}
     * @memberof ApiV1ScimGroupsGet200ResponseResourcesInnerMeta
     */
    'resourceType': string;
}
/**
 * 
 * @export
 * @interface ApiV1ScimGroupsGroupIdPatchRequest
 */
export interface ApiV1ScimGroupsGroupIdPatchRequest {
    /**
     * 
     * @type {Array<string>}
     * @memberof ApiV1ScimGroupsGroupIdPatchRequest
     */
    'schemas': Array<string>;
    /**
     * 
     * @type {Array<ApiV1ScimGroupsGroupIdPatchRequestOperationsInner>}
     * @memberof ApiV1ScimGroupsGroupIdPatchRequest
     */
    'Operations': Array<ApiV1ScimGroupsGroupIdPatchRequestOperationsInner>;
}
/**
 * 
 * @export
 * @interface ApiV1ScimGroupsGroupIdPatchRequestOperationsInner
 */
export interface ApiV1ScimGroupsGroupIdPatchRequestOperationsInner {
    /**
     * 
     * @type {ApiV1ScimGroupsGroupIdPatchRequestOperationsInnerAnyOf2Op}
     * @memberof ApiV1ScimGroupsGroupIdPatchRequestOperationsInner
     */
    'op': ApiV1ScimGroupsGroupIdPatchRequestOperationsInnerAnyOf2Op;
    /**
     * 
     * @type {Array<ApiV1ScimGroupsGroupIdPatchRequestOperationsInnerAnyOf2ValueInner>}
     * @memberof ApiV1ScimGroupsGroupIdPatchRequestOperationsInner
     */
    'value': Array<ApiV1ScimGroupsGroupIdPatchRequestOperationsInnerAnyOf2ValueInner>;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ScimGroupsGroupIdPatchRequestOperationsInner
     */
    'path': string;
}
/**
 * 
 * @export
 * @interface ApiV1ScimGroupsGroupIdPatchRequestOperationsInnerAnyOf
 */
export interface ApiV1ScimGroupsGroupIdPatchRequestOperationsInnerAnyOf {
    /**
     * 
     * @type {ApiV1ScimGroupsGroupIdPatchRequestOperationsInnerAnyOfOp}
     * @memberof ApiV1ScimGroupsGroupIdPatchRequestOperationsInnerAnyOf
     */
    'op': ApiV1ScimGroupsGroupIdPatchRequestOperationsInnerAnyOfOp;
    /**
     * 
     * @type {ApiV1ScimGroupsGroupIdPatchRequestOperationsInnerAnyOfValue}
     * @memberof ApiV1ScimGroupsGroupIdPatchRequestOperationsInnerAnyOf
     */
    'value': ApiV1ScimGroupsGroupIdPatchRequestOperationsInnerAnyOfValue;
}
/**
 * 
 * @export
 * @interface ApiV1ScimGroupsGroupIdPatchRequestOperationsInnerAnyOf1
 */
export interface ApiV1ScimGroupsGroupIdPatchRequestOperationsInnerAnyOf1 {
    /**
     * 
     * @type {ApiV1ScimGroupsGroupIdPatchRequestOperationsInnerAnyOf1Op}
     * @memberof ApiV1ScimGroupsGroupIdPatchRequestOperationsInnerAnyOf1
     */
    'op': ApiV1ScimGroupsGroupIdPatchRequestOperationsInnerAnyOf1Op;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ScimGroupsGroupIdPatchRequestOperationsInnerAnyOf1
     */
    'path': string;
}
/**
 * 
 * @export
 * @interface ApiV1ScimGroupsGroupIdPatchRequestOperationsInnerAnyOf1Op
 */
export interface ApiV1ScimGroupsGroupIdPatchRequestOperationsInnerAnyOf1Op {
}
/**
 * 
 * @export
 * @interface ApiV1ScimGroupsGroupIdPatchRequestOperationsInnerAnyOf2
 */
export interface ApiV1ScimGroupsGroupIdPatchRequestOperationsInnerAnyOf2 {
    /**
     * 
     * @type {ApiV1ScimGroupsGroupIdPatchRequestOperationsInnerAnyOf2Op}
     * @memberof ApiV1ScimGroupsGroupIdPatchRequestOperationsInnerAnyOf2
     */
    'op': ApiV1ScimGroupsGroupIdPatchRequestOperationsInnerAnyOf2Op;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ScimGroupsGroupIdPatchRequestOperationsInnerAnyOf2
     */
    'path': string;
    /**
     * 
     * @type {Array<ApiV1ScimGroupsGroupIdPatchRequestOperationsInnerAnyOf2ValueInner>}
     * @memberof ApiV1ScimGroupsGroupIdPatchRequestOperationsInnerAnyOf2
     */
    'value': Array<ApiV1ScimGroupsGroupIdPatchRequestOperationsInnerAnyOf2ValueInner>;
}
/**
 * 
 * @export
 * @interface ApiV1ScimGroupsGroupIdPatchRequestOperationsInnerAnyOf2Op
 */
export interface ApiV1ScimGroupsGroupIdPatchRequestOperationsInnerAnyOf2Op {
}
/**
 * 
 * @export
 * @interface ApiV1ScimGroupsGroupIdPatchRequestOperationsInnerAnyOf2ValueInner
 */
export interface ApiV1ScimGroupsGroupIdPatchRequestOperationsInnerAnyOf2ValueInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1ScimGroupsGroupIdPatchRequestOperationsInnerAnyOf2ValueInner
     */
    'value': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ScimGroupsGroupIdPatchRequestOperationsInnerAnyOf2ValueInner
     */
    'display'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1ScimGroupsGroupIdPatchRequestOperationsInnerAnyOfOp
 */
export interface ApiV1ScimGroupsGroupIdPatchRequestOperationsInnerAnyOfOp {
}
/**
 * 
 * @export
 * @interface ApiV1ScimGroupsGroupIdPatchRequestOperationsInnerAnyOfValue
 */
export interface ApiV1ScimGroupsGroupIdPatchRequestOperationsInnerAnyOfValue {
    /**
     * 
     * @type {string}
     * @memberof ApiV1ScimGroupsGroupIdPatchRequestOperationsInnerAnyOfValue
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ScimGroupsGroupIdPatchRequestOperationsInnerAnyOfValue
     */
    'displayName': string;
}
/**
 * 
 * @export
 * @interface ApiV1ScimGroupsGroupIdPutRequest
 */
export interface ApiV1ScimGroupsGroupIdPutRequest {
    /**
     * 
     * @type {Array<string>}
     * @memberof ApiV1ScimGroupsGroupIdPutRequest
     */
    'schemas': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ScimGroupsGroupIdPutRequest
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ScimGroupsGroupIdPutRequest
     */
    'displayName': string;
    /**
     * 
     * @type {Array<ApiV1ScimUsersOrgMembershipIdGet201ResponseGroupsInner>}
     * @memberof ApiV1ScimGroupsGroupIdPutRequest
     */
    'members': Array<ApiV1ScimUsersOrgMembershipIdGet201ResponseGroupsInner>;
}
/**
 * 
 * @export
 * @interface ApiV1ScimGroupsPost200Response
 */
export interface ApiV1ScimGroupsPost200Response {
    /**
     * 
     * @type {Array<string>}
     * @memberof ApiV1ScimGroupsPost200Response
     */
    'schemas': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ScimGroupsPost200Response
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ScimGroupsPost200Response
     */
    'displayName': string;
    /**
     * 
     * @type {Array<ApiV1ScimUsersOrgMembershipIdGet201ResponseGroupsInner>}
     * @memberof ApiV1ScimGroupsPost200Response
     */
    'members'?: Array<ApiV1ScimUsersOrgMembershipIdGet201ResponseGroupsInner>;
    /**
     * 
     * @type {ApiV1ScimGroupsGet200ResponseResourcesInnerMeta}
     * @memberof ApiV1ScimGroupsPost200Response
     */
    'meta': ApiV1ScimGroupsGet200ResponseResourcesInnerMeta;
}
/**
 * 
 * @export
 * @interface ApiV1ScimGroupsPostRequest
 */
export interface ApiV1ScimGroupsPostRequest {
    /**
     * 
     * @type {Array<string>}
     * @memberof ApiV1ScimGroupsPostRequest
     */
    'schemas': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ScimGroupsPostRequest
     */
    'displayName': string;
    /**
     * 
     * @type {Array<ApiV1ScimUsersOrgMembershipIdGet201ResponseGroupsInner>}
     * @memberof ApiV1ScimGroupsPostRequest
     */
    'members'?: Array<ApiV1ScimUsersOrgMembershipIdGet201ResponseGroupsInner>;
}
/**
 * 
 * @export
 * @interface ApiV1ScimScimTokensGet200Response
 */
export interface ApiV1ScimScimTokensGet200Response {
    /**
     * 
     * @type {Array<ApiV1ScimScimTokensGet200ResponseScimTokensInner>}
     * @memberof ApiV1ScimScimTokensGet200Response
     */
    'scimTokens': Array<ApiV1ScimScimTokensGet200ResponseScimTokensInner>;
}
/**
 * 
 * @export
 * @interface ApiV1ScimScimTokensGet200ResponseScimTokensInner
 */
export interface ApiV1ScimScimTokensGet200ResponseScimTokensInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1ScimScimTokensGet200ResponseScimTokensInner
     */
    'id': string;
    /**
     * 
     * @type {number}
     * @memberof ApiV1ScimScimTokensGet200ResponseScimTokensInner
     */
    'ttlDays'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ScimScimTokensGet200ResponseScimTokensInner
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ScimScimTokensGet200ResponseScimTokensInner
     */
    'orgId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ScimScimTokensGet200ResponseScimTokensInner
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ScimScimTokensGet200ResponseScimTokensInner
     */
    'updatedAt': string;
}
/**
 * 
 * @export
 * @interface ApiV1ScimScimTokensPost200Response
 */
export interface ApiV1ScimScimTokensPost200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiV1ScimScimTokensPost200Response
     */
    'scimToken': string;
}
/**
 * 
 * @export
 * @interface ApiV1ScimScimTokensPostRequest
 */
export interface ApiV1ScimScimTokensPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1ScimScimTokensPostRequest
     */
    'organizationId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ScimScimTokensPostRequest
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof ApiV1ScimScimTokensPostRequest
     */
    'ttlDays'?: number;
}
/**
 * 
 * @export
 * @interface ApiV1ScimScimTokensScimTokenIdDelete200Response
 */
export interface ApiV1ScimScimTokensScimTokenIdDelete200Response {
    /**
     * 
     * @type {ApiV1ScimScimTokensGet200ResponseScimTokensInner}
     * @memberof ApiV1ScimScimTokensScimTokenIdDelete200Response
     */
    'scimToken': ApiV1ScimScimTokensGet200ResponseScimTokensInner;
}
/**
 * 
 * @export
 * @interface ApiV1ScimUsersGet200Response
 */
export interface ApiV1ScimUsersGet200Response {
    /**
     * 
     * @type {Array<ApiV1ScimUsersGet200ResponseResourcesInner>}
     * @memberof ApiV1ScimUsersGet200Response
     */
    'Resources': Array<ApiV1ScimUsersGet200ResponseResourcesInner>;
    /**
     * 
     * @type {number}
     * @memberof ApiV1ScimUsersGet200Response
     */
    'itemsPerPage': number;
    /**
     * 
     * @type {Array<string>}
     * @memberof ApiV1ScimUsersGet200Response
     */
    'schemas': Array<string>;
    /**
     * 
     * @type {number}
     * @memberof ApiV1ScimUsersGet200Response
     */
    'startIndex': number;
    /**
     * 
     * @type {number}
     * @memberof ApiV1ScimUsersGet200Response
     */
    'totalResults': number;
}
/**
 * 
 * @export
 * @interface ApiV1ScimUsersGet200ResponseResourcesInner
 */
export interface ApiV1ScimUsersGet200ResponseResourcesInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1ScimUsersGet200ResponseResourcesInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ScimUsersGet200ResponseResourcesInner
     */
    'userName': string;
    /**
     * 
     * @type {ApiV1ScimUsersGet200ResponseResourcesInnerName}
     * @memberof ApiV1ScimUsersGet200ResponseResourcesInner
     */
    'name': ApiV1ScimUsersGet200ResponseResourcesInnerName;
    /**
     * 
     * @type {Array<ApiV1ScimUsersGet200ResponseResourcesInnerEmailsInner>}
     * @memberof ApiV1ScimUsersGet200ResponseResourcesInner
     */
    'emails': Array<ApiV1ScimUsersGet200ResponseResourcesInnerEmailsInner>;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ScimUsersGet200ResponseResourcesInner
     */
    'displayName': string;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1ScimUsersGet200ResponseResourcesInner
     */
    'active': boolean;
}
/**
 * 
 * @export
 * @interface ApiV1ScimUsersGet200ResponseResourcesInnerEmailsInner
 */
export interface ApiV1ScimUsersGet200ResponseResourcesInnerEmailsInner {
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1ScimUsersGet200ResponseResourcesInnerEmailsInner
     */
    'primary': boolean;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ScimUsersGet200ResponseResourcesInnerEmailsInner
     */
    'value': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ScimUsersGet200ResponseResourcesInnerEmailsInner
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface ApiV1ScimUsersGet200ResponseResourcesInnerName
 */
export interface ApiV1ScimUsersGet200ResponseResourcesInnerName {
    /**
     * 
     * @type {string}
     * @memberof ApiV1ScimUsersGet200ResponseResourcesInnerName
     */
    'familyName': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ScimUsersGet200ResponseResourcesInnerName
     */
    'givenName': string;
}
/**
 * 
 * @export
 * @interface ApiV1ScimUsersOrgMembershipIdGet201Response
 */
export interface ApiV1ScimUsersOrgMembershipIdGet201Response {
    /**
     * 
     * @type {Array<string>}
     * @memberof ApiV1ScimUsersOrgMembershipIdGet201Response
     */
    'schemas': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ScimUsersOrgMembershipIdGet201Response
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ScimUsersOrgMembershipIdGet201Response
     */
    'userName': string;
    /**
     * 
     * @type {ApiV1ScimUsersGet200ResponseResourcesInnerName}
     * @memberof ApiV1ScimUsersOrgMembershipIdGet201Response
     */
    'name': ApiV1ScimUsersGet200ResponseResourcesInnerName;
    /**
     * 
     * @type {Array<ApiV1ScimUsersGet200ResponseResourcesInnerEmailsInner>}
     * @memberof ApiV1ScimUsersOrgMembershipIdGet201Response
     */
    'emails': Array<ApiV1ScimUsersGet200ResponseResourcesInnerEmailsInner>;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ScimUsersOrgMembershipIdGet201Response
     */
    'displayName': string;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1ScimUsersOrgMembershipIdGet201Response
     */
    'active': boolean;
    /**
     * 
     * @type {Array<ApiV1ScimUsersOrgMembershipIdGet201ResponseGroupsInner>}
     * @memberof ApiV1ScimUsersOrgMembershipIdGet201Response
     */
    'groups': Array<ApiV1ScimUsersOrgMembershipIdGet201ResponseGroupsInner>;
}
/**
 * 
 * @export
 * @interface ApiV1ScimUsersOrgMembershipIdGet201ResponseGroupsInner
 */
export interface ApiV1ScimUsersOrgMembershipIdGet201ResponseGroupsInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1ScimUsersOrgMembershipIdGet201ResponseGroupsInner
     */
    'value': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ScimUsersOrgMembershipIdGet201ResponseGroupsInner
     */
    'display': string;
}
/**
 * 
 * @export
 * @interface ApiV1ScimUsersOrgMembershipIdPut200Response
 */
export interface ApiV1ScimUsersOrgMembershipIdPut200Response {
    /**
     * 
     * @type {Array<string>}
     * @memberof ApiV1ScimUsersOrgMembershipIdPut200Response
     */
    'schemas': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ScimUsersOrgMembershipIdPut200Response
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ScimUsersOrgMembershipIdPut200Response
     */
    'userName': string;
    /**
     * 
     * @type {ApiV1ScimUsersGet200ResponseResourcesInnerName}
     * @memberof ApiV1ScimUsersOrgMembershipIdPut200Response
     */
    'name': ApiV1ScimUsersGet200ResponseResourcesInnerName;
    /**
     * 
     * @type {Array<ApiV1ScimUsersPostRequestEmailsInner>}
     * @memberof ApiV1ScimUsersOrgMembershipIdPut200Response
     */
    'emails': Array<ApiV1ScimUsersPostRequestEmailsInner>;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ScimUsersOrgMembershipIdPut200Response
     */
    'displayName': string;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1ScimUsersOrgMembershipIdPut200Response
     */
    'active': boolean;
    /**
     * 
     * @type {Array<ApiV1ScimUsersOrgMembershipIdGet201ResponseGroupsInner>}
     * @memberof ApiV1ScimUsersOrgMembershipIdPut200Response
     */
    'groups': Array<ApiV1ScimUsersOrgMembershipIdGet201ResponseGroupsInner>;
}
/**
 * 
 * @export
 * @interface ApiV1ScimUsersOrgMembershipIdPutRequest
 */
export interface ApiV1ScimUsersOrgMembershipIdPutRequest {
    /**
     * 
     * @type {Array<string>}
     * @memberof ApiV1ScimUsersOrgMembershipIdPutRequest
     */
    'schemas': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ScimUsersOrgMembershipIdPutRequest
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ScimUsersOrgMembershipIdPutRequest
     */
    'userName': string;
    /**
     * 
     * @type {ApiV1ScimUsersGet200ResponseResourcesInnerName}
     * @memberof ApiV1ScimUsersOrgMembershipIdPutRequest
     */
    'name': ApiV1ScimUsersGet200ResponseResourcesInnerName;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ScimUsersOrgMembershipIdPutRequest
     */
    'displayName': string;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1ScimUsersOrgMembershipIdPutRequest
     */
    'active': boolean;
}
/**
 * 
 * @export
 * @interface ApiV1ScimUsersPost200Response
 */
export interface ApiV1ScimUsersPost200Response {
    /**
     * 
     * @type {Array<string>}
     * @memberof ApiV1ScimUsersPost200Response
     */
    'schemas': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ScimUsersPost200Response
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ScimUsersPost200Response
     */
    'userName': string;
    /**
     * 
     * @type {ApiV1ScimUsersGet200ResponseResourcesInnerName}
     * @memberof ApiV1ScimUsersPost200Response
     */
    'name': ApiV1ScimUsersGet200ResponseResourcesInnerName;
    /**
     * 
     * @type {Array<ApiV1ScimUsersPostRequestEmailsInner>}
     * @memberof ApiV1ScimUsersPost200Response
     */
    'emails': Array<ApiV1ScimUsersPostRequestEmailsInner>;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ScimUsersPost200Response
     */
    'displayName': string;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1ScimUsersPost200Response
     */
    'active': boolean;
}
/**
 * 
 * @export
 * @interface ApiV1ScimUsersPostRequest
 */
export interface ApiV1ScimUsersPostRequest {
    /**
     * 
     * @type {Array<string>}
     * @memberof ApiV1ScimUsersPostRequest
     */
    'schemas': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ScimUsersPostRequest
     */
    'userName': string;
    /**
     * 
     * @type {ApiV1ScimUsersGet200ResponseResourcesInnerName}
     * @memberof ApiV1ScimUsersPostRequest
     */
    'name': ApiV1ScimUsersGet200ResponseResourcesInnerName;
    /**
     * 
     * @type {Array<ApiV1ScimUsersPostRequestEmailsInner>}
     * @memberof ApiV1ScimUsersPostRequest
     */
    'emails'?: Array<ApiV1ScimUsersPostRequestEmailsInner>;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1ScimUsersPostRequest
     */
    'active': boolean;
}
/**
 * 
 * @export
 * @interface ApiV1ScimUsersPostRequestEmailsInner
 */
export interface ApiV1ScimUsersPostRequestEmailsInner {
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1ScimUsersPostRequestEmailsInner
     */
    'primary': boolean;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ScimUsersPostRequestEmailsInner
     */
    'value': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ScimUsersPostRequestEmailsInner
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface ApiV1SecretApprovalRequestsCountGet200Response
 */
export interface ApiV1SecretApprovalRequestsCountGet200Response {
    /**
     * 
     * @type {ApiV1SecretApprovalRequestsCountGet200ResponseApprovals}
     * @memberof ApiV1SecretApprovalRequestsCountGet200Response
     */
    'approvals': ApiV1SecretApprovalRequestsCountGet200ResponseApprovals;
}
/**
 * 
 * @export
 * @interface ApiV1SecretApprovalRequestsCountGet200ResponseApprovals
 */
export interface ApiV1SecretApprovalRequestsCountGet200ResponseApprovals {
    /**
     * 
     * @type {number}
     * @memberof ApiV1SecretApprovalRequestsCountGet200ResponseApprovals
     */
    'open'?: number;
    /**
     * 
     * @type {number}
     * @memberof ApiV1SecretApprovalRequestsCountGet200ResponseApprovals
     */
    'closed'?: number;
}
/**
 * 
 * @export
 * @interface ApiV1SecretApprovalRequestsGet200Response
 */
export interface ApiV1SecretApprovalRequestsGet200Response {
    /**
     * 
     * @type {Array<ApiV1SecretApprovalRequestsGet200ResponseApprovalsInner>}
     * @memberof ApiV1SecretApprovalRequestsGet200Response
     */
    'approvals': Array<ApiV1SecretApprovalRequestsGet200ResponseApprovalsInner>;
}
/**
 * 
 * @export
 * @interface ApiV1SecretApprovalRequestsGet200ResponseApprovalsInner
 */
export interface ApiV1SecretApprovalRequestsGet200ResponseApprovalsInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalRequestsGet200ResponseApprovalsInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalRequestsGet200ResponseApprovalsInner
     */
    'policyId': string;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1SecretApprovalRequestsGet200ResponseApprovalsInner
     */
    'hasMerged'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalRequestsGet200ResponseApprovalsInner
     */
    'status'?: string;
    /**
     * 
     * @type {any}
     * @memberof ApiV1SecretApprovalRequestsGet200ResponseApprovalsInner
     */
    'conflicts'?: any | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalRequestsGet200ResponseApprovalsInner
     */
    'slug': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalRequestsGet200ResponseApprovalsInner
     */
    'folderId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalRequestsGet200ResponseApprovalsInner
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalRequestsGet200ResponseApprovalsInner
     */
    'updatedAt': string;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1SecretApprovalRequestsGet200ResponseApprovalsInner
     */
    'isReplicated'?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalRequestsGet200ResponseApprovalsInner
     */
    'committerUserId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalRequestsGet200ResponseApprovalsInner
     */
    'statusChangedByUserId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalRequestsGet200ResponseApprovalsInner
     */
    'bypassReason'?: string | null;
    /**
     * 
     * @type {ApiV1SecretApprovalRequestsGet200ResponseApprovalsInnerPolicy}
     * @memberof ApiV1SecretApprovalRequestsGet200ResponseApprovalsInner
     */
    'policy': ApiV1SecretApprovalRequestsGet200ResponseApprovalsInnerPolicy;
    /**
     * 
     * @type {ApiV1SecretApprovalRequestsGet200ResponseApprovalsInnerCommitterUser}
     * @memberof ApiV1SecretApprovalRequestsGet200ResponseApprovalsInner
     */
    'committerUser': ApiV1SecretApprovalRequestsGet200ResponseApprovalsInnerCommitterUser;
    /**
     * 
     * @type {Array<ApiV1SecretApprovalRequestsGet200ResponseApprovalsInnerCommitsInner>}
     * @memberof ApiV1SecretApprovalRequestsGet200ResponseApprovalsInner
     */
    'commits': Array<ApiV1SecretApprovalRequestsGet200ResponseApprovalsInnerCommitsInner>;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalRequestsGet200ResponseApprovalsInner
     */
    'environment': string;
    /**
     * 
     * @type {Array<ApiV1SecretApprovalRequestsGet200ResponseApprovalsInnerReviewersInner>}
     * @memberof ApiV1SecretApprovalRequestsGet200ResponseApprovalsInner
     */
    'reviewers': Array<ApiV1SecretApprovalRequestsGet200ResponseApprovalsInnerReviewersInner>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ApiV1SecretApprovalRequestsGet200ResponseApprovalsInner
     */
    'approvers': Array<string>;
}
/**
 * 
 * @export
 * @interface ApiV1SecretApprovalRequestsGet200ResponseApprovalsInnerCommitsInner
 */
export interface ApiV1SecretApprovalRequestsGet200ResponseApprovalsInnerCommitsInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalRequestsGet200ResponseApprovalsInnerCommitsInner
     */
    'op': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalRequestsGet200ResponseApprovalsInnerCommitsInner
     */
    'secretId'?: string | null;
}
/**
 * 
 * @export
 * @interface ApiV1SecretApprovalRequestsGet200ResponseApprovalsInnerCommitterUser
 */
export interface ApiV1SecretApprovalRequestsGet200ResponseApprovalsInnerCommitterUser {
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalRequestsGet200ResponseApprovalsInnerCommitterUser
     */
    'userId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalRequestsGet200ResponseApprovalsInnerCommitterUser
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalRequestsGet200ResponseApprovalsInnerCommitterUser
     */
    'firstName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalRequestsGet200ResponseApprovalsInnerCommitterUser
     */
    'lastName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalRequestsGet200ResponseApprovalsInnerCommitterUser
     */
    'username': string;
}
/**
 * 
 * @export
 * @interface ApiV1SecretApprovalRequestsGet200ResponseApprovalsInnerPolicy
 */
export interface ApiV1SecretApprovalRequestsGet200ResponseApprovalsInnerPolicy {
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalRequestsGet200ResponseApprovalsInnerPolicy
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalRequestsGet200ResponseApprovalsInnerPolicy
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof ApiV1SecretApprovalRequestsGet200ResponseApprovalsInnerPolicy
     */
    'approvals': number;
    /**
     * 
     * @type {Array<string>}
     * @memberof ApiV1SecretApprovalRequestsGet200ResponseApprovalsInnerPolicy
     */
    'approvers': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalRequestsGet200ResponseApprovalsInnerPolicy
     */
    'secretPath'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalRequestsGet200ResponseApprovalsInnerPolicy
     */
    'enforcementLevel': string;
}
/**
 * 
 * @export
 * @interface ApiV1SecretApprovalRequestsGet200ResponseApprovalsInnerReviewersInner
 */
export interface ApiV1SecretApprovalRequestsGet200ResponseApprovalsInnerReviewersInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalRequestsGet200ResponseApprovalsInnerReviewersInner
     */
    'userId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalRequestsGet200ResponseApprovalsInnerReviewersInner
     */
    'status': string;
}
/**
 * 
 * @export
 * @interface ApiV1SecretApprovalRequestsIdGet200Response
 */
export interface ApiV1SecretApprovalRequestsIdGet200Response {
    /**
     * 
     * @type {ApiV1SecretApprovalRequestsIdGet200ResponseApproval}
     * @memberof ApiV1SecretApprovalRequestsIdGet200Response
     */
    'approval': ApiV1SecretApprovalRequestsIdGet200ResponseApproval;
}
/**
 * 
 * @export
 * @interface ApiV1SecretApprovalRequestsIdGet200ResponseApproval
 */
export interface ApiV1SecretApprovalRequestsIdGet200ResponseApproval {
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalRequestsIdGet200ResponseApproval
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalRequestsIdGet200ResponseApproval
     */
    'policyId': string;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1SecretApprovalRequestsIdGet200ResponseApproval
     */
    'hasMerged'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalRequestsIdGet200ResponseApproval
     */
    'status'?: string;
    /**
     * 
     * @type {any}
     * @memberof ApiV1SecretApprovalRequestsIdGet200ResponseApproval
     */
    'conflicts'?: any | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalRequestsIdGet200ResponseApproval
     */
    'slug': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalRequestsIdGet200ResponseApproval
     */
    'folderId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalRequestsIdGet200ResponseApproval
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalRequestsIdGet200ResponseApproval
     */
    'updatedAt': string;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1SecretApprovalRequestsIdGet200ResponseApproval
     */
    'isReplicated'?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalRequestsIdGet200ResponseApproval
     */
    'committerUserId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalRequestsIdGet200ResponseApproval
     */
    'statusChangedByUserId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalRequestsIdGet200ResponseApproval
     */
    'bypassReason'?: string | null;
    /**
     * 
     * @type {ApiV1SecretApprovalRequestsIdGet200ResponseApprovalPolicy}
     * @memberof ApiV1SecretApprovalRequestsIdGet200ResponseApproval
     */
    'policy': ApiV1SecretApprovalRequestsIdGet200ResponseApprovalPolicy;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalRequestsIdGet200ResponseApproval
     */
    'environment': string;
    /**
     * 
     * @type {ApiV1SecretApprovalRequestsGet200ResponseApprovalsInnerCommitterUser}
     * @memberof ApiV1SecretApprovalRequestsIdGet200ResponseApproval
     */
    'statusChangedByUser'?: ApiV1SecretApprovalRequestsGet200ResponseApprovalsInnerCommitterUser;
    /**
     * 
     * @type {ApiV1SecretApprovalRequestsGet200ResponseApprovalsInnerCommitterUser}
     * @memberof ApiV1SecretApprovalRequestsIdGet200ResponseApproval
     */
    'committerUser': ApiV1SecretApprovalRequestsGet200ResponseApprovalsInnerCommitterUser;
    /**
     * 
     * @type {Array<ApiV1SecretApprovalRequestsIdGet200ResponseApprovalReviewersInner>}
     * @memberof ApiV1SecretApprovalRequestsIdGet200ResponseApproval
     */
    'reviewers': Array<ApiV1SecretApprovalRequestsIdGet200ResponseApprovalReviewersInner>;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalRequestsIdGet200ResponseApproval
     */
    'secretPath': string;
    /**
     * 
     * @type {Array<ApiV1SecretApprovalRequestsIdGet200ResponseApprovalCommitsInner>}
     * @memberof ApiV1SecretApprovalRequestsIdGet200ResponseApproval
     */
    'commits': Array<ApiV1SecretApprovalRequestsIdGet200ResponseApprovalCommitsInner>;
}
/**
 * 
 * @export
 * @interface ApiV1SecretApprovalRequestsIdGet200ResponseApprovalCommitsInner
 */
export interface ApiV1SecretApprovalRequestsIdGet200ResponseApprovalCommitsInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalRequestsIdGet200ResponseApprovalCommitsInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalRequestsIdGet200ResponseApprovalCommitsInner
     */
    'secretKey': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalRequestsIdGet200ResponseApprovalCommitsInner
     */
    'secretValue': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalRequestsIdGet200ResponseApprovalCommitsInner
     */
    'secretComment': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalRequestsIdGet200ResponseApprovalCommitsInner
     */
    'secretReminderNote'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ApiV1SecretApprovalRequestsIdGet200ResponseApprovalCommitsInner
     */
    'secretReminderRepeatDays'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1SecretApprovalRequestsIdGet200ResponseApprovalCommitsInner
     */
    'skipMultilineEncoding'?: boolean | null;
    /**
     * 
     * @type {any}
     * @memberof ApiV1SecretApprovalRequestsIdGet200ResponseApprovalCommitsInner
     */
    'metadata'?: any | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalRequestsIdGet200ResponseApprovalCommitsInner
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalRequestsIdGet200ResponseApprovalCommitsInner
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalRequestsIdGet200ResponseApprovalCommitsInner
     */
    'op': string;
    /**
     * 
     * @type {Array<ApiV1SecretSnapshotSecretSnapshotIdGet200ResponseSecretSnapshotSecretVersionsInnerTagsInner>}
     * @memberof ApiV1SecretApprovalRequestsIdGet200ResponseApprovalCommitsInner
     */
    'tags'?: Array<ApiV1SecretSnapshotSecretSnapshotIdGet200ResponseSecretSnapshotSecretVersionsInnerTagsInner>;
    /**
     * 
     * @type {ApiV1SecretApprovalRequestsIdGet200ResponseApprovalCommitsInnerSecret}
     * @memberof ApiV1SecretApprovalRequestsIdGet200ResponseApprovalCommitsInner
     */
    'secret'?: ApiV1SecretApprovalRequestsIdGet200ResponseApprovalCommitsInnerSecret | null;
    /**
     * 
     * @type {ApiV1SecretApprovalRequestsIdGet200ResponseApprovalCommitsInnerSecretVersion}
     * @memberof ApiV1SecretApprovalRequestsIdGet200ResponseApprovalCommitsInner
     */
    'secretVersion'?: ApiV1SecretApprovalRequestsIdGet200ResponseApprovalCommitsInnerSecretVersion;
}
/**
 * 
 * @export
 * @interface ApiV1SecretApprovalRequestsIdGet200ResponseApprovalCommitsInnerSecret
 */
export interface ApiV1SecretApprovalRequestsIdGet200ResponseApprovalCommitsInnerSecret {
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalRequestsIdGet200ResponseApprovalCommitsInnerSecret
     */
    'id': string;
    /**
     * 
     * @type {number}
     * @memberof ApiV1SecretApprovalRequestsIdGet200ResponseApprovalCommitsInnerSecret
     */
    'version': number;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalRequestsIdGet200ResponseApprovalCommitsInnerSecret
     */
    'secretKey': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalRequestsIdGet200ResponseApprovalCommitsInnerSecret
     */
    'secretValue'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalRequestsIdGet200ResponseApprovalCommitsInnerSecret
     */
    'secretComment'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1SecretApprovalRequestsIdGet200ResponseApprovalCommitsInnerSecretVersion
 */
export interface ApiV1SecretApprovalRequestsIdGet200ResponseApprovalCommitsInnerSecretVersion {
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalRequestsIdGet200ResponseApprovalCommitsInnerSecretVersion
     */
    'id': string;
    /**
     * 
     * @type {number}
     * @memberof ApiV1SecretApprovalRequestsIdGet200ResponseApprovalCommitsInnerSecretVersion
     */
    'version': number;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalRequestsIdGet200ResponseApprovalCommitsInnerSecretVersion
     */
    'secretKey': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalRequestsIdGet200ResponseApprovalCommitsInnerSecretVersion
     */
    'secretValue'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalRequestsIdGet200ResponseApprovalCommitsInnerSecretVersion
     */
    'secretComment'?: string;
    /**
     * 
     * @type {Array<ApiV1SecretSnapshotSecretSnapshotIdGet200ResponseSecretSnapshotSecretVersionsInnerTagsInner>}
     * @memberof ApiV1SecretApprovalRequestsIdGet200ResponseApprovalCommitsInnerSecretVersion
     */
    'tags'?: Array<ApiV1SecretSnapshotSecretSnapshotIdGet200ResponseSecretSnapshotSecretVersionsInnerTagsInner>;
}
/**
 * 
 * @export
 * @interface ApiV1SecretApprovalRequestsIdGet200ResponseApprovalPolicy
 */
export interface ApiV1SecretApprovalRequestsIdGet200ResponseApprovalPolicy {
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalRequestsIdGet200ResponseApprovalPolicy
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalRequestsIdGet200ResponseApprovalPolicy
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof ApiV1SecretApprovalRequestsIdGet200ResponseApprovalPolicy
     */
    'approvals': number;
    /**
     * 
     * @type {Array<ApiV1SecretApprovalRequestsGet200ResponseApprovalsInnerCommitterUser>}
     * @memberof ApiV1SecretApprovalRequestsIdGet200ResponseApprovalPolicy
     */
    'approvers': Array<ApiV1SecretApprovalRequestsGet200ResponseApprovalsInnerCommitterUser>;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalRequestsIdGet200ResponseApprovalPolicy
     */
    'secretPath'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalRequestsIdGet200ResponseApprovalPolicy
     */
    'enforcementLevel': string;
}
/**
 * 
 * @export
 * @interface ApiV1SecretApprovalRequestsIdGet200ResponseApprovalReviewersInner
 */
export interface ApiV1SecretApprovalRequestsIdGet200ResponseApprovalReviewersInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalRequestsIdGet200ResponseApprovalReviewersInner
     */
    'userId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalRequestsIdGet200ResponseApprovalReviewersInner
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalRequestsIdGet200ResponseApprovalReviewersInner
     */
    'firstName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalRequestsIdGet200ResponseApprovalReviewersInner
     */
    'lastName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalRequestsIdGet200ResponseApprovalReviewersInner
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalRequestsIdGet200ResponseApprovalReviewersInner
     */
    'status': string;
}
/**
 * 
 * @export
 * @interface ApiV1SecretApprovalRequestsIdMergePost200Response
 */
export interface ApiV1SecretApprovalRequestsIdMergePost200Response {
    /**
     * 
     * @type {ApiV1SecretApprovalRequestsIdMergePost200ResponseApproval}
     * @memberof ApiV1SecretApprovalRequestsIdMergePost200Response
     */
    'approval': ApiV1SecretApprovalRequestsIdMergePost200ResponseApproval;
}
/**
 * 
 * @export
 * @interface ApiV1SecretApprovalRequestsIdMergePost200ResponseApproval
 */
export interface ApiV1SecretApprovalRequestsIdMergePost200ResponseApproval {
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalRequestsIdMergePost200ResponseApproval
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalRequestsIdMergePost200ResponseApproval
     */
    'policyId': string;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1SecretApprovalRequestsIdMergePost200ResponseApproval
     */
    'hasMerged'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalRequestsIdMergePost200ResponseApproval
     */
    'status'?: string;
    /**
     * 
     * @type {any}
     * @memberof ApiV1SecretApprovalRequestsIdMergePost200ResponseApproval
     */
    'conflicts'?: any | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalRequestsIdMergePost200ResponseApproval
     */
    'slug': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalRequestsIdMergePost200ResponseApproval
     */
    'folderId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalRequestsIdMergePost200ResponseApproval
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalRequestsIdMergePost200ResponseApproval
     */
    'updatedAt': string;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1SecretApprovalRequestsIdMergePost200ResponseApproval
     */
    'isReplicated'?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalRequestsIdMergePost200ResponseApproval
     */
    'committerUserId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalRequestsIdMergePost200ResponseApproval
     */
    'statusChangedByUserId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalRequestsIdMergePost200ResponseApproval
     */
    'bypassReason'?: string | null;
}
/**
 * 
 * @export
 * @interface ApiV1SecretApprovalRequestsIdMergePostRequest
 */
export interface ApiV1SecretApprovalRequestsIdMergePostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalRequestsIdMergePostRequest
     */
    'bypassReason'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1SecretApprovalRequestsIdReviewPost200Response
 */
export interface ApiV1SecretApprovalRequestsIdReviewPost200Response {
    /**
     * 
     * @type {ApiV1SecretApprovalRequestsIdReviewPost200ResponseReview}
     * @memberof ApiV1SecretApprovalRequestsIdReviewPost200Response
     */
    'review': ApiV1SecretApprovalRequestsIdReviewPost200ResponseReview;
}
/**
 * 
 * @export
 * @interface ApiV1SecretApprovalRequestsIdReviewPost200ResponseReview
 */
export interface ApiV1SecretApprovalRequestsIdReviewPost200ResponseReview {
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalRequestsIdReviewPost200ResponseReview
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalRequestsIdReviewPost200ResponseReview
     */
    'status': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalRequestsIdReviewPost200ResponseReview
     */
    'requestId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalRequestsIdReviewPost200ResponseReview
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalRequestsIdReviewPost200ResponseReview
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalRequestsIdReviewPost200ResponseReview
     */
    'reviewerUserId': string;
}
/**
 * 
 * @export
 * @interface ApiV1SecretApprovalRequestsIdReviewPostRequest
 */
export interface ApiV1SecretApprovalRequestsIdReviewPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalRequestsIdReviewPostRequest
     */
    'status': ApiV1SecretApprovalRequestsIdReviewPostRequestStatusEnum;
}

export const ApiV1SecretApprovalRequestsIdReviewPostRequestStatusEnum = {
    Approved: 'approved',
    Rejected: 'rejected'
} as const;

export type ApiV1SecretApprovalRequestsIdReviewPostRequestStatusEnum = typeof ApiV1SecretApprovalRequestsIdReviewPostRequestStatusEnum[keyof typeof ApiV1SecretApprovalRequestsIdReviewPostRequestStatusEnum];

/**
 * 
 * @export
 * @interface ApiV1SecretApprovalRequestsIdStatusPostRequest
 */
export interface ApiV1SecretApprovalRequestsIdStatusPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalRequestsIdStatusPostRequest
     */
    'status': ApiV1SecretApprovalRequestsIdStatusPostRequestStatusEnum;
}

export const ApiV1SecretApprovalRequestsIdStatusPostRequestStatusEnum = {
    Open: 'open',
    Close: 'close'
} as const;

export type ApiV1SecretApprovalRequestsIdStatusPostRequestStatusEnum = typeof ApiV1SecretApprovalRequestsIdStatusPostRequestStatusEnum[keyof typeof ApiV1SecretApprovalRequestsIdStatusPostRequestStatusEnum];

/**
 * 
 * @export
 * @interface ApiV1SecretApprovalsBoardGet200Response
 */
export interface ApiV1SecretApprovalsBoardGet200Response {
    /**
     * 
     * @type {ApiV1SecretApprovalsGet200ResponseApprovalsInner}
     * @memberof ApiV1SecretApprovalsBoardGet200Response
     */
    'policy'?: ApiV1SecretApprovalsGet200ResponseApprovalsInner;
}
/**
 * 
 * @export
 * @interface ApiV1SecretApprovalsGet200Response
 */
export interface ApiV1SecretApprovalsGet200Response {
    /**
     * 
     * @type {Array<ApiV1SecretApprovalsGet200ResponseApprovalsInner>}
     * @memberof ApiV1SecretApprovalsGet200Response
     */
    'approvals': Array<ApiV1SecretApprovalsGet200ResponseApprovalsInner>;
}
/**
 * 
 * @export
 * @interface ApiV1SecretApprovalsGet200ResponseApprovalsInner
 */
export interface ApiV1SecretApprovalsGet200ResponseApprovalsInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalsGet200ResponseApprovalsInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalsGet200ResponseApprovalsInner
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalsGet200ResponseApprovalsInner
     */
    'secretPath'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ApiV1SecretApprovalsGet200ResponseApprovalsInner
     */
    'approvals'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalsGet200ResponseApprovalsInner
     */
    'envId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalsGet200ResponseApprovalsInner
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalsGet200ResponseApprovalsInner
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalsGet200ResponseApprovalsInner
     */
    'enforcementLevel'?: string;
    /**
     * 
     * @type {ApiV1SecretApprovalsGet200ResponseApprovalsInnerEnvironment}
     * @memberof ApiV1SecretApprovalsGet200ResponseApprovalsInner
     */
    'environment': ApiV1SecretApprovalsGet200ResponseApprovalsInnerEnvironment;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalsGet200ResponseApprovalsInner
     */
    'projectId': string;
    /**
     * 
     * @type {Array<ApiV1SecretApprovalsGet200ResponseApprovalsInnerUserApproversInner>}
     * @memberof ApiV1SecretApprovalsGet200ResponseApprovalsInner
     */
    'userApprovers': Array<ApiV1SecretApprovalsGet200ResponseApprovalsInnerUserApproversInner>;
}
/**
 * 
 * @export
 * @interface ApiV1SecretApprovalsGet200ResponseApprovalsInnerEnvironment
 */
export interface ApiV1SecretApprovalsGet200ResponseApprovalsInnerEnvironment {
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalsGet200ResponseApprovalsInnerEnvironment
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalsGet200ResponseApprovalsInnerEnvironment
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalsGet200ResponseApprovalsInnerEnvironment
     */
    'slug': string;
}
/**
 * 
 * @export
 * @interface ApiV1SecretApprovalsGet200ResponseApprovalsInnerUserApproversInner
 */
export interface ApiV1SecretApprovalsGet200ResponseApprovalsInnerUserApproversInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalsGet200ResponseApprovalsInnerUserApproversInner
     */
    'userId': string;
}
/**
 * 
 * @export
 * @interface ApiV1SecretApprovalsPost200Response
 */
export interface ApiV1SecretApprovalsPost200Response {
    /**
     * 
     * @type {ApiV1SecretApprovalsPost200ResponseApproval}
     * @memberof ApiV1SecretApprovalsPost200Response
     */
    'approval': ApiV1SecretApprovalsPost200ResponseApproval;
}
/**
 * 
 * @export
 * @interface ApiV1SecretApprovalsPost200ResponseApproval
 */
export interface ApiV1SecretApprovalsPost200ResponseApproval {
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalsPost200ResponseApproval
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalsPost200ResponseApproval
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalsPost200ResponseApproval
     */
    'secretPath'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ApiV1SecretApprovalsPost200ResponseApproval
     */
    'approvals'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalsPost200ResponseApproval
     */
    'envId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalsPost200ResponseApproval
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalsPost200ResponseApproval
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalsPost200ResponseApproval
     */
    'enforcementLevel'?: string;
    /**
     * 
     * @type {ApiV1SecretApprovalsGet200ResponseApprovalsInnerEnvironment}
     * @memberof ApiV1SecretApprovalsPost200ResponseApproval
     */
    'environment': ApiV1SecretApprovalsGet200ResponseApprovalsInnerEnvironment;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalsPost200ResponseApproval
     */
    'projectId': string;
}
/**
 * 
 * @export
 * @interface ApiV1SecretApprovalsPostRequest
 */
export interface ApiV1SecretApprovalsPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalsPostRequest
     */
    'workspaceId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalsPostRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalsPostRequest
     */
    'environment': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalsPostRequest
     */
    'secretPath'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ApiV1SecretApprovalsPostRequest
     */
    'approvers': Array<string>;
    /**
     * 
     * @type {number}
     * @memberof ApiV1SecretApprovalsPostRequest
     */
    'approvals'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalsPostRequest
     */
    'enforcementLevel'?: ApiV1SecretApprovalsPostRequestEnforcementLevelEnum;
}

export const ApiV1SecretApprovalsPostRequestEnforcementLevelEnum = {
    Hard: 'hard',
    Soft: 'soft'
} as const;

export type ApiV1SecretApprovalsPostRequestEnforcementLevelEnum = typeof ApiV1SecretApprovalsPostRequestEnforcementLevelEnum[keyof typeof ApiV1SecretApprovalsPostRequestEnforcementLevelEnum];

/**
 * 
 * @export
 * @interface ApiV1SecretApprovalsSapIdPatchRequest
 */
export interface ApiV1SecretApprovalsSapIdPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalsSapIdPatchRequest
     */
    'name'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ApiV1SecretApprovalsSapIdPatchRequest
     */
    'approvers': Array<string>;
    /**
     * 
     * @type {number}
     * @memberof ApiV1SecretApprovalsSapIdPatchRequest
     */
    'approvals'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalsSapIdPatchRequest
     */
    'secretPath'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretApprovalsSapIdPatchRequest
     */
    'enforcementLevel'?: ApiV1SecretApprovalsSapIdPatchRequestEnforcementLevelEnum;
}

export const ApiV1SecretApprovalsSapIdPatchRequestEnforcementLevelEnum = {
    Hard: 'hard',
    Soft: 'soft'
} as const;

export type ApiV1SecretApprovalsSapIdPatchRequestEnforcementLevelEnum = typeof ApiV1SecretApprovalsSapIdPatchRequestEnforcementLevelEnum[keyof typeof ApiV1SecretApprovalsSapIdPatchRequestEnforcementLevelEnum];

/**
 * 
 * @export
 * @interface ApiV1SecretImportsGet200Response
 */
export interface ApiV1SecretImportsGet200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretImportsGet200Response
     */
    'message': string;
    /**
     * 
     * @type {Array<ApiV1SecretImportsGet200ResponseSecretImportsInner>}
     * @memberof ApiV1SecretImportsGet200Response
     */
    'secretImports': Array<ApiV1SecretImportsGet200ResponseSecretImportsInner>;
}
/**
 * 
 * @export
 * @interface ApiV1SecretImportsGet200ResponseSecretImportsInner
 */
export interface ApiV1SecretImportsGet200ResponseSecretImportsInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretImportsGet200ResponseSecretImportsInner
     */
    'id': string;
    /**
     * 
     * @type {number}
     * @memberof ApiV1SecretImportsGet200ResponseSecretImportsInner
     */
    'version'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretImportsGet200ResponseSecretImportsInner
     */
    'importPath': string;
    /**
     * 
     * @type {number}
     * @memberof ApiV1SecretImportsGet200ResponseSecretImportsInner
     */
    'position': number;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretImportsGet200ResponseSecretImportsInner
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretImportsGet200ResponseSecretImportsInner
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretImportsGet200ResponseSecretImportsInner
     */
    'folderId': string;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1SecretImportsGet200ResponseSecretImportsInner
     */
    'isReplication'?: boolean | null;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1SecretImportsGet200ResponseSecretImportsInner
     */
    'isReplicationSuccess'?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretImportsGet200ResponseSecretImportsInner
     */
    'replicationStatus'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretImportsGet200ResponseSecretImportsInner
     */
    'lastReplicated'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1SecretImportsGet200ResponseSecretImportsInner
     */
    'isReserved'?: boolean | null;
    /**
     * 
     * @type {ApiV1SecretImportsGet200ResponseSecretImportsInnerImportEnv}
     * @memberof ApiV1SecretImportsGet200ResponseSecretImportsInner
     */
    'importEnv': ApiV1SecretImportsGet200ResponseSecretImportsInnerImportEnv;
}
/**
 * 
 * @export
 * @interface ApiV1SecretImportsGet200ResponseSecretImportsInnerImportEnv
 */
export interface ApiV1SecretImportsGet200ResponseSecretImportsInnerImportEnv {
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretImportsGet200ResponseSecretImportsInnerImportEnv
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretImportsGet200ResponseSecretImportsInnerImportEnv
     */
    'slug': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretImportsGet200ResponseSecretImportsInnerImportEnv
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface ApiV1SecretImportsPost200Response
 */
export interface ApiV1SecretImportsPost200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretImportsPost200Response
     */
    'message': string;
    /**
     * 
     * @type {ApiV1SecretImportsGet200ResponseSecretImportsInner}
     * @memberof ApiV1SecretImportsPost200Response
     */
    'secretImport': ApiV1SecretImportsGet200ResponseSecretImportsInner;
}
/**
 * 
 * @export
 * @interface ApiV1SecretImportsPostRequest
 */
export interface ApiV1SecretImportsPostRequest {
    /**
     * The ID of the project you are working in.
     * @type {string}
     * @memberof ApiV1SecretImportsPostRequest
     */
    'workspaceId': string;
    /**
     * The slug of the environment to import into.
     * @type {string}
     * @memberof ApiV1SecretImportsPostRequest
     */
    'environment': string;
    /**
     * The path to import into.
     * @type {string}
     * @memberof ApiV1SecretImportsPostRequest
     */
    'path'?: string;
    /**
     * 
     * @type {ApiV1SecretImportsPostRequestImport}
     * @memberof ApiV1SecretImportsPostRequest
     */
    'import': ApiV1SecretImportsPostRequestImport;
    /**
     * When true, secrets from the source will be automatically sent to the destination. If approval policies exist at the destination, the secrets will be sent as approval requests instead of being applied immediately.
     * @type {boolean}
     * @memberof ApiV1SecretImportsPostRequest
     */
    'isReplication'?: boolean;
}
/**
 * 
 * @export
 * @interface ApiV1SecretImportsPostRequestImport
 */
export interface ApiV1SecretImportsPostRequestImport {
    /**
     * The slug of the environment to import from.
     * @type {string}
     * @memberof ApiV1SecretImportsPostRequestImport
     */
    'environment': string;
    /**
     * The path to import from.
     * @type {string}
     * @memberof ApiV1SecretImportsPostRequestImport
     */
    'path': string;
}
/**
 * 
 * @export
 * @interface ApiV1SecretImportsSecretImportIdDeleteRequest
 */
export interface ApiV1SecretImportsSecretImportIdDeleteRequest {
    /**
     * The ID of the project to delete the secret import from.
     * @type {string}
     * @memberof ApiV1SecretImportsSecretImportIdDeleteRequest
     */
    'workspaceId': string;
    /**
     * The slug of the environment where the secret import is located.
     * @type {string}
     * @memberof ApiV1SecretImportsSecretImportIdDeleteRequest
     */
    'environment': string;
    /**
     * The path of the secret import to delete.
     * @type {string}
     * @memberof ApiV1SecretImportsSecretImportIdDeleteRequest
     */
    'path'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1SecretImportsSecretImportIdPatchRequest
 */
export interface ApiV1SecretImportsSecretImportIdPatchRequest {
    /**
     * The ID of the project where the secret import is located.
     * @type {string}
     * @memberof ApiV1SecretImportsSecretImportIdPatchRequest
     */
    'workspaceId': string;
    /**
     * The slug of the environment where the secret import is located.
     * @type {string}
     * @memberof ApiV1SecretImportsSecretImportIdPatchRequest
     */
    'environment': string;
    /**
     * The path of the secret import to update.
     * @type {string}
     * @memberof ApiV1SecretImportsSecretImportIdPatchRequest
     */
    'path'?: string;
    /**
     * 
     * @type {ApiV1SecretImportsSecretImportIdPatchRequestImport}
     * @memberof ApiV1SecretImportsSecretImportIdPatchRequest
     */
    'import': ApiV1SecretImportsSecretImportIdPatchRequestImport;
}
/**
 * 
 * @export
 * @interface ApiV1SecretImportsSecretImportIdPatchRequestImport
 */
export interface ApiV1SecretImportsSecretImportIdPatchRequestImport {
    /**
     * The new environment slug to import from.
     * @type {string}
     * @memberof ApiV1SecretImportsSecretImportIdPatchRequestImport
     */
    'environment'?: string;
    /**
     * The new path to import from.
     * @type {string}
     * @memberof ApiV1SecretImportsSecretImportIdPatchRequestImport
     */
    'path'?: string;
    /**
     * The new position of the secret import. The lowest number will be displayed as the first import.
     * @type {number}
     * @memberof ApiV1SecretImportsSecretImportIdPatchRequestImport
     */
    'position'?: number;
}
/**
 * 
 * @export
 * @interface ApiV1SecretImportsSecretImportIdReplicationResyncPostRequest
 */
export interface ApiV1SecretImportsSecretImportIdReplicationResyncPostRequest {
    /**
     * The ID of the project where the secret import is located.
     * @type {string}
     * @memberof ApiV1SecretImportsSecretImportIdReplicationResyncPostRequest
     */
    'workspaceId': string;
    /**
     * The slug of the environment where the secret import is located.
     * @type {string}
     * @memberof ApiV1SecretImportsSecretImportIdReplicationResyncPostRequest
     */
    'environment': string;
    /**
     * The path of the secret import to update.
     * @type {string}
     * @memberof ApiV1SecretImportsSecretImportIdReplicationResyncPostRequest
     */
    'path'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1SecretImportsSecretsGet200Response
 */
export interface ApiV1SecretImportsSecretsGet200Response {
    /**
     * 
     * @type {Array<ApiV1SecretImportsSecretsGet200ResponseSecretsInner>}
     * @memberof ApiV1SecretImportsSecretsGet200Response
     */
    'secrets': Array<ApiV1SecretImportsSecretsGet200ResponseSecretsInner>;
}
/**
 * 
 * @export
 * @interface ApiV1SecretImportsSecretsGet200ResponseSecretsInner
 */
export interface ApiV1SecretImportsSecretsGet200ResponseSecretsInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretImportsSecretsGet200ResponseSecretsInner
     */
    'secretPath': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretImportsSecretsGet200ResponseSecretsInner
     */
    'environment': string;
    /**
     * 
     * @type {ApiV1SecretApprovalsGet200ResponseApprovalsInnerEnvironment}
     * @memberof ApiV1SecretImportsSecretsGet200ResponseSecretsInner
     */
    'environmentInfo': ApiV1SecretApprovalsGet200ResponseApprovalsInnerEnvironment;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretImportsSecretsGet200ResponseSecretsInner
     */
    'folderId'?: string;
    /**
     * 
     * @type {Array<ApiV1SecretImportsSecretsGet200ResponseSecretsInnerSecretsInner>}
     * @memberof ApiV1SecretImportsSecretsGet200ResponseSecretsInner
     */
    'secrets': Array<ApiV1SecretImportsSecretsGet200ResponseSecretsInnerSecretsInner>;
}
/**
 * 
 * @export
 * @interface ApiV1SecretImportsSecretsGet200ResponseSecretsInnerSecretsInner
 */
export interface ApiV1SecretImportsSecretsGet200ResponseSecretsInnerSecretsInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretImportsSecretsGet200ResponseSecretsInnerSecretsInner
     */
    'id': string;
    /**
     * 
     * @type {number}
     * @memberof ApiV1SecretImportsSecretsGet200ResponseSecretsInnerSecretsInner
     */
    'version'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretImportsSecretsGet200ResponseSecretsInnerSecretsInner
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretImportsSecretsGet200ResponseSecretsInnerSecretsInner
     */
    'secretKeyCiphertext': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretImportsSecretsGet200ResponseSecretsInnerSecretsInner
     */
    'secretKeyIV': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretImportsSecretsGet200ResponseSecretsInnerSecretsInner
     */
    'secretKeyTag': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretImportsSecretsGet200ResponseSecretsInnerSecretsInner
     */
    'secretValueCiphertext': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretImportsSecretsGet200ResponseSecretsInnerSecretsInner
     */
    'secretValueIV': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretImportsSecretsGet200ResponseSecretsInnerSecretsInner
     */
    'secretValueTag': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretImportsSecretsGet200ResponseSecretsInnerSecretsInner
     */
    'secretCommentCiphertext'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretImportsSecretsGet200ResponseSecretsInnerSecretsInner
     */
    'secretCommentIV'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretImportsSecretsGet200ResponseSecretsInnerSecretsInner
     */
    'secretCommentTag'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretImportsSecretsGet200ResponseSecretsInnerSecretsInner
     */
    'secretReminderNote'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ApiV1SecretImportsSecretsGet200ResponseSecretsInnerSecretsInner
     */
    'secretReminderRepeatDays'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1SecretImportsSecretsGet200ResponseSecretsInnerSecretsInner
     */
    'skipMultilineEncoding'?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretImportsSecretsGet200ResponseSecretsInnerSecretsInner
     */
    'algorithm'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretImportsSecretsGet200ResponseSecretsInnerSecretsInner
     */
    'keyEncoding'?: string;
    /**
     * 
     * @type {any}
     * @memberof ApiV1SecretImportsSecretsGet200ResponseSecretsInnerSecretsInner
     */
    'metadata'?: any | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretImportsSecretsGet200ResponseSecretsInnerSecretsInner
     */
    'userId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretImportsSecretsGet200ResponseSecretsInnerSecretsInner
     */
    'folderId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretImportsSecretsGet200ResponseSecretsInnerSecretsInner
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretImportsSecretsGet200ResponseSecretsInnerSecretsInner
     */
    'updatedAt': string;
}
/**
 * 
 * @export
 * @interface ApiV1SecretImportsSecretsRawGet200Response
 */
export interface ApiV1SecretImportsSecretsRawGet200Response {
    /**
     * 
     * @type {Array<ApiV1SecretImportsSecretsRawGet200ResponseSecretsInner>}
     * @memberof ApiV1SecretImportsSecretsRawGet200Response
     */
    'secrets': Array<ApiV1SecretImportsSecretsRawGet200ResponseSecretsInner>;
}
/**
 * 
 * @export
 * @interface ApiV1SecretImportsSecretsRawGet200ResponseSecretsInner
 */
export interface ApiV1SecretImportsSecretsRawGet200ResponseSecretsInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretImportsSecretsRawGet200ResponseSecretsInner
     */
    'secretPath': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretImportsSecretsRawGet200ResponseSecretsInner
     */
    'environment': string;
    /**
     * 
     * @type {ApiV1SecretApprovalsGet200ResponseApprovalsInnerEnvironment}
     * @memberof ApiV1SecretImportsSecretsRawGet200ResponseSecretsInner
     */
    'environmentInfo': ApiV1SecretApprovalsGet200ResponseApprovalsInnerEnvironment;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretImportsSecretsRawGet200ResponseSecretsInner
     */
    'folderId'?: string;
    /**
     * 
     * @type {Array<ApiV1SecretSecretIdSecretVersionsGet200ResponseSecretVersionsInner>}
     * @memberof ApiV1SecretImportsSecretsRawGet200ResponseSecretsInner
     */
    'secrets': Array<ApiV1SecretSecretIdSecretVersionsGet200ResponseSecretVersionsInner>;
}
/**
 * 
 * @export
 * @interface ApiV1SecretRotationProvidersWorkspaceIdGet200Response
 */
export interface ApiV1SecretRotationProvidersWorkspaceIdGet200Response {
    /**
     * 
     * @type {Array<ApiV1SecretRotationProvidersWorkspaceIdGet200ResponseProvidersInner>}
     * @memberof ApiV1SecretRotationProvidersWorkspaceIdGet200Response
     */
    'providers': Array<ApiV1SecretRotationProvidersWorkspaceIdGet200ResponseProvidersInner>;
}
/**
 * 
 * @export
 * @interface ApiV1SecretRotationProvidersWorkspaceIdGet200ResponseProvidersInner
 */
export interface ApiV1SecretRotationProvidersWorkspaceIdGet200ResponseProvidersInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretRotationProvidersWorkspaceIdGet200ResponseProvidersInner
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretRotationProvidersWorkspaceIdGet200ResponseProvidersInner
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretRotationProvidersWorkspaceIdGet200ResponseProvidersInner
     */
    'image'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretRotationProvidersWorkspaceIdGet200ResponseProvidersInner
     */
    'description'?: string;
    /**
     * 
     * @type {any}
     * @memberof ApiV1SecretRotationProvidersWorkspaceIdGet200ResponseProvidersInner
     */
    'template'?: any;
}
/**
 * 
 * @export
 * @interface ApiV1SecretRotationsGet200Response
 */
export interface ApiV1SecretRotationsGet200Response {
    /**
     * 
     * @type {Array<ApiV1SecretRotationsGet200ResponseSecretRotationsInner>}
     * @memberof ApiV1SecretRotationsGet200Response
     */
    'secretRotations': Array<ApiV1SecretRotationsGet200ResponseSecretRotationsInner>;
}
/**
 * 
 * @export
 * @interface ApiV1SecretRotationsGet200ResponseSecretRotationsInner
 */
export interface ApiV1SecretRotationsGet200ResponseSecretRotationsInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretRotationsGet200ResponseSecretRotationsInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretRotationsGet200ResponseSecretRotationsInner
     */
    'provider': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretRotationsGet200ResponseSecretRotationsInner
     */
    'secretPath': string;
    /**
     * 
     * @type {number}
     * @memberof ApiV1SecretRotationsGet200ResponseSecretRotationsInner
     */
    'interval': number;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretRotationsGet200ResponseSecretRotationsInner
     */
    'lastRotatedAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretRotationsGet200ResponseSecretRotationsInner
     */
    'status'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretRotationsGet200ResponseSecretRotationsInner
     */
    'statusMessage'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretRotationsGet200ResponseSecretRotationsInner
     */
    'encryptedData'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretRotationsGet200ResponseSecretRotationsInner
     */
    'encryptedDataIV'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretRotationsGet200ResponseSecretRotationsInner
     */
    'encryptedDataTag'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretRotationsGet200ResponseSecretRotationsInner
     */
    'algorithm'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretRotationsGet200ResponseSecretRotationsInner
     */
    'keyEncoding'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretRotationsGet200ResponseSecretRotationsInner
     */
    'envId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretRotationsGet200ResponseSecretRotationsInner
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretRotationsGet200ResponseSecretRotationsInner
     */
    'updatedAt': string;
    /**
     * 
     * @type {ApiV1SecretApprovalsGet200ResponseApprovalsInnerEnvironment}
     * @memberof ApiV1SecretRotationsGet200ResponseSecretRotationsInner
     */
    'environment': ApiV1SecretApprovalsGet200ResponseApprovalsInnerEnvironment;
    /**
     * 
     * @type {Array<ApiV1SecretRotationsGet200ResponseSecretRotationsInnerOutputsInner>}
     * @memberof ApiV1SecretRotationsGet200ResponseSecretRotationsInner
     */
    'outputs': Array<ApiV1SecretRotationsGet200ResponseSecretRotationsInnerOutputsInner>;
}
/**
 * 
 * @export
 * @interface ApiV1SecretRotationsGet200ResponseSecretRotationsInnerOutputsInner
 */
export interface ApiV1SecretRotationsGet200ResponseSecretRotationsInnerOutputsInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretRotationsGet200ResponseSecretRotationsInnerOutputsInner
     */
    'key': string;
    /**
     * 
     * @type {ApiV1SecretRotationsGet200ResponseSecretRotationsInnerOutputsInnerSecret}
     * @memberof ApiV1SecretRotationsGet200ResponseSecretRotationsInnerOutputsInner
     */
    'secret': ApiV1SecretRotationsGet200ResponseSecretRotationsInnerOutputsInnerSecret;
}
/**
 * 
 * @export
 * @interface ApiV1SecretRotationsGet200ResponseSecretRotationsInnerOutputsInnerSecret
 */
export interface ApiV1SecretRotationsGet200ResponseSecretRotationsInnerOutputsInnerSecret {
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretRotationsGet200ResponseSecretRotationsInnerOutputsInnerSecret
     */
    'secretKey': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretRotationsGet200ResponseSecretRotationsInnerOutputsInnerSecret
     */
    'id': string;
    /**
     * 
     * @type {number}
     * @memberof ApiV1SecretRotationsGet200ResponseSecretRotationsInnerOutputsInnerSecret
     */
    'version': number;
}
/**
 * 
 * @export
 * @interface ApiV1SecretRotationsPost200Response
 */
export interface ApiV1SecretRotationsPost200Response {
    /**
     * 
     * @type {ApiV1SecretRotationsPost200ResponseSecretRotation}
     * @memberof ApiV1SecretRotationsPost200Response
     */
    'secretRotation': ApiV1SecretRotationsPost200ResponseSecretRotation;
}
/**
 * 
 * @export
 * @interface ApiV1SecretRotationsPost200ResponseSecretRotation
 */
export interface ApiV1SecretRotationsPost200ResponseSecretRotation {
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretRotationsPost200ResponseSecretRotation
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretRotationsPost200ResponseSecretRotation
     */
    'provider': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretRotationsPost200ResponseSecretRotation
     */
    'secretPath': string;
    /**
     * 
     * @type {number}
     * @memberof ApiV1SecretRotationsPost200ResponseSecretRotation
     */
    'interval': number;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretRotationsPost200ResponseSecretRotation
     */
    'lastRotatedAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretRotationsPost200ResponseSecretRotation
     */
    'status'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretRotationsPost200ResponseSecretRotation
     */
    'statusMessage'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretRotationsPost200ResponseSecretRotation
     */
    'encryptedData'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretRotationsPost200ResponseSecretRotation
     */
    'encryptedDataIV'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretRotationsPost200ResponseSecretRotation
     */
    'encryptedDataTag'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretRotationsPost200ResponseSecretRotation
     */
    'algorithm'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretRotationsPost200ResponseSecretRotation
     */
    'keyEncoding'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretRotationsPost200ResponseSecretRotation
     */
    'envId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretRotationsPost200ResponseSecretRotation
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretRotationsPost200ResponseSecretRotation
     */
    'updatedAt': string;
    /**
     * 
     * @type {ApiV1SecretApprovalsGet200ResponseApprovalsInnerEnvironment}
     * @memberof ApiV1SecretRotationsPost200ResponseSecretRotation
     */
    'environment': ApiV1SecretApprovalsGet200ResponseApprovalsInnerEnvironment;
    /**
     * 
     * @type {Array<ApiV1SecretRotationsPost200ResponseSecretRotationOutputsInner>}
     * @memberof ApiV1SecretRotationsPost200ResponseSecretRotation
     */
    'outputs': Array<ApiV1SecretRotationsPost200ResponseSecretRotationOutputsInner>;
}
/**
 * 
 * @export
 * @interface ApiV1SecretRotationsPost200ResponseSecretRotationOutputsInner
 */
export interface ApiV1SecretRotationsPost200ResponseSecretRotationOutputsInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretRotationsPost200ResponseSecretRotationOutputsInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretRotationsPost200ResponseSecretRotationOutputsInner
     */
    'key': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretRotationsPost200ResponseSecretRotationOutputsInner
     */
    'secretId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretRotationsPost200ResponseSecretRotationOutputsInner
     */
    'rotationId': string;
}
/**
 * 
 * @export
 * @interface ApiV1SecretRotationsPostRequest
 */
export interface ApiV1SecretRotationsPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretRotationsPostRequest
     */
    'workspaceId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretRotationsPostRequest
     */
    'secretPath': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretRotationsPostRequest
     */
    'environment': string;
    /**
     * 
     * @type {number}
     * @memberof ApiV1SecretRotationsPostRequest
     */
    'interval': number;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretRotationsPostRequest
     */
    'provider': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretRotationsPostRequest
     */
    'customProvider'?: string;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof ApiV1SecretRotationsPostRequest
     */
    'inputs': { [key: string]: any; };
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof ApiV1SecretRotationsPostRequest
     */
    'outputs': { [key: string]: string; };
}
/**
 * 
 * @export
 * @interface ApiV1SecretRotationsRestartPost200Response
 */
export interface ApiV1SecretRotationsRestartPost200Response {
    /**
     * 
     * @type {ApiV1SecretRotationsRestartPost200ResponseSecretRotation}
     * @memberof ApiV1SecretRotationsRestartPost200Response
     */
    'secretRotation': ApiV1SecretRotationsRestartPost200ResponseSecretRotation;
}
/**
 * 
 * @export
 * @interface ApiV1SecretRotationsRestartPost200ResponseSecretRotation
 */
export interface ApiV1SecretRotationsRestartPost200ResponseSecretRotation {
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretRotationsRestartPost200ResponseSecretRotation
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretRotationsRestartPost200ResponseSecretRotation
     */
    'provider': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretRotationsRestartPost200ResponseSecretRotation
     */
    'secretPath': string;
    /**
     * 
     * @type {number}
     * @memberof ApiV1SecretRotationsRestartPost200ResponseSecretRotation
     */
    'interval': number;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretRotationsRestartPost200ResponseSecretRotation
     */
    'lastRotatedAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretRotationsRestartPost200ResponseSecretRotation
     */
    'status'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretRotationsRestartPost200ResponseSecretRotation
     */
    'statusMessage'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretRotationsRestartPost200ResponseSecretRotation
     */
    'encryptedData'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretRotationsRestartPost200ResponseSecretRotation
     */
    'encryptedDataIV'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretRotationsRestartPost200ResponseSecretRotation
     */
    'encryptedDataTag'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretRotationsRestartPost200ResponseSecretRotation
     */
    'algorithm'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretRotationsRestartPost200ResponseSecretRotation
     */
    'keyEncoding'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretRotationsRestartPost200ResponseSecretRotation
     */
    'envId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretRotationsRestartPost200ResponseSecretRotation
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretRotationsRestartPost200ResponseSecretRotation
     */
    'updatedAt': string;
    /**
     * 
     * @type {ApiV1SecretApprovalsGet200ResponseApprovalsInnerEnvironment}
     * @memberof ApiV1SecretRotationsRestartPost200ResponseSecretRotation
     */
    'environment': ApiV1SecretApprovalsGet200ResponseApprovalsInnerEnvironment;
}
/**
 * 
 * @export
 * @interface ApiV1SecretRotationsRestartPostRequest
 */
export interface ApiV1SecretRotationsRestartPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretRotationsRestartPostRequest
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface ApiV1SecretScanningCreateInstallationSessionOrganizationPost200Response
 */
export interface ApiV1SecretScanningCreateInstallationSessionOrganizationPost200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretScanningCreateInstallationSessionOrganizationPost200Response
     */
    'sessionId': string;
}
/**
 * 
 * @export
 * @interface ApiV1SecretScanningCreateInstallationSessionOrganizationPostRequest
 */
export interface ApiV1SecretScanningCreateInstallationSessionOrganizationPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretScanningCreateInstallationSessionOrganizationPostRequest
     */
    'organizationId': string;
}
/**
 * 
 * @export
 * @interface ApiV1SecretScanningInstallationStatusOrganizationOrganizationIdGet200Response
 */
export interface ApiV1SecretScanningInstallationStatusOrganizationOrganizationIdGet200Response {
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1SecretScanningInstallationStatusOrganizationOrganizationIdGet200Response
     */
    'appInstallationCompleted': boolean;
}
/**
 * 
 * @export
 * @interface ApiV1SecretScanningLinkInstallationPost200Response
 */
export interface ApiV1SecretScanningLinkInstallationPost200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretScanningLinkInstallationPost200Response
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretScanningLinkInstallationPost200Response
     */
    'installationId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretScanningLinkInstallationPost200Response
     */
    'userId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretScanningLinkInstallationPost200Response
     */
    'orgId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretScanningLinkInstallationPost200Response
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretScanningLinkInstallationPost200Response
     */
    'updatedAt': string;
}
/**
 * 
 * @export
 * @interface ApiV1SecretScanningLinkInstallationPostRequest
 */
export interface ApiV1SecretScanningLinkInstallationPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretScanningLinkInstallationPostRequest
     */
    'installationId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretScanningLinkInstallationPostRequest
     */
    'sessionId': string;
}
/**
 * 
 * @export
 * @interface ApiV1SecretScanningOrganizationOrganizationIdRisksGet200Response
 */
export interface ApiV1SecretScanningOrganizationOrganizationIdRisksGet200Response {
    /**
     * 
     * @type {Array<ApiV1SecretScanningOrganizationOrganizationIdRisksGet200ResponseRisksInner>}
     * @memberof ApiV1SecretScanningOrganizationOrganizationIdRisksGet200Response
     */
    'risks': Array<ApiV1SecretScanningOrganizationOrganizationIdRisksGet200ResponseRisksInner>;
}
/**
 * 
 * @export
 * @interface ApiV1SecretScanningOrganizationOrganizationIdRisksGet200ResponseRisksInner
 */
export interface ApiV1SecretScanningOrganizationOrganizationIdRisksGet200ResponseRisksInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretScanningOrganizationOrganizationIdRisksGet200ResponseRisksInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretScanningOrganizationOrganizationIdRisksGet200ResponseRisksInner
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretScanningOrganizationOrganizationIdRisksGet200ResponseRisksInner
     */
    'startLine'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretScanningOrganizationOrganizationIdRisksGet200ResponseRisksInner
     */
    'endLine'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretScanningOrganizationOrganizationIdRisksGet200ResponseRisksInner
     */
    'startColumn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretScanningOrganizationOrganizationIdRisksGet200ResponseRisksInner
     */
    'endColumn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretScanningOrganizationOrganizationIdRisksGet200ResponseRisksInner
     */
    'file'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretScanningOrganizationOrganizationIdRisksGet200ResponseRisksInner
     */
    'symlinkFile'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretScanningOrganizationOrganizationIdRisksGet200ResponseRisksInner
     */
    'commit'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretScanningOrganizationOrganizationIdRisksGet200ResponseRisksInner
     */
    'entropy'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretScanningOrganizationOrganizationIdRisksGet200ResponseRisksInner
     */
    'author'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretScanningOrganizationOrganizationIdRisksGet200ResponseRisksInner
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretScanningOrganizationOrganizationIdRisksGet200ResponseRisksInner
     */
    'date'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretScanningOrganizationOrganizationIdRisksGet200ResponseRisksInner
     */
    'message'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ApiV1SecretScanningOrganizationOrganizationIdRisksGet200ResponseRisksInner
     */
    'tags'?: Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretScanningOrganizationOrganizationIdRisksGet200ResponseRisksInner
     */
    'ruleID'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretScanningOrganizationOrganizationIdRisksGet200ResponseRisksInner
     */
    'fingerprint'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretScanningOrganizationOrganizationIdRisksGet200ResponseRisksInner
     */
    'fingerPrintWithoutCommitId'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1SecretScanningOrganizationOrganizationIdRisksGet200ResponseRisksInner
     */
    'isFalsePositive'?: boolean | null;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1SecretScanningOrganizationOrganizationIdRisksGet200ResponseRisksInner
     */
    'isResolved'?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretScanningOrganizationOrganizationIdRisksGet200ResponseRisksInner
     */
    'riskOwner'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretScanningOrganizationOrganizationIdRisksGet200ResponseRisksInner
     */
    'installationId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretScanningOrganizationOrganizationIdRisksGet200ResponseRisksInner
     */
    'repositoryId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretScanningOrganizationOrganizationIdRisksGet200ResponseRisksInner
     */
    'repositoryLink'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretScanningOrganizationOrganizationIdRisksGet200ResponseRisksInner
     */
    'repositoryFullName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretScanningOrganizationOrganizationIdRisksGet200ResponseRisksInner
     */
    'pusherName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretScanningOrganizationOrganizationIdRisksGet200ResponseRisksInner
     */
    'pusherEmail'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretScanningOrganizationOrganizationIdRisksGet200ResponseRisksInner
     */
    'status'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretScanningOrganizationOrganizationIdRisksGet200ResponseRisksInner
     */
    'orgId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretScanningOrganizationOrganizationIdRisksGet200ResponseRisksInner
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretScanningOrganizationOrganizationIdRisksGet200ResponseRisksInner
     */
    'updatedAt': string;
}
/**
 * 
 * @export
 * @interface ApiV1SecretScanningOrganizationOrganizationIdRisksRiskIdStatusPostRequest
 */
export interface ApiV1SecretScanningOrganizationOrganizationIdRisksRiskIdStatusPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretScanningOrganizationOrganizationIdRisksRiskIdStatusPostRequest
     */
    'status': ApiV1SecretScanningOrganizationOrganizationIdRisksRiskIdStatusPostRequestStatusEnum;
}

export const ApiV1SecretScanningOrganizationOrganizationIdRisksRiskIdStatusPostRequestStatusEnum = {
    ResolvedFalsePositive: 'RESOLVED_FALSE_POSITIVE',
    ResolvedRevoked: 'RESOLVED_REVOKED',
    ResolvedNotRevoked: 'RESOLVED_NOT_REVOKED',
    Unresolved: 'UNRESOLVED'
} as const;

export type ApiV1SecretScanningOrganizationOrganizationIdRisksRiskIdStatusPostRequestStatusEnum = typeof ApiV1SecretScanningOrganizationOrganizationIdRisksRiskIdStatusPostRequestStatusEnum[keyof typeof ApiV1SecretScanningOrganizationOrganizationIdRisksRiskIdStatusPostRequestStatusEnum];

/**
 * 
 * @export
 * @interface ApiV1SecretSecretIdSecretVersionsGet200Response
 */
export interface ApiV1SecretSecretIdSecretVersionsGet200Response {
    /**
     * 
     * @type {Array<ApiV1SecretSecretIdSecretVersionsGet200ResponseSecretVersionsInner>}
     * @memberof ApiV1SecretSecretIdSecretVersionsGet200Response
     */
    'secretVersions': Array<ApiV1SecretSecretIdSecretVersionsGet200ResponseSecretVersionsInner>;
}
/**
 * 
 * @export
 * @interface ApiV1SecretSecretIdSecretVersionsGet200ResponseSecretVersionsInner
 */
export interface ApiV1SecretSecretIdSecretVersionsGet200ResponseSecretVersionsInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretSecretIdSecretVersionsGet200ResponseSecretVersionsInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretSecretIdSecretVersionsGet200ResponseSecretVersionsInner
     */
    '_id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretSecretIdSecretVersionsGet200ResponseSecretVersionsInner
     */
    'workspace': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretSecretIdSecretVersionsGet200ResponseSecretVersionsInner
     */
    'environment': string;
    /**
     * 
     * @type {number}
     * @memberof ApiV1SecretSecretIdSecretVersionsGet200ResponseSecretVersionsInner
     */
    'version': number;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretSecretIdSecretVersionsGet200ResponseSecretVersionsInner
     */
    'type': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretSecretIdSecretVersionsGet200ResponseSecretVersionsInner
     */
    'secretKey': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretSecretIdSecretVersionsGet200ResponseSecretVersionsInner
     */
    'secretValue': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretSecretIdSecretVersionsGet200ResponseSecretVersionsInner
     */
    'secretComment': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretSecretIdSecretVersionsGet200ResponseSecretVersionsInner
     */
    'secretReminderNote'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ApiV1SecretSecretIdSecretVersionsGet200ResponseSecretVersionsInner
     */
    'secretReminderRepeatDays'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1SecretSecretIdSecretVersionsGet200ResponseSecretVersionsInner
     */
    'skipMultilineEncoding'?: boolean | null;
    /**
     * 
     * @type {any}
     * @memberof ApiV1SecretSecretIdSecretVersionsGet200ResponseSecretVersionsInner
     */
    'metadata'?: any | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretSecretIdSecretVersionsGet200ResponseSecretVersionsInner
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretSecretIdSecretVersionsGet200ResponseSecretVersionsInner
     */
    'updatedAt': string;
}
/**
 * 
 * @export
 * @interface ApiV1SecretSharingGet200Response
 */
export interface ApiV1SecretSharingGet200Response {
    /**
     * 
     * @type {Array<ApiV1SecretSharingGet200ResponseSecretsInner>}
     * @memberof ApiV1SecretSharingGet200Response
     */
    'secrets': Array<ApiV1SecretSharingGet200ResponseSecretsInner>;
    /**
     * 
     * @type {number}
     * @memberof ApiV1SecretSharingGet200Response
     */
    'totalCount': number;
}
/**
 * 
 * @export
 * @interface ApiV1SecretSharingGet200ResponseSecretsInner
 */
export interface ApiV1SecretSharingGet200ResponseSecretsInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretSharingGet200ResponseSecretsInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretSharingGet200ResponseSecretsInner
     */
    'encryptedValue': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretSharingGet200ResponseSecretsInner
     */
    'iv': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretSharingGet200ResponseSecretsInner
     */
    'tag': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretSharingGet200ResponseSecretsInner
     */
    'hashedHex': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretSharingGet200ResponseSecretsInner
     */
    'expiresAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretSharingGet200ResponseSecretsInner
     */
    'userId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretSharingGet200ResponseSecretsInner
     */
    'orgId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretSharingGet200ResponseSecretsInner
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretSharingGet200ResponseSecretsInner
     */
    'updatedAt': string;
    /**
     * 
     * @type {number}
     * @memberof ApiV1SecretSharingGet200ResponseSecretsInner
     */
    'expiresAfterViews'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretSharingGet200ResponseSecretsInner
     */
    'accessType'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretSharingGet200ResponseSecretsInner
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretSharingGet200ResponseSecretsInner
     */
    'lastViewedAt'?: string | null;
}
/**
 * 
 * @export
 * @interface ApiV1SecretSharingPost200Response
 */
export interface ApiV1SecretSharingPost200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretSharingPost200Response
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface ApiV1SecretSharingPostRequest
 */
export interface ApiV1SecretSharingPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretSharingPostRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretSharingPostRequest
     */
    'encryptedValue': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretSharingPostRequest
     */
    'hashedHex': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretSharingPostRequest
     */
    'iv': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretSharingPostRequest
     */
    'tag': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretSharingPostRequest
     */
    'expiresAt': string;
    /**
     * 
     * @type {number}
     * @memberof ApiV1SecretSharingPostRequest
     */
    'expiresAfterViews'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretSharingPostRequest
     */
    'accessType'?: ApiV1SecretSharingPostRequestAccessTypeEnum;
}

export const ApiV1SecretSharingPostRequestAccessTypeEnum = {
    Anyone: 'anyone',
    Organization: 'organization'
} as const;

export type ApiV1SecretSharingPostRequestAccessTypeEnum = typeof ApiV1SecretSharingPostRequestAccessTypeEnum[keyof typeof ApiV1SecretSharingPostRequestAccessTypeEnum];

/**
 * 
 * @export
 * @interface ApiV1SecretSharingPublicIdGet200Response
 */
export interface ApiV1SecretSharingPublicIdGet200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretSharingPublicIdGet200Response
     */
    'encryptedValue': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretSharingPublicIdGet200Response
     */
    'iv': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretSharingPublicIdGet200Response
     */
    'tag': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretSharingPublicIdGet200Response
     */
    'expiresAt': string;
    /**
     * 
     * @type {number}
     * @memberof ApiV1SecretSharingPublicIdGet200Response
     */
    'expiresAfterViews'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretSharingPublicIdGet200Response
     */
    'accessType'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretSharingPublicIdGet200Response
     */
    'orgName'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1SecretSharingPublicPostRequest
 */
export interface ApiV1SecretSharingPublicPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretSharingPublicPostRequest
     */
    'encryptedValue': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretSharingPublicPostRequest
     */
    'hashedHex': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretSharingPublicPostRequest
     */
    'iv': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretSharingPublicPostRequest
     */
    'tag': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretSharingPublicPostRequest
     */
    'expiresAt': string;
    /**
     * 
     * @type {number}
     * @memberof ApiV1SecretSharingPublicPostRequest
     */
    'expiresAfterViews'?: number;
}
/**
 * 
 * @export
 * @interface ApiV1SecretSnapshotSecretSnapshotIdGet200Response
 */
export interface ApiV1SecretSnapshotSecretSnapshotIdGet200Response {
    /**
     * 
     * @type {ApiV1SecretSnapshotSecretSnapshotIdGet200ResponseSecretSnapshot}
     * @memberof ApiV1SecretSnapshotSecretSnapshotIdGet200Response
     */
    'secretSnapshot': ApiV1SecretSnapshotSecretSnapshotIdGet200ResponseSecretSnapshot;
}
/**
 * 
 * @export
 * @interface ApiV1SecretSnapshotSecretSnapshotIdGet200ResponseSecretSnapshot
 */
export interface ApiV1SecretSnapshotSecretSnapshotIdGet200ResponseSecretSnapshot {
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretSnapshotSecretSnapshotIdGet200ResponseSecretSnapshot
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretSnapshotSecretSnapshotIdGet200ResponseSecretSnapshot
     */
    'projectId': string;
    /**
     * 
     * @type {ApiV1SecretSnapshotSecretSnapshotIdGet200ResponseSecretSnapshotEnvironment}
     * @memberof ApiV1SecretSnapshotSecretSnapshotIdGet200ResponseSecretSnapshot
     */
    'environment': ApiV1SecretSnapshotSecretSnapshotIdGet200ResponseSecretSnapshotEnvironment;
    /**
     * 
     * @type {Array<ApiV1SecretSnapshotSecretSnapshotIdGet200ResponseSecretSnapshotSecretVersionsInner>}
     * @memberof ApiV1SecretSnapshotSecretSnapshotIdGet200ResponseSecretSnapshot
     */
    'secretVersions': Array<ApiV1SecretSnapshotSecretSnapshotIdGet200ResponseSecretSnapshotSecretVersionsInner>;
    /**
     * 
     * @type {Array<ApiV1SecretSnapshotSecretSnapshotIdGet200ResponseSecretSnapshotFolderVersionInner>}
     * @memberof ApiV1SecretSnapshotSecretSnapshotIdGet200ResponseSecretSnapshot
     */
    'folderVersion': Array<ApiV1SecretSnapshotSecretSnapshotIdGet200ResponseSecretSnapshotFolderVersionInner>;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretSnapshotSecretSnapshotIdGet200ResponseSecretSnapshot
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretSnapshotSecretSnapshotIdGet200ResponseSecretSnapshot
     */
    'updatedAt': string;
}
/**
 * 
 * @export
 * @interface ApiV1SecretSnapshotSecretSnapshotIdGet200ResponseSecretSnapshotEnvironment
 */
export interface ApiV1SecretSnapshotSecretSnapshotIdGet200ResponseSecretSnapshotEnvironment {
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretSnapshotSecretSnapshotIdGet200ResponseSecretSnapshotEnvironment
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretSnapshotSecretSnapshotIdGet200ResponseSecretSnapshotEnvironment
     */
    'slug': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretSnapshotSecretSnapshotIdGet200ResponseSecretSnapshotEnvironment
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface ApiV1SecretSnapshotSecretSnapshotIdGet200ResponseSecretSnapshotFolderVersionInner
 */
export interface ApiV1SecretSnapshotSecretSnapshotIdGet200ResponseSecretSnapshotFolderVersionInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretSnapshotSecretSnapshotIdGet200ResponseSecretSnapshotFolderVersionInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretSnapshotSecretSnapshotIdGet200ResponseSecretSnapshotFolderVersionInner
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface ApiV1SecretSnapshotSecretSnapshotIdGet200ResponseSecretSnapshotSecretVersionsInner
 */
export interface ApiV1SecretSnapshotSecretSnapshotIdGet200ResponseSecretSnapshotSecretVersionsInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretSnapshotSecretSnapshotIdGet200ResponseSecretSnapshotSecretVersionsInner
     */
    'id': string;
    /**
     * 
     * @type {number}
     * @memberof ApiV1SecretSnapshotSecretSnapshotIdGet200ResponseSecretSnapshotSecretVersionsInner
     */
    'version': number;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretSnapshotSecretSnapshotIdGet200ResponseSecretSnapshotSecretVersionsInner
     */
    'secretKey': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretSnapshotSecretSnapshotIdGet200ResponseSecretSnapshotSecretVersionsInner
     */
    'secretValue': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretSnapshotSecretSnapshotIdGet200ResponseSecretSnapshotSecretVersionsInner
     */
    'secretComment': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretSnapshotSecretSnapshotIdGet200ResponseSecretSnapshotSecretVersionsInner
     */
    'secretReminderNote'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ApiV1SecretSnapshotSecretSnapshotIdGet200ResponseSecretSnapshotSecretVersionsInner
     */
    'secretReminderRepeatDays'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1SecretSnapshotSecretSnapshotIdGet200ResponseSecretSnapshotSecretVersionsInner
     */
    'skipMultilineEncoding'?: boolean | null;
    /**
     * 
     * @type {any}
     * @memberof ApiV1SecretSnapshotSecretSnapshotIdGet200ResponseSecretSnapshotSecretVersionsInner
     */
    'metadata'?: any | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretSnapshotSecretSnapshotIdGet200ResponseSecretSnapshotSecretVersionsInner
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretSnapshotSecretSnapshotIdGet200ResponseSecretSnapshotSecretVersionsInner
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretSnapshotSecretSnapshotIdGet200ResponseSecretSnapshotSecretVersionsInner
     */
    'secretId': string;
    /**
     * 
     * @type {Array<ApiV1SecretSnapshotSecretSnapshotIdGet200ResponseSecretSnapshotSecretVersionsInnerTagsInner>}
     * @memberof ApiV1SecretSnapshotSecretSnapshotIdGet200ResponseSecretSnapshotSecretVersionsInner
     */
    'tags': Array<ApiV1SecretSnapshotSecretSnapshotIdGet200ResponseSecretSnapshotSecretVersionsInnerTagsInner>;
}
/**
 * 
 * @export
 * @interface ApiV1SecretSnapshotSecretSnapshotIdGet200ResponseSecretSnapshotSecretVersionsInnerTagsInner
 */
export interface ApiV1SecretSnapshotSecretSnapshotIdGet200ResponseSecretSnapshotSecretVersionsInnerTagsInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretSnapshotSecretSnapshotIdGet200ResponseSecretSnapshotSecretVersionsInnerTagsInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretSnapshotSecretSnapshotIdGet200ResponseSecretSnapshotSecretVersionsInnerTagsInner
     */
    'slug': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SecretSnapshotSecretSnapshotIdGet200ResponseSecretSnapshotSecretVersionsInnerTagsInner
     */
    'color'?: string | null;
}
/**
 * 
 * @export
 * @interface ApiV1SecretSnapshotSecretSnapshotIdRollbackPost200Response
 */
export interface ApiV1SecretSnapshotSecretSnapshotIdRollbackPost200Response {
    /**
     * 
     * @type {ApiV1WorkspaceWorkspaceIdSecretSnapshotsGet200ResponseSecretSnapshotsInner}
     * @memberof ApiV1SecretSnapshotSecretSnapshotIdRollbackPost200Response
     */
    'secretSnapshot': ApiV1WorkspaceWorkspaceIdSecretSnapshotsGet200ResponseSecretSnapshotsInner;
}
/**
 * 
 * @export
 * @interface ApiV1SsoConfigGet200Response
 */
export interface ApiV1SsoConfigGet200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoConfigGet200Response
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoConfigGet200Response
     */
    'organization': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoConfigGet200Response
     */
    'orgId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoConfigGet200Response
     */
    'authProvider': string;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1SsoConfigGet200Response
     */
    'isActive': boolean;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoConfigGet200Response
     */
    'entryPoint': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoConfigGet200Response
     */
    'issuer': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoConfigGet200Response
     */
    'cert': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoConfigGet200Response
     */
    'lastUsed'?: string | null;
}
/**
 * 
 * @export
 * @interface ApiV1SsoConfigPatchRequest
 */
export interface ApiV1SsoConfigPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoConfigPatchRequest
     */
    'authProvider'?: ApiV1SsoConfigPatchRequestAuthProviderEnum;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1SsoConfigPatchRequest
     */
    'isActive'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoConfigPatchRequest
     */
    'entryPoint'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoConfigPatchRequest
     */
    'issuer'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoConfigPatchRequest
     */
    'cert'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoConfigPatchRequest
     */
    'organizationId': string;
}

export const ApiV1SsoConfigPatchRequestAuthProviderEnum = {
    OktaSaml: 'okta-saml',
    AzureSaml: 'azure-saml',
    JumpcloudSaml: 'jumpcloud-saml',
    GoogleSaml: 'google-saml',
    KeycloakSaml: 'keycloak-saml'
} as const;

export type ApiV1SsoConfigPatchRequestAuthProviderEnum = typeof ApiV1SsoConfigPatchRequestAuthProviderEnum[keyof typeof ApiV1SsoConfigPatchRequestAuthProviderEnum];

/**
 * 
 * @export
 * @interface ApiV1SsoConfigPost200Response
 */
export interface ApiV1SsoConfigPost200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoConfigPost200Response
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoConfigPost200Response
     */
    'authProvider': string;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1SsoConfigPost200Response
     */
    'isActive': boolean;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoConfigPost200Response
     */
    'encryptedEntryPoint'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoConfigPost200Response
     */
    'entryPointIV'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoConfigPost200Response
     */
    'entryPointTag'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoConfigPost200Response
     */
    'encryptedIssuer'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoConfigPost200Response
     */
    'issuerTag'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoConfigPost200Response
     */
    'issuerIV'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoConfigPost200Response
     */
    'encryptedCert'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoConfigPost200Response
     */
    'certIV'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoConfigPost200Response
     */
    'certTag'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoConfigPost200Response
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoConfigPost200Response
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoConfigPost200Response
     */
    'orgId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoConfigPost200Response
     */
    'lastUsed'?: string | null;
}
/**
 * 
 * @export
 * @interface ApiV1SsoConfigPostRequest
 */
export interface ApiV1SsoConfigPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoConfigPostRequest
     */
    'organizationId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoConfigPostRequest
     */
    'authProvider': ApiV1SsoConfigPostRequestAuthProviderEnum;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1SsoConfigPostRequest
     */
    'isActive': boolean;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoConfigPostRequest
     */
    'entryPoint': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoConfigPostRequest
     */
    'issuer': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoConfigPostRequest
     */
    'cert': string;
}

export const ApiV1SsoConfigPostRequestAuthProviderEnum = {
    OktaSaml: 'okta-saml',
    AzureSaml: 'azure-saml',
    JumpcloudSaml: 'jumpcloud-saml',
    GoogleSaml: 'google-saml',
    KeycloakSaml: 'keycloak-saml'
} as const;

export type ApiV1SsoConfigPostRequestAuthProviderEnum = typeof ApiV1SsoConfigPostRequestAuthProviderEnum[keyof typeof ApiV1SsoConfigPostRequestAuthProviderEnum];

/**
 * 
 * @export
 * @interface ApiV1SsoOidcConfigGet200Response
 */
export interface ApiV1SsoOidcConfigGet200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoOidcConfigGet200Response
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoOidcConfigGet200Response
     */
    'issuer'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoOidcConfigGet200Response
     */
    'authorizationEndpoint'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoOidcConfigGet200Response
     */
    'jwksUri'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoOidcConfigGet200Response
     */
    'tokenEndpoint'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoOidcConfigGet200Response
     */
    'userinfoEndpoint'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoOidcConfigGet200Response
     */
    'configurationType': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoOidcConfigGet200Response
     */
    'discoveryURL'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1SsoOidcConfigGet200Response
     */
    'isActive': boolean;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoOidcConfigGet200Response
     */
    'orgId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoOidcConfigGet200Response
     */
    'allowedEmailDomains'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoOidcConfigGet200Response
     */
    'clientId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoOidcConfigGet200Response
     */
    'clientSecret': string;
}
/**
 * 
 * @export
 * @interface ApiV1SsoOidcConfigPatch200Response
 */
export interface ApiV1SsoOidcConfigPatch200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoOidcConfigPatch200Response
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoOidcConfigPatch200Response
     */
    'issuer'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoOidcConfigPatch200Response
     */
    'authorizationEndpoint'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoOidcConfigPatch200Response
     */
    'configurationType': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoOidcConfigPatch200Response
     */
    'discoveryURL'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoOidcConfigPatch200Response
     */
    'jwksUri'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoOidcConfigPatch200Response
     */
    'tokenEndpoint'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoOidcConfigPatch200Response
     */
    'userinfoEndpoint'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoOidcConfigPatch200Response
     */
    'orgId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoOidcConfigPatch200Response
     */
    'allowedEmailDomains'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1SsoOidcConfigPatch200Response
     */
    'isActive': boolean;
}
/**
 * 
 * @export
 * @interface ApiV1SsoOidcConfigPatchRequest
 */
export interface ApiV1SsoOidcConfigPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoOidcConfigPatchRequest
     */
    'allowedEmailDomains'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoOidcConfigPatchRequest
     */
    'discoveryURL'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoOidcConfigPatchRequest
     */
    'configurationType'?: ApiV1SsoOidcConfigPatchRequestConfigurationTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoOidcConfigPatchRequest
     */
    'issuer'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoOidcConfigPatchRequest
     */
    'authorizationEndpoint'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoOidcConfigPatchRequest
     */
    'jwksUri'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoOidcConfigPatchRequest
     */
    'tokenEndpoint'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoOidcConfigPatchRequest
     */
    'userinfoEndpoint'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoOidcConfigPatchRequest
     */
    'clientId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoOidcConfigPatchRequest
     */
    'clientSecret'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1SsoOidcConfigPatchRequest
     */
    'isActive'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoOidcConfigPatchRequest
     */
    'orgSlug': string;
}

export const ApiV1SsoOidcConfigPatchRequestConfigurationTypeEnum = {
    Custom: 'custom',
    DiscoveryUrl: 'discoveryURL'
} as const;

export type ApiV1SsoOidcConfigPatchRequestConfigurationTypeEnum = typeof ApiV1SsoOidcConfigPatchRequestConfigurationTypeEnum[keyof typeof ApiV1SsoOidcConfigPatchRequestConfigurationTypeEnum];

/**
 * 
 * @export
 * @interface ApiV1SsoOidcConfigPost200Response
 */
export interface ApiV1SsoOidcConfigPost200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoOidcConfigPost200Response
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoOidcConfigPost200Response
     */
    'issuer'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoOidcConfigPost200Response
     */
    'authorizationEndpoint'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoOidcConfigPost200Response
     */
    'configurationType': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoOidcConfigPost200Response
     */
    'discoveryURL'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoOidcConfigPost200Response
     */
    'jwksUri'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoOidcConfigPost200Response
     */
    'tokenEndpoint'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoOidcConfigPost200Response
     */
    'userinfoEndpoint'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoOidcConfigPost200Response
     */
    'orgId': string;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1SsoOidcConfigPost200Response
     */
    'isActive': boolean;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoOidcConfigPost200Response
     */
    'allowedEmailDomains'?: string | null;
}
/**
 * 
 * @export
 * @interface ApiV1SsoOidcConfigPostRequest
 */
export interface ApiV1SsoOidcConfigPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoOidcConfigPostRequest
     */
    'allowedEmailDomains'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoOidcConfigPostRequest
     */
    'configurationType': ApiV1SsoOidcConfigPostRequestConfigurationTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoOidcConfigPostRequest
     */
    'issuer'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoOidcConfigPostRequest
     */
    'discoveryURL'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoOidcConfigPostRequest
     */
    'authorizationEndpoint'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoOidcConfigPostRequest
     */
    'jwksUri'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoOidcConfigPostRequest
     */
    'tokenEndpoint'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoOidcConfigPostRequest
     */
    'userinfoEndpoint'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoOidcConfigPostRequest
     */
    'clientId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoOidcConfigPostRequest
     */
    'clientSecret': string;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1SsoOidcConfigPostRequest
     */
    'isActive': boolean;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoOidcConfigPostRequest
     */
    'orgSlug': string;
}

export const ApiV1SsoOidcConfigPostRequestConfigurationTypeEnum = {
    Custom: 'custom',
    DiscoveryUrl: 'discoveryURL'
} as const;

export type ApiV1SsoOidcConfigPostRequestConfigurationTypeEnum = typeof ApiV1SsoOidcConfigPostRequestConfigurationTypeEnum[keyof typeof ApiV1SsoOidcConfigPostRequestConfigurationTypeEnum];

/**
 * 
 * @export
 * @interface ApiV1SsoTokenExchangePostRequest
 */
export interface ApiV1SsoTokenExchangePostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoTokenExchangePostRequest
     */
    'providerAuthToken': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1SsoTokenExchangePostRequest
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface ApiV1UserActionGet200Response
 */
export interface ApiV1UserActionGet200Response {
    /**
     * 
     * @type {ApiV1UserActionGet200ResponseUserAction}
     * @memberof ApiV1UserActionGet200Response
     */
    'userAction'?: ApiV1UserActionGet200ResponseUserAction | null;
}
/**
 * 
 * @export
 * @interface ApiV1UserActionGet200ResponseUserAction
 */
export interface ApiV1UserActionGet200ResponseUserAction {
    /**
     * 
     * @type {string}
     * @memberof ApiV1UserActionGet200ResponseUserAction
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1UserActionGet200ResponseUserAction
     */
    'action': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1UserActionGet200ResponseUserAction
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1UserActionGet200ResponseUserAction
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1UserActionGet200ResponseUserAction
     */
    'userId': string;
}
/**
 * 
 * @export
 * @interface ApiV1UserActionPost200Response
 */
export interface ApiV1UserActionPost200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiV1UserActionPost200Response
     */
    'message': string;
    /**
     * 
     * @type {ApiV1UserActionPost200ResponseUserAction}
     * @memberof ApiV1UserActionPost200Response
     */
    'userAction': ApiV1UserActionPost200ResponseUserAction;
}
/**
 * 
 * @export
 * @interface ApiV1UserActionPost200ResponseUserAction
 */
export interface ApiV1UserActionPost200ResponseUserAction {
    /**
     * 
     * @type {string}
     * @memberof ApiV1UserActionPost200ResponseUserAction
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1UserActionPost200ResponseUserAction
     */
    'action': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1UserActionPost200ResponseUserAction
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1UserActionPost200ResponseUserAction
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1UserActionPost200ResponseUserAction
     */
    'userId': string;
}
/**
 * 
 * @export
 * @interface ApiV1UserActionPostRequest
 */
export interface ApiV1UserActionPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1UserActionPostRequest
     */
    'action': string;
}
/**
 * 
 * @export
 * @interface ApiV1UserEngagementMeWishPostRequest
 */
export interface ApiV1UserEngagementMeWishPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1UserEngagementMeWishPostRequest
     */
    'text': string;
}
/**
 * 
 * @export
 * @interface ApiV1UserGet200Response
 */
export interface ApiV1UserGet200Response {
    /**
     * 
     * @type {ApiV1UserGet200ResponseUser}
     * @memberof ApiV1UserGet200Response
     */
    'user': ApiV1UserGet200ResponseUser;
}
/**
 * 
 * @export
 * @interface ApiV1UserGet200ResponseUser
 */
export interface ApiV1UserGet200ResponseUser {
    /**
     * 
     * @type {string}
     * @memberof ApiV1UserGet200ResponseUser
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1UserGet200ResponseUser
     */
    'email'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ApiV1UserGet200ResponseUser
     */
    'authMethods'?: Array<string> | null;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1UserGet200ResponseUser
     */
    'superAdmin'?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1UserGet200ResponseUser
     */
    'firstName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1UserGet200ResponseUser
     */
    'lastName'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1UserGet200ResponseUser
     */
    'isAccepted'?: boolean | null;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1UserGet200ResponseUser
     */
    'isMfaEnabled'?: boolean | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ApiV1UserGet200ResponseUser
     */
    'mfaMethods'?: Array<string> | null;
    /**
     * 
     * @type {any}
     * @memberof ApiV1UserGet200ResponseUser
     */
    'devices'?: any | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1UserGet200ResponseUser
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1UserGet200ResponseUser
     */
    'updatedAt': string;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1UserGet200ResponseUser
     */
    'isGhost'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ApiV1UserGet200ResponseUser
     */
    'username': string;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1UserGet200ResponseUser
     */
    'isEmailVerified'?: boolean | null;
    /**
     * 
     * @type {number}
     * @memberof ApiV1UserGet200ResponseUser
     */
    'consecutiveFailedMfaAttempts'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1UserGet200ResponseUser
     */
    'isLocked'?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1UserGet200ResponseUser
     */
    'temporaryLockDateEnd'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ApiV1UserGet200ResponseUser
     */
    'consecutiveFailedPasswordAttempts'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1UserGet200ResponseUser
     */
    'clientPublicKey'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1UserGet200ResponseUser
     */
    'serverPrivateKey'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ApiV1UserGet200ResponseUser
     */
    'encryptionVersion'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1UserGet200ResponseUser
     */
    'protectedKey'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1UserGet200ResponseUser
     */
    'protectedKeyIV'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1UserGet200ResponseUser
     */
    'protectedKeyTag'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1UserGet200ResponseUser
     */
    'publicKey': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1UserGet200ResponseUser
     */
    'encryptedPrivateKey': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1UserGet200ResponseUser
     */
    'iv': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1UserGet200ResponseUser
     */
    'tag': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1UserGet200ResponseUser
     */
    'salt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1UserGet200ResponseUser
     */
    'verifier': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1UserGet200ResponseUser
     */
    'userId': string;
}
/**
 * 
 * @export
 * @interface ApiV1UserMeProjectFavoritesGet200Response
 */
export interface ApiV1UserMeProjectFavoritesGet200Response {
    /**
     * 
     * @type {Array<string>}
     * @memberof ApiV1UserMeProjectFavoritesGet200Response
     */
    'projectFavorites': Array<string>;
}
/**
 * 
 * @export
 * @interface ApiV1UserMeProjectFavoritesPutRequest
 */
export interface ApiV1UserMeProjectFavoritesPutRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1UserMeProjectFavoritesPutRequest
     */
    'orgId': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ApiV1UserMeProjectFavoritesPutRequest
     */
    'projectFavorites': Array<string>;
}
/**
 * 
 * @export
 * @interface ApiV1UserPrivateKeyGet200Response
 */
export interface ApiV1UserPrivateKeyGet200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiV1UserPrivateKeyGet200Response
     */
    'privateKey': string;
}
/**
 * 
 * @export
 * @interface ApiV1WebhooksGet200Response
 */
export interface ApiV1WebhooksGet200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiV1WebhooksGet200Response
     */
    'message': string;
    /**
     * 
     * @type {Array<ApiV1WebhooksGet200ResponseWebhooksInner>}
     * @memberof ApiV1WebhooksGet200Response
     */
    'webhooks': Array<ApiV1WebhooksGet200ResponseWebhooksInner>;
}
/**
 * 
 * @export
 * @interface ApiV1WebhooksGet200ResponseWebhooksInner
 */
export interface ApiV1WebhooksGet200ResponseWebhooksInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1WebhooksGet200ResponseWebhooksInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WebhooksGet200ResponseWebhooksInner
     */
    'secretPath'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WebhooksGet200ResponseWebhooksInner
     */
    'lastStatus'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WebhooksGet200ResponseWebhooksInner
     */
    'lastRunErrorMessage'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1WebhooksGet200ResponseWebhooksInner
     */
    'isDisabled'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WebhooksGet200ResponseWebhooksInner
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WebhooksGet200ResponseWebhooksInner
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WebhooksGet200ResponseWebhooksInner
     */
    'envId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WebhooksGet200ResponseWebhooksInner
     */
    'type'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WebhooksGet200ResponseWebhooksInner
     */
    'projectId': string;
    /**
     * 
     * @type {ApiV1SecretApprovalsGet200ResponseApprovalsInnerEnvironment}
     * @memberof ApiV1WebhooksGet200ResponseWebhooksInner
     */
    'environment': ApiV1SecretApprovalsGet200ResponseApprovalsInnerEnvironment;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WebhooksGet200ResponseWebhooksInner
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface ApiV1WebhooksPost200Response
 */
export interface ApiV1WebhooksPost200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiV1WebhooksPost200Response
     */
    'message': string;
    /**
     * 
     * @type {ApiV1WebhooksPost200ResponseWebhook}
     * @memberof ApiV1WebhooksPost200Response
     */
    'webhook': ApiV1WebhooksPost200ResponseWebhook;
}
/**
 * 
 * @export
 * @interface ApiV1WebhooksPost200ResponseWebhook
 */
export interface ApiV1WebhooksPost200ResponseWebhook {
    /**
     * 
     * @type {string}
     * @memberof ApiV1WebhooksPost200ResponseWebhook
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WebhooksPost200ResponseWebhook
     */
    'secretPath'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WebhooksPost200ResponseWebhook
     */
    'lastStatus'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WebhooksPost200ResponseWebhook
     */
    'lastRunErrorMessage'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1WebhooksPost200ResponseWebhook
     */
    'isDisabled'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WebhooksPost200ResponseWebhook
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WebhooksPost200ResponseWebhook
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WebhooksPost200ResponseWebhook
     */
    'envId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WebhooksPost200ResponseWebhook
     */
    'type'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WebhooksPost200ResponseWebhook
     */
    'projectId': string;
    /**
     * 
     * @type {ApiV1SecretApprovalsGet200ResponseApprovalsInnerEnvironment}
     * @memberof ApiV1WebhooksPost200ResponseWebhook
     */
    'environment': ApiV1SecretApprovalsGet200ResponseApprovalsInnerEnvironment;
}
/**
 * 
 * @export
 * @interface ApiV1WebhooksPostRequest
 */
export interface ApiV1WebhooksPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1WebhooksPostRequest
     */
    'type'?: ApiV1WebhooksPostRequestTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WebhooksPostRequest
     */
    'workspaceId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WebhooksPostRequest
     */
    'environment': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WebhooksPostRequest
     */
    'webhookUrl': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WebhooksPostRequest
     */
    'webhookSecretKey'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WebhooksPostRequest
     */
    'secretPath'?: string;
}

export const ApiV1WebhooksPostRequestTypeEnum = {
    General: 'general',
    Slack: 'slack'
} as const;

export type ApiV1WebhooksPostRequestTypeEnum = typeof ApiV1WebhooksPostRequestTypeEnum[keyof typeof ApiV1WebhooksPostRequestTypeEnum];

/**
 * 
 * @export
 * @interface ApiV1WebhooksWebhookIdPatchRequest
 */
export interface ApiV1WebhooksWebhookIdPatchRequest {
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1WebhooksWebhookIdPatchRequest
     */
    'isDisabled'?: boolean;
}
/**
 * 
 * @export
 * @interface ApiV1WorkspaceGet200Response
 */
export interface ApiV1WorkspaceGet200Response {
    /**
     * 
     * @type {Array<ApiV1WorkspaceGet200ResponseWorkspacesInner>}
     * @memberof ApiV1WorkspaceGet200Response
     */
    'workspaces': Array<ApiV1WorkspaceGet200ResponseWorkspacesInner>;
}
/**
 * 
 * @export
 * @interface ApiV1WorkspaceGet200ResponseWorkspacesInner
 */
export interface ApiV1WorkspaceGet200ResponseWorkspacesInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceGet200ResponseWorkspacesInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceGet200ResponseWorkspacesInner
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceGet200ResponseWorkspacesInner
     */
    'slug': string;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1WorkspaceGet200ResponseWorkspacesInner
     */
    'autoCapitalization'?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceGet200ResponseWorkspacesInner
     */
    'orgId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceGet200ResponseWorkspacesInner
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceGet200ResponseWorkspacesInner
     */
    'updatedAt': string;
    /**
     * 
     * @type {number}
     * @memberof ApiV1WorkspaceGet200ResponseWorkspacesInner
     */
    'version'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceGet200ResponseWorkspacesInner
     */
    'upgradeStatus'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ApiV1WorkspaceGet200ResponseWorkspacesInner
     */
    'pitVersionLimit'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceGet200ResponseWorkspacesInner
     */
    'kmsCertificateKeyId'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ApiV1WorkspaceGet200ResponseWorkspacesInner
     */
    'auditLogsRetentionDays'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceGet200ResponseWorkspacesInner
     */
    '_id': string;
    /**
     * 
     * @type {Array<ApiV1SecretImportsGet200ResponseSecretImportsInnerImportEnv>}
     * @memberof ApiV1WorkspaceGet200ResponseWorkspacesInner
     */
    'environments': Array<ApiV1SecretImportsGet200ResponseSecretImportsInnerImportEnv>;
    /**
     * 
     * @type {Array<ApiV1WorkspaceGet200ResponseWorkspacesInnerRolesInner>}
     * @memberof ApiV1WorkspaceGet200ResponseWorkspacesInner
     */
    'roles'?: Array<ApiV1WorkspaceGet200ResponseWorkspacesInnerRolesInner>;
}
/**
 * 
 * @export
 * @interface ApiV1WorkspaceGet200ResponseWorkspacesInnerRolesInner
 */
export interface ApiV1WorkspaceGet200ResponseWorkspacesInnerRolesInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceGet200ResponseWorkspacesInnerRolesInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceGet200ResponseWorkspacesInnerRolesInner
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceGet200ResponseWorkspacesInnerRolesInner
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceGet200ResponseWorkspacesInnerRolesInner
     */
    'slug': string;
    /**
     * 
     * @type {any}
     * @memberof ApiV1WorkspaceGet200ResponseWorkspacesInnerRolesInner
     */
    'permissions'?: any;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceGet200ResponseWorkspacesInnerRolesInner
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceGet200ResponseWorkspacesInnerRolesInner
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceGet200ResponseWorkspacesInnerRolesInner
     */
    'projectId': string;
}
/**
 * 
 * @export
 * @interface ApiV1WorkspaceProjectIdPermissionsGet200Response
 */
export interface ApiV1WorkspaceProjectIdPermissionsGet200Response {
    /**
     * 
     * @type {ApiV1WorkspaceProjectIdPermissionsGet200ResponseData}
     * @memberof ApiV1WorkspaceProjectIdPermissionsGet200Response
     */
    'data': ApiV1WorkspaceProjectIdPermissionsGet200ResponseData;
}
/**
 * 
 * @export
 * @interface ApiV1WorkspaceProjectIdPermissionsGet200ResponseData
 */
export interface ApiV1WorkspaceProjectIdPermissionsGet200ResponseData {
    /**
     * 
     * @type {ApiV1WorkspaceProjectIdPermissionsGet200ResponseDataMembership}
     * @memberof ApiV1WorkspaceProjectIdPermissionsGet200ResponseData
     */
    'membership': ApiV1WorkspaceProjectIdPermissionsGet200ResponseDataMembership;
    /**
     * 
     * @type {Array<string>}
     * @memberof ApiV1WorkspaceProjectIdPermissionsGet200ResponseData
     */
    'permissions': Array<string>;
}
/**
 * 
 * @export
 * @interface ApiV1WorkspaceProjectIdPermissionsGet200ResponseDataMembership
 */
export interface ApiV1WorkspaceProjectIdPermissionsGet200ResponseDataMembership {
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceProjectIdPermissionsGet200ResponseDataMembership
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceProjectIdPermissionsGet200ResponseDataMembership
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceProjectIdPermissionsGet200ResponseDataMembership
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceProjectIdPermissionsGet200ResponseDataMembership
     */
    'userId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceProjectIdPermissionsGet200ResponseDataMembership
     */
    'projectId': string;
    /**
     * 
     * @type {Array<ApiV1WorkspaceProjectIdPermissionsGet200ResponseDataMembershipRolesInner>}
     * @memberof ApiV1WorkspaceProjectIdPermissionsGet200ResponseDataMembership
     */
    'roles': Array<ApiV1WorkspaceProjectIdPermissionsGet200ResponseDataMembershipRolesInner>;
}
/**
 * 
 * @export
 * @interface ApiV1WorkspaceProjectIdPermissionsGet200ResponseDataMembershipRolesInner
 */
export interface ApiV1WorkspaceProjectIdPermissionsGet200ResponseDataMembershipRolesInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceProjectIdPermissionsGet200ResponseDataMembershipRolesInner
     */
    'role': string;
}
/**
 * 
 * @export
 * @interface ApiV1WorkspaceProjectIdTagsGet200Response
 */
export interface ApiV1WorkspaceProjectIdTagsGet200Response {
    /**
     * 
     * @type {Array<ApiV1WorkspaceProjectIdTagsGet200ResponseWorkspaceTagsInner>}
     * @memberof ApiV1WorkspaceProjectIdTagsGet200Response
     */
    'workspaceTags': Array<ApiV1WorkspaceProjectIdTagsGet200ResponseWorkspaceTagsInner>;
}
/**
 * 
 * @export
 * @interface ApiV1WorkspaceProjectIdTagsGet200ResponseWorkspaceTagsInner
 */
export interface ApiV1WorkspaceProjectIdTagsGet200ResponseWorkspaceTagsInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceProjectIdTagsGet200ResponseWorkspaceTagsInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceProjectIdTagsGet200ResponseWorkspaceTagsInner
     */
    'slug': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceProjectIdTagsGet200ResponseWorkspaceTagsInner
     */
    'color'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceProjectIdTagsGet200ResponseWorkspaceTagsInner
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceProjectIdTagsGet200ResponseWorkspaceTagsInner
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceProjectIdTagsGet200ResponseWorkspaceTagsInner
     */
    'createdBy'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceProjectIdTagsGet200ResponseWorkspaceTagsInner
     */
    'projectId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceProjectIdTagsGet200ResponseWorkspaceTagsInner
     */
    'createdByActorType'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1WorkspaceProjectIdTagsPost200Response
 */
export interface ApiV1WorkspaceProjectIdTagsPost200Response {
    /**
     * 
     * @type {ApiV1WorkspaceProjectIdTagsGet200ResponseWorkspaceTagsInner}
     * @memberof ApiV1WorkspaceProjectIdTagsPost200Response
     */
    'workspaceTag': ApiV1WorkspaceProjectIdTagsGet200ResponseWorkspaceTagsInner;
}
/**
 * 
 * @export
 * @interface ApiV1WorkspaceProjectIdTagsPostRequest
 */
export interface ApiV1WorkspaceProjectIdTagsPostRequest {
    /**
     * The slug of the tag to create.
     * @type {string}
     * @memberof ApiV1WorkspaceProjectIdTagsPostRequest
     */
    'slug': string;
    /**
     * The color of the tag to create.
     * @type {string}
     * @memberof ApiV1WorkspaceProjectIdTagsPostRequest
     */
    'color': string;
}
/**
 * 
 * @export
 * @interface ApiV1WorkspaceProjectIdTagsTagIdGet200Response
 */
export interface ApiV1WorkspaceProjectIdTagsTagIdGet200Response {
    /**
     * 
     * @type {ApiV1WorkspaceProjectIdTagsTagIdGet200ResponseWorkspaceTag}
     * @memberof ApiV1WorkspaceProjectIdTagsTagIdGet200Response
     */
    'workspaceTag': ApiV1WorkspaceProjectIdTagsTagIdGet200ResponseWorkspaceTag;
}
/**
 * 
 * @export
 * @interface ApiV1WorkspaceProjectIdTagsTagIdGet200ResponseWorkspaceTag
 */
export interface ApiV1WorkspaceProjectIdTagsTagIdGet200ResponseWorkspaceTag {
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceProjectIdTagsTagIdGet200ResponseWorkspaceTag
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceProjectIdTagsTagIdGet200ResponseWorkspaceTag
     */
    'slug': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceProjectIdTagsTagIdGet200ResponseWorkspaceTag
     */
    'color'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceProjectIdTagsTagIdGet200ResponseWorkspaceTag
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceProjectIdTagsTagIdGet200ResponseWorkspaceTag
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceProjectIdTagsTagIdGet200ResponseWorkspaceTag
     */
    'createdBy'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceProjectIdTagsTagIdGet200ResponseWorkspaceTag
     */
    'projectId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceProjectIdTagsTagIdGet200ResponseWorkspaceTag
     */
    'createdByActorType'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceProjectIdTagsTagIdGet200ResponseWorkspaceTag
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface ApiV1WorkspaceProjectIdTagsTagIdPatchRequest
 */
export interface ApiV1WorkspaceProjectIdTagsTagIdPatchRequest {
    /**
     * The slug of the tag to update.
     * @type {string}
     * @memberof ApiV1WorkspaceProjectIdTagsTagIdPatchRequest
     */
    'slug': string;
    /**
     * The color of the tag to update.
     * @type {string}
     * @memberof ApiV1WorkspaceProjectIdTagsTagIdPatchRequest
     */
    'color': string;
}
/**
 * 
 * @export
 * @interface ApiV1WorkspaceProjectSlugRolesGet200Response
 */
export interface ApiV1WorkspaceProjectSlugRolesGet200Response {
    /**
     * 
     * @type {Array<ApiV1WorkspaceProjectSlugRolesGet200ResponseRolesInner>}
     * @memberof ApiV1WorkspaceProjectSlugRolesGet200Response
     */
    'roles': Array<ApiV1WorkspaceProjectSlugRolesGet200ResponseRolesInner>;
}
/**
 * 
 * @export
 * @interface ApiV1WorkspaceProjectSlugRolesGet200ResponseRolesInner
 */
export interface ApiV1WorkspaceProjectSlugRolesGet200ResponseRolesInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceProjectSlugRolesGet200ResponseRolesInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceProjectSlugRolesGet200ResponseRolesInner
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceProjectSlugRolesGet200ResponseRolesInner
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceProjectSlugRolesGet200ResponseRolesInner
     */
    'slug': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceProjectSlugRolesGet200ResponseRolesInner
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceProjectSlugRolesGet200ResponseRolesInner
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceProjectSlugRolesGet200ResponseRolesInner
     */
    'projectId': string;
}
/**
 * 
 * @export
 * @interface ApiV1WorkspaceProjectSlugRolesPost200Response
 */
export interface ApiV1WorkspaceProjectSlugRolesPost200Response {
    /**
     * 
     * @type {ApiV1WorkspaceProjectSlugRolesPost200ResponseRole}
     * @memberof ApiV1WorkspaceProjectSlugRolesPost200Response
     */
    'role': ApiV1WorkspaceProjectSlugRolesPost200ResponseRole;
}
/**
 * 
 * @export
 * @interface ApiV1WorkspaceProjectSlugRolesPost200ResponseRole
 */
export interface ApiV1WorkspaceProjectSlugRolesPost200ResponseRole {
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceProjectSlugRolesPost200ResponseRole
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceProjectSlugRolesPost200ResponseRole
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceProjectSlugRolesPost200ResponseRole
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceProjectSlugRolesPost200ResponseRole
     */
    'slug': string;
    /**
     * 
     * @type {Array<ApiV1WorkspaceProjectSlugRolesPost200ResponseRolePermissionsInner>}
     * @memberof ApiV1WorkspaceProjectSlugRolesPost200ResponseRole
     */
    'permissions': Array<ApiV1WorkspaceProjectSlugRolesPost200ResponseRolePermissionsInner>;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceProjectSlugRolesPost200ResponseRole
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceProjectSlugRolesPost200ResponseRole
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceProjectSlugRolesPost200ResponseRole
     */
    'projectId': string;
}
/**
 * 
 * @export
 * @interface ApiV1WorkspaceProjectSlugRolesPost200ResponseRolePermissionsInner
 */
export interface ApiV1WorkspaceProjectSlugRolesPost200ResponseRolePermissionsInner {
    /**
     * 
     * @type {ApiV1WorkspaceProjectSlugRolesPost200ResponseRolePermissionsInnerSubject}
     * @memberof ApiV1WorkspaceProjectSlugRolesPost200ResponseRolePermissionsInner
     */
    'subject'?: ApiV1WorkspaceProjectSlugRolesPost200ResponseRolePermissionsInnerSubject;
    /**
     * 
     * @type {ApiV1WorkspaceProjectSlugRolesPost200ResponseRolePermissionsInnerSubject}
     * @memberof ApiV1WorkspaceProjectSlugRolesPost200ResponseRolePermissionsInner
     */
    'action': ApiV1WorkspaceProjectSlugRolesPost200ResponseRolePermissionsInnerSubject;
    /**
     * 
     * @type {ApiV1WorkspaceProjectSlugRolesPost200ResponseRolePermissionsInnerConditions}
     * @memberof ApiV1WorkspaceProjectSlugRolesPost200ResponseRolePermissionsInner
     */
    'conditions'?: ApiV1WorkspaceProjectSlugRolesPost200ResponseRolePermissionsInnerConditions;
}
/**
 * 
 * @export
 * @interface ApiV1WorkspaceProjectSlugRolesPost200ResponseRolePermissionsInnerConditions
 */
export interface ApiV1WorkspaceProjectSlugRolesPost200ResponseRolePermissionsInnerConditions {
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceProjectSlugRolesPost200ResponseRolePermissionsInnerConditions
     */
    'environment'?: string;
    /**
     * 
     * @type {ApiV1WorkspaceProjectSlugRolesPost200ResponseRolePermissionsInnerConditionsSecretPath}
     * @memberof ApiV1WorkspaceProjectSlugRolesPost200ResponseRolePermissionsInnerConditions
     */
    'secretPath'?: ApiV1WorkspaceProjectSlugRolesPost200ResponseRolePermissionsInnerConditionsSecretPath;
}
/**
 * 
 * @export
 * @interface ApiV1WorkspaceProjectSlugRolesPost200ResponseRolePermissionsInnerConditionsSecretPath
 */
export interface ApiV1WorkspaceProjectSlugRolesPost200ResponseRolePermissionsInnerConditionsSecretPath {
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceProjectSlugRolesPost200ResponseRolePermissionsInnerConditionsSecretPath
     */
    '$glob': string;
}
/**
 * 
 * @export
 * @interface ApiV1WorkspaceProjectSlugRolesPost200ResponseRolePermissionsInnerSubject
 */
export interface ApiV1WorkspaceProjectSlugRolesPost200ResponseRolePermissionsInnerSubject {
}
/**
 * 
 * @export
 * @interface ApiV1WorkspaceProjectSlugRolesPostRequest
 */
export interface ApiV1WorkspaceProjectSlugRolesPostRequest {
    /**
     * The slug of the role.
     * @type {string}
     * @memberof ApiV1WorkspaceProjectSlugRolesPostRequest
     */
    'slug': string;
    /**
     * The name of the role.
     * @type {string}
     * @memberof ApiV1WorkspaceProjectSlugRolesPostRequest
     */
    'name': string;
    /**
     * The description for the role.
     * @type {string}
     * @memberof ApiV1WorkspaceProjectSlugRolesPostRequest
     */
    'description'?: string;
    /**
     * The permissions assigned to the role.
     * @type {Array<ApiV1WorkspaceProjectSlugRolesPostRequestPermissionsInner>}
     * @memberof ApiV1WorkspaceProjectSlugRolesPostRequest
     */
    'permissions': Array<ApiV1WorkspaceProjectSlugRolesPostRequestPermissionsInner>;
}
/**
 * 
 * @export
 * @interface ApiV1WorkspaceProjectSlugRolesPostRequestPermissionsInner
 */
export interface ApiV1WorkspaceProjectSlugRolesPostRequestPermissionsInner {
    /**
     * Describe what action an entity can take. Possible actions: create, edit, delete, and read
     * @type {string}
     * @memberof ApiV1WorkspaceProjectSlugRolesPostRequestPermissionsInner
     */
    'action': ApiV1WorkspaceProjectSlugRolesPostRequestPermissionsInnerActionEnum;
    /**
     * The entity this permission pertains to. Possible options: secrets, environments
     * @type {string}
     * @memberof ApiV1WorkspaceProjectSlugRolesPostRequestPermissionsInner
     */
    'subject': ApiV1WorkspaceProjectSlugRolesPostRequestPermissionsInnerSubjectEnum;
    /**
     * 
     * @type {ApiV1WorkspaceProjectSlugRolesPostRequestPermissionsInnerConditions}
     * @memberof ApiV1WorkspaceProjectSlugRolesPostRequestPermissionsInner
     */
    'conditions'?: ApiV1WorkspaceProjectSlugRolesPostRequestPermissionsInnerConditions;
}

export const ApiV1WorkspaceProjectSlugRolesPostRequestPermissionsInnerActionEnum = {
    Read: 'read',
    Create: 'create',
    Edit: 'edit',
    Delete: 'delete'
} as const;

export type ApiV1WorkspaceProjectSlugRolesPostRequestPermissionsInnerActionEnum = typeof ApiV1WorkspaceProjectSlugRolesPostRequestPermissionsInnerActionEnum[keyof typeof ApiV1WorkspaceProjectSlugRolesPostRequestPermissionsInnerActionEnum];
export const ApiV1WorkspaceProjectSlugRolesPostRequestPermissionsInnerSubjectEnum = {
    Role: 'role',
    Member: 'member',
    Groups: 'groups',
    Settings: 'settings',
    Integrations: 'integrations',
    Webhooks: 'webhooks',
    ServiceTokens: 'service-tokens',
    Environments: 'environments',
    Tags: 'tags',
    AuditLogs: 'audit-logs',
    IpAllowlist: 'ip-allowlist',
    Workspace: 'workspace',
    Secrets: 'secrets',
    SecretFolders: 'secret-folders',
    SecretRollback: 'secret-rollback',
    SecretApproval: 'secret-approval',
    SecretRotation: 'secret-rotation',
    Identity: 'identity',
    CertificateAuthorities: 'certificate-authorities',
    Certificates: 'certificates',
    CertificateTemplates: 'certificate-templates',
    PkiAlerts: 'pki-alerts',
    PkiCollections: 'pki-collections',
    Kms: 'kms'
} as const;

export type ApiV1WorkspaceProjectSlugRolesPostRequestPermissionsInnerSubjectEnum = typeof ApiV1WorkspaceProjectSlugRolesPostRequestPermissionsInnerSubjectEnum[keyof typeof ApiV1WorkspaceProjectSlugRolesPostRequestPermissionsInnerSubjectEnum];

/**
 * When specified, only matching conditions will be allowed to access given resource.
 * @export
 * @interface ApiV1WorkspaceProjectSlugRolesPostRequestPermissionsInnerConditions
 */
export interface ApiV1WorkspaceProjectSlugRolesPostRequestPermissionsInnerConditions {
    /**
     * The environment slug this permission should allow.
     * @type {string}
     * @memberof ApiV1WorkspaceProjectSlugRolesPostRequestPermissionsInnerConditions
     */
    'environment'?: string;
    /**
     * 
     * @type {ApiV1WorkspaceProjectSlugRolesPostRequestPermissionsInnerConditionsSecretPath}
     * @memberof ApiV1WorkspaceProjectSlugRolesPostRequestPermissionsInnerConditions
     */
    'secretPath'?: ApiV1WorkspaceProjectSlugRolesPostRequestPermissionsInnerConditionsSecretPath;
}
/**
 * 
 * @export
 * @interface ApiV1WorkspaceProjectSlugRolesPostRequestPermissionsInnerConditionsSecretPath
 */
export interface ApiV1WorkspaceProjectSlugRolesPostRequestPermissionsInnerConditionsSecretPath {
    /**
     * The secret path this permission should allow. Can be a glob pattern such as /folder-name/_*_/_** 
     * @type {string}
     * @memberof ApiV1WorkspaceProjectSlugRolesPostRequestPermissionsInnerConditionsSecretPath
     */
    '$glob': string;
}
/**
 * 
 * @export
 * @interface ApiV1WorkspaceProjectSlugRolesRoleIdPatchRequest
 */
export interface ApiV1WorkspaceProjectSlugRolesRoleIdPatchRequest {
    /**
     * The slug of the role.
     * @type {string}
     * @memberof ApiV1WorkspaceProjectSlugRolesRoleIdPatchRequest
     */
    'slug'?: string;
    /**
     * The name of the role.
     * @type {string}
     * @memberof ApiV1WorkspaceProjectSlugRolesRoleIdPatchRequest
     */
    'name'?: string;
    /**
     * The permissions assigned to the role.
     * @type {Array<ApiV1WorkspaceProjectSlugRolesPostRequestPermissionsInner>}
     * @memberof ApiV1WorkspaceProjectSlugRolesRoleIdPatchRequest
     */
    'permissions'?: Array<ApiV1WorkspaceProjectSlugRolesPostRequestPermissionsInner>;
}
/**
 * 
 * @export
 * @interface ApiV1WorkspaceWorkspaceIdAuditLogsFiltersActorsGet200Response
 */
export interface ApiV1WorkspaceWorkspaceIdAuditLogsFiltersActorsGet200Response {
    /**
     * 
     * @type {Array<string>}
     * @memberof ApiV1WorkspaceWorkspaceIdAuditLogsFiltersActorsGet200Response
     */
    'actors': Array<string>;
}
/**
 * 
 * @export
 * @interface ApiV1WorkspaceWorkspaceIdAuditLogsGet200Response
 */
export interface ApiV1WorkspaceWorkspaceIdAuditLogsGet200Response {
    /**
     * 
     * @type {Array<ApiV1WorkspaceWorkspaceIdAuditLogsGet200ResponseAuditLogsInner>}
     * @memberof ApiV1WorkspaceWorkspaceIdAuditLogsGet200Response
     */
    'auditLogs': Array<ApiV1WorkspaceWorkspaceIdAuditLogsGet200ResponseAuditLogsInner>;
}
/**
 * 
 * @export
 * @interface ApiV1WorkspaceWorkspaceIdAuditLogsGet200ResponseAuditLogsInner
 */
export interface ApiV1WorkspaceWorkspaceIdAuditLogsGet200ResponseAuditLogsInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdAuditLogsGet200ResponseAuditLogsInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdAuditLogsGet200ResponseAuditLogsInner
     */
    'ipAddress'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdAuditLogsGet200ResponseAuditLogsInner
     */
    'userAgent'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdAuditLogsGet200ResponseAuditLogsInner
     */
    'userAgentType'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdAuditLogsGet200ResponseAuditLogsInner
     */
    'expiresAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdAuditLogsGet200ResponseAuditLogsInner
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdAuditLogsGet200ResponseAuditLogsInner
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdAuditLogsGet200ResponseAuditLogsInner
     */
    'orgId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdAuditLogsGet200ResponseAuditLogsInner
     */
    'projectId'?: string | null;
    /**
     * 
     * @type {ApiV1WorkspaceWorkspaceIdAuditLogsGet200ResponseAuditLogsInnerEvent}
     * @memberof ApiV1WorkspaceWorkspaceIdAuditLogsGet200ResponseAuditLogsInner
     */
    'event': ApiV1WorkspaceWorkspaceIdAuditLogsGet200ResponseAuditLogsInnerEvent;
    /**
     * 
     * @type {ApiV1WorkspaceWorkspaceIdAuditLogsGet200ResponseAuditLogsInnerEvent}
     * @memberof ApiV1WorkspaceWorkspaceIdAuditLogsGet200ResponseAuditLogsInner
     */
    'actor': ApiV1WorkspaceWorkspaceIdAuditLogsGet200ResponseAuditLogsInnerEvent;
}
/**
 * 
 * @export
 * @interface ApiV1WorkspaceWorkspaceIdAuditLogsGet200ResponseAuditLogsInnerEvent
 */
export interface ApiV1WorkspaceWorkspaceIdAuditLogsGet200ResponseAuditLogsInnerEvent {
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdAuditLogsGet200ResponseAuditLogsInnerEvent
     */
    'type': string;
    /**
     * 
     * @type {any}
     * @memberof ApiV1WorkspaceWorkspaceIdAuditLogsGet200ResponseAuditLogsInnerEvent
     */
    'metadata'?: any;
}
/**
 * 
 * @export
 * @interface ApiV1WorkspaceWorkspaceIdAuthorizationsGet200Response
 */
export interface ApiV1WorkspaceWorkspaceIdAuthorizationsGet200Response {
    /**
     * 
     * @type {Array<ApiV1WorkspaceWorkspaceIdAuthorizationsGet200ResponseAuthorizationsInner>}
     * @memberof ApiV1WorkspaceWorkspaceIdAuthorizationsGet200Response
     */
    'authorizations': Array<ApiV1WorkspaceWorkspaceIdAuthorizationsGet200ResponseAuthorizationsInner>;
}
/**
 * 
 * @export
 * @interface ApiV1WorkspaceWorkspaceIdAuthorizationsGet200ResponseAuthorizationsInner
 */
export interface ApiV1WorkspaceWorkspaceIdAuthorizationsGet200ResponseAuthorizationsInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdAuthorizationsGet200ResponseAuthorizationsInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdAuthorizationsGet200ResponseAuthorizationsInner
     */
    'projectId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdAuthorizationsGet200ResponseAuthorizationsInner
     */
    'integration': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdAuthorizationsGet200ResponseAuthorizationsInner
     */
    'teamId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdAuthorizationsGet200ResponseAuthorizationsInner
     */
    'url'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdAuthorizationsGet200ResponseAuthorizationsInner
     */
    'namespace'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdAuthorizationsGet200ResponseAuthorizationsInner
     */
    'accountId'?: string | null;
    /**
     * 
     * @type {any}
     * @memberof ApiV1WorkspaceWorkspaceIdAuthorizationsGet200ResponseAuthorizationsInner
     */
    'metadata'?: any | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdAuthorizationsGet200ResponseAuthorizationsInner
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdAuthorizationsGet200ResponseAuthorizationsInner
     */
    'updatedAt': string;
}
/**
 * 
 * @export
 * @interface ApiV1WorkspaceWorkspaceIdAutoCapitalizationPostRequest
 */
export interface ApiV1WorkspaceWorkspaceIdAutoCapitalizationPostRequest {
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1WorkspaceWorkspaceIdAutoCapitalizationPostRequest
     */
    'autoCapitalization': boolean;
}
/**
 * 
 * @export
 * @interface ApiV1WorkspaceWorkspaceIdDelete200Response
 */
export interface ApiV1WorkspaceWorkspaceIdDelete200Response {
    /**
     * 
     * @type {ApiV1OrganizationAdminProjectsGet200ResponseProjectsInner}
     * @memberof ApiV1WorkspaceWorkspaceIdDelete200Response
     */
    'workspace'?: ApiV1OrganizationAdminProjectsGet200ResponseProjectsInner;
}
/**
 * 
 * @export
 * @interface ApiV1WorkspaceWorkspaceIdEnvironmentsEnvIdGet200Response
 */
export interface ApiV1WorkspaceWorkspaceIdEnvironmentsEnvIdGet200Response {
    /**
     * 
     * @type {ApiV1WorkspaceWorkspaceIdEnvironmentsEnvIdGet200ResponseEnvironment}
     * @memberof ApiV1WorkspaceWorkspaceIdEnvironmentsEnvIdGet200Response
     */
    'environment': ApiV1WorkspaceWorkspaceIdEnvironmentsEnvIdGet200ResponseEnvironment;
}
/**
 * 
 * @export
 * @interface ApiV1WorkspaceWorkspaceIdEnvironmentsEnvIdGet200ResponseEnvironment
 */
export interface ApiV1WorkspaceWorkspaceIdEnvironmentsEnvIdGet200ResponseEnvironment {
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdEnvironmentsEnvIdGet200ResponseEnvironment
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdEnvironmentsEnvIdGet200ResponseEnvironment
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdEnvironmentsEnvIdGet200ResponseEnvironment
     */
    'slug': string;
    /**
     * 
     * @type {number}
     * @memberof ApiV1WorkspaceWorkspaceIdEnvironmentsEnvIdGet200ResponseEnvironment
     */
    'position': number;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdEnvironmentsEnvIdGet200ResponseEnvironment
     */
    'projectId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdEnvironmentsEnvIdGet200ResponseEnvironment
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdEnvironmentsEnvIdGet200ResponseEnvironment
     */
    'updatedAt': string;
}
/**
 * 
 * @export
 * @interface ApiV1WorkspaceWorkspaceIdEnvironmentsIdPatchRequest
 */
export interface ApiV1WorkspaceWorkspaceIdEnvironmentsIdPatchRequest {
    /**
     * The new slug of the environment.
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdEnvironmentsIdPatchRequest
     */
    'slug'?: string;
    /**
     * The new name of the environment.
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdEnvironmentsIdPatchRequest
     */
    'name'?: string;
    /**
     * The new position of the environment. The lowest number will be displayed as the first environment.
     * @type {number}
     * @memberof ApiV1WorkspaceWorkspaceIdEnvironmentsIdPatchRequest
     */
    'position'?: number;
}
/**
 * 
 * @export
 * @interface ApiV1WorkspaceWorkspaceIdEnvironmentsPost200Response
 */
export interface ApiV1WorkspaceWorkspaceIdEnvironmentsPost200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdEnvironmentsPost200Response
     */
    'message': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdEnvironmentsPost200Response
     */
    'workspace': string;
    /**
     * 
     * @type {ApiV1WorkspaceWorkspaceIdEnvironmentsEnvIdGet200ResponseEnvironment}
     * @memberof ApiV1WorkspaceWorkspaceIdEnvironmentsPost200Response
     */
    'environment': ApiV1WorkspaceWorkspaceIdEnvironmentsEnvIdGet200ResponseEnvironment;
}
/**
 * 
 * @export
 * @interface ApiV1WorkspaceWorkspaceIdEnvironmentsPostRequest
 */
export interface ApiV1WorkspaceWorkspaceIdEnvironmentsPostRequest {
    /**
     * The name of the environment to create.
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdEnvironmentsPostRequest
     */
    'name': string;
    /**
     * The slug of the environment to create.
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdEnvironmentsPostRequest
     */
    'slug': string;
}
/**
 * 
 * @export
 * @interface ApiV1WorkspaceWorkspaceIdGet200Response
 */
export interface ApiV1WorkspaceWorkspaceIdGet200Response {
    /**
     * 
     * @type {ApiV1WorkspaceWorkspaceIdGet200ResponseWorkspace}
     * @memberof ApiV1WorkspaceWorkspaceIdGet200Response
     */
    'workspace'?: ApiV1WorkspaceWorkspaceIdGet200ResponseWorkspace;
}
/**
 * 
 * @export
 * @interface ApiV1WorkspaceWorkspaceIdGet200ResponseWorkspace
 */
export interface ApiV1WorkspaceWorkspaceIdGet200ResponseWorkspace {
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdGet200ResponseWorkspace
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdGet200ResponseWorkspace
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdGet200ResponseWorkspace
     */
    'slug': string;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1WorkspaceWorkspaceIdGet200ResponseWorkspace
     */
    'autoCapitalization'?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdGet200ResponseWorkspace
     */
    'orgId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdGet200ResponseWorkspace
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdGet200ResponseWorkspace
     */
    'updatedAt': string;
    /**
     * 
     * @type {number}
     * @memberof ApiV1WorkspaceWorkspaceIdGet200ResponseWorkspace
     */
    'version'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdGet200ResponseWorkspace
     */
    'upgradeStatus'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ApiV1WorkspaceWorkspaceIdGet200ResponseWorkspace
     */
    'pitVersionLimit'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdGet200ResponseWorkspace
     */
    'kmsCertificateKeyId'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ApiV1WorkspaceWorkspaceIdGet200ResponseWorkspace
     */
    'auditLogsRetentionDays'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdGet200ResponseWorkspace
     */
    '_id': string;
    /**
     * 
     * @type {Array<ApiV1SecretImportsGet200ResponseSecretImportsInnerImportEnv>}
     * @memberof ApiV1WorkspaceWorkspaceIdGet200ResponseWorkspace
     */
    'environments': Array<ApiV1SecretImportsGet200ResponseSecretImportsInnerImportEnv>;
}
/**
 * 
 * @export
 * @interface ApiV1WorkspaceWorkspaceIdIntegrationsGet200Response
 */
export interface ApiV1WorkspaceWorkspaceIdIntegrationsGet200Response {
    /**
     * 
     * @type {Array<ApiV1WorkspaceWorkspaceIdIntegrationsGet200ResponseIntegrationsInner>}
     * @memberof ApiV1WorkspaceWorkspaceIdIntegrationsGet200Response
     */
    'integrations': Array<ApiV1WorkspaceWorkspaceIdIntegrationsGet200ResponseIntegrationsInner>;
}
/**
 * 
 * @export
 * @interface ApiV1WorkspaceWorkspaceIdIntegrationsGet200ResponseIntegrationsInner
 */
export interface ApiV1WorkspaceWorkspaceIdIntegrationsGet200ResponseIntegrationsInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdIntegrationsGet200ResponseIntegrationsInner
     */
    'id': string;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1WorkspaceWorkspaceIdIntegrationsGet200ResponseIntegrationsInner
     */
    'isActive': boolean;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdIntegrationsGet200ResponseIntegrationsInner
     */
    'url'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdIntegrationsGet200ResponseIntegrationsInner
     */
    'app'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdIntegrationsGet200ResponseIntegrationsInner
     */
    'appId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdIntegrationsGet200ResponseIntegrationsInner
     */
    'targetEnvironment'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdIntegrationsGet200ResponseIntegrationsInner
     */
    'targetEnvironmentId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdIntegrationsGet200ResponseIntegrationsInner
     */
    'targetService'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdIntegrationsGet200ResponseIntegrationsInner
     */
    'targetServiceId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdIntegrationsGet200ResponseIntegrationsInner
     */
    'owner'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdIntegrationsGet200ResponseIntegrationsInner
     */
    'path'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdIntegrationsGet200ResponseIntegrationsInner
     */
    'region'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdIntegrationsGet200ResponseIntegrationsInner
     */
    'scope'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdIntegrationsGet200ResponseIntegrationsInner
     */
    'integration': string;
    /**
     * 
     * @type {any}
     * @memberof ApiV1WorkspaceWorkspaceIdIntegrationsGet200ResponseIntegrationsInner
     */
    'metadata'?: any | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdIntegrationsGet200ResponseIntegrationsInner
     */
    'integrationAuthId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdIntegrationsGet200ResponseIntegrationsInner
     */
    'envId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdIntegrationsGet200ResponseIntegrationsInner
     */
    'secretPath'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdIntegrationsGet200ResponseIntegrationsInner
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdIntegrationsGet200ResponseIntegrationsInner
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdIntegrationsGet200ResponseIntegrationsInner
     */
    'lastUsed'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1WorkspaceWorkspaceIdIntegrationsGet200ResponseIntegrationsInner
     */
    'isSynced'?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdIntegrationsGet200ResponseIntegrationsInner
     */
    'syncMessage'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdIntegrationsGet200ResponseIntegrationsInner
     */
    'lastSyncJobId'?: string | null;
    /**
     * 
     * @type {ApiV1SecretApprovalsGet200ResponseApprovalsInnerEnvironment}
     * @memberof ApiV1WorkspaceWorkspaceIdIntegrationsGet200ResponseIntegrationsInner
     */
    'environment': ApiV1SecretApprovalsGet200ResponseApprovalsInnerEnvironment;
}
/**
 * 
 * @export
 * @interface ApiV1WorkspaceWorkspaceIdKeyPostRequest
 */
export interface ApiV1WorkspaceWorkspaceIdKeyPostRequest {
    /**
     * 
     * @type {ApiV1WorkspaceWorkspaceIdKeyPostRequestKey}
     * @memberof ApiV1WorkspaceWorkspaceIdKeyPostRequest
     */
    'key': ApiV1WorkspaceWorkspaceIdKeyPostRequestKey;
}
/**
 * 
 * @export
 * @interface ApiV1WorkspaceWorkspaceIdKeyPostRequestKey
 */
export interface ApiV1WorkspaceWorkspaceIdKeyPostRequestKey {
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdKeyPostRequestKey
     */
    'encryptedKey': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdKeyPostRequestKey
     */
    'nonce': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdKeyPostRequestKey
     */
    'userId': string;
}
/**
 * 
 * @export
 * @interface ApiV1WorkspaceWorkspaceIdKeysGet200Response
 */
export interface ApiV1WorkspaceWorkspaceIdKeysGet200Response {
    /**
     * 
     * @type {Array<ApiV1WorkspaceWorkspaceIdKeysGet200ResponsePublicKeysInner>}
     * @memberof ApiV1WorkspaceWorkspaceIdKeysGet200Response
     */
    'publicKeys': Array<ApiV1WorkspaceWorkspaceIdKeysGet200ResponsePublicKeysInner>;
}
/**
 * 
 * @export
 * @interface ApiV1WorkspaceWorkspaceIdKeysGet200ResponsePublicKeysInner
 */
export interface ApiV1WorkspaceWorkspaceIdKeysGet200ResponsePublicKeysInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdKeysGet200ResponsePublicKeysInner
     */
    'publicKey'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdKeysGet200ResponsePublicKeysInner
     */
    'userId': string;
}
/**
 * 
 * @export
 * @interface ApiV1WorkspaceWorkspaceIdKmsBackupGet200Response
 */
export interface ApiV1WorkspaceWorkspaceIdKmsBackupGet200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdKmsBackupGet200Response
     */
    'secretManager': string;
}
/**
 * 
 * @export
 * @interface ApiV1WorkspaceWorkspaceIdKmsBackupPostRequest
 */
export interface ApiV1WorkspaceWorkspaceIdKmsBackupPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdKmsBackupPostRequest
     */
    'backup': string;
}
/**
 * 
 * @export
 * @interface ApiV1WorkspaceWorkspaceIdKmsGet200Response
 */
export interface ApiV1WorkspaceWorkspaceIdKmsGet200Response {
    /**
     * 
     * @type {ApiV1WorkspaceWorkspaceIdKmsGet200ResponseSecretManagerKmsKey}
     * @memberof ApiV1WorkspaceWorkspaceIdKmsGet200Response
     */
    'secretManagerKmsKey': ApiV1WorkspaceWorkspaceIdKmsGet200ResponseSecretManagerKmsKey;
}
/**
 * 
 * @export
 * @interface ApiV1WorkspaceWorkspaceIdKmsGet200ResponseSecretManagerKmsKey
 */
export interface ApiV1WorkspaceWorkspaceIdKmsGet200ResponseSecretManagerKmsKey {
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdKmsGet200ResponseSecretManagerKmsKey
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdKmsGet200ResponseSecretManagerKmsKey
     */
    'slug': string;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1WorkspaceWorkspaceIdKmsGet200ResponseSecretManagerKmsKey
     */
    'isExternal': boolean;
}
/**
 * 
 * @export
 * @interface ApiV1WorkspaceWorkspaceIdKmsPatchRequest
 */
export interface ApiV1WorkspaceWorkspaceIdKmsPatchRequest {
    /**
     * 
     * @type {ApiV1WorkspaceWorkspaceIdKmsPatchRequestKms}
     * @memberof ApiV1WorkspaceWorkspaceIdKmsPatchRequest
     */
    'kms': ApiV1WorkspaceWorkspaceIdKmsPatchRequestKms;
}
/**
 * 
 * @export
 * @interface ApiV1WorkspaceWorkspaceIdKmsPatchRequestKms
 */
export interface ApiV1WorkspaceWorkspaceIdKmsPatchRequestKms {
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdKmsPatchRequestKms
     */
    'type': ApiV1WorkspaceWorkspaceIdKmsPatchRequestKmsTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdKmsPatchRequestKms
     */
    'kmsId': string;
}

export const ApiV1WorkspaceWorkspaceIdKmsPatchRequestKmsTypeEnum = {
    Internal: 'internal',
    External: 'external'
} as const;

export type ApiV1WorkspaceWorkspaceIdKmsPatchRequestKmsTypeEnum = typeof ApiV1WorkspaceWorkspaceIdKmsPatchRequestKmsTypeEnum[keyof typeof ApiV1WorkspaceWorkspaceIdKmsPatchRequestKmsTypeEnum];

/**
 * 
 * @export
 * @interface ApiV1WorkspaceWorkspaceIdKmsPatchRequestKmsAnyOf
 */
export interface ApiV1WorkspaceWorkspaceIdKmsPatchRequestKmsAnyOf {
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdKmsPatchRequestKmsAnyOf
     */
    'type': ApiV1WorkspaceWorkspaceIdKmsPatchRequestKmsAnyOfTypeEnum;
}

export const ApiV1WorkspaceWorkspaceIdKmsPatchRequestKmsAnyOfTypeEnum = {
    Internal: 'internal'
} as const;

export type ApiV1WorkspaceWorkspaceIdKmsPatchRequestKmsAnyOfTypeEnum = typeof ApiV1WorkspaceWorkspaceIdKmsPatchRequestKmsAnyOfTypeEnum[keyof typeof ApiV1WorkspaceWorkspaceIdKmsPatchRequestKmsAnyOfTypeEnum];

/**
 * 
 * @export
 * @interface ApiV1WorkspaceWorkspaceIdKmsPatchRequestKmsAnyOf1
 */
export interface ApiV1WorkspaceWorkspaceIdKmsPatchRequestKmsAnyOf1 {
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdKmsPatchRequestKmsAnyOf1
     */
    'type': ApiV1WorkspaceWorkspaceIdKmsPatchRequestKmsAnyOf1TypeEnum;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdKmsPatchRequestKmsAnyOf1
     */
    'kmsId': string;
}

export const ApiV1WorkspaceWorkspaceIdKmsPatchRequestKmsAnyOf1TypeEnum = {
    External: 'external'
} as const;

export type ApiV1WorkspaceWorkspaceIdKmsPatchRequestKmsAnyOf1TypeEnum = typeof ApiV1WorkspaceWorkspaceIdKmsPatchRequestKmsAnyOf1TypeEnum[keyof typeof ApiV1WorkspaceWorkspaceIdKmsPatchRequestKmsAnyOf1TypeEnum];

/**
 * 
 * @export
 * @interface ApiV1WorkspaceWorkspaceIdMembershipsDetailsPost200Response
 */
export interface ApiV1WorkspaceWorkspaceIdMembershipsDetailsPost200Response {
    /**
     * 
     * @type {ApiV1WorkspaceWorkspaceIdMembershipsGet200ResponseMembershipsInner}
     * @memberof ApiV1WorkspaceWorkspaceIdMembershipsDetailsPost200Response
     */
    'membership': ApiV1WorkspaceWorkspaceIdMembershipsGet200ResponseMembershipsInner;
}
/**
 * 
 * @export
 * @interface ApiV1WorkspaceWorkspaceIdMembershipsDetailsPostRequest
 */
export interface ApiV1WorkspaceWorkspaceIdMembershipsDetailsPostRequest {
    /**
     * The username to get project membership of. Email is the default username.
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdMembershipsDetailsPostRequest
     */
    'username': string;
}
/**
 * 
 * @export
 * @interface ApiV1WorkspaceWorkspaceIdMembershipsGet200Response
 */
export interface ApiV1WorkspaceWorkspaceIdMembershipsGet200Response {
    /**
     * 
     * @type {Array<ApiV1WorkspaceWorkspaceIdMembershipsGet200ResponseMembershipsInner>}
     * @memberof ApiV1WorkspaceWorkspaceIdMembershipsGet200Response
     */
    'memberships': Array<ApiV1WorkspaceWorkspaceIdMembershipsGet200ResponseMembershipsInner>;
}
/**
 * 
 * @export
 * @interface ApiV1WorkspaceWorkspaceIdMembershipsGet200ResponseMembershipsInner
 */
export interface ApiV1WorkspaceWorkspaceIdMembershipsGet200ResponseMembershipsInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdMembershipsGet200ResponseMembershipsInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdMembershipsGet200ResponseMembershipsInner
     */
    'userId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdMembershipsGet200ResponseMembershipsInner
     */
    'projectId': string;
    /**
     * 
     * @type {ApiV1WorkspaceWorkspaceIdMembershipsGet200ResponseMembershipsInnerUser}
     * @memberof ApiV1WorkspaceWorkspaceIdMembershipsGet200ResponseMembershipsInner
     */
    'user': ApiV1WorkspaceWorkspaceIdMembershipsGet200ResponseMembershipsInnerUser;
    /**
     * 
     * @type {Array<ApiV1WorkspaceWorkspaceIdUsersGet200ResponseUsersInnerRolesInner>}
     * @memberof ApiV1WorkspaceWorkspaceIdMembershipsGet200ResponseMembershipsInner
     */
    'roles': Array<ApiV1WorkspaceWorkspaceIdUsersGet200ResponseUsersInnerRolesInner>;
}
/**
 * 
 * @export
 * @interface ApiV1WorkspaceWorkspaceIdMembershipsGet200ResponseMembershipsInnerUser
 */
export interface ApiV1WorkspaceWorkspaceIdMembershipsGet200ResponseMembershipsInnerUser {
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdMembershipsGet200ResponseMembershipsInnerUser
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdMembershipsGet200ResponseMembershipsInnerUser
     */
    'firstName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdMembershipsGet200ResponseMembershipsInnerUser
     */
    'lastName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdMembershipsGet200ResponseMembershipsInnerUser
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdMembershipsGet200ResponseMembershipsInnerUser
     */
    'publicKey': string;
}
/**
 * 
 * @export
 * @interface ApiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatch200Response
 */
export interface ApiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatch200Response {
    /**
     * 
     * @type {Array<ApiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatch200ResponseRolesInner>}
     * @memberof ApiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatch200Response
     */
    'roles': Array<ApiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatch200ResponseRolesInner>;
}
/**
 * 
 * @export
 * @interface ApiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatch200ResponseRolesInner
 */
export interface ApiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatch200ResponseRolesInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatch200ResponseRolesInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatch200ResponseRolesInner
     */
    'role': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatch200ResponseRolesInner
     */
    'projectMembershipId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatch200ResponseRolesInner
     */
    'customRoleId'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatch200ResponseRolesInner
     */
    'isTemporary'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatch200ResponseRolesInner
     */
    'temporaryMode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatch200ResponseRolesInner
     */
    'temporaryRange'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatch200ResponseRolesInner
     */
    'temporaryAccessStartTime'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatch200ResponseRolesInner
     */
    'temporaryAccessEndTime'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatch200ResponseRolesInner
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatch200ResponseRolesInner
     */
    'updatedAt': string;
}
/**
 * 
 * @export
 * @interface ApiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatchRequest
 */
export interface ApiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatchRequest {
    /**
     * A list of roles to update the membership to.
     * @type {Array<ApiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatchRequestRolesInner>}
     * @memberof ApiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatchRequest
     */
    'roles': Array<ApiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatchRequestRolesInner>;
}
/**
 * 
 * @export
 * @interface ApiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatchRequestRolesInner
 */
export interface ApiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatchRequestRolesInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatchRequestRolesInner
     */
    'role': string;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatchRequestRolesInner
     */
    'isTemporary': boolean;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatchRequestRolesInner
     */
    'temporaryMode': ApiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatchRequestRolesInnerTemporaryModeEnum;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatchRequestRolesInner
     */
    'temporaryRange': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatchRequestRolesInner
     */
    'temporaryAccessStartTime': string;
}

export const ApiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatchRequestRolesInnerTemporaryModeEnum = {
    Relative: 'relative'
} as const;

export type ApiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatchRequestRolesInnerTemporaryModeEnum = typeof ApiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatchRequestRolesInnerTemporaryModeEnum[keyof typeof ApiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatchRequestRolesInnerTemporaryModeEnum];

/**
 * 
 * @export
 * @interface ApiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatchRequestRolesInnerAnyOf
 */
export interface ApiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatchRequestRolesInnerAnyOf {
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatchRequestRolesInnerAnyOf
     */
    'role': string;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatchRequestRolesInnerAnyOf
     */
    'isTemporary'?: boolean;
}
/**
 * 
 * @export
 * @interface ApiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatchRequestRolesInnerAnyOf1
 */
export interface ApiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatchRequestRolesInnerAnyOf1 {
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatchRequestRolesInnerAnyOf1
     */
    'role': string;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatchRequestRolesInnerAnyOf1
     */
    'isTemporary': boolean;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatchRequestRolesInnerAnyOf1
     */
    'temporaryMode': ApiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatchRequestRolesInnerAnyOf1TemporaryModeEnum;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatchRequestRolesInnerAnyOf1
     */
    'temporaryRange': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatchRequestRolesInnerAnyOf1
     */
    'temporaryAccessStartTime': string;
}

export const ApiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatchRequestRolesInnerAnyOf1TemporaryModeEnum = {
    Relative: 'relative'
} as const;

export type ApiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatchRequestRolesInnerAnyOf1TemporaryModeEnum = typeof ApiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatchRequestRolesInnerAnyOf1TemporaryModeEnum[keyof typeof ApiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatchRequestRolesInnerAnyOf1TemporaryModeEnum];

/**
 * 
 * @export
 * @interface ApiV1WorkspaceWorkspaceIdMembershipsPost200Response
 */
export interface ApiV1WorkspaceWorkspaceIdMembershipsPost200Response {
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1WorkspaceWorkspaceIdMembershipsPost200Response
     */
    'success': boolean;
    /**
     * 
     * @type {Array<ApiV1OrganizationOrganizationIdPermissionsGet200ResponseMembership>}
     * @memberof ApiV1WorkspaceWorkspaceIdMembershipsPost200Response
     */
    'data': Array<ApiV1OrganizationOrganizationIdPermissionsGet200ResponseMembership>;
}
/**
 * 
 * @export
 * @interface ApiV1WorkspaceWorkspaceIdMembershipsPostRequest
 */
export interface ApiV1WorkspaceWorkspaceIdMembershipsPostRequest {
    /**
     * 
     * @type {Array<ApiV1WorkspaceWorkspaceIdMembershipsPostRequestMembersInner>}
     * @memberof ApiV1WorkspaceWorkspaceIdMembershipsPostRequest
     */
    'members': Array<ApiV1WorkspaceWorkspaceIdMembershipsPostRequestMembersInner>;
}
/**
 * 
 * @export
 * @interface ApiV1WorkspaceWorkspaceIdMembershipsPostRequestMembersInner
 */
export interface ApiV1WorkspaceWorkspaceIdMembershipsPostRequestMembersInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdMembershipsPostRequestMembersInner
     */
    'orgMembershipId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdMembershipsPostRequestMembersInner
     */
    'workspaceEncryptedKey': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdMembershipsPostRequestMembersInner
     */
    'workspaceEncryptedNonce': string;
}
/**
 * 
 * @export
 * @interface ApiV1WorkspaceWorkspaceIdMigrateV3Post200Response
 */
export interface ApiV1WorkspaceWorkspaceIdMigrateV3Post200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdMigrateV3Post200Response
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface ApiV1WorkspaceWorkspaceIdNamePost200Response
 */
export interface ApiV1WorkspaceWorkspaceIdNamePost200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdNamePost200Response
     */
    'message': string;
    /**
     * 
     * @type {ApiV1OrganizationAdminProjectsGet200ResponseProjectsInner}
     * @memberof ApiV1WorkspaceWorkspaceIdNamePost200Response
     */
    'workspace': ApiV1OrganizationAdminProjectsGet200ResponseProjectsInner;
}
/**
 * 
 * @export
 * @interface ApiV1WorkspaceWorkspaceIdNamePostRequest
 */
export interface ApiV1WorkspaceWorkspaceIdNamePostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdNamePostRequest
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface ApiV1WorkspaceWorkspaceIdPatch200Response
 */
export interface ApiV1WorkspaceWorkspaceIdPatch200Response {
    /**
     * 
     * @type {ApiV1OrganizationAdminProjectsGet200ResponseProjectsInner}
     * @memberof ApiV1WorkspaceWorkspaceIdPatch200Response
     */
    'workspace': ApiV1OrganizationAdminProjectsGet200ResponseProjectsInner;
}
/**
 * 
 * @export
 * @interface ApiV1WorkspaceWorkspaceIdPatchRequest
 */
export interface ApiV1WorkspaceWorkspaceIdPatchRequest {
    /**
     * The new name of the project.
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdPatchRequest
     */
    'name'?: string;
    /**
     * Disable or enable auto-capitalization for the project.
     * @type {boolean}
     * @memberof ApiV1WorkspaceWorkspaceIdPatchRequest
     */
    'autoCapitalization'?: boolean;
}
/**
 * 
 * @export
 * @interface ApiV1WorkspaceWorkspaceIdSecretSnapshotsCountGet200Response
 */
export interface ApiV1WorkspaceWorkspaceIdSecretSnapshotsCountGet200Response {
    /**
     * 
     * @type {number}
     * @memberof ApiV1WorkspaceWorkspaceIdSecretSnapshotsCountGet200Response
     */
    'count': number;
}
/**
 * 
 * @export
 * @interface ApiV1WorkspaceWorkspaceIdSecretSnapshotsGet200Response
 */
export interface ApiV1WorkspaceWorkspaceIdSecretSnapshotsGet200Response {
    /**
     * 
     * @type {Array<ApiV1WorkspaceWorkspaceIdSecretSnapshotsGet200ResponseSecretSnapshotsInner>}
     * @memberof ApiV1WorkspaceWorkspaceIdSecretSnapshotsGet200Response
     */
    'secretSnapshots': Array<ApiV1WorkspaceWorkspaceIdSecretSnapshotsGet200ResponseSecretSnapshotsInner>;
}
/**
 * 
 * @export
 * @interface ApiV1WorkspaceWorkspaceIdSecretSnapshotsGet200ResponseSecretSnapshotsInner
 */
export interface ApiV1WorkspaceWorkspaceIdSecretSnapshotsGet200ResponseSecretSnapshotsInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdSecretSnapshotsGet200ResponseSecretSnapshotsInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdSecretSnapshotsGet200ResponseSecretSnapshotsInner
     */
    'envId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdSecretSnapshotsGet200ResponseSecretSnapshotsInner
     */
    'folderId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdSecretSnapshotsGet200ResponseSecretSnapshotsInner
     */
    'parentFolderId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdSecretSnapshotsGet200ResponseSecretSnapshotsInner
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdSecretSnapshotsGet200ResponseSecretSnapshotsInner
     */
    'updatedAt': string;
}
/**
 * 
 * @export
 * @interface ApiV1WorkspaceWorkspaceIdServiceTokenDataGet200Response
 */
export interface ApiV1WorkspaceWorkspaceIdServiceTokenDataGet200Response {
    /**
     * 
     * @type {Array<ApiV1WorkspaceWorkspaceIdServiceTokenDataGet200ResponseServiceTokenDataInner>}
     * @memberof ApiV1WorkspaceWorkspaceIdServiceTokenDataGet200Response
     */
    'serviceTokenData': Array<ApiV1WorkspaceWorkspaceIdServiceTokenDataGet200ResponseServiceTokenDataInner>;
}
/**
 * 
 * @export
 * @interface ApiV1WorkspaceWorkspaceIdServiceTokenDataGet200ResponseServiceTokenDataInner
 */
export interface ApiV1WorkspaceWorkspaceIdServiceTokenDataGet200ResponseServiceTokenDataInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdServiceTokenDataGet200ResponseServiceTokenDataInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdServiceTokenDataGet200ResponseServiceTokenDataInner
     */
    'name': string;
    /**
     * 
     * @type {any}
     * @memberof ApiV1WorkspaceWorkspaceIdServiceTokenDataGet200ResponseServiceTokenDataInner
     */
    'scopes'?: any;
    /**
     * 
     * @type {Array<string>}
     * @memberof ApiV1WorkspaceWorkspaceIdServiceTokenDataGet200ResponseServiceTokenDataInner
     */
    'permissions': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdServiceTokenDataGet200ResponseServiceTokenDataInner
     */
    'lastUsed'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdServiceTokenDataGet200ResponseServiceTokenDataInner
     */
    'expiresAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdServiceTokenDataGet200ResponseServiceTokenDataInner
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdServiceTokenDataGet200ResponseServiceTokenDataInner
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdServiceTokenDataGet200ResponseServiceTokenDataInner
     */
    'createdBy': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdServiceTokenDataGet200ResponseServiceTokenDataInner
     */
    'projectId': string;
}
/**
 * 
 * @export
 * @interface ApiV1WorkspaceWorkspaceIdTrustedIpsGet200Response
 */
export interface ApiV1WorkspaceWorkspaceIdTrustedIpsGet200Response {
    /**
     * 
     * @type {Array<ApiV1WorkspaceWorkspaceIdTrustedIpsGet200ResponseTrustedIpsInner>}
     * @memberof ApiV1WorkspaceWorkspaceIdTrustedIpsGet200Response
     */
    'trustedIps': Array<ApiV1WorkspaceWorkspaceIdTrustedIpsGet200ResponseTrustedIpsInner>;
}
/**
 * 
 * @export
 * @interface ApiV1WorkspaceWorkspaceIdTrustedIpsGet200ResponseTrustedIpsInner
 */
export interface ApiV1WorkspaceWorkspaceIdTrustedIpsGet200ResponseTrustedIpsInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdTrustedIpsGet200ResponseTrustedIpsInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdTrustedIpsGet200ResponseTrustedIpsInner
     */
    'ipAddress': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdTrustedIpsGet200ResponseTrustedIpsInner
     */
    'type': string;
    /**
     * 
     * @type {number}
     * @memberof ApiV1WorkspaceWorkspaceIdTrustedIpsGet200ResponseTrustedIpsInner
     */
    'prefix'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1WorkspaceWorkspaceIdTrustedIpsGet200ResponseTrustedIpsInner
     */
    'isActive'?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdTrustedIpsGet200ResponseTrustedIpsInner
     */
    'comment'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdTrustedIpsGet200ResponseTrustedIpsInner
     */
    'projectId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdTrustedIpsGet200ResponseTrustedIpsInner
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdTrustedIpsGet200ResponseTrustedIpsInner
     */
    'updatedAt': string;
}
/**
 * 
 * @export
 * @interface ApiV1WorkspaceWorkspaceIdTrustedIpsPost200Response
 */
export interface ApiV1WorkspaceWorkspaceIdTrustedIpsPost200Response {
    /**
     * 
     * @type {ApiV1WorkspaceWorkspaceIdTrustedIpsGet200ResponseTrustedIpsInner}
     * @memberof ApiV1WorkspaceWorkspaceIdTrustedIpsPost200Response
     */
    'trustedIp': ApiV1WorkspaceWorkspaceIdTrustedIpsGet200ResponseTrustedIpsInner;
}
/**
 * 
 * @export
 * @interface ApiV1WorkspaceWorkspaceIdTrustedIpsPostRequest
 */
export interface ApiV1WorkspaceWorkspaceIdTrustedIpsPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdTrustedIpsPostRequest
     */
    'ipAddress': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdTrustedIpsPostRequest
     */
    'comment'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1WorkspaceWorkspaceIdTrustedIpsPostRequest
     */
    'isActive': boolean;
}
/**
 * 
 * @export
 * @interface ApiV1WorkspaceWorkspaceIdTrustedIpsTrustedIpIdPatchRequest
 */
export interface ApiV1WorkspaceWorkspaceIdTrustedIpsTrustedIpIdPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdTrustedIpsTrustedIpIdPatchRequest
     */
    'ipAddress': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdTrustedIpsTrustedIpIdPatchRequest
     */
    'comment'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1WorkspaceWorkspaceIdUsersGet200Response
 */
export interface ApiV1WorkspaceWorkspaceIdUsersGet200Response {
    /**
     * 
     * @type {Array<ApiV1WorkspaceWorkspaceIdUsersGet200ResponseUsersInner>}
     * @memberof ApiV1WorkspaceWorkspaceIdUsersGet200Response
     */
    'users': Array<ApiV1WorkspaceWorkspaceIdUsersGet200ResponseUsersInner>;
}
/**
 * 
 * @export
 * @interface ApiV1WorkspaceWorkspaceIdUsersGet200ResponseUsersInner
 */
export interface ApiV1WorkspaceWorkspaceIdUsersGet200ResponseUsersInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdUsersGet200ResponseUsersInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdUsersGet200ResponseUsersInner
     */
    'userId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdUsersGet200ResponseUsersInner
     */
    'projectId': string;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1WorkspaceWorkspaceIdUsersGet200ResponseUsersInner
     */
    'isGroupMember': boolean;
    /**
     * 
     * @type {ApiV1WorkspaceWorkspaceIdUsersGet200ResponseUsersInnerUser}
     * @memberof ApiV1WorkspaceWorkspaceIdUsersGet200ResponseUsersInner
     */
    'user': ApiV1WorkspaceWorkspaceIdUsersGet200ResponseUsersInnerUser;
    /**
     * 
     * @type {ApiV1WorkspaceWorkspaceIdUsersGet200ResponseUsersInnerProject}
     * @memberof ApiV1WorkspaceWorkspaceIdUsersGet200ResponseUsersInner
     */
    'project': ApiV1WorkspaceWorkspaceIdUsersGet200ResponseUsersInnerProject;
    /**
     * 
     * @type {Array<ApiV1WorkspaceWorkspaceIdUsersGet200ResponseUsersInnerRolesInner>}
     * @memberof ApiV1WorkspaceWorkspaceIdUsersGet200ResponseUsersInner
     */
    'roles': Array<ApiV1WorkspaceWorkspaceIdUsersGet200ResponseUsersInnerRolesInner>;
}
/**
 * 
 * @export
 * @interface ApiV1WorkspaceWorkspaceIdUsersGet200ResponseUsersInnerProject
 */
export interface ApiV1WorkspaceWorkspaceIdUsersGet200ResponseUsersInnerProject {
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdUsersGet200ResponseUsersInnerProject
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdUsersGet200ResponseUsersInnerProject
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface ApiV1WorkspaceWorkspaceIdUsersGet200ResponseUsersInnerRolesInner
 */
export interface ApiV1WorkspaceWorkspaceIdUsersGet200ResponseUsersInnerRolesInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdUsersGet200ResponseUsersInnerRolesInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdUsersGet200ResponseUsersInnerRolesInner
     */
    'role': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdUsersGet200ResponseUsersInnerRolesInner
     */
    'customRoleId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdUsersGet200ResponseUsersInnerRolesInner
     */
    'customRoleName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdUsersGet200ResponseUsersInnerRolesInner
     */
    'customRoleSlug'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV1WorkspaceWorkspaceIdUsersGet200ResponseUsersInnerRolesInner
     */
    'isTemporary': boolean;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdUsersGet200ResponseUsersInnerRolesInner
     */
    'temporaryMode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdUsersGet200ResponseUsersInnerRolesInner
     */
    'temporaryRange'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdUsersGet200ResponseUsersInnerRolesInner
     */
    'temporaryAccessStartTime'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdUsersGet200ResponseUsersInnerRolesInner
     */
    'temporaryAccessEndTime'?: string | null;
}
/**
 * 
 * @export
 * @interface ApiV1WorkspaceWorkspaceIdUsersGet200ResponseUsersInnerUser
 */
export interface ApiV1WorkspaceWorkspaceIdUsersGet200ResponseUsersInnerUser {
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdUsersGet200ResponseUsersInnerUser
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdUsersGet200ResponseUsersInnerUser
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdUsersGet200ResponseUsersInnerUser
     */
    'firstName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdUsersGet200ResponseUsersInnerUser
     */
    'lastName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdUsersGet200ResponseUsersInnerUser
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1WorkspaceWorkspaceIdUsersGet200ResponseUsersInnerUser
     */
    'publicKey': string;
}
/**
 * 
 * @export
 * @interface ApiV1WorkspaceWorkspaceSlugAuditLogsRetentionPutRequest
 */
export interface ApiV1WorkspaceWorkspaceSlugAuditLogsRetentionPutRequest {
    /**
     * 
     * @type {number}
     * @memberof ApiV1WorkspaceWorkspaceSlugAuditLogsRetentionPutRequest
     */
    'auditLogsRetentionDays': number;
}
/**
 * 
 * @export
 * @interface ApiV1WorkspaceWorkspaceSlugVersionLimitPutRequest
 */
export interface ApiV1WorkspaceWorkspaceSlugVersionLimitPutRequest {
    /**
     * 
     * @type {number}
     * @memberof ApiV1WorkspaceWorkspaceSlugVersionLimitPutRequest
     */
    'pitVersionLimit': number;
}
/**
 * 
 * @export
 * @interface ApiV2AuthMfaVerifyPost200Response
 */
export interface ApiV2AuthMfaVerifyPost200Response {
    /**
     * 
     * @type {number}
     * @memberof ApiV2AuthMfaVerifyPost200Response
     */
    'encryptionVersion'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV2AuthMfaVerifyPost200Response
     */
    'protectedKey': string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV2AuthMfaVerifyPost200Response
     */
    'protectedKeyIV': string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV2AuthMfaVerifyPost200Response
     */
    'protectedKeyTag': string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV2AuthMfaVerifyPost200Response
     */
    'publicKey': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV2AuthMfaVerifyPost200Response
     */
    'encryptedPrivateKey': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV2AuthMfaVerifyPost200Response
     */
    'iv': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV2AuthMfaVerifyPost200Response
     */
    'tag': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV2AuthMfaVerifyPost200Response
     */
    'token': string;
}
/**
 * 
 * @export
 * @interface ApiV2AuthMfaVerifyPostRequest
 */
export interface ApiV2AuthMfaVerifyPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV2AuthMfaVerifyPostRequest
     */
    'mfaToken': string;
}
/**
 * 
 * @export
 * @interface ApiV2OrganizationsOrgIdIdentityMembershipsGet200Response
 */
export interface ApiV2OrganizationsOrgIdIdentityMembershipsGet200Response {
    /**
     * 
     * @type {Array<ApiV1IdentitiesGet200ResponseIdentitiesInner>}
     * @memberof ApiV2OrganizationsOrgIdIdentityMembershipsGet200Response
     */
    'identityMemberships': Array<ApiV1IdentitiesGet200ResponseIdentitiesInner>;
}
/**
 * 
 * @export
 * @interface ApiV2OrganizationsOrganizationIdMembershipsGet200Response
 */
export interface ApiV2OrganizationsOrganizationIdMembershipsGet200Response {
    /**
     * 
     * @type {Array<ApiV2OrganizationsOrganizationIdMembershipsGet200ResponseUsersInner>}
     * @memberof ApiV2OrganizationsOrganizationIdMembershipsGet200Response
     */
    'users': Array<ApiV2OrganizationsOrganizationIdMembershipsGet200ResponseUsersInner>;
}
/**
 * 
 * @export
 * @interface ApiV2OrganizationsOrganizationIdMembershipsGet200ResponseUsersInner
 */
export interface ApiV2OrganizationsOrganizationIdMembershipsGet200ResponseUsersInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV2OrganizationsOrganizationIdMembershipsGet200ResponseUsersInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV2OrganizationsOrganizationIdMembershipsGet200ResponseUsersInner
     */
    'role': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV2OrganizationsOrganizationIdMembershipsGet200ResponseUsersInner
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV2OrganizationsOrganizationIdMembershipsGet200ResponseUsersInner
     */
    'inviteEmail'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV2OrganizationsOrganizationIdMembershipsGet200ResponseUsersInner
     */
    'userId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV2OrganizationsOrganizationIdMembershipsGet200ResponseUsersInner
     */
    'orgId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV2OrganizationsOrganizationIdMembershipsGet200ResponseUsersInner
     */
    'roleId'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ApiV2OrganizationsOrganizationIdMembershipsGet200ResponseUsersInner
     */
    'projectFavorites'?: Array<string> | null;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV2OrganizationsOrganizationIdMembershipsGet200ResponseUsersInner
     */
    'isActive'?: boolean;
    /**
     * 
     * @type {ApiV2OrganizationsOrganizationIdMembershipsGet200ResponseUsersInnerUser}
     * @memberof ApiV2OrganizationsOrganizationIdMembershipsGet200ResponseUsersInner
     */
    'user': ApiV2OrganizationsOrganizationIdMembershipsGet200ResponseUsersInnerUser;
}
/**
 * 
 * @export
 * @interface ApiV2OrganizationsOrganizationIdMembershipsGet200ResponseUsersInnerUser
 */
export interface ApiV2OrganizationsOrganizationIdMembershipsGet200ResponseUsersInnerUser {
    /**
     * 
     * @type {string}
     * @memberof ApiV2OrganizationsOrganizationIdMembershipsGet200ResponseUsersInnerUser
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV2OrganizationsOrganizationIdMembershipsGet200ResponseUsersInnerUser
     */
    'email'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV2OrganizationsOrganizationIdMembershipsGet200ResponseUsersInnerUser
     */
    'isEmailVerified'?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV2OrganizationsOrganizationIdMembershipsGet200ResponseUsersInnerUser
     */
    'firstName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV2OrganizationsOrganizationIdMembershipsGet200ResponseUsersInnerUser
     */
    'lastName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV2OrganizationsOrganizationIdMembershipsGet200ResponseUsersInnerUser
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV2OrganizationsOrganizationIdMembershipsGet200ResponseUsersInnerUser
     */
    'publicKey': string;
}
/**
 * 
 * @export
 * @interface ApiV2OrganizationsOrganizationIdMembershipsMembershipIdDelete200Response
 */
export interface ApiV2OrganizationsOrganizationIdMembershipsMembershipIdDelete200Response {
    /**
     * 
     * @type {ApiV1OrganizationOrganizationIdPermissionsGet200ResponseMembership}
     * @memberof ApiV2OrganizationsOrganizationIdMembershipsMembershipIdDelete200Response
     */
    'membership': ApiV1OrganizationOrganizationIdPermissionsGet200ResponseMembership;
}
/**
 * 
 * @export
 * @interface ApiV2OrganizationsOrganizationIdMembershipsMembershipIdGet200Response
 */
export interface ApiV2OrganizationsOrganizationIdMembershipsMembershipIdGet200Response {
    /**
     * 
     * @type {ApiV2OrganizationsOrganizationIdMembershipsMembershipIdGet200ResponseMembership}
     * @memberof ApiV2OrganizationsOrganizationIdMembershipsMembershipIdGet200Response
     */
    'membership': ApiV2OrganizationsOrganizationIdMembershipsMembershipIdGet200ResponseMembership;
}
/**
 * 
 * @export
 * @interface ApiV2OrganizationsOrganizationIdMembershipsMembershipIdGet200ResponseMembership
 */
export interface ApiV2OrganizationsOrganizationIdMembershipsMembershipIdGet200ResponseMembership {
    /**
     * 
     * @type {string}
     * @memberof ApiV2OrganizationsOrganizationIdMembershipsMembershipIdGet200ResponseMembership
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV2OrganizationsOrganizationIdMembershipsMembershipIdGet200ResponseMembership
     */
    'role': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV2OrganizationsOrganizationIdMembershipsMembershipIdGet200ResponseMembership
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV2OrganizationsOrganizationIdMembershipsMembershipIdGet200ResponseMembership
     */
    'inviteEmail'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV2OrganizationsOrganizationIdMembershipsMembershipIdGet200ResponseMembership
     */
    'userId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV2OrganizationsOrganizationIdMembershipsMembershipIdGet200ResponseMembership
     */
    'orgId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV2OrganizationsOrganizationIdMembershipsMembershipIdGet200ResponseMembership
     */
    'roleId'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ApiV2OrganizationsOrganizationIdMembershipsMembershipIdGet200ResponseMembership
     */
    'projectFavorites'?: Array<string> | null;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV2OrganizationsOrganizationIdMembershipsMembershipIdGet200ResponseMembership
     */
    'isActive'?: boolean;
    /**
     * 
     * @type {ApiV2OrganizationsOrganizationIdMembershipsMembershipIdGet200ResponseMembershipUser}
     * @memberof ApiV2OrganizationsOrganizationIdMembershipsMembershipIdGet200ResponseMembership
     */
    'user': ApiV2OrganizationsOrganizationIdMembershipsMembershipIdGet200ResponseMembershipUser;
}
/**
 * 
 * @export
 * @interface ApiV2OrganizationsOrganizationIdMembershipsMembershipIdGet200ResponseMembershipUser
 */
export interface ApiV2OrganizationsOrganizationIdMembershipsMembershipIdGet200ResponseMembershipUser {
    /**
     * 
     * @type {string}
     * @memberof ApiV2OrganizationsOrganizationIdMembershipsMembershipIdGet200ResponseMembershipUser
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV2OrganizationsOrganizationIdMembershipsMembershipIdGet200ResponseMembershipUser
     */
    'email'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV2OrganizationsOrganizationIdMembershipsMembershipIdGet200ResponseMembershipUser
     */
    'isEmailVerified'?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV2OrganizationsOrganizationIdMembershipsMembershipIdGet200ResponseMembershipUser
     */
    'firstName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV2OrganizationsOrganizationIdMembershipsMembershipIdGet200ResponseMembershipUser
     */
    'lastName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV2OrganizationsOrganizationIdMembershipsMembershipIdGet200ResponseMembershipUser
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV2OrganizationsOrganizationIdMembershipsMembershipIdGet200ResponseMembershipUser
     */
    'publicKey': string | null;
}
/**
 * 
 * @export
 * @interface ApiV2OrganizationsOrganizationIdMembershipsMembershipIdPatchRequest
 */
export interface ApiV2OrganizationsOrganizationIdMembershipsMembershipIdPatchRequest {
    /**
     * The new role of the membership.
     * @type {string}
     * @memberof ApiV2OrganizationsOrganizationIdMembershipsMembershipIdPatchRequest
     */
    'role'?: string;
    /**
     * The active status of the membership
     * @type {boolean}
     * @memberof ApiV2OrganizationsOrganizationIdMembershipsMembershipIdPatchRequest
     */
    'isActive'?: boolean;
}
/**
 * 
 * @export
 * @interface ApiV2OrganizationsOrganizationIdMembershipsMembershipIdProjectMembershipsGet200Response
 */
export interface ApiV2OrganizationsOrganizationIdMembershipsMembershipIdProjectMembershipsGet200Response {
    /**
     * 
     * @type {Array<ApiV2OrganizationsOrganizationIdMembershipsMembershipIdProjectMembershipsGet200ResponseMembershipsInner>}
     * @memberof ApiV2OrganizationsOrganizationIdMembershipsMembershipIdProjectMembershipsGet200Response
     */
    'memberships': Array<ApiV2OrganizationsOrganizationIdMembershipsMembershipIdProjectMembershipsGet200ResponseMembershipsInner>;
}
/**
 * 
 * @export
 * @interface ApiV2OrganizationsOrganizationIdMembershipsMembershipIdProjectMembershipsGet200ResponseMembershipsInner
 */
export interface ApiV2OrganizationsOrganizationIdMembershipsMembershipIdProjectMembershipsGet200ResponseMembershipsInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV2OrganizationsOrganizationIdMembershipsMembershipIdProjectMembershipsGet200ResponseMembershipsInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV2OrganizationsOrganizationIdMembershipsMembershipIdProjectMembershipsGet200ResponseMembershipsInner
     */
    'userId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV2OrganizationsOrganizationIdMembershipsMembershipIdProjectMembershipsGet200ResponseMembershipsInner
     */
    'projectId': string;
    /**
     * 
     * @type {ApiV1WorkspaceWorkspaceIdUsersGet200ResponseUsersInnerUser}
     * @memberof ApiV2OrganizationsOrganizationIdMembershipsMembershipIdProjectMembershipsGet200ResponseMembershipsInner
     */
    'user': ApiV1WorkspaceWorkspaceIdUsersGet200ResponseUsersInnerUser;
    /**
     * 
     * @type {ApiV1WorkspaceWorkspaceIdUsersGet200ResponseUsersInnerProject}
     * @memberof ApiV2OrganizationsOrganizationIdMembershipsMembershipIdProjectMembershipsGet200ResponseMembershipsInner
     */
    'project': ApiV1WorkspaceWorkspaceIdUsersGet200ResponseUsersInnerProject;
    /**
     * 
     * @type {Array<ApiV1WorkspaceWorkspaceIdUsersGet200ResponseUsersInnerRolesInner>}
     * @memberof ApiV2OrganizationsOrganizationIdMembershipsMembershipIdProjectMembershipsGet200ResponseMembershipsInner
     */
    'roles': Array<ApiV1WorkspaceWorkspaceIdUsersGet200ResponseUsersInnerRolesInner>;
}
/**
 * 
 * @export
 * @interface ApiV2OrganizationsOrganizationIdWorkspacesGet200Response
 */
export interface ApiV2OrganizationsOrganizationIdWorkspacesGet200Response {
    /**
     * 
     * @type {Array<ApiV2OrganizationsOrganizationIdWorkspacesGet200ResponseWorkspacesInner>}
     * @memberof ApiV2OrganizationsOrganizationIdWorkspacesGet200Response
     */
    'workspaces': Array<ApiV2OrganizationsOrganizationIdWorkspacesGet200ResponseWorkspacesInner>;
}
/**
 * 
 * @export
 * @interface ApiV2OrganizationsOrganizationIdWorkspacesGet200ResponseWorkspacesInner
 */
export interface ApiV2OrganizationsOrganizationIdWorkspacesGet200ResponseWorkspacesInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV2OrganizationsOrganizationIdWorkspacesGet200ResponseWorkspacesInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV2OrganizationsOrganizationIdWorkspacesGet200ResponseWorkspacesInner
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV2OrganizationsOrganizationIdWorkspacesGet200ResponseWorkspacesInner
     */
    'slug': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV2OrganizationsOrganizationIdWorkspacesGet200ResponseWorkspacesInner
     */
    'organization': string;
    /**
     * 
     * @type {Array<ApiV2OrganizationsOrganizationIdWorkspacesGet200ResponseWorkspacesInnerEnvironmentsInner>}
     * @memberof ApiV2OrganizationsOrganizationIdWorkspacesGet200ResponseWorkspacesInner
     */
    'environments': Array<ApiV2OrganizationsOrganizationIdWorkspacesGet200ResponseWorkspacesInnerEnvironmentsInner>;
}
/**
 * 
 * @export
 * @interface ApiV2OrganizationsOrganizationIdWorkspacesGet200ResponseWorkspacesInnerEnvironmentsInner
 */
export interface ApiV2OrganizationsOrganizationIdWorkspacesGet200ResponseWorkspacesInnerEnvironmentsInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV2OrganizationsOrganizationIdWorkspacesGet200ResponseWorkspacesInnerEnvironmentsInner
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV2OrganizationsOrganizationIdWorkspacesGet200ResponseWorkspacesInnerEnvironmentsInner
     */
    'slug': string;
}
/**
 * 
 * @export
 * @interface ApiV2ServiceTokenGet200Response
 */
export interface ApiV2ServiceTokenGet200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiV2ServiceTokenGet200Response
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV2ServiceTokenGet200Response
     */
    'name': string;
    /**
     * 
     * @type {any}
     * @memberof ApiV2ServiceTokenGet200Response
     */
    'scopes'?: any;
    /**
     * 
     * @type {Array<string>}
     * @memberof ApiV2ServiceTokenGet200Response
     */
    'permissions': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ApiV2ServiceTokenGet200Response
     */
    'lastUsed'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV2ServiceTokenGet200Response
     */
    'expiresAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV2ServiceTokenGet200Response
     */
    'secretHash': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV2ServiceTokenGet200Response
     */
    'encryptedKey'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV2ServiceTokenGet200Response
     */
    'iv'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV2ServiceTokenGet200Response
     */
    'tag'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV2ServiceTokenGet200Response
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV2ServiceTokenGet200Response
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV2ServiceTokenGet200Response
     */
    'createdBy': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV2ServiceTokenGet200Response
     */
    'projectId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV2ServiceTokenGet200Response
     */
    'workspace': string;
    /**
     * 
     * @type {ApiV2ServiceTokenGet200ResponseUser}
     * @memberof ApiV2ServiceTokenGet200Response
     */
    'user': ApiV2ServiceTokenGet200ResponseUser;
    /**
     * 
     * @type {string}
     * @memberof ApiV2ServiceTokenGet200Response
     */
    '_id': string;
    /**
     * 
     * @type {number}
     * @memberof ApiV2ServiceTokenGet200Response
     */
    '__v'?: number;
}
/**
 * 
 * @export
 * @interface ApiV2ServiceTokenGet200ResponseUser
 */
export interface ApiV2ServiceTokenGet200ResponseUser {
    /**
     * 
     * @type {Array<string>}
     * @memberof ApiV2ServiceTokenGet200ResponseUser
     */
    'authMethods'?: Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV2ServiceTokenGet200ResponseUser
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV2ServiceTokenGet200ResponseUser
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV2ServiceTokenGet200ResponseUser
     */
    'updatedAt': string;
    /**
     * 
     * @type {any}
     * @memberof ApiV2ServiceTokenGet200ResponseUser
     */
    'devices'?: any | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV2ServiceTokenGet200ResponseUser
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV2ServiceTokenGet200ResponseUser
     */
    'firstName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV2ServiceTokenGet200ResponseUser
     */
    'lastName'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ApiV2ServiceTokenGet200ResponseUser
     */
    'mfaMethods'?: Array<string> | null;
    /**
     * 
     * @type {number}
     * @memberof ApiV2ServiceTokenGet200ResponseUser
     */
    '__v'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiV2ServiceTokenGet200ResponseUser
     */
    '_id': string;
}
/**
 * 
 * @export
 * @interface ApiV2ServiceTokenPost200Response
 */
export interface ApiV2ServiceTokenPost200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiV2ServiceTokenPost200Response
     */
    'serviceToken': string;
    /**
     * 
     * @type {ApiV1WorkspaceWorkspaceIdServiceTokenDataGet200ResponseServiceTokenDataInner}
     * @memberof ApiV2ServiceTokenPost200Response
     */
    'serviceTokenData': ApiV1WorkspaceWorkspaceIdServiceTokenDataGet200ResponseServiceTokenDataInner;
}
/**
 * 
 * @export
 * @interface ApiV2ServiceTokenPostRequest
 */
export interface ApiV2ServiceTokenPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV2ServiceTokenPostRequest
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV2ServiceTokenPostRequest
     */
    'workspaceId': string;
    /**
     * 
     * @type {Array<ApiV2ServiceTokenPostRequestScopesInner>}
     * @memberof ApiV2ServiceTokenPostRequest
     */
    'scopes': Array<ApiV2ServiceTokenPostRequestScopesInner>;
    /**
     * 
     * @type {string}
     * @memberof ApiV2ServiceTokenPostRequest
     */
    'encryptedKey': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV2ServiceTokenPostRequest
     */
    'iv': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV2ServiceTokenPostRequest
     */
    'tag': string;
    /**
     * 
     * @type {number}
     * @memberof ApiV2ServiceTokenPostRequest
     */
    'expiresIn': number | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ApiV2ServiceTokenPostRequest
     */
    'permissions': Array<ApiV2ServiceTokenPostRequestPermissionsEnum>;
}

export const ApiV2ServiceTokenPostRequestPermissionsEnum = {
    Read: 'read',
    Write: 'write'
} as const;

export type ApiV2ServiceTokenPostRequestPermissionsEnum = typeof ApiV2ServiceTokenPostRequestPermissionsEnum[keyof typeof ApiV2ServiceTokenPostRequestPermissionsEnum];

/**
 * 
 * @export
 * @interface ApiV2ServiceTokenPostRequestScopesInner
 */
export interface ApiV2ServiceTokenPostRequestScopesInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV2ServiceTokenPostRequestScopesInner
     */
    'environment': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV2ServiceTokenPostRequestScopesInner
     */
    'secretPath': string;
}
/**
 * 
 * @export
 * @interface ApiV2ServiceTokenServiceTokenIdDelete200Response
 */
export interface ApiV2ServiceTokenServiceTokenIdDelete200Response {
    /**
     * 
     * @type {ApiV1WorkspaceWorkspaceIdServiceTokenDataGet200ResponseServiceTokenDataInner}
     * @memberof ApiV2ServiceTokenServiceTokenIdDelete200Response
     */
    'serviceTokenData': ApiV1WorkspaceWorkspaceIdServiceTokenDataGet200ResponseServiceTokenDataInner;
}
/**
 * 
 * @export
 * @interface ApiV2UsersMeApiKeysApiKeyDataIdDelete200Response
 */
export interface ApiV2UsersMeApiKeysApiKeyDataIdDelete200Response {
    /**
     * 
     * @type {ApiV2UsersMeApiKeysGet200ResponseInner}
     * @memberof ApiV2UsersMeApiKeysApiKeyDataIdDelete200Response
     */
    'apiKeyData': ApiV2UsersMeApiKeysGet200ResponseInner;
}
/**
 * 
 * @export
 * @interface ApiV2UsersMeApiKeysGet200ResponseInner
 */
export interface ApiV2UsersMeApiKeysGet200ResponseInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV2UsersMeApiKeysGet200ResponseInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV2UsersMeApiKeysGet200ResponseInner
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV2UsersMeApiKeysGet200ResponseInner
     */
    'lastUsed'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV2UsersMeApiKeysGet200ResponseInner
     */
    'expiresAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV2UsersMeApiKeysGet200ResponseInner
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV2UsersMeApiKeysGet200ResponseInner
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV2UsersMeApiKeysGet200ResponseInner
     */
    'userId': string;
}
/**
 * 
 * @export
 * @interface ApiV2UsersMeApiKeysPost200Response
 */
export interface ApiV2UsersMeApiKeysPost200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiV2UsersMeApiKeysPost200Response
     */
    'apiKey': string;
    /**
     * 
     * @type {ApiV2UsersMeApiKeysGet200ResponseInner}
     * @memberof ApiV2UsersMeApiKeysPost200Response
     */
    'apiKeyData': ApiV2UsersMeApiKeysGet200ResponseInner;
}
/**
 * 
 * @export
 * @interface ApiV2UsersMeApiKeysPostRequest
 */
export interface ApiV2UsersMeApiKeysPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV2UsersMeApiKeysPostRequest
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof ApiV2UsersMeApiKeysPostRequest
     */
    'expiresIn': number;
}
/**
 * 
 * @export
 * @interface ApiV2UsersMeAuthMethodsPutRequest
 */
export interface ApiV2UsersMeAuthMethodsPutRequest {
    /**
     * 
     * @type {Array<string>}
     * @memberof ApiV2UsersMeAuthMethodsPutRequest
     */
    'authMethods': Array<ApiV2UsersMeAuthMethodsPutRequestAuthMethodsEnum>;
}

export const ApiV2UsersMeAuthMethodsPutRequestAuthMethodsEnum = {
    Email: 'email',
    Google: 'google',
    Github: 'github',
    Gitlab: 'gitlab',
    OktaSaml: 'okta-saml',
    AzureSaml: 'azure-saml',
    JumpcloudSaml: 'jumpcloud-saml',
    GoogleSaml: 'google-saml',
    KeycloakSaml: 'keycloak-saml',
    Ldap: 'ldap',
    Oidc: 'oidc'
} as const;

export type ApiV2UsersMeAuthMethodsPutRequestAuthMethodsEnum = typeof ApiV2UsersMeAuthMethodsPutRequestAuthMethodsEnum[keyof typeof ApiV2UsersMeAuthMethodsPutRequestAuthMethodsEnum];

/**
 * 
 * @export
 * @interface ApiV2UsersMeEmailsCodePostRequest
 */
export interface ApiV2UsersMeEmailsCodePostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV2UsersMeEmailsCodePostRequest
     */
    'username': string;
}
/**
 * 
 * @export
 * @interface ApiV2UsersMeEmailsVerifyPostRequest
 */
export interface ApiV2UsersMeEmailsVerifyPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV2UsersMeEmailsVerifyPostRequest
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV2UsersMeEmailsVerifyPostRequest
     */
    'code': string;
}
/**
 * 
 * @export
 * @interface ApiV2UsersMeMfaPatch200Response
 */
export interface ApiV2UsersMeMfaPatch200Response {
    /**
     * 
     * @type {ApiV1PasswordEmailPasswordResetVerifyPost200ResponseUser}
     * @memberof ApiV2UsersMeMfaPatch200Response
     */
    'user': ApiV1PasswordEmailPasswordResetVerifyPost200ResponseUser;
}
/**
 * 
 * @export
 * @interface ApiV2UsersMeMfaPatchRequest
 */
export interface ApiV2UsersMeMfaPatchRequest {
    /**
     * 
     * @type {boolean}
     * @memberof ApiV2UsersMeMfaPatchRequest
     */
    'isMfaEnabled': boolean;
}
/**
 * 
 * @export
 * @interface ApiV2UsersMeNamePatchRequest
 */
export interface ApiV2UsersMeNamePatchRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV2UsersMeNamePatchRequest
     */
    'firstName': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV2UsersMeNamePatchRequest
     */
    'lastName': string;
}
/**
 * 
 * @export
 * @interface ApiV2UsersMeSessionsGet200ResponseInner
 */
export interface ApiV2UsersMeSessionsGet200ResponseInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV2UsersMeSessionsGet200ResponseInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV2UsersMeSessionsGet200ResponseInner
     */
    'ip': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV2UsersMeSessionsGet200ResponseInner
     */
    'userAgent'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ApiV2UsersMeSessionsGet200ResponseInner
     */
    'refreshVersion'?: number;
    /**
     * 
     * @type {number}
     * @memberof ApiV2UsersMeSessionsGet200ResponseInner
     */
    'accessVersion'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiV2UsersMeSessionsGet200ResponseInner
     */
    'lastUsed': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV2UsersMeSessionsGet200ResponseInner
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV2UsersMeSessionsGet200ResponseInner
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV2UsersMeSessionsGet200ResponseInner
     */
    'userId': string;
}
/**
 * 
 * @export
 * @interface ApiV2WorkspacePost200Response
 */
export interface ApiV2WorkspacePost200Response {
    /**
     * 
     * @type {ApiV1WorkspaceWorkspaceIdGet200ResponseWorkspace}
     * @memberof ApiV2WorkspacePost200Response
     */
    'project': ApiV1WorkspaceWorkspaceIdGet200ResponseWorkspace;
}
/**
 * 
 * @export
 * @interface ApiV2WorkspacePostRequest
 */
export interface ApiV2WorkspacePostRequest {
    /**
     * The name of the project to create.
     * @type {string}
     * @memberof ApiV2WorkspacePostRequest
     */
    'projectName': string;
    /**
     * An optional slug for the project.
     * @type {string}
     * @memberof ApiV2WorkspacePostRequest
     */
    'slug'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV2WorkspacePostRequest
     */
    'kmsKeyId'?: string;
}
/**
 * 
 * @export
 * @interface ApiV2WorkspaceProjectIdCertificateTemplatesGet200Response
 */
export interface ApiV2WorkspaceProjectIdCertificateTemplatesGet200Response {
    /**
     * 
     * @type {Array<ApiV1PkiCertificateTemplatesCertificateTemplateIdGet200Response>}
     * @memberof ApiV2WorkspaceProjectIdCertificateTemplatesGet200Response
     */
    'certificateTemplates': Array<ApiV1PkiCertificateTemplatesCertificateTemplateIdGet200Response>;
}
/**
 * 
 * @export
 * @interface ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdGet200Response
 */
export interface ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdGet200Response {
    /**
     * 
     * @type {ApiV1IdentitiesIdentityIdIdentityMembershipsGet200ResponseIdentityMembershipsInner}
     * @memberof ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdGet200Response
     */
    'identityMembership': ApiV1IdentitiesIdentityIdIdentityMembershipsGet200ResponseIdentityMembershipsInner;
}
/**
 * 
 * @export
 * @interface ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPatchRequest
 */
export interface ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPatchRequest {
    /**
     * A list of role slugs to assign to the identity project membership.
     * @type {Array<ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPatchRequestRolesInner>}
     * @memberof ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPatchRequest
     */
    'roles': Array<ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPatchRequestRolesInner>;
}
/**
 * 
 * @export
 * @interface ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPatchRequestRolesInner
 */
export interface ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPatchRequestRolesInner {
    /**
     * The role slug to assign to the newly created identity project membership.
     * @type {string}
     * @memberof ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPatchRequestRolesInner
     */
    'role': string;
    /**
     * Whether the assigned role is temporary. If isTemporary is set true, must provide temporaryMode, temporaryRange and temporaryAccessStartTime.
     * @type {boolean}
     * @memberof ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPatchRequestRolesInner
     */
    'isTemporary': boolean;
    /**
     * Type of temporary expiry.
     * @type {string}
     * @memberof ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPatchRequestRolesInner
     */
    'temporaryMode': ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPatchRequestRolesInnerTemporaryModeEnum;
    /**
     * Expiry time for temporary access. In relative mode it could be 1s,2m,3h
     * @type {string}
     * @memberof ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPatchRequestRolesInner
     */
    'temporaryRange': string;
    /**
     * Time to which the temporary access starts
     * @type {string}
     * @memberof ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPatchRequestRolesInner
     */
    'temporaryAccessStartTime': string;
}

export const ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPatchRequestRolesInnerTemporaryModeEnum = {
    Relative: 'relative'
} as const;

export type ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPatchRequestRolesInnerTemporaryModeEnum = typeof ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPatchRequestRolesInnerTemporaryModeEnum[keyof typeof ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPatchRequestRolesInnerTemporaryModeEnum];

/**
 * 
 * @export
 * @interface ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPatchRequestRolesInnerAnyOf
 */
export interface ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPatchRequestRolesInnerAnyOf {
    /**
     * The role slug to assign to the newly created identity project membership.
     * @type {string}
     * @memberof ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPatchRequestRolesInnerAnyOf
     */
    'role': string;
    /**
     * Whether the assigned role is temporary. If isTemporary is set true, must provide temporaryMode, temporaryRange and temporaryAccessStartTime.
     * @type {boolean}
     * @memberof ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPatchRequestRolesInnerAnyOf
     */
    'isTemporary'?: boolean;
}
/**
 * 
 * @export
 * @interface ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPatchRequestRolesInnerAnyOf1
 */
export interface ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPatchRequestRolesInnerAnyOf1 {
    /**
     * The role slug to assign to the newly created identity project membership.
     * @type {string}
     * @memberof ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPatchRequestRolesInnerAnyOf1
     */
    'role': string;
    /**
     * Whether the assigned role is temporary. If isTemporary is set true, must provide temporaryMode, temporaryRange and temporaryAccessStartTime.
     * @type {boolean}
     * @memberof ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPatchRequestRolesInnerAnyOf1
     */
    'isTemporary': boolean;
    /**
     * Type of temporary expiry.
     * @type {string}
     * @memberof ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPatchRequestRolesInnerAnyOf1
     */
    'temporaryMode': ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPatchRequestRolesInnerAnyOf1TemporaryModeEnum;
    /**
     * Expiry time for temporary access. In relative mode it could be 1s,2m,3h
     * @type {string}
     * @memberof ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPatchRequestRolesInnerAnyOf1
     */
    'temporaryRange': string;
    /**
     * Time to which the temporary access starts
     * @type {string}
     * @memberof ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPatchRequestRolesInnerAnyOf1
     */
    'temporaryAccessStartTime': string;
}

export const ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPatchRequestRolesInnerAnyOf1TemporaryModeEnum = {
    Relative: 'relative'
} as const;

export type ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPatchRequestRolesInnerAnyOf1TemporaryModeEnum = typeof ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPatchRequestRolesInnerAnyOf1TemporaryModeEnum[keyof typeof ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPatchRequestRolesInnerAnyOf1TemporaryModeEnum];

/**
 * 
 * @export
 * @interface ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPost200Response
 */
export interface ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPost200Response {
    /**
     * 
     * @type {ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPost200ResponseIdentityMembership}
     * @memberof ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPost200Response
     */
    'identityMembership': ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPost200ResponseIdentityMembership;
}
/**
 * 
 * @export
 * @interface ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPost200ResponseIdentityMembership
 */
export interface ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPost200ResponseIdentityMembership {
    /**
     * 
     * @type {string}
     * @memberof ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPost200ResponseIdentityMembership
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPost200ResponseIdentityMembership
     */
    'projectId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPost200ResponseIdentityMembership
     */
    'identityId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPost200ResponseIdentityMembership
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPost200ResponseIdentityMembership
     */
    'updatedAt': string;
}
/**
 * 
 * @export
 * @interface ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPostRequest
 */
export interface ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPostRequest
     */
    'role'?: string;
    /**
     * A list of role slugs to assign to the newly created identity project membership.
     * @type {Array<ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPostRequestRolesInner>}
     * @memberof ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPostRequest
     */
    'roles'?: Array<ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPostRequestRolesInner>;
}
/**
 * 
 * @export
 * @interface ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPostRequestRolesInner
 */
export interface ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPostRequestRolesInner {
    /**
     * The role slug to assign to the newly created identity project membership.
     * @type {string}
     * @memberof ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPostRequestRolesInner
     */
    'role': string;
    /**
     * The role slug to assign to the newly created identity project membership.
     * @type {boolean}
     * @memberof ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPostRequestRolesInner
     */
    'isTemporary': boolean;
    /**
     * The role slug to assign to the newly created identity project membership.
     * @type {string}
     * @memberof ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPostRequestRolesInner
     */
    'temporaryMode': ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPostRequestRolesInnerTemporaryModeEnum;
    /**
     * The role slug to assign to the newly created identity project membership.
     * @type {string}
     * @memberof ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPostRequestRolesInner
     */
    'temporaryRange': string;
    /**
     * The role slug to assign to the newly created identity project membership.
     * @type {string}
     * @memberof ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPostRequestRolesInner
     */
    'temporaryAccessStartTime': string;
}

export const ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPostRequestRolesInnerTemporaryModeEnum = {
    Relative: 'relative'
} as const;

export type ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPostRequestRolesInnerTemporaryModeEnum = typeof ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPostRequestRolesInnerTemporaryModeEnum[keyof typeof ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPostRequestRolesInnerTemporaryModeEnum];

/**
 * 
 * @export
 * @interface ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPostRequestRolesInnerAnyOf
 */
export interface ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPostRequestRolesInnerAnyOf {
    /**
     * The role slug to assign to the newly created identity project membership.
     * @type {string}
     * @memberof ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPostRequestRolesInnerAnyOf
     */
    'role': string;
    /**
     * The role slug to assign to the newly created identity project membership.
     * @type {boolean}
     * @memberof ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPostRequestRolesInnerAnyOf
     */
    'isTemporary'?: boolean;
}
/**
 * 
 * @export
 * @interface ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPostRequestRolesInnerAnyOf1
 */
export interface ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPostRequestRolesInnerAnyOf1 {
    /**
     * The role slug to assign to the newly created identity project membership.
     * @type {string}
     * @memberof ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPostRequestRolesInnerAnyOf1
     */
    'role': string;
    /**
     * The role slug to assign to the newly created identity project membership.
     * @type {boolean}
     * @memberof ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPostRequestRolesInnerAnyOf1
     */
    'isTemporary': boolean;
    /**
     * The role slug to assign to the newly created identity project membership.
     * @type {string}
     * @memberof ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPostRequestRolesInnerAnyOf1
     */
    'temporaryMode': ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPostRequestRolesInnerAnyOf1TemporaryModeEnum;
    /**
     * The role slug to assign to the newly created identity project membership.
     * @type {string}
     * @memberof ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPostRequestRolesInnerAnyOf1
     */
    'temporaryRange': string;
    /**
     * The role slug to assign to the newly created identity project membership.
     * @type {string}
     * @memberof ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPostRequestRolesInnerAnyOf1
     */
    'temporaryAccessStartTime': string;
}

export const ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPostRequestRolesInnerAnyOf1TemporaryModeEnum = {
    Relative: 'relative'
} as const;

export type ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPostRequestRolesInnerAnyOf1TemporaryModeEnum = typeof ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPostRequestRolesInnerAnyOf1TemporaryModeEnum[keyof typeof ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPostRequestRolesInnerAnyOf1TemporaryModeEnum];

/**
 * 
 * @export
 * @interface ApiV2WorkspaceProjectIdMembershipsDeleteRequest
 */
export interface ApiV2WorkspaceProjectIdMembershipsDeleteRequest {
    /**
     * A list of organization member emails to remove from the project.
     * @type {Array<string>}
     * @memberof ApiV2WorkspaceProjectIdMembershipsDeleteRequest
     */
    'emails'?: Array<string>;
    /**
     * A list of usernames to remove from the project.
     * @type {Array<string>}
     * @memberof ApiV2WorkspaceProjectIdMembershipsDeleteRequest
     */
    'usernames'?: Array<string>;
}
/**
 * 
 * @export
 * @interface ApiV2WorkspaceProjectIdMembershipsPost200Response
 */
export interface ApiV2WorkspaceProjectIdMembershipsPost200Response {
    /**
     * 
     * @type {Array<ApiV1OrganizationAdminProjectsProjectIdGrantAdminAccessPost200ResponseMembership>}
     * @memberof ApiV2WorkspaceProjectIdMembershipsPost200Response
     */
    'memberships': Array<ApiV1OrganizationAdminProjectsProjectIdGrantAdminAccessPost200ResponseMembership>;
}
/**
 * 
 * @export
 * @interface ApiV2WorkspaceProjectIdMembershipsPostRequest
 */
export interface ApiV2WorkspaceProjectIdMembershipsPostRequest {
    /**
     * A list of organization member emails to invite to the project.
     * @type {Array<string>}
     * @memberof ApiV2WorkspaceProjectIdMembershipsPostRequest
     */
    'emails'?: Array<string>;
    /**
     * A list of usernames to invite to the project.
     * @type {Array<string>}
     * @memberof ApiV2WorkspaceProjectIdMembershipsPostRequest
     */
    'usernames'?: Array<string>;
}
/**
 * 
 * @export
 * @interface ApiV2WorkspaceProjectIdPkiAlertsGet200Response
 */
export interface ApiV2WorkspaceProjectIdPkiAlertsGet200Response {
    /**
     * 
     * @type {Array<ApiV1PkiAlertsPost200Response>}
     * @memberof ApiV2WorkspaceProjectIdPkiAlertsGet200Response
     */
    'alerts': Array<ApiV1PkiAlertsPost200Response>;
}
/**
 * 
 * @export
 * @interface ApiV2WorkspaceProjectIdPkiCollectionsGet200Response
 */
export interface ApiV2WorkspaceProjectIdPkiCollectionsGet200Response {
    /**
     * 
     * @type {Array<ApiV1PkiCollectionsPost200Response>}
     * @memberof ApiV2WorkspaceProjectIdPkiCollectionsGet200Response
     */
    'collections': Array<ApiV1PkiCollectionsPost200Response>;
}
/**
 * 
 * @export
 * @interface ApiV2WorkspaceProjectIdUpgradePostRequest
 */
export interface ApiV2WorkspaceProjectIdUpgradePostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV2WorkspaceProjectIdUpgradePostRequest
     */
    'userPrivateKey': string;
}
/**
 * 
 * @export
 * @interface ApiV2WorkspaceProjectIdUpgradeStatusGet200Response
 */
export interface ApiV2WorkspaceProjectIdUpgradeStatusGet200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiV2WorkspaceProjectIdUpgradeStatusGet200Response
     */
    'status': string | null;
}
/**
 * 
 * @export
 * @interface ApiV2WorkspaceProjectSlugGroupsGet200Response
 */
export interface ApiV2WorkspaceProjectSlugGroupsGet200Response {
    /**
     * 
     * @type {Array<ApiV2WorkspaceProjectSlugGroupsGet200ResponseGroupMembershipsInner>}
     * @memberof ApiV2WorkspaceProjectSlugGroupsGet200Response
     */
    'groupMemberships': Array<ApiV2WorkspaceProjectSlugGroupsGet200ResponseGroupMembershipsInner>;
}
/**
 * 
 * @export
 * @interface ApiV2WorkspaceProjectSlugGroupsGet200ResponseGroupMembershipsInner
 */
export interface ApiV2WorkspaceProjectSlugGroupsGet200ResponseGroupMembershipsInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV2WorkspaceProjectSlugGroupsGet200ResponseGroupMembershipsInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV2WorkspaceProjectSlugGroupsGet200ResponseGroupMembershipsInner
     */
    'groupId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV2WorkspaceProjectSlugGroupsGet200ResponseGroupMembershipsInner
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV2WorkspaceProjectSlugGroupsGet200ResponseGroupMembershipsInner
     */
    'updatedAt': string;
    /**
     * 
     * @type {Array<ApiV1WorkspaceWorkspaceIdUsersGet200ResponseUsersInnerRolesInner>}
     * @memberof ApiV2WorkspaceProjectSlugGroupsGet200ResponseGroupMembershipsInner
     */
    'roles': Array<ApiV1WorkspaceWorkspaceIdUsersGet200ResponseUsersInnerRolesInner>;
    /**
     * 
     * @type {ApiV2WorkspaceProjectSlugGroupsGet200ResponseGroupMembershipsInnerGroup}
     * @memberof ApiV2WorkspaceProjectSlugGroupsGet200ResponseGroupMembershipsInner
     */
    'group': ApiV2WorkspaceProjectSlugGroupsGet200ResponseGroupMembershipsInnerGroup;
}
/**
 * 
 * @export
 * @interface ApiV2WorkspaceProjectSlugGroupsGet200ResponseGroupMembershipsInnerGroup
 */
export interface ApiV2WorkspaceProjectSlugGroupsGet200ResponseGroupMembershipsInnerGroup {
    /**
     * 
     * @type {string}
     * @memberof ApiV2WorkspaceProjectSlugGroupsGet200ResponseGroupMembershipsInnerGroup
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV2WorkspaceProjectSlugGroupsGet200ResponseGroupMembershipsInnerGroup
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV2WorkspaceProjectSlugGroupsGet200ResponseGroupMembershipsInnerGroup
     */
    'slug': string;
}
/**
 * 
 * @export
 * @interface ApiV2WorkspaceProjectSlugGroupsGroupSlugPatchRequest
 */
export interface ApiV2WorkspaceProjectSlugGroupsGroupSlugPatchRequest {
    /**
     * A list of roles to update the group to.
     * @type {Array<ApiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatchRequestRolesInner>}
     * @memberof ApiV2WorkspaceProjectSlugGroupsGroupSlugPatchRequest
     */
    'roles': Array<ApiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatchRequestRolesInner>;
}
/**
 * 
 * @export
 * @interface ApiV2WorkspaceProjectSlugGroupsGroupSlugPost200Response
 */
export interface ApiV2WorkspaceProjectSlugGroupsGroupSlugPost200Response {
    /**
     * 
     * @type {ApiV2WorkspaceProjectSlugGroupsGroupSlugPost200ResponseGroupMembership}
     * @memberof ApiV2WorkspaceProjectSlugGroupsGroupSlugPost200Response
     */
    'groupMembership': ApiV2WorkspaceProjectSlugGroupsGroupSlugPost200ResponseGroupMembership;
}
/**
 * 
 * @export
 * @interface ApiV2WorkspaceProjectSlugGroupsGroupSlugPost200ResponseGroupMembership
 */
export interface ApiV2WorkspaceProjectSlugGroupsGroupSlugPost200ResponseGroupMembership {
    /**
     * 
     * @type {string}
     * @memberof ApiV2WorkspaceProjectSlugGroupsGroupSlugPost200ResponseGroupMembership
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV2WorkspaceProjectSlugGroupsGroupSlugPost200ResponseGroupMembership
     */
    'projectId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV2WorkspaceProjectSlugGroupsGroupSlugPost200ResponseGroupMembership
     */
    'groupId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV2WorkspaceProjectSlugGroupsGroupSlugPost200ResponseGroupMembership
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV2WorkspaceProjectSlugGroupsGroupSlugPost200ResponseGroupMembership
     */
    'updatedAt': string;
}
/**
 * 
 * @export
 * @interface ApiV2WorkspaceProjectSlugGroupsGroupSlugPostRequest
 */
export interface ApiV2WorkspaceProjectSlugGroupsGroupSlugPostRequest {
    /**
     * The role for the group to assume in the project.
     * @type {string}
     * @memberof ApiV2WorkspaceProjectSlugGroupsGroupSlugPostRequest
     */
    'role'?: string;
}
/**
 * 
 * @export
 * @interface ApiV2WorkspaceSlugCasGet200Response
 */
export interface ApiV2WorkspaceSlugCasGet200Response {
    /**
     * 
     * @type {Array<ApiV1PkiCaPost200ResponseCa>}
     * @memberof ApiV2WorkspaceSlugCasGet200Response
     */
    'cas': Array<ApiV1PkiCaPost200ResponseCa>;
}
/**
 * 
 * @export
 * @interface ApiV2WorkspaceSlugCertificatesGet200Response
 */
export interface ApiV2WorkspaceSlugCertificatesGet200Response {
    /**
     * 
     * @type {Array<ApiV1PkiCertificatesSerialNumberGet200ResponseCertificate>}
     * @memberof ApiV2WorkspaceSlugCertificatesGet200Response
     */
    'certificates': Array<ApiV1PkiCertificatesSerialNumberGet200ResponseCertificate>;
    /**
     * 
     * @type {number}
     * @memberof ApiV2WorkspaceSlugCertificatesGet200Response
     */
    'totalCount': number;
}
/**
 * 
 * @export
 * @interface ApiV2WorkspaceSlugPatchRequest
 */
export interface ApiV2WorkspaceSlugPatchRequest {
    /**
     * The new name of the project.
     * @type {string}
     * @memberof ApiV2WorkspaceSlugPatchRequest
     */
    'name'?: string;
    /**
     * The new auto-capitalization setting.
     * @type {boolean}
     * @memberof ApiV2WorkspaceSlugPatchRequest
     */
    'autoCapitalization'?: boolean;
}
/**
 * 
 * @export
 * @interface ApiV2WorkspaceWorkspaceIdEncryptedKeyGet200Response
 */
export interface ApiV2WorkspaceWorkspaceIdEncryptedKeyGet200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiV2WorkspaceWorkspaceIdEncryptedKeyGet200Response
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV2WorkspaceWorkspaceIdEncryptedKeyGet200Response
     */
    'encryptedKey': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV2WorkspaceWorkspaceIdEncryptedKeyGet200Response
     */
    'nonce': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV2WorkspaceWorkspaceIdEncryptedKeyGet200Response
     */
    'receiverId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV2WorkspaceWorkspaceIdEncryptedKeyGet200Response
     */
    'senderId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV2WorkspaceWorkspaceIdEncryptedKeyGet200Response
     */
    'projectId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV2WorkspaceWorkspaceIdEncryptedKeyGet200Response
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV2WorkspaceWorkspaceIdEncryptedKeyGet200Response
     */
    'updatedAt': string;
    /**
     * 
     * @type {ApiV2WorkspaceWorkspaceIdEncryptedKeyGet200ResponseSender}
     * @memberof ApiV2WorkspaceWorkspaceIdEncryptedKeyGet200Response
     */
    'sender': ApiV2WorkspaceWorkspaceIdEncryptedKeyGet200ResponseSender;
}
/**
 * 
 * @export
 * @interface ApiV2WorkspaceWorkspaceIdEncryptedKeyGet200ResponseSender
 */
export interface ApiV2WorkspaceWorkspaceIdEncryptedKeyGet200ResponseSender {
    /**
     * 
     * @type {string}
     * @memberof ApiV2WorkspaceWorkspaceIdEncryptedKeyGet200ResponseSender
     */
    'publicKey': string;
}
/**
 * 
 * @export
 * @interface ApiV3AuthLogin1PostRequest
 */
export interface ApiV3AuthLogin1PostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV3AuthLogin1PostRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3AuthLogin1PostRequest
     */
    'providerAuthToken'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3AuthLogin1PostRequest
     */
    'clientPublicKey': string;
}
/**
 * 
 * @export
 * @interface ApiV3AuthLogin2Post200Response
 */
export interface ApiV3AuthLogin2Post200Response {
    /**
     * 
     * @type {boolean}
     * @memberof ApiV3AuthLogin2Post200Response
     */
    'mfaEnabled': boolean;
    /**
     * 
     * @type {string}
     * @memberof ApiV3AuthLogin2Post200Response
     */
    'token': string;
    /**
     * 
     * @type {number}
     * @memberof ApiV3AuthLogin2Post200Response
     */
    'encryptionVersion'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV3AuthLogin2Post200Response
     */
    'protectedKey': string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV3AuthLogin2Post200Response
     */
    'protectedKeyIV': string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV3AuthLogin2Post200Response
     */
    'protectedKeyTag': string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV3AuthLogin2Post200Response
     */
    'publicKey': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3AuthLogin2Post200Response
     */
    'encryptedPrivateKey': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3AuthLogin2Post200Response
     */
    'iv': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3AuthLogin2Post200Response
     */
    'tag': string;
}
/**
 * 
 * @export
 * @interface ApiV3AuthLogin2Post200ResponseAnyOf
 */
export interface ApiV3AuthLogin2Post200ResponseAnyOf {
    /**
     * 
     * @type {boolean}
     * @memberof ApiV3AuthLogin2Post200ResponseAnyOf
     */
    'mfaEnabled': boolean;
    /**
     * 
     * @type {string}
     * @memberof ApiV3AuthLogin2Post200ResponseAnyOf
     */
    'token': string;
}
/**
 * 
 * @export
 * @interface ApiV3AuthLogin2Post200ResponseAnyOf1
 */
export interface ApiV3AuthLogin2Post200ResponseAnyOf1 {
    /**
     * 
     * @type {boolean}
     * @memberof ApiV3AuthLogin2Post200ResponseAnyOf1
     */
    'mfaEnabled': boolean;
    /**
     * 
     * @type {number}
     * @memberof ApiV3AuthLogin2Post200ResponseAnyOf1
     */
    'encryptionVersion'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV3AuthLogin2Post200ResponseAnyOf1
     */
    'protectedKey': string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV3AuthLogin2Post200ResponseAnyOf1
     */
    'protectedKeyIV': string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV3AuthLogin2Post200ResponseAnyOf1
     */
    'protectedKeyTag': string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV3AuthLogin2Post200ResponseAnyOf1
     */
    'publicKey': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3AuthLogin2Post200ResponseAnyOf1
     */
    'encryptedPrivateKey': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3AuthLogin2Post200ResponseAnyOf1
     */
    'iv': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3AuthLogin2Post200ResponseAnyOf1
     */
    'tag': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3AuthLogin2Post200ResponseAnyOf1
     */
    'token': string;
}
/**
 * 
 * @export
 * @interface ApiV3AuthLogin2PostRequest
 */
export interface ApiV3AuthLogin2PostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV3AuthLogin2PostRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3AuthLogin2PostRequest
     */
    'providerAuthToken'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3AuthLogin2PostRequest
     */
    'clientProof': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3AuthLogin2PostRequest
     */
    'captchaToken'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3AuthLogin2PostRequest
     */
    'password'?: string;
}
/**
 * 
 * @export
 * @interface ApiV3SecretsBackfillSecretReferencesPostRequest
 */
export interface ApiV3SecretsBackfillSecretReferencesPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsBackfillSecretReferencesPostRequest
     */
    'projectId': string;
}
/**
 * 
 * @export
 * @interface ApiV3SecretsBatchDeleteRequest
 */
export interface ApiV3SecretsBatchDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsBatchDeleteRequest
     */
    'workspaceId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsBatchDeleteRequest
     */
    'environment': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsBatchDeleteRequest
     */
    'secretPath'?: string;
    /**
     * 
     * @type {Array<ApiV3SecretsBatchDeleteRequestSecretsInner>}
     * @memberof ApiV3SecretsBatchDeleteRequest
     */
    'secrets': Array<ApiV3SecretsBatchDeleteRequestSecretsInner>;
}
/**
 * 
 * @export
 * @interface ApiV3SecretsBatchDeleteRequestSecretsInner
 */
export interface ApiV3SecretsBatchDeleteRequestSecretsInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsBatchDeleteRequestSecretsInner
     */
    'secretName': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsBatchDeleteRequestSecretsInner
     */
    'type'?: ApiV3SecretsBatchDeleteRequestSecretsInnerTypeEnum;
}

export const ApiV3SecretsBatchDeleteRequestSecretsInnerTypeEnum = {
    Shared: 'shared',
    Personal: 'personal'
} as const;

export type ApiV3SecretsBatchDeleteRequestSecretsInnerTypeEnum = typeof ApiV3SecretsBatchDeleteRequestSecretsInnerTypeEnum[keyof typeof ApiV3SecretsBatchDeleteRequestSecretsInnerTypeEnum];

/**
 * 
 * @export
 * @interface ApiV3SecretsBatchPatchRequest
 */
export interface ApiV3SecretsBatchPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsBatchPatchRequest
     */
    'workspaceId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsBatchPatchRequest
     */
    'environment': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsBatchPatchRequest
     */
    'secretPath'?: string;
    /**
     * 
     * @type {Array<ApiV3SecretsBatchPatchRequestSecretsInner>}
     * @memberof ApiV3SecretsBatchPatchRequest
     */
    'secrets': Array<ApiV3SecretsBatchPatchRequestSecretsInner>;
}
/**
 * 
 * @export
 * @interface ApiV3SecretsBatchPatchRequestSecretsInner
 */
export interface ApiV3SecretsBatchPatchRequestSecretsInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsBatchPatchRequestSecretsInner
     */
    'secretName': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsBatchPatchRequestSecretsInner
     */
    'type'?: ApiV3SecretsBatchPatchRequestSecretsInnerTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsBatchPatchRequestSecretsInner
     */
    'secretValueCiphertext': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsBatchPatchRequestSecretsInner
     */
    'secretValueIV': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsBatchPatchRequestSecretsInner
     */
    'secretValueTag': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsBatchPatchRequestSecretsInner
     */
    'secretKeyCiphertext': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsBatchPatchRequestSecretsInner
     */
    'secretKeyIV': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsBatchPatchRequestSecretsInner
     */
    'secretKeyTag': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsBatchPatchRequestSecretsInner
     */
    'secretCommentCiphertext'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsBatchPatchRequestSecretsInner
     */
    'secretCommentIV'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsBatchPatchRequestSecretsInner
     */
    'secretCommentTag'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV3SecretsBatchPatchRequestSecretsInner
     */
    'skipMultilineEncoding'?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof ApiV3SecretsBatchPatchRequestSecretsInner
     */
    'tags'?: Array<string>;
}

export const ApiV3SecretsBatchPatchRequestSecretsInnerTypeEnum = {
    Shared: 'shared',
    Personal: 'personal'
} as const;

export type ApiV3SecretsBatchPatchRequestSecretsInnerTypeEnum = typeof ApiV3SecretsBatchPatchRequestSecretsInnerTypeEnum[keyof typeof ApiV3SecretsBatchPatchRequestSecretsInnerTypeEnum];

/**
 * 
 * @export
 * @interface ApiV3SecretsBatchPost200Response
 */
export interface ApiV3SecretsBatchPost200Response {
    /**
     * 
     * @type {Array<ApiV1SecretImportsSecretsGet200ResponseSecretsInnerSecretsInner>}
     * @memberof ApiV3SecretsBatchPost200Response
     */
    'secrets': Array<ApiV1SecretImportsSecretsGet200ResponseSecretsInnerSecretsInner>;
    /**
     * 
     * @type {ApiV1SecretApprovalRequestsIdMergePost200ResponseApproval}
     * @memberof ApiV3SecretsBatchPost200Response
     */
    'approval': ApiV1SecretApprovalRequestsIdMergePost200ResponseApproval;
}
/**
 * 
 * @export
 * @interface ApiV3SecretsBatchPost200ResponseAnyOf
 */
export interface ApiV3SecretsBatchPost200ResponseAnyOf {
    /**
     * 
     * @type {Array<ApiV1SecretImportsSecretsGet200ResponseSecretsInnerSecretsInner>}
     * @memberof ApiV3SecretsBatchPost200ResponseAnyOf
     */
    'secrets': Array<ApiV1SecretImportsSecretsGet200ResponseSecretsInnerSecretsInner>;
}
/**
 * 
 * @export
 * @interface ApiV3SecretsBatchPostRequest
 */
export interface ApiV3SecretsBatchPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsBatchPostRequest
     */
    'workspaceId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsBatchPostRequest
     */
    'environment': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsBatchPostRequest
     */
    'secretPath'?: string;
    /**
     * 
     * @type {Array<ApiV3SecretsBatchPostRequestSecretsInner>}
     * @memberof ApiV3SecretsBatchPostRequest
     */
    'secrets': Array<ApiV3SecretsBatchPostRequestSecretsInner>;
}
/**
 * 
 * @export
 * @interface ApiV3SecretsBatchPostRequestSecretsInner
 */
export interface ApiV3SecretsBatchPostRequestSecretsInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsBatchPostRequestSecretsInner
     */
    'secretName': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsBatchPostRequestSecretsInner
     */
    'secretKeyCiphertext': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsBatchPostRequestSecretsInner
     */
    'secretKeyIV': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsBatchPostRequestSecretsInner
     */
    'secretKeyTag': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsBatchPostRequestSecretsInner
     */
    'secretValueCiphertext': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsBatchPostRequestSecretsInner
     */
    'secretValueIV': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsBatchPostRequestSecretsInner
     */
    'secretValueTag': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsBatchPostRequestSecretsInner
     */
    'secretCommentCiphertext'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsBatchPostRequestSecretsInner
     */
    'secretCommentIV'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsBatchPostRequestSecretsInner
     */
    'secretCommentTag'?: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof ApiV3SecretsBatchPostRequestSecretsInner
     */
    'metadata'?: { [key: string]: string; };
    /**
     * 
     * @type {boolean}
     * @memberof ApiV3SecretsBatchPostRequestSecretsInner
     */
    'skipMultilineEncoding'?: boolean;
}
/**
 * 
 * @export
 * @interface ApiV3SecretsBatchRawDeleteRequest
 */
export interface ApiV3SecretsBatchRawDeleteRequest {
    /**
     * The slug of the project to delete the secret in.
     * @type {string}
     * @memberof ApiV3SecretsBatchRawDeleteRequest
     */
    'projectSlug'?: string;
    /**
     * The ID of the project where the secret is located.
     * @type {string}
     * @memberof ApiV3SecretsBatchRawDeleteRequest
     */
    'workspaceId'?: string;
    /**
     * The slug of the environment where the secret is located.
     * @type {string}
     * @memberof ApiV3SecretsBatchRawDeleteRequest
     */
    'environment': string;
    /**
     * The path of the secret.
     * @type {string}
     * @memberof ApiV3SecretsBatchRawDeleteRequest
     */
    'secretPath'?: string;
    /**
     * 
     * @type {Array<ApiV3SecretsBatchRawDeleteRequestSecretsInner>}
     * @memberof ApiV3SecretsBatchRawDeleteRequest
     */
    'secrets': Array<ApiV3SecretsBatchRawDeleteRequestSecretsInner>;
}
/**
 * 
 * @export
 * @interface ApiV3SecretsBatchRawDeleteRequestSecretsInner
 */
export interface ApiV3SecretsBatchRawDeleteRequestSecretsInner {
    /**
     * The name of the secret to delete.
     * @type {string}
     * @memberof ApiV3SecretsBatchRawDeleteRequestSecretsInner
     */
    'secretKey': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsBatchRawDeleteRequestSecretsInner
     */
    'type'?: ApiV3SecretsBatchRawDeleteRequestSecretsInnerTypeEnum;
}

export const ApiV3SecretsBatchRawDeleteRequestSecretsInnerTypeEnum = {
    Shared: 'shared',
    Personal: 'personal'
} as const;

export type ApiV3SecretsBatchRawDeleteRequestSecretsInnerTypeEnum = typeof ApiV3SecretsBatchRawDeleteRequestSecretsInnerTypeEnum[keyof typeof ApiV3SecretsBatchRawDeleteRequestSecretsInnerTypeEnum];

/**
 * 
 * @export
 * @interface ApiV3SecretsBatchRawPatchRequest
 */
export interface ApiV3SecretsBatchRawPatchRequest {
    /**
     * The slug of the project to delete the secret in.
     * @type {string}
     * @memberof ApiV3SecretsBatchRawPatchRequest
     */
    'projectSlug'?: string;
    /**
     * The ID of the project where the secret is located.
     * @type {string}
     * @memberof ApiV3SecretsBatchRawPatchRequest
     */
    'workspaceId'?: string;
    /**
     * The slug of the environment where the secret is located.
     * @type {string}
     * @memberof ApiV3SecretsBatchRawPatchRequest
     */
    'environment': string;
    /**
     * The path of the secret to update
     * @type {string}
     * @memberof ApiV3SecretsBatchRawPatchRequest
     */
    'secretPath'?: string;
    /**
     * 
     * @type {Array<ApiV3SecretsBatchRawPatchRequestSecretsInner>}
     * @memberof ApiV3SecretsBatchRawPatchRequest
     */
    'secrets': Array<ApiV3SecretsBatchRawPatchRequestSecretsInner>;
}
/**
 * 
 * @export
 * @interface ApiV3SecretsBatchRawPatchRequestSecretsInner
 */
export interface ApiV3SecretsBatchRawPatchRequestSecretsInner {
    /**
     * The name of the secret to update.
     * @type {string}
     * @memberof ApiV3SecretsBatchRawPatchRequestSecretsInner
     */
    'secretKey': string;
    /**
     * The new value of the secret.
     * @type {string}
     * @memberof ApiV3SecretsBatchRawPatchRequestSecretsInner
     */
    'secretValue': string;
    /**
     * Update comment to the secret.
     * @type {string}
     * @memberof ApiV3SecretsBatchRawPatchRequestSecretsInner
     */
    'secretComment'?: string;
    /**
     * Skip multiline encoding for the secret value.
     * @type {boolean}
     * @memberof ApiV3SecretsBatchRawPatchRequestSecretsInner
     */
    'skipMultilineEncoding'?: boolean;
    /**
     * The new name for the secret
     * @type {string}
     * @memberof ApiV3SecretsBatchRawPatchRequestSecretsInner
     */
    'newSecretName'?: string;
    /**
     * The ID of the tags to be attached to the updated secret.
     * @type {Array<string>}
     * @memberof ApiV3SecretsBatchRawPatchRequestSecretsInner
     */
    'tagIds'?: Array<string>;
    /**
     * Note to be attached in notification email
     * @type {string}
     * @memberof ApiV3SecretsBatchRawPatchRequestSecretsInner
     */
    'secretReminderNote'?: string | null;
    /**
     * Interval for secret rotation notifications, measured in days
     * @type {number}
     * @memberof ApiV3SecretsBatchRawPatchRequestSecretsInner
     */
    'secretReminderRepeatDays'?: number | null;
}
/**
 * 
 * @export
 * @interface ApiV3SecretsBatchRawPost200Response
 */
export interface ApiV3SecretsBatchRawPost200Response {
    /**
     * 
     * @type {Array<ApiV1SecretSecretIdSecretVersionsGet200ResponseSecretVersionsInner>}
     * @memberof ApiV3SecretsBatchRawPost200Response
     */
    'secrets': Array<ApiV1SecretSecretIdSecretVersionsGet200ResponseSecretVersionsInner>;
    /**
     * 
     * @type {ApiV1SecretApprovalRequestsIdMergePost200ResponseApproval}
     * @memberof ApiV3SecretsBatchRawPost200Response
     */
    'approval': ApiV1SecretApprovalRequestsIdMergePost200ResponseApproval;
}
/**
 * 
 * @export
 * @interface ApiV3SecretsBatchRawPost200ResponseAnyOf
 */
export interface ApiV3SecretsBatchRawPost200ResponseAnyOf {
    /**
     * 
     * @type {Array<ApiV1SecretSecretIdSecretVersionsGet200ResponseSecretVersionsInner>}
     * @memberof ApiV3SecretsBatchRawPost200ResponseAnyOf
     */
    'secrets': Array<ApiV1SecretSecretIdSecretVersionsGet200ResponseSecretVersionsInner>;
}
/**
 * 
 * @export
 * @interface ApiV3SecretsBatchRawPostRequest
 */
export interface ApiV3SecretsBatchRawPostRequest {
    /**
     * The slug of the project to update the secret in.
     * @type {string}
     * @memberof ApiV3SecretsBatchRawPostRequest
     */
    'projectSlug'?: string;
    /**
     * The ID of the project to update the secret in.
     * @type {string}
     * @memberof ApiV3SecretsBatchRawPostRequest
     */
    'workspaceId'?: string;
    /**
     * The slug of the environment to create the secret in.
     * @type {string}
     * @memberof ApiV3SecretsBatchRawPostRequest
     */
    'environment': string;
    /**
     * The path to create the secret in.
     * @type {string}
     * @memberof ApiV3SecretsBatchRawPostRequest
     */
    'secretPath'?: string;
    /**
     * 
     * @type {Array<ApiV3SecretsBatchRawPostRequestSecretsInner>}
     * @memberof ApiV3SecretsBatchRawPostRequest
     */
    'secrets': Array<ApiV3SecretsBatchRawPostRequestSecretsInner>;
}
/**
 * 
 * @export
 * @interface ApiV3SecretsBatchRawPostRequestSecretsInner
 */
export interface ApiV3SecretsBatchRawPostRequestSecretsInner {
    /**
     * The name of the secret to create.
     * @type {string}
     * @memberof ApiV3SecretsBatchRawPostRequestSecretsInner
     */
    'secretKey': string;
    /**
     * The value of the secret to create.
     * @type {string}
     * @memberof ApiV3SecretsBatchRawPostRequestSecretsInner
     */
    'secretValue': string;
    /**
     * Attach a comment to the secret.
     * @type {string}
     * @memberof ApiV3SecretsBatchRawPostRequestSecretsInner
     */
    'secretComment'?: string;
    /**
     * Skip multiline encoding for the secret value.
     * @type {boolean}
     * @memberof ApiV3SecretsBatchRawPostRequestSecretsInner
     */
    'skipMultilineEncoding'?: boolean;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof ApiV3SecretsBatchRawPostRequestSecretsInner
     */
    'metadata'?: { [key: string]: string; };
    /**
     * The ID of the tags to be attached to the created secret.
     * @type {Array<string>}
     * @memberof ApiV3SecretsBatchRawPostRequestSecretsInner
     */
    'tagIds'?: Array<string>;
}
/**
 * 
 * @export
 * @interface ApiV3SecretsGet200Response
 */
export interface ApiV3SecretsGet200Response {
    /**
     * 
     * @type {Array<ApiV3SecretsGet200ResponseSecretsInner>}
     * @memberof ApiV3SecretsGet200Response
     */
    'secrets': Array<ApiV3SecretsGet200ResponseSecretsInner>;
    /**
     * 
     * @type {Array<ApiV3SecretsGet200ResponseImportsInner>}
     * @memberof ApiV3SecretsGet200Response
     */
    'imports'?: Array<ApiV3SecretsGet200ResponseImportsInner>;
}
/**
 * 
 * @export
 * @interface ApiV3SecretsGet200ResponseImportsInner
 */
export interface ApiV3SecretsGet200ResponseImportsInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsGet200ResponseImportsInner
     */
    'secretPath': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsGet200ResponseImportsInner
     */
    'environment': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsGet200ResponseImportsInner
     */
    'folderId'?: string;
    /**
     * 
     * @type {Array<ApiV3SecretsGet200ResponseImportsInnerSecretsInner>}
     * @memberof ApiV3SecretsGet200ResponseImportsInner
     */
    'secrets': Array<ApiV3SecretsGet200ResponseImportsInnerSecretsInner>;
}
/**
 * 
 * @export
 * @interface ApiV3SecretsGet200ResponseImportsInnerSecretsInner
 */
export interface ApiV3SecretsGet200ResponseImportsInnerSecretsInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsGet200ResponseImportsInnerSecretsInner
     */
    'id': string;
    /**
     * 
     * @type {number}
     * @memberof ApiV3SecretsGet200ResponseImportsInnerSecretsInner
     */
    'version'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsGet200ResponseImportsInnerSecretsInner
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsGet200ResponseImportsInnerSecretsInner
     */
    'secretKeyCiphertext': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsGet200ResponseImportsInnerSecretsInner
     */
    'secretKeyIV': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsGet200ResponseImportsInnerSecretsInner
     */
    'secretKeyTag': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsGet200ResponseImportsInnerSecretsInner
     */
    'secretValueCiphertext': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsGet200ResponseImportsInnerSecretsInner
     */
    'secretValueIV': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsGet200ResponseImportsInnerSecretsInner
     */
    'secretValueTag': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsGet200ResponseImportsInnerSecretsInner
     */
    'secretCommentCiphertext'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsGet200ResponseImportsInnerSecretsInner
     */
    'secretCommentIV'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsGet200ResponseImportsInnerSecretsInner
     */
    'secretCommentTag'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsGet200ResponseImportsInnerSecretsInner
     */
    'secretReminderNote'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ApiV3SecretsGet200ResponseImportsInnerSecretsInner
     */
    'secretReminderRepeatDays'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV3SecretsGet200ResponseImportsInnerSecretsInner
     */
    'skipMultilineEncoding'?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsGet200ResponseImportsInnerSecretsInner
     */
    'algorithm'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsGet200ResponseImportsInnerSecretsInner
     */
    'keyEncoding'?: string;
    /**
     * 
     * @type {any}
     * @memberof ApiV3SecretsGet200ResponseImportsInnerSecretsInner
     */
    'metadata'?: any | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsGet200ResponseImportsInnerSecretsInner
     */
    'userId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsGet200ResponseImportsInnerSecretsInner
     */
    'folderId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsGet200ResponseImportsInnerSecretsInner
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsGet200ResponseImportsInnerSecretsInner
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsGet200ResponseImportsInnerSecretsInner
     */
    '_id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsGet200ResponseImportsInnerSecretsInner
     */
    'workspace': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsGet200ResponseImportsInnerSecretsInner
     */
    'environment': string;
}
/**
 * 
 * @export
 * @interface ApiV3SecretsGet200ResponseSecretsInner
 */
export interface ApiV3SecretsGet200ResponseSecretsInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsGet200ResponseSecretsInner
     */
    'id': string;
    /**
     * 
     * @type {number}
     * @memberof ApiV3SecretsGet200ResponseSecretsInner
     */
    'version'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsGet200ResponseSecretsInner
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsGet200ResponseSecretsInner
     */
    'secretKeyCiphertext': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsGet200ResponseSecretsInner
     */
    'secretKeyIV': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsGet200ResponseSecretsInner
     */
    'secretKeyTag': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsGet200ResponseSecretsInner
     */
    'secretValueCiphertext': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsGet200ResponseSecretsInner
     */
    'secretValueIV': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsGet200ResponseSecretsInner
     */
    'secretValueTag': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsGet200ResponseSecretsInner
     */
    'secretCommentCiphertext'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsGet200ResponseSecretsInner
     */
    'secretCommentIV'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsGet200ResponseSecretsInner
     */
    'secretCommentTag'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsGet200ResponseSecretsInner
     */
    'secretReminderNote'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ApiV3SecretsGet200ResponseSecretsInner
     */
    'secretReminderRepeatDays'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV3SecretsGet200ResponseSecretsInner
     */
    'skipMultilineEncoding'?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsGet200ResponseSecretsInner
     */
    'algorithm'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsGet200ResponseSecretsInner
     */
    'keyEncoding'?: string;
    /**
     * 
     * @type {any}
     * @memberof ApiV3SecretsGet200ResponseSecretsInner
     */
    'metadata'?: any | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsGet200ResponseSecretsInner
     */
    'userId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsGet200ResponseSecretsInner
     */
    'folderId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsGet200ResponseSecretsInner
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsGet200ResponseSecretsInner
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsGet200ResponseSecretsInner
     */
    '_id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsGet200ResponseSecretsInner
     */
    'workspace': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsGet200ResponseSecretsInner
     */
    'environment': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsGet200ResponseSecretsInner
     */
    'secretPath'?: string;
    /**
     * 
     * @type {Array<ApiV3SecretsTagsSecretNamePost200ResponseSecretTagsInner>}
     * @memberof ApiV3SecretsGet200ResponseSecretsInner
     */
    'tags': Array<ApiV3SecretsTagsSecretNamePost200ResponseSecretTagsInner>;
}
/**
 * 
 * @export
 * @interface ApiV3SecretsMovePost200Response
 */
export interface ApiV3SecretsMovePost200Response {
    /**
     * 
     * @type {boolean}
     * @memberof ApiV3SecretsMovePost200Response
     */
    'isSourceUpdated': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV3SecretsMovePost200Response
     */
    'isDestinationUpdated': boolean;
}
/**
 * 
 * @export
 * @interface ApiV3SecretsMovePostRequest
 */
export interface ApiV3SecretsMovePostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsMovePostRequest
     */
    'projectSlug': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsMovePostRequest
     */
    'sourceEnvironment': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsMovePostRequest
     */
    'sourceSecretPath'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsMovePostRequest
     */
    'destinationEnvironment': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsMovePostRequest
     */
    'destinationSecretPath'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ApiV3SecretsMovePostRequest
     */
    'secretIds': Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV3SecretsMovePostRequest
     */
    'shouldOverwrite'?: boolean;
}
/**
 * 
 * @export
 * @interface ApiV3SecretsRawGet200Response
 */
export interface ApiV3SecretsRawGet200Response {
    /**
     * 
     * @type {Array<ApiV3SecretsRawGet200ResponseSecretsInner>}
     * @memberof ApiV3SecretsRawGet200Response
     */
    'secrets': Array<ApiV3SecretsRawGet200ResponseSecretsInner>;
    /**
     * 
     * @type {Array<ApiV3SecretsRawGet200ResponseImportsInner>}
     * @memberof ApiV3SecretsRawGet200Response
     */
    'imports'?: Array<ApiV3SecretsRawGet200ResponseImportsInner>;
}
/**
 * 
 * @export
 * @interface ApiV3SecretsRawGet200ResponseImportsInner
 */
export interface ApiV3SecretsRawGet200ResponseImportsInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsRawGet200ResponseImportsInner
     */
    'secretPath': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsRawGet200ResponseImportsInner
     */
    'environment': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsRawGet200ResponseImportsInner
     */
    'folderId'?: string;
    /**
     * 
     * @type {Array<ApiV3SecretsRawGet200ResponseImportsInnerSecretsInner>}
     * @memberof ApiV3SecretsRawGet200ResponseImportsInner
     */
    'secrets': Array<ApiV3SecretsRawGet200ResponseImportsInnerSecretsInner>;
}
/**
 * 
 * @export
 * @interface ApiV3SecretsRawGet200ResponseImportsInnerSecretsInner
 */
export interface ApiV3SecretsRawGet200ResponseImportsInnerSecretsInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsRawGet200ResponseImportsInnerSecretsInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsRawGet200ResponseImportsInnerSecretsInner
     */
    '_id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsRawGet200ResponseImportsInnerSecretsInner
     */
    'workspace': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsRawGet200ResponseImportsInnerSecretsInner
     */
    'environment': string;
    /**
     * 
     * @type {number}
     * @memberof ApiV3SecretsRawGet200ResponseImportsInnerSecretsInner
     */
    'version': number;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsRawGet200ResponseImportsInnerSecretsInner
     */
    'type': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsRawGet200ResponseImportsInnerSecretsInner
     */
    'secretKey': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsRawGet200ResponseImportsInnerSecretsInner
     */
    'secretValue': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsRawGet200ResponseImportsInnerSecretsInner
     */
    'secretComment': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsRawGet200ResponseImportsInnerSecretsInner
     */
    'secretReminderNote'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ApiV3SecretsRawGet200ResponseImportsInnerSecretsInner
     */
    'secretReminderRepeatDays'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV3SecretsRawGet200ResponseImportsInnerSecretsInner
     */
    'skipMultilineEncoding'?: boolean | null;
    /**
     * 
     * @type {any}
     * @memberof ApiV3SecretsRawGet200ResponseImportsInnerSecretsInner
     */
    'metadata'?: any | null;
}
/**
 * 
 * @export
 * @interface ApiV3SecretsRawGet200ResponseSecretsInner
 */
export interface ApiV3SecretsRawGet200ResponseSecretsInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsRawGet200ResponseSecretsInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsRawGet200ResponseSecretsInner
     */
    '_id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsRawGet200ResponseSecretsInner
     */
    'workspace': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsRawGet200ResponseSecretsInner
     */
    'environment': string;
    /**
     * 
     * @type {number}
     * @memberof ApiV3SecretsRawGet200ResponseSecretsInner
     */
    'version': number;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsRawGet200ResponseSecretsInner
     */
    'type': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsRawGet200ResponseSecretsInner
     */
    'secretKey': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsRawGet200ResponseSecretsInner
     */
    'secretValue': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsRawGet200ResponseSecretsInner
     */
    'secretComment': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsRawGet200ResponseSecretsInner
     */
    'secretReminderNote'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ApiV3SecretsRawGet200ResponseSecretsInner
     */
    'secretReminderRepeatDays'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV3SecretsRawGet200ResponseSecretsInner
     */
    'skipMultilineEncoding'?: boolean | null;
    /**
     * 
     * @type {any}
     * @memberof ApiV3SecretsRawGet200ResponseSecretsInner
     */
    'metadata'?: any | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsRawGet200ResponseSecretsInner
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsRawGet200ResponseSecretsInner
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsRawGet200ResponseSecretsInner
     */
    'secretPath'?: string;
    /**
     * 
     * @type {Array<ApiV3SecretsTagsSecretNamePost200ResponseSecretTagsInner>}
     * @memberof ApiV3SecretsRawGet200ResponseSecretsInner
     */
    'tags'?: Array<ApiV3SecretsTagsSecretNamePost200ResponseSecretTagsInner>;
}
/**
 * 
 * @export
 * @interface ApiV3SecretsRawSecretNameDeleteRequest
 */
export interface ApiV3SecretsRawSecretNameDeleteRequest {
    /**
     * The ID of the project where the secret is located.
     * @type {string}
     * @memberof ApiV3SecretsRawSecretNameDeleteRequest
     */
    'workspaceId': string;
    /**
     * The slug of the environment where the secret is located.
     * @type {string}
     * @memberof ApiV3SecretsRawSecretNameDeleteRequest
     */
    'environment': string;
    /**
     * The path of the secret.
     * @type {string}
     * @memberof ApiV3SecretsRawSecretNameDeleteRequest
     */
    'secretPath'?: string;
    /**
     * The type of the secret to delete.
     * @type {string}
     * @memberof ApiV3SecretsRawSecretNameDeleteRequest
     */
    'type'?: ApiV3SecretsRawSecretNameDeleteRequestTypeEnum;
}

export const ApiV3SecretsRawSecretNameDeleteRequestTypeEnum = {
    Shared: 'shared',
    Personal: 'personal'
} as const;

export type ApiV3SecretsRawSecretNameDeleteRequestTypeEnum = typeof ApiV3SecretsRawSecretNameDeleteRequestTypeEnum[keyof typeof ApiV3SecretsRawSecretNameDeleteRequestTypeEnum];

/**
 * 
 * @export
 * @interface ApiV3SecretsRawSecretNameGet200Response
 */
export interface ApiV3SecretsRawSecretNameGet200Response {
    /**
     * 
     * @type {ApiV3SecretsRawSecretNameGet200ResponseSecret}
     * @memberof ApiV3SecretsRawSecretNameGet200Response
     */
    'secret': ApiV3SecretsRawSecretNameGet200ResponseSecret;
}
/**
 * 
 * @export
 * @interface ApiV3SecretsRawSecretNameGet200ResponseSecret
 */
export interface ApiV3SecretsRawSecretNameGet200ResponseSecret {
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsRawSecretNameGet200ResponseSecret
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsRawSecretNameGet200ResponseSecret
     */
    '_id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsRawSecretNameGet200ResponseSecret
     */
    'workspace': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsRawSecretNameGet200ResponseSecret
     */
    'environment': string;
    /**
     * 
     * @type {number}
     * @memberof ApiV3SecretsRawSecretNameGet200ResponseSecret
     */
    'version': number;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsRawSecretNameGet200ResponseSecret
     */
    'type': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsRawSecretNameGet200ResponseSecret
     */
    'secretKey': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsRawSecretNameGet200ResponseSecret
     */
    'secretValue': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsRawSecretNameGet200ResponseSecret
     */
    'secretComment': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsRawSecretNameGet200ResponseSecret
     */
    'secretReminderNote'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ApiV3SecretsRawSecretNameGet200ResponseSecret
     */
    'secretReminderRepeatDays'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV3SecretsRawSecretNameGet200ResponseSecret
     */
    'skipMultilineEncoding'?: boolean | null;
    /**
     * 
     * @type {any}
     * @memberof ApiV3SecretsRawSecretNameGet200ResponseSecret
     */
    'metadata'?: any | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsRawSecretNameGet200ResponseSecret
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsRawSecretNameGet200ResponseSecret
     */
    'updatedAt': string;
    /**
     * 
     * @type {Array<ApiV3SecretsTagsSecretNamePost200ResponseSecretTagsInner>}
     * @memberof ApiV3SecretsRawSecretNameGet200ResponseSecret
     */
    'tags'?: Array<ApiV3SecretsTagsSecretNamePost200ResponseSecretTagsInner>;
}
/**
 * 
 * @export
 * @interface ApiV3SecretsRawSecretNamePatchRequest
 */
export interface ApiV3SecretsRawSecretNamePatchRequest {
    /**
     * The ID of the project to update the secret in.
     * @type {string}
     * @memberof ApiV3SecretsRawSecretNamePatchRequest
     */
    'workspaceId': string;
    /**
     * The slug of the environment where the secret is located.
     * @type {string}
     * @memberof ApiV3SecretsRawSecretNamePatchRequest
     */
    'environment': string;
    /**
     * The new value of the secret.
     * @type {string}
     * @memberof ApiV3SecretsRawSecretNamePatchRequest
     */
    'secretValue': string;
    /**
     * The path of the secret to update
     * @type {string}
     * @memberof ApiV3SecretsRawSecretNamePatchRequest
     */
    'secretPath'?: string;
    /**
     * Skip multiline encoding for the secret value.
     * @type {boolean}
     * @memberof ApiV3SecretsRawSecretNamePatchRequest
     */
    'skipMultilineEncoding'?: boolean;
    /**
     * The type of the secret to update.
     * @type {string}
     * @memberof ApiV3SecretsRawSecretNamePatchRequest
     */
    'type'?: ApiV3SecretsRawSecretNamePatchRequestTypeEnum;
    /**
     * The ID of the tags to be attached to the updated secret.
     * @type {Array<string>}
     * @memberof ApiV3SecretsRawSecretNamePatchRequest
     */
    'tagIds'?: Array<string>;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof ApiV3SecretsRawSecretNamePatchRequest
     */
    'metadata'?: { [key: string]: string; };
    /**
     * Note to be attached in notification email
     * @type {string}
     * @memberof ApiV3SecretsRawSecretNamePatchRequest
     */
    'secretReminderNote'?: string | null;
    /**
     * Interval for secret rotation notifications, measured in days
     * @type {number}
     * @memberof ApiV3SecretsRawSecretNamePatchRequest
     */
    'secretReminderRepeatDays'?: number | null;
    /**
     * The new name for the secret
     * @type {string}
     * @memberof ApiV3SecretsRawSecretNamePatchRequest
     */
    'newSecretName'?: string;
    /**
     * Update comment to the secret.
     * @type {string}
     * @memberof ApiV3SecretsRawSecretNamePatchRequest
     */
    'secretComment'?: string;
}

export const ApiV3SecretsRawSecretNamePatchRequestTypeEnum = {
    Shared: 'shared',
    Personal: 'personal'
} as const;

export type ApiV3SecretsRawSecretNamePatchRequestTypeEnum = typeof ApiV3SecretsRawSecretNamePatchRequestTypeEnum[keyof typeof ApiV3SecretsRawSecretNamePatchRequestTypeEnum];

/**
 * 
 * @export
 * @interface ApiV3SecretsRawSecretNamePost200Response
 */
export interface ApiV3SecretsRawSecretNamePost200Response {
    /**
     * 
     * @type {ApiV1SecretSecretIdSecretVersionsGet200ResponseSecretVersionsInner}
     * @memberof ApiV3SecretsRawSecretNamePost200Response
     */
    'secret': ApiV1SecretSecretIdSecretVersionsGet200ResponseSecretVersionsInner;
    /**
     * 
     * @type {ApiV1SecretApprovalRequestsIdMergePost200ResponseApproval}
     * @memberof ApiV3SecretsRawSecretNamePost200Response
     */
    'approval': ApiV1SecretApprovalRequestsIdMergePost200ResponseApproval;
}
/**
 * 
 * @export
 * @interface ApiV3SecretsRawSecretNamePost200ResponseAnyOf
 */
export interface ApiV3SecretsRawSecretNamePost200ResponseAnyOf {
    /**
     * 
     * @type {ApiV1SecretSecretIdSecretVersionsGet200ResponseSecretVersionsInner}
     * @memberof ApiV3SecretsRawSecretNamePost200ResponseAnyOf
     */
    'secret': ApiV1SecretSecretIdSecretVersionsGet200ResponseSecretVersionsInner;
}
/**
 * When secret protection policy is enabled
 * @export
 * @interface ApiV3SecretsRawSecretNamePost200ResponseAnyOf1
 */
export interface ApiV3SecretsRawSecretNamePost200ResponseAnyOf1 {
    /**
     * 
     * @type {ApiV1SecretApprovalRequestsIdMergePost200ResponseApproval}
     * @memberof ApiV3SecretsRawSecretNamePost200ResponseAnyOf1
     */
    'approval': ApiV1SecretApprovalRequestsIdMergePost200ResponseApproval;
}
/**
 * 
 * @export
 * @interface ApiV3SecretsRawSecretNamePostRequest
 */
export interface ApiV3SecretsRawSecretNamePostRequest {
    /**
     * The ID of the project to create the secret in.
     * @type {string}
     * @memberof ApiV3SecretsRawSecretNamePostRequest
     */
    'workspaceId': string;
    /**
     * The slug of the environment to create the secret in.
     * @type {string}
     * @memberof ApiV3SecretsRawSecretNamePostRequest
     */
    'environment': string;
    /**
     * The path to create the secret in.
     * @type {string}
     * @memberof ApiV3SecretsRawSecretNamePostRequest
     */
    'secretPath'?: string;
    /**
     * The value of the secret to create.
     * @type {string}
     * @memberof ApiV3SecretsRawSecretNamePostRequest
     */
    'secretValue': string;
    /**
     * Attach a comment to the secret.
     * @type {string}
     * @memberof ApiV3SecretsRawSecretNamePostRequest
     */
    'secretComment'?: string;
    /**
     * The ID of the tags to be attached to the created secret.
     * @type {Array<string>}
     * @memberof ApiV3SecretsRawSecretNamePostRequest
     */
    'tagIds'?: Array<string>;
    /**
     * Skip multiline encoding for the secret value.
     * @type {boolean}
     * @memberof ApiV3SecretsRawSecretNamePostRequest
     */
    'skipMultilineEncoding'?: boolean;
    /**
     * The type of the secret to create.
     * @type {string}
     * @memberof ApiV3SecretsRawSecretNamePostRequest
     */
    'type'?: ApiV3SecretsRawSecretNamePostRequestTypeEnum;
    /**
     * Interval for secret rotation notifications, measured in days
     * @type {number}
     * @memberof ApiV3SecretsRawSecretNamePostRequest
     */
    'secretReminderRepeatDays'?: number | null;
    /**
     * Note to be attached in notification email
     * @type {string}
     * @memberof ApiV3SecretsRawSecretNamePostRequest
     */
    'secretReminderNote'?: string | null;
}

export const ApiV3SecretsRawSecretNamePostRequestTypeEnum = {
    Shared: 'shared',
    Personal: 'personal'
} as const;

export type ApiV3SecretsRawSecretNamePostRequestTypeEnum = typeof ApiV3SecretsRawSecretNamePostRequestTypeEnum[keyof typeof ApiV3SecretsRawSecretNamePostRequestTypeEnum];

/**
 * 
 * @export
 * @interface ApiV3SecretsSecretNameDeleteRequest
 */
export interface ApiV3SecretsSecretNameDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsSecretNameDeleteRequest
     */
    'type'?: ApiV3SecretsSecretNameDeleteRequestTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsSecretNameDeleteRequest
     */
    'secretPath'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsSecretNameDeleteRequest
     */
    'secretId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsSecretNameDeleteRequest
     */
    'workspaceId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsSecretNameDeleteRequest
     */
    'environment': string;
}

export const ApiV3SecretsSecretNameDeleteRequestTypeEnum = {
    Shared: 'shared',
    Personal: 'personal'
} as const;

export type ApiV3SecretsSecretNameDeleteRequestTypeEnum = typeof ApiV3SecretsSecretNameDeleteRequestTypeEnum[keyof typeof ApiV3SecretsSecretNameDeleteRequestTypeEnum];

/**
 * 
 * @export
 * @interface ApiV3SecretsSecretNameGet200Response
 */
export interface ApiV3SecretsSecretNameGet200Response {
    /**
     * 
     * @type {ApiV3SecretsSecretNameGet200ResponseSecret}
     * @memberof ApiV3SecretsSecretNameGet200Response
     */
    'secret': ApiV3SecretsSecretNameGet200ResponseSecret;
}
/**
 * 
 * @export
 * @interface ApiV3SecretsSecretNameGet200ResponseSecret
 */
export interface ApiV3SecretsSecretNameGet200ResponseSecret {
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsSecretNameGet200ResponseSecret
     */
    'id': string;
    /**
     * 
     * @type {number}
     * @memberof ApiV3SecretsSecretNameGet200ResponseSecret
     */
    'version'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsSecretNameGet200ResponseSecret
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsSecretNameGet200ResponseSecret
     */
    'secretKeyCiphertext': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsSecretNameGet200ResponseSecret
     */
    'secretKeyIV': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsSecretNameGet200ResponseSecret
     */
    'secretKeyTag': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsSecretNameGet200ResponseSecret
     */
    'secretValueCiphertext': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsSecretNameGet200ResponseSecret
     */
    'secretValueIV': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsSecretNameGet200ResponseSecret
     */
    'secretValueTag': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsSecretNameGet200ResponseSecret
     */
    'secretCommentCiphertext'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsSecretNameGet200ResponseSecret
     */
    'secretCommentIV'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsSecretNameGet200ResponseSecret
     */
    'secretCommentTag'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsSecretNameGet200ResponseSecret
     */
    'secretReminderNote'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ApiV3SecretsSecretNameGet200ResponseSecret
     */
    'secretReminderRepeatDays'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV3SecretsSecretNameGet200ResponseSecret
     */
    'skipMultilineEncoding'?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsSecretNameGet200ResponseSecret
     */
    'algorithm'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsSecretNameGet200ResponseSecret
     */
    'keyEncoding'?: string;
    /**
     * 
     * @type {any}
     * @memberof ApiV3SecretsSecretNameGet200ResponseSecret
     */
    'metadata'?: any | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsSecretNameGet200ResponseSecret
     */
    'userId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsSecretNameGet200ResponseSecret
     */
    'folderId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsSecretNameGet200ResponseSecret
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsSecretNameGet200ResponseSecret
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsSecretNameGet200ResponseSecret
     */
    'workspace': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsSecretNameGet200ResponseSecret
     */
    'environment': string;
}
/**
 * 
 * @export
 * @interface ApiV3SecretsSecretNamePatchRequest
 */
export interface ApiV3SecretsSecretNamePatchRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsSecretNamePatchRequest
     */
    'workspaceId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsSecretNamePatchRequest
     */
    'environment': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsSecretNamePatchRequest
     */
    'secretId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsSecretNamePatchRequest
     */
    'type'?: ApiV3SecretsSecretNamePatchRequestTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsSecretNamePatchRequest
     */
    'secretPath'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsSecretNamePatchRequest
     */
    'secretValueCiphertext': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsSecretNamePatchRequest
     */
    'secretValueIV': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsSecretNamePatchRequest
     */
    'secretValueTag': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsSecretNamePatchRequest
     */
    'secretCommentCiphertext'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsSecretNamePatchRequest
     */
    'secretCommentIV'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsSecretNamePatchRequest
     */
    'secretCommentTag'?: string;
    /**
     * 
     * @type {number}
     * @memberof ApiV3SecretsSecretNamePatchRequest
     */
    'secretReminderRepeatDays'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsSecretNamePatchRequest
     */
    'secretReminderNote'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ApiV3SecretsSecretNamePatchRequest
     */
    'tags'?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV3SecretsSecretNamePatchRequest
     */
    'skipMultilineEncoding'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsSecretNamePatchRequest
     */
    'secretName'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsSecretNamePatchRequest
     */
    'secretKeyIV'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsSecretNamePatchRequest
     */
    'secretKeyTag'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsSecretNamePatchRequest
     */
    'secretKeyCiphertext'?: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof ApiV3SecretsSecretNamePatchRequest
     */
    'metadata'?: { [key: string]: string; };
}

export const ApiV3SecretsSecretNamePatchRequestTypeEnum = {
    Shared: 'shared',
    Personal: 'personal'
} as const;

export type ApiV3SecretsSecretNamePatchRequestTypeEnum = typeof ApiV3SecretsSecretNamePatchRequestTypeEnum[keyof typeof ApiV3SecretsSecretNamePatchRequestTypeEnum];

/**
 * 
 * @export
 * @interface ApiV3SecretsSecretNamePost200Response
 */
export interface ApiV3SecretsSecretNamePost200Response {
    /**
     * 
     * @type {ApiV3SecretsGet200ResponseImportsInnerSecretsInner}
     * @memberof ApiV3SecretsSecretNamePost200Response
     */
    'secret': ApiV3SecretsGet200ResponseImportsInnerSecretsInner;
    /**
     * 
     * @type {ApiV1SecretApprovalRequestsIdMergePost200ResponseApproval}
     * @memberof ApiV3SecretsSecretNamePost200Response
     */
    'approval': ApiV1SecretApprovalRequestsIdMergePost200ResponseApproval;
}
/**
 * 
 * @export
 * @interface ApiV3SecretsSecretNamePost200ResponseAnyOf
 */
export interface ApiV3SecretsSecretNamePost200ResponseAnyOf {
    /**
     * 
     * @type {ApiV3SecretsGet200ResponseImportsInnerSecretsInner}
     * @memberof ApiV3SecretsSecretNamePost200ResponseAnyOf
     */
    'secret': ApiV3SecretsGet200ResponseImportsInnerSecretsInner;
}
/**
 * 
 * @export
 * @interface ApiV3SecretsSecretNamePostRequest
 */
export interface ApiV3SecretsSecretNamePostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsSecretNamePostRequest
     */
    'workspaceId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsSecretNamePostRequest
     */
    'environment': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsSecretNamePostRequest
     */
    'type'?: ApiV3SecretsSecretNamePostRequestTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsSecretNamePostRequest
     */
    'secretPath'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsSecretNamePostRequest
     */
    'secretKeyCiphertext': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsSecretNamePostRequest
     */
    'secretKeyIV': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsSecretNamePostRequest
     */
    'secretKeyTag': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsSecretNamePostRequest
     */
    'secretValueCiphertext': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsSecretNamePostRequest
     */
    'secretValueIV': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsSecretNamePostRequest
     */
    'secretValueTag': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsSecretNamePostRequest
     */
    'secretCommentCiphertext'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsSecretNamePostRequest
     */
    'secretCommentIV'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsSecretNamePostRequest
     */
    'secretCommentTag'?: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof ApiV3SecretsSecretNamePostRequest
     */
    'metadata'?: { [key: string]: string; };
    /**
     * 
     * @type {boolean}
     * @memberof ApiV3SecretsSecretNamePostRequest
     */
    'skipMultilineEncoding'?: boolean;
}

export const ApiV3SecretsSecretNamePostRequestTypeEnum = {
    Shared: 'shared',
    Personal: 'personal'
} as const;

export type ApiV3SecretsSecretNamePostRequestTypeEnum = typeof ApiV3SecretsSecretNamePostRequestTypeEnum[keyof typeof ApiV3SecretsSecretNamePostRequestTypeEnum];

/**
 * 
 * @export
 * @interface ApiV3SecretsTagsSecretNameDeleteRequest
 */
export interface ApiV3SecretsTagsSecretNameDeleteRequest {
    /**
     * The slug of the project where the secret is located
     * @type {string}
     * @memberof ApiV3SecretsTagsSecretNameDeleteRequest
     */
    'projectSlug': string;
    /**
     * The slug of the environment where the secret is located
     * @type {string}
     * @memberof ApiV3SecretsTagsSecretNameDeleteRequest
     */
    'environment': string;
    /**
     * The path of the secret to detach tags from.
     * @type {string}
     * @memberof ApiV3SecretsTagsSecretNameDeleteRequest
     */
    'secretPath'?: string;
    /**
     * The type of the secret to attach tags to. (shared/personal)
     * @type {string}
     * @memberof ApiV3SecretsTagsSecretNameDeleteRequest
     */
    'type'?: ApiV3SecretsTagsSecretNameDeleteRequestTypeEnum;
    /**
     * An array of existing tag slugs to detach from the secret.
     * @type {Array<string>}
     * @memberof ApiV3SecretsTagsSecretNameDeleteRequest
     */
    'tagSlugs': Array<string>;
}

export const ApiV3SecretsTagsSecretNameDeleteRequestTypeEnum = {
    Shared: 'shared',
    Personal: 'personal'
} as const;

export type ApiV3SecretsTagsSecretNameDeleteRequestTypeEnum = typeof ApiV3SecretsTagsSecretNameDeleteRequestTypeEnum[keyof typeof ApiV3SecretsTagsSecretNameDeleteRequestTypeEnum];

/**
 * 
 * @export
 * @interface ApiV3SecretsTagsSecretNamePost200Response
 */
export interface ApiV3SecretsTagsSecretNamePost200Response {
    /**
     * 
     * @type {ApiV3SecretsTagsSecretNamePost200ResponseSecret}
     * @memberof ApiV3SecretsTagsSecretNamePost200Response
     */
    'secret': ApiV3SecretsTagsSecretNamePost200ResponseSecret;
}
/**
 * 
 * @export
 * @interface ApiV3SecretsTagsSecretNamePost200ResponseSecret
 */
export interface ApiV3SecretsTagsSecretNamePost200ResponseSecret {
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsTagsSecretNamePost200ResponseSecret
     */
    'id': string;
    /**
     * 
     * @type {number}
     * @memberof ApiV3SecretsTagsSecretNamePost200ResponseSecret
     */
    'version'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsTagsSecretNamePost200ResponseSecret
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsTagsSecretNamePost200ResponseSecret
     */
    'secretKeyCiphertext': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsTagsSecretNamePost200ResponseSecret
     */
    'secretKeyIV': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsTagsSecretNamePost200ResponseSecret
     */
    'secretKeyTag': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsTagsSecretNamePost200ResponseSecret
     */
    'secretValueCiphertext': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsTagsSecretNamePost200ResponseSecret
     */
    'secretValueIV': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsTagsSecretNamePost200ResponseSecret
     */
    'secretValueTag': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsTagsSecretNamePost200ResponseSecret
     */
    'secretCommentCiphertext'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsTagsSecretNamePost200ResponseSecret
     */
    'secretCommentIV'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsTagsSecretNamePost200ResponseSecret
     */
    'secretCommentTag'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsTagsSecretNamePost200ResponseSecret
     */
    'secretReminderNote'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ApiV3SecretsTagsSecretNamePost200ResponseSecret
     */
    'secretReminderRepeatDays'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV3SecretsTagsSecretNamePost200ResponseSecret
     */
    'skipMultilineEncoding'?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsTagsSecretNamePost200ResponseSecret
     */
    'algorithm'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsTagsSecretNamePost200ResponseSecret
     */
    'keyEncoding'?: string;
    /**
     * 
     * @type {any}
     * @memberof ApiV3SecretsTagsSecretNamePost200ResponseSecret
     */
    'metadata'?: any | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsTagsSecretNamePost200ResponseSecret
     */
    'userId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsTagsSecretNamePost200ResponseSecret
     */
    'folderId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsTagsSecretNamePost200ResponseSecret
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsTagsSecretNamePost200ResponseSecret
     */
    'updatedAt': string;
    /**
     * 
     * @type {Array<ApiV3SecretsTagsSecretNamePost200ResponseSecretTagsInner>}
     * @memberof ApiV3SecretsTagsSecretNamePost200ResponseSecret
     */
    'tags': Array<ApiV3SecretsTagsSecretNamePost200ResponseSecretTagsInner>;
}
/**
 * 
 * @export
 * @interface ApiV3SecretsTagsSecretNamePost200ResponseSecretTagsInner
 */
export interface ApiV3SecretsTagsSecretNamePost200ResponseSecretTagsInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsTagsSecretNamePost200ResponseSecretTagsInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsTagsSecretNamePost200ResponseSecretTagsInner
     */
    'slug': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsTagsSecretNamePost200ResponseSecretTagsInner
     */
    'color'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SecretsTagsSecretNamePost200ResponseSecretTagsInner
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface ApiV3SecretsTagsSecretNamePostRequest
 */
export interface ApiV3SecretsTagsSecretNamePostRequest {
    /**
     * The slug of the project where the secret is located
     * @type {string}
     * @memberof ApiV3SecretsTagsSecretNamePostRequest
     */
    'projectSlug': string;
    /**
     * The slug of the environment where the secret is located
     * @type {string}
     * @memberof ApiV3SecretsTagsSecretNamePostRequest
     */
    'environment': string;
    /**
     * The path of the secret to attach tags to.
     * @type {string}
     * @memberof ApiV3SecretsTagsSecretNamePostRequest
     */
    'secretPath'?: string;
    /**
     * The type of the secret to attach tags to. (shared/personal)
     * @type {string}
     * @memberof ApiV3SecretsTagsSecretNamePostRequest
     */
    'type'?: ApiV3SecretsTagsSecretNamePostRequestTypeEnum;
    /**
     * An array of existing tag slugs to attach to the secret.
     * @type {Array<string>}
     * @memberof ApiV3SecretsTagsSecretNamePostRequest
     */
    'tagSlugs': Array<string>;
}

export const ApiV3SecretsTagsSecretNamePostRequestTypeEnum = {
    Shared: 'shared',
    Personal: 'personal'
} as const;

export type ApiV3SecretsTagsSecretNamePostRequestTypeEnum = typeof ApiV3SecretsTagsSecretNamePostRequestTypeEnum[keyof typeof ApiV3SecretsTagsSecretNamePostRequestTypeEnum];

/**
 * 
 * @export
 * @interface ApiV3SignupCompleteAccountInvitePostRequest
 */
export interface ApiV3SignupCompleteAccountInvitePostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV3SignupCompleteAccountInvitePostRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SignupCompleteAccountInvitePostRequest
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SignupCompleteAccountInvitePostRequest
     */
    'firstName': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SignupCompleteAccountInvitePostRequest
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SignupCompleteAccountInvitePostRequest
     */
    'protectedKey': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SignupCompleteAccountInvitePostRequest
     */
    'protectedKeyIV': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SignupCompleteAccountInvitePostRequest
     */
    'protectedKeyTag': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SignupCompleteAccountInvitePostRequest
     */
    'publicKey': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SignupCompleteAccountInvitePostRequest
     */
    'encryptedPrivateKey': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SignupCompleteAccountInvitePostRequest
     */
    'encryptedPrivateKeyIV': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SignupCompleteAccountInvitePostRequest
     */
    'encryptedPrivateKeyTag': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SignupCompleteAccountInvitePostRequest
     */
    'salt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SignupCompleteAccountInvitePostRequest
     */
    'verifier': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SignupCompleteAccountInvitePostRequest
     */
    'tokenMetadata'?: string;
}
/**
 * 
 * @export
 * @interface ApiV3SignupCompleteAccountSignupPost200Response
 */
export interface ApiV3SignupCompleteAccountSignupPost200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiV3SignupCompleteAccountSignupPost200Response
     */
    'message': string;
    /**
     * 
     * @type {ApiV1PasswordEmailPasswordResetVerifyPost200ResponseUser}
     * @memberof ApiV3SignupCompleteAccountSignupPost200Response
     */
    'user': ApiV1PasswordEmailPasswordResetVerifyPost200ResponseUser;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SignupCompleteAccountSignupPost200Response
     */
    'token': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SignupCompleteAccountSignupPost200Response
     */
    'organizationId'?: string | null;
}
/**
 * 
 * @export
 * @interface ApiV3SignupCompleteAccountSignupPostRequest
 */
export interface ApiV3SignupCompleteAccountSignupPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV3SignupCompleteAccountSignupPostRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SignupCompleteAccountSignupPostRequest
     */
    'firstName': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SignupCompleteAccountSignupPostRequest
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SignupCompleteAccountSignupPostRequest
     */
    'protectedKey': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SignupCompleteAccountSignupPostRequest
     */
    'protectedKeyIV': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SignupCompleteAccountSignupPostRequest
     */
    'protectedKeyTag': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SignupCompleteAccountSignupPostRequest
     */
    'publicKey': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SignupCompleteAccountSignupPostRequest
     */
    'encryptedPrivateKey': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SignupCompleteAccountSignupPostRequest
     */
    'encryptedPrivateKeyIV': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SignupCompleteAccountSignupPostRequest
     */
    'encryptedPrivateKeyTag': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SignupCompleteAccountSignupPostRequest
     */
    'salt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SignupCompleteAccountSignupPostRequest
     */
    'verifier': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SignupCompleteAccountSignupPostRequest
     */
    'organizationName': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SignupCompleteAccountSignupPostRequest
     */
    'providerAuthToken'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SignupCompleteAccountSignupPostRequest
     */
    'attributionSource'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SignupCompleteAccountSignupPostRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface ApiV3SignupEmailVerifyPost200Response
 */
export interface ApiV3SignupEmailVerifyPost200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiV3SignupEmailVerifyPost200Response
     */
    'message': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3SignupEmailVerifyPost200Response
     */
    'token': string;
    /**
     * 
     * @type {ApiV1PasswordEmailPasswordResetVerifyPost200ResponseUser}
     * @memberof ApiV3SignupEmailVerifyPost200Response
     */
    'user': ApiV1PasswordEmailPasswordResetVerifyPost200ResponseUser;
}
/**
 * 
 * @export
 * @interface ApiV3UsersMeApiKeysGet200Response
 */
export interface ApiV3UsersMeApiKeysGet200Response {
    /**
     * 
     * @type {Array<ApiV2UsersMeApiKeysGet200ResponseInner>}
     * @memberof ApiV3UsersMeApiKeysGet200Response
     */
    'apiKeyData': Array<ApiV2UsersMeApiKeysGet200ResponseInner>;
}
/**
 * 
 * @export
 * @interface ApiV3WorkspacesProjectIdSecretsGet200Response
 */
export interface ApiV3WorkspacesProjectIdSecretsGet200Response {
    /**
     * 
     * @type {Array<ApiV3WorkspacesProjectIdSecretsGet200ResponseSecretsInner>}
     * @memberof ApiV3WorkspacesProjectIdSecretsGet200Response
     */
    'secrets': Array<ApiV3WorkspacesProjectIdSecretsGet200ResponseSecretsInner>;
}
/**
 * 
 * @export
 * @interface ApiV3WorkspacesProjectIdSecretsGet200ResponseSecretsInner
 */
export interface ApiV3WorkspacesProjectIdSecretsGet200ResponseSecretsInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV3WorkspacesProjectIdSecretsGet200ResponseSecretsInner
     */
    'id': string;
    /**
     * 
     * @type {number}
     * @memberof ApiV3WorkspacesProjectIdSecretsGet200ResponseSecretsInner
     */
    'version'?: number;
    /**
     * 
     * @type {string}
     * @memberof ApiV3WorkspacesProjectIdSecretsGet200ResponseSecretsInner
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3WorkspacesProjectIdSecretsGet200ResponseSecretsInner
     */
    'secretKeyCiphertext': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3WorkspacesProjectIdSecretsGet200ResponseSecretsInner
     */
    'secretKeyIV': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3WorkspacesProjectIdSecretsGet200ResponseSecretsInner
     */
    'secretKeyTag': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3WorkspacesProjectIdSecretsGet200ResponseSecretsInner
     */
    'secretValueCiphertext': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3WorkspacesProjectIdSecretsGet200ResponseSecretsInner
     */
    'secretValueIV': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3WorkspacesProjectIdSecretsGet200ResponseSecretsInner
     */
    'secretValueTag': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3WorkspacesProjectIdSecretsGet200ResponseSecretsInner
     */
    'secretCommentCiphertext'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV3WorkspacesProjectIdSecretsGet200ResponseSecretsInner
     */
    'secretCommentIV'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV3WorkspacesProjectIdSecretsGet200ResponseSecretsInner
     */
    'secretCommentTag'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV3WorkspacesProjectIdSecretsGet200ResponseSecretsInner
     */
    'secretReminderNote'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ApiV3WorkspacesProjectIdSecretsGet200ResponseSecretsInner
     */
    'secretReminderRepeatDays'?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof ApiV3WorkspacesProjectIdSecretsGet200ResponseSecretsInner
     */
    'skipMultilineEncoding'?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV3WorkspacesProjectIdSecretsGet200ResponseSecretsInner
     */
    'algorithm'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3WorkspacesProjectIdSecretsGet200ResponseSecretsInner
     */
    'keyEncoding'?: string;
    /**
     * 
     * @type {any}
     * @memberof ApiV3WorkspacesProjectIdSecretsGet200ResponseSecretsInner
     */
    'metadata'?: any | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV3WorkspacesProjectIdSecretsGet200ResponseSecretsInner
     */
    'userId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApiV3WorkspacesProjectIdSecretsGet200ResponseSecretsInner
     */
    'folderId': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3WorkspacesProjectIdSecretsGet200ResponseSecretsInner
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3WorkspacesProjectIdSecretsGet200ResponseSecretsInner
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3WorkspacesProjectIdSecretsGet200ResponseSecretsInner
     */
    'environment': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3WorkspacesProjectIdSecretsGet200ResponseSecretsInner
     */
    'workspace': string;
}
/**
 * 
 * @export
 * @interface ApiV3WorkspacesProjectIdSecretsNamesPostRequest
 */
export interface ApiV3WorkspacesProjectIdSecretsNamesPostRequest {
    /**
     * 
     * @type {Array<ApiV3WorkspacesProjectIdSecretsNamesPostRequestSecretsToUpdateInner>}
     * @memberof ApiV3WorkspacesProjectIdSecretsNamesPostRequest
     */
    'secretsToUpdate': Array<ApiV3WorkspacesProjectIdSecretsNamesPostRequestSecretsToUpdateInner>;
}
/**
 * 
 * @export
 * @interface ApiV3WorkspacesProjectIdSecretsNamesPostRequestSecretsToUpdateInner
 */
export interface ApiV3WorkspacesProjectIdSecretsNamesPostRequestSecretsToUpdateInner {
    /**
     * 
     * @type {string}
     * @memberof ApiV3WorkspacesProjectIdSecretsNamesPostRequestSecretsToUpdateInner
     */
    'secretName': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV3WorkspacesProjectIdSecretsNamesPostRequestSecretsToUpdateInner
     */
    'secretId': string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStatusGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} projectSlug 
         * @param {string} envSlug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AccessApprovalsPoliciesCountGet: async (projectSlug: string, envSlug: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectSlug' is not null or undefined
            assertParamExists('apiV1AccessApprovalsPoliciesCountGet', 'projectSlug', projectSlug)
            // verify required parameter 'envSlug' is not null or undefined
            assertParamExists('apiV1AccessApprovalsPoliciesCountGet', 'envSlug', envSlug)
            const localVarPath = `/api/v1/access-approvals/policies/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (projectSlug !== undefined) {
                localVarQueryParameter['projectSlug'] = projectSlug;
            }

            if (envSlug !== undefined) {
                localVarQueryParameter['envSlug'] = envSlug;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} projectSlug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AccessApprovalsPoliciesGet: async (projectSlug: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectSlug' is not null or undefined
            assertParamExists('apiV1AccessApprovalsPoliciesGet', 'projectSlug', projectSlug)
            const localVarPath = `/api/v1/access-approvals/policies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (projectSlug !== undefined) {
                localVarQueryParameter['projectSlug'] = projectSlug;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} policyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AccessApprovalsPoliciesPolicyIdDelete: async (policyId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'policyId' is not null or undefined
            assertParamExists('apiV1AccessApprovalsPoliciesPolicyIdDelete', 'policyId', policyId)
            const localVarPath = `/api/v1/access-approvals/policies/{policyId}`
                .replace(`{${"policyId"}}`, encodeURIComponent(String(policyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} policyId 
         * @param {ApiV1AccessApprovalsPoliciesPolicyIdPatchRequest} apiV1AccessApprovalsPoliciesPolicyIdPatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AccessApprovalsPoliciesPolicyIdPatch: async (policyId: string, apiV1AccessApprovalsPoliciesPolicyIdPatchRequest: ApiV1AccessApprovalsPoliciesPolicyIdPatchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'policyId' is not null or undefined
            assertParamExists('apiV1AccessApprovalsPoliciesPolicyIdPatch', 'policyId', policyId)
            // verify required parameter 'apiV1AccessApprovalsPoliciesPolicyIdPatchRequest' is not null or undefined
            assertParamExists('apiV1AccessApprovalsPoliciesPolicyIdPatch', 'apiV1AccessApprovalsPoliciesPolicyIdPatchRequest', apiV1AccessApprovalsPoliciesPolicyIdPatchRequest)
            const localVarPath = `/api/v1/access-approvals/policies/{policyId}`
                .replace(`{${"policyId"}}`, encodeURIComponent(String(policyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1AccessApprovalsPoliciesPolicyIdPatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1AccessApprovalsPoliciesPostRequest} apiV1AccessApprovalsPoliciesPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AccessApprovalsPoliciesPost: async (apiV1AccessApprovalsPoliciesPostRequest: ApiV1AccessApprovalsPoliciesPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1AccessApprovalsPoliciesPostRequest' is not null or undefined
            assertParamExists('apiV1AccessApprovalsPoliciesPost', 'apiV1AccessApprovalsPoliciesPostRequest', apiV1AccessApprovalsPoliciesPostRequest)
            const localVarPath = `/api/v1/access-approvals/policies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1AccessApprovalsPoliciesPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} projectSlug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AccessApprovalsRequestsCountGet: async (projectSlug: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectSlug' is not null or undefined
            assertParamExists('apiV1AccessApprovalsRequestsCountGet', 'projectSlug', projectSlug)
            const localVarPath = `/api/v1/access-approvals/requests/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (projectSlug !== undefined) {
                localVarQueryParameter['projectSlug'] = projectSlug;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} projectSlug 
         * @param {string} [authorProjectMembershipId] 
         * @param {string} [envSlug] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AccessApprovalsRequestsGet: async (projectSlug: string, authorProjectMembershipId?: string, envSlug?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectSlug' is not null or undefined
            assertParamExists('apiV1AccessApprovalsRequestsGet', 'projectSlug', projectSlug)
            const localVarPath = `/api/v1/access-approvals/requests`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (projectSlug !== undefined) {
                localVarQueryParameter['projectSlug'] = projectSlug;
            }

            if (authorProjectMembershipId !== undefined) {
                localVarQueryParameter['authorProjectMembershipId'] = authorProjectMembershipId;
            }

            if (envSlug !== undefined) {
                localVarQueryParameter['envSlug'] = envSlug;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} projectSlug 
         * @param {ApiV1AccessApprovalsRequestsPostRequest} apiV1AccessApprovalsRequestsPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AccessApprovalsRequestsPost: async (projectSlug: string, apiV1AccessApprovalsRequestsPostRequest: ApiV1AccessApprovalsRequestsPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectSlug' is not null or undefined
            assertParamExists('apiV1AccessApprovalsRequestsPost', 'projectSlug', projectSlug)
            // verify required parameter 'apiV1AccessApprovalsRequestsPostRequest' is not null or undefined
            assertParamExists('apiV1AccessApprovalsRequestsPost', 'apiV1AccessApprovalsRequestsPostRequest', apiV1AccessApprovalsRequestsPostRequest)
            const localVarPath = `/api/v1/access-approvals/requests`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (projectSlug !== undefined) {
                localVarQueryParameter['projectSlug'] = projectSlug;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1AccessApprovalsRequestsPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} requestId 
         * @param {ApiV1SecretApprovalRequestsIdReviewPostRequest} apiV1SecretApprovalRequestsIdReviewPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AccessApprovalsRequestsRequestIdReviewPost: async (requestId: string, apiV1SecretApprovalRequestsIdReviewPostRequest: ApiV1SecretApprovalRequestsIdReviewPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestId' is not null or undefined
            assertParamExists('apiV1AccessApprovalsRequestsRequestIdReviewPost', 'requestId', requestId)
            // verify required parameter 'apiV1SecretApprovalRequestsIdReviewPostRequest' is not null or undefined
            assertParamExists('apiV1AccessApprovalsRequestsRequestIdReviewPost', 'apiV1SecretApprovalRequestsIdReviewPostRequest', apiV1SecretApprovalRequestsIdReviewPostRequest)
            const localVarPath = `/api/v1/access-approvals/requests/{requestId}/review`
                .replace(`{${"requestId"}}`, encodeURIComponent(String(requestId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1SecretApprovalRequestsIdReviewPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a specific privilege of an identity.
         * @param {ApiV1AdditionalPrivilegeIdentityDeleteRequest} apiV1AdditionalPrivilegeIdentityDeleteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdditionalPrivilegeIdentityDelete: async (apiV1AdditionalPrivilegeIdentityDeleteRequest: ApiV1AdditionalPrivilegeIdentityDeleteRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1AdditionalPrivilegeIdentityDeleteRequest' is not null or undefined
            assertParamExists('apiV1AdditionalPrivilegeIdentityDelete', 'apiV1AdditionalPrivilegeIdentityDeleteRequest', apiV1AdditionalPrivilegeIdentityDeleteRequest)
            const localVarPath = `/api/v1/additional-privilege/identity`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1AdditionalPrivilegeIdentityDeleteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List of a specific privilege of an identity in a project.
         * @param {string} identityId The ID of the identity to list.
         * @param {string} projectSlug The slug of the project of the identity in.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdditionalPrivilegeIdentityGet: async (identityId: string, projectSlug: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identityId' is not null or undefined
            assertParamExists('apiV1AdditionalPrivilegeIdentityGet', 'identityId', identityId)
            // verify required parameter 'projectSlug' is not null or undefined
            assertParamExists('apiV1AdditionalPrivilegeIdentityGet', 'projectSlug', projectSlug)
            const localVarPath = `/api/v1/additional-privilege/identity`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (identityId !== undefined) {
                localVarQueryParameter['identityId'] = identityId;
            }

            if (projectSlug !== undefined) {
                localVarQueryParameter['projectSlug'] = projectSlug;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a specific privilege of an identity.
         * @param {ApiV1AdditionalPrivilegeIdentityPatchRequest} apiV1AdditionalPrivilegeIdentityPatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdditionalPrivilegeIdentityPatch: async (apiV1AdditionalPrivilegeIdentityPatchRequest: ApiV1AdditionalPrivilegeIdentityPatchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1AdditionalPrivilegeIdentityPatchRequest' is not null or undefined
            assertParamExists('apiV1AdditionalPrivilegeIdentityPatch', 'apiV1AdditionalPrivilegeIdentityPatchRequest', apiV1AdditionalPrivilegeIdentityPatchRequest)
            const localVarPath = `/api/v1/additional-privilege/identity`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1AdditionalPrivilegeIdentityPatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a permanent or a non expiry specific privilege for identity.
         * @param {ApiV1AdditionalPrivilegeIdentityPermanentPostRequest} apiV1AdditionalPrivilegeIdentityPermanentPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdditionalPrivilegeIdentityPermanentPost: async (apiV1AdditionalPrivilegeIdentityPermanentPostRequest: ApiV1AdditionalPrivilegeIdentityPermanentPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1AdditionalPrivilegeIdentityPermanentPostRequest' is not null or undefined
            assertParamExists('apiV1AdditionalPrivilegeIdentityPermanentPost', 'apiV1AdditionalPrivilegeIdentityPermanentPostRequest', apiV1AdditionalPrivilegeIdentityPermanentPostRequest)
            const localVarPath = `/api/v1/additional-privilege/identity/permanent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1AdditionalPrivilegeIdentityPermanentPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve details of a specific privilege by privilege slug.
         * @param {string} identityId The ID of the identity to list.
         * @param {string} projectSlug The slug of the project of the identity in.
         * @param {string} privilegeSlug The slug of the privilege.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdditionalPrivilegeIdentityPrivilegeSlugGet: async (identityId: string, projectSlug: string, privilegeSlug: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identityId' is not null or undefined
            assertParamExists('apiV1AdditionalPrivilegeIdentityPrivilegeSlugGet', 'identityId', identityId)
            // verify required parameter 'projectSlug' is not null or undefined
            assertParamExists('apiV1AdditionalPrivilegeIdentityPrivilegeSlugGet', 'projectSlug', projectSlug)
            // verify required parameter 'privilegeSlug' is not null or undefined
            assertParamExists('apiV1AdditionalPrivilegeIdentityPrivilegeSlugGet', 'privilegeSlug', privilegeSlug)
            const localVarPath = `/api/v1/additional-privilege/identity/{privilegeSlug}`
                .replace(`{${"privilegeSlug"}}`, encodeURIComponent(String(privilegeSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (identityId !== undefined) {
                localVarQueryParameter['identityId'] = identityId;
            }

            if (projectSlug !== undefined) {
                localVarQueryParameter['projectSlug'] = projectSlug;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a temporary or a expiring specific privilege for identity.
         * @param {ApiV1AdditionalPrivilegeIdentityTemporaryPostRequest} apiV1AdditionalPrivilegeIdentityTemporaryPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdditionalPrivilegeIdentityTemporaryPost: async (apiV1AdditionalPrivilegeIdentityTemporaryPostRequest: ApiV1AdditionalPrivilegeIdentityTemporaryPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1AdditionalPrivilegeIdentityTemporaryPostRequest' is not null or undefined
            assertParamExists('apiV1AdditionalPrivilegeIdentityTemporaryPost', 'apiV1AdditionalPrivilegeIdentityTemporaryPostRequest', apiV1AdditionalPrivilegeIdentityTemporaryPostRequest)
            const localVarPath = `/api/v1/additional-privilege/identity/temporary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1AdditionalPrivilegeIdentityTemporaryPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} projectMembershipId Project membership id of user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdditionalPrivilegeUsersGet: async (projectMembershipId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectMembershipId' is not null or undefined
            assertParamExists('apiV1AdditionalPrivilegeUsersGet', 'projectMembershipId', projectMembershipId)
            const localVarPath = `/api/v1/additional-privilege/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (projectMembershipId !== undefined) {
                localVarQueryParameter['projectMembershipId'] = projectMembershipId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1AdditionalPrivilegeUsersPermanentPostRequest} apiV1AdditionalPrivilegeUsersPermanentPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdditionalPrivilegeUsersPermanentPost: async (apiV1AdditionalPrivilegeUsersPermanentPostRequest: ApiV1AdditionalPrivilegeUsersPermanentPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1AdditionalPrivilegeUsersPermanentPostRequest' is not null or undefined
            assertParamExists('apiV1AdditionalPrivilegeUsersPermanentPost', 'apiV1AdditionalPrivilegeUsersPermanentPostRequest', apiV1AdditionalPrivilegeUsersPermanentPostRequest)
            const localVarPath = `/api/v1/additional-privilege/users/permanent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1AdditionalPrivilegeUsersPermanentPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} privilegeId The id of privilege object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdditionalPrivilegeUsersPrivilegeIdDelete: async (privilegeId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'privilegeId' is not null or undefined
            assertParamExists('apiV1AdditionalPrivilegeUsersPrivilegeIdDelete', 'privilegeId', privilegeId)
            const localVarPath = `/api/v1/additional-privilege/users/{privilegeId}`
                .replace(`{${"privilegeId"}}`, encodeURIComponent(String(privilegeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} privilegeId The id of privilege object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdditionalPrivilegeUsersPrivilegeIdGet: async (privilegeId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'privilegeId' is not null or undefined
            assertParamExists('apiV1AdditionalPrivilegeUsersPrivilegeIdGet', 'privilegeId', privilegeId)
            const localVarPath = `/api/v1/additional-privilege/users/{privilegeId}`
                .replace(`{${"privilegeId"}}`, encodeURIComponent(String(privilegeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} privilegeId The id of privilege object
         * @param {ApiV1AdditionalPrivilegeUsersPrivilegeIdPatchRequest} [apiV1AdditionalPrivilegeUsersPrivilegeIdPatchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdditionalPrivilegeUsersPrivilegeIdPatch: async (privilegeId: string, apiV1AdditionalPrivilegeUsersPrivilegeIdPatchRequest?: ApiV1AdditionalPrivilegeUsersPrivilegeIdPatchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'privilegeId' is not null or undefined
            assertParamExists('apiV1AdditionalPrivilegeUsersPrivilegeIdPatch', 'privilegeId', privilegeId)
            const localVarPath = `/api/v1/additional-privilege/users/{privilegeId}`
                .replace(`{${"privilegeId"}}`, encodeURIComponent(String(privilegeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1AdditionalPrivilegeUsersPrivilegeIdPatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1AdditionalPrivilegeUsersTemporaryPostRequest} apiV1AdditionalPrivilegeUsersTemporaryPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdditionalPrivilegeUsersTemporaryPost: async (apiV1AdditionalPrivilegeUsersTemporaryPostRequest: ApiV1AdditionalPrivilegeUsersTemporaryPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1AdditionalPrivilegeUsersTemporaryPostRequest' is not null or undefined
            assertParamExists('apiV1AdditionalPrivilegeUsersTemporaryPost', 'apiV1AdditionalPrivilegeUsersTemporaryPostRequest', apiV1AdditionalPrivilegeUsersTemporaryPostRequest)
            const localVarPath = `/api/v1/additional-privilege/users/temporary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1AdditionalPrivilegeUsersTemporaryPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdminConfigGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/admin/config`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1AdminConfigPatchRequest} [apiV1AdminConfigPatchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdminConfigPatch: async (apiV1AdminConfigPatchRequest?: ApiV1AdminConfigPatchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/admin/config`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1AdminConfigPatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1AdminSignupPostRequest} apiV1AdminSignupPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdminSignupPost: async (apiV1AdminSignupPostRequest: ApiV1AdminSignupPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1AdminSignupPostRequest' is not null or undefined
            assertParamExists('apiV1AdminSignupPost', 'apiV1AdminSignupPostRequest', apiV1AdminSignupPostRequest)
            const localVarPath = `/api/v1/admin/signup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1AdminSignupPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [searchTerm] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdminUserManagementUsersGet: async (searchTerm?: string, offset?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/admin/user-management/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (searchTerm !== undefined) {
                localVarQueryParameter['searchTerm'] = searchTerm;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdminUserManagementUsersUserIdDelete: async (userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('apiV1AdminUserManagementUsersUserIdDelete', 'userId', userId)
            const localVarPath = `/api/v1/admin/user-management/users/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List Audit Log Streams.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuditLogStreamsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/audit-log-streams`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an Audit Log Stream by ID.
         * @param {string} id The ID of the audit log stream to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuditLogStreamsIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1AuditLogStreamsIdDelete', 'id', id)
            const localVarPath = `/api/v1/audit-log-streams/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get an Audit Log Stream by ID.
         * @param {string} id The ID of the audit log stream to get details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuditLogStreamsIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1AuditLogStreamsIdGet', 'id', id)
            const localVarPath = `/api/v1/audit-log-streams/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an Audit Log Stream by ID.
         * @param {string} id The ID of the audit log stream to update.
         * @param {ApiV1AuditLogStreamsIdPatchRequest} [apiV1AuditLogStreamsIdPatchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuditLogStreamsIdPatch: async (id: string, apiV1AuditLogStreamsIdPatchRequest?: ApiV1AuditLogStreamsIdPatchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1AuditLogStreamsIdPatch', 'id', id)
            const localVarPath = `/api/v1/audit-log-streams/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1AuditLogStreamsIdPatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create an Audit Log Stream.
         * @param {ApiV1AuditLogStreamsPostRequest} apiV1AuditLogStreamsPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuditLogStreamsPost: async (apiV1AuditLogStreamsPostRequest: ApiV1AuditLogStreamsPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1AuditLogStreamsPostRequest' is not null or undefined
            assertParamExists('apiV1AuditLogStreamsPost', 'apiV1AuditLogStreamsPostRequest', apiV1AuditLogStreamsPostRequest)
            const localVarPath = `/api/v1/audit-log-streams`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1AuditLogStreamsPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete AWS Auth configuration on identity
         * @param {string} identityId The ID of the identity to revoke the auth method for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthAwsAuthIdentitiesIdentityIdDelete: async (identityId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identityId' is not null or undefined
            assertParamExists('apiV1AuthAwsAuthIdentitiesIdentityIdDelete', 'identityId', identityId)
            const localVarPath = `/api/v1/auth/aws-auth/identities/{identityId}`
                .replace(`{${"identityId"}}`, encodeURIComponent(String(identityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve AWS Auth configuration on identity
         * @param {string} identityId The ID of the identity to retrieve the auth method for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthAwsAuthIdentitiesIdentityIdGet: async (identityId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identityId' is not null or undefined
            assertParamExists('apiV1AuthAwsAuthIdentitiesIdentityIdGet', 'identityId', identityId)
            const localVarPath = `/api/v1/auth/aws-auth/identities/{identityId}`
                .replace(`{${"identityId"}}`, encodeURIComponent(String(identityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update AWS Auth configuration on identity
         * @param {string} identityId The ID of the identity to update the auth method for.
         * @param {ApiV1AuthAwsAuthIdentitiesIdentityIdPatchRequest} [apiV1AuthAwsAuthIdentitiesIdentityIdPatchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthAwsAuthIdentitiesIdentityIdPatch: async (identityId: string, apiV1AuthAwsAuthIdentitiesIdentityIdPatchRequest?: ApiV1AuthAwsAuthIdentitiesIdentityIdPatchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identityId' is not null or undefined
            assertParamExists('apiV1AuthAwsAuthIdentitiesIdentityIdPatch', 'identityId', identityId)
            const localVarPath = `/api/v1/auth/aws-auth/identities/{identityId}`
                .replace(`{${"identityId"}}`, encodeURIComponent(String(identityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1AuthAwsAuthIdentitiesIdentityIdPatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Attach AWS Auth configuration onto identity
         * @param {string} identityId The ID of the identity to attach the configuration onto.
         * @param {ApiV1AuthAwsAuthIdentitiesIdentityIdPostRequest} [apiV1AuthAwsAuthIdentitiesIdentityIdPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthAwsAuthIdentitiesIdentityIdPost: async (identityId: string, apiV1AuthAwsAuthIdentitiesIdentityIdPostRequest?: ApiV1AuthAwsAuthIdentitiesIdentityIdPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identityId' is not null or undefined
            assertParamExists('apiV1AuthAwsAuthIdentitiesIdentityIdPost', 'identityId', identityId)
            const localVarPath = `/api/v1/auth/aws-auth/identities/{identityId}`
                .replace(`{${"identityId"}}`, encodeURIComponent(String(identityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1AuthAwsAuthIdentitiesIdentityIdPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Login with AWS Auth
         * @param {ApiV1AuthAwsAuthLoginPostRequest} apiV1AuthAwsAuthLoginPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthAwsAuthLoginPost: async (apiV1AuthAwsAuthLoginPostRequest: ApiV1AuthAwsAuthLoginPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1AuthAwsAuthLoginPostRequest' is not null or undefined
            assertParamExists('apiV1AuthAwsAuthLoginPost', 'apiV1AuthAwsAuthLoginPostRequest', apiV1AuthAwsAuthLoginPostRequest)
            const localVarPath = `/api/v1/auth/aws-auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1AuthAwsAuthLoginPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete Azure Auth configuration on identity
         * @param {string} identityId The ID of the identity to revoke the auth method for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthAzureAuthIdentitiesIdentityIdDelete: async (identityId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identityId' is not null or undefined
            assertParamExists('apiV1AuthAzureAuthIdentitiesIdentityIdDelete', 'identityId', identityId)
            const localVarPath = `/api/v1/auth/azure-auth/identities/{identityId}`
                .replace(`{${"identityId"}}`, encodeURIComponent(String(identityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve Azure Auth configuration on identity
         * @param {string} identityId The ID of the identity to retrieve the auth method for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthAzureAuthIdentitiesIdentityIdGet: async (identityId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identityId' is not null or undefined
            assertParamExists('apiV1AuthAzureAuthIdentitiesIdentityIdGet', 'identityId', identityId)
            const localVarPath = `/api/v1/auth/azure-auth/identities/{identityId}`
                .replace(`{${"identityId"}}`, encodeURIComponent(String(identityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update Azure Auth configuration on identity
         * @param {string} identityId The ID of the identity to update the auth method for.
         * @param {ApiV1AuthAzureAuthIdentitiesIdentityIdPatchRequest} [apiV1AuthAzureAuthIdentitiesIdentityIdPatchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthAzureAuthIdentitiesIdentityIdPatch: async (identityId: string, apiV1AuthAzureAuthIdentitiesIdentityIdPatchRequest?: ApiV1AuthAzureAuthIdentitiesIdentityIdPatchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identityId' is not null or undefined
            assertParamExists('apiV1AuthAzureAuthIdentitiesIdentityIdPatch', 'identityId', identityId)
            const localVarPath = `/api/v1/auth/azure-auth/identities/{identityId}`
                .replace(`{${"identityId"}}`, encodeURIComponent(String(identityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1AuthAzureAuthIdentitiesIdentityIdPatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Attach Azure Auth configuration onto identity
         * @param {string} identityId The ID of the identity to login.
         * @param {ApiV1AuthAzureAuthIdentitiesIdentityIdPostRequest} apiV1AuthAzureAuthIdentitiesIdentityIdPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthAzureAuthIdentitiesIdentityIdPost: async (identityId: string, apiV1AuthAzureAuthIdentitiesIdentityIdPostRequest: ApiV1AuthAzureAuthIdentitiesIdentityIdPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identityId' is not null or undefined
            assertParamExists('apiV1AuthAzureAuthIdentitiesIdentityIdPost', 'identityId', identityId)
            // verify required parameter 'apiV1AuthAzureAuthIdentitiesIdentityIdPostRequest' is not null or undefined
            assertParamExists('apiV1AuthAzureAuthIdentitiesIdentityIdPost', 'apiV1AuthAzureAuthIdentitiesIdentityIdPostRequest', apiV1AuthAzureAuthIdentitiesIdentityIdPostRequest)
            const localVarPath = `/api/v1/auth/azure-auth/identities/{identityId}`
                .replace(`{${"identityId"}}`, encodeURIComponent(String(identityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1AuthAzureAuthIdentitiesIdentityIdPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Login with Azure Auth
         * @param {ApiV1AuthKubernetesAuthLoginPostRequest} apiV1AuthKubernetesAuthLoginPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthAzureAuthLoginPost: async (apiV1AuthKubernetesAuthLoginPostRequest: ApiV1AuthKubernetesAuthLoginPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1AuthKubernetesAuthLoginPostRequest' is not null or undefined
            assertParamExists('apiV1AuthAzureAuthLoginPost', 'apiV1AuthKubernetesAuthLoginPostRequest', apiV1AuthKubernetesAuthLoginPostRequest)
            const localVarPath = `/api/v1/auth/azure-auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1AuthKubernetesAuthLoginPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthCheckAuthPost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/auth/checkAuth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete GCP Auth configuration on identity
         * @param {string} identityId The ID of the identity to revoke the auth method for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthGcpAuthIdentitiesIdentityIdDelete: async (identityId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identityId' is not null or undefined
            assertParamExists('apiV1AuthGcpAuthIdentitiesIdentityIdDelete', 'identityId', identityId)
            const localVarPath = `/api/v1/auth/gcp-auth/identities/{identityId}`
                .replace(`{${"identityId"}}`, encodeURIComponent(String(identityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve GCP Auth configuration on identity
         * @param {string} identityId The ID of the identity to retrieve the auth method for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthGcpAuthIdentitiesIdentityIdGet: async (identityId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identityId' is not null or undefined
            assertParamExists('apiV1AuthGcpAuthIdentitiesIdentityIdGet', 'identityId', identityId)
            const localVarPath = `/api/v1/auth/gcp-auth/identities/{identityId}`
                .replace(`{${"identityId"}}`, encodeURIComponent(String(identityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update GCP Auth configuration on identity
         * @param {string} identityId The ID of the identity to update the auth method for.
         * @param {ApiV1AuthGcpAuthIdentitiesIdentityIdPatchRequest} [apiV1AuthGcpAuthIdentitiesIdentityIdPatchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthGcpAuthIdentitiesIdentityIdPatch: async (identityId: string, apiV1AuthGcpAuthIdentitiesIdentityIdPatchRequest?: ApiV1AuthGcpAuthIdentitiesIdentityIdPatchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identityId' is not null or undefined
            assertParamExists('apiV1AuthGcpAuthIdentitiesIdentityIdPatch', 'identityId', identityId)
            const localVarPath = `/api/v1/auth/gcp-auth/identities/{identityId}`
                .replace(`{${"identityId"}}`, encodeURIComponent(String(identityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1AuthGcpAuthIdentitiesIdentityIdPatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Attach GCP Auth configuration onto identity
         * @param {string} identityId The ID of the identity to attach the configuration onto.
         * @param {ApiV1AuthGcpAuthIdentitiesIdentityIdPostRequest} apiV1AuthGcpAuthIdentitiesIdentityIdPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthGcpAuthIdentitiesIdentityIdPost: async (identityId: string, apiV1AuthGcpAuthIdentitiesIdentityIdPostRequest: ApiV1AuthGcpAuthIdentitiesIdentityIdPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identityId' is not null or undefined
            assertParamExists('apiV1AuthGcpAuthIdentitiesIdentityIdPost', 'identityId', identityId)
            // verify required parameter 'apiV1AuthGcpAuthIdentitiesIdentityIdPostRequest' is not null or undefined
            assertParamExists('apiV1AuthGcpAuthIdentitiesIdentityIdPost', 'apiV1AuthGcpAuthIdentitiesIdentityIdPostRequest', apiV1AuthGcpAuthIdentitiesIdentityIdPostRequest)
            const localVarPath = `/api/v1/auth/gcp-auth/identities/{identityId}`
                .replace(`{${"identityId"}}`, encodeURIComponent(String(identityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1AuthGcpAuthIdentitiesIdentityIdPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Login with GCP Auth
         * @param {ApiV1AuthKubernetesAuthLoginPostRequest} apiV1AuthKubernetesAuthLoginPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthGcpAuthLoginPost: async (apiV1AuthKubernetesAuthLoginPostRequest: ApiV1AuthKubernetesAuthLoginPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1AuthKubernetesAuthLoginPostRequest' is not null or undefined
            assertParamExists('apiV1AuthGcpAuthLoginPost', 'apiV1AuthKubernetesAuthLoginPostRequest', apiV1AuthKubernetesAuthLoginPostRequest)
            const localVarPath = `/api/v1/auth/gcp-auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1AuthKubernetesAuthLoginPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete Kubernetes Auth configuration on identity
         * @param {string} identityId The ID of the identity to revoke the auth method for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthKubernetesAuthIdentitiesIdentityIdDelete: async (identityId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identityId' is not null or undefined
            assertParamExists('apiV1AuthKubernetesAuthIdentitiesIdentityIdDelete', 'identityId', identityId)
            const localVarPath = `/api/v1/auth/kubernetes-auth/identities/{identityId}`
                .replace(`{${"identityId"}}`, encodeURIComponent(String(identityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve Kubernetes Auth configuration on identity
         * @param {string} identityId The ID of the identity to retrieve the auth method for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthKubernetesAuthIdentitiesIdentityIdGet: async (identityId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identityId' is not null or undefined
            assertParamExists('apiV1AuthKubernetesAuthIdentitiesIdentityIdGet', 'identityId', identityId)
            const localVarPath = `/api/v1/auth/kubernetes-auth/identities/{identityId}`
                .replace(`{${"identityId"}}`, encodeURIComponent(String(identityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update Kubernetes Auth configuration on identity
         * @param {string} identityId The ID of the identity to update the auth method for.
         * @param {ApiV1AuthKubernetesAuthIdentitiesIdentityIdPatchRequest} [apiV1AuthKubernetesAuthIdentitiesIdentityIdPatchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthKubernetesAuthIdentitiesIdentityIdPatch: async (identityId: string, apiV1AuthKubernetesAuthIdentitiesIdentityIdPatchRequest?: ApiV1AuthKubernetesAuthIdentitiesIdentityIdPatchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identityId' is not null or undefined
            assertParamExists('apiV1AuthKubernetesAuthIdentitiesIdentityIdPatch', 'identityId', identityId)
            const localVarPath = `/api/v1/auth/kubernetes-auth/identities/{identityId}`
                .replace(`{${"identityId"}}`, encodeURIComponent(String(identityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1AuthKubernetesAuthIdentitiesIdentityIdPatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Attach Kubernetes Auth configuration onto identity
         * @param {string} identityId The ID of the identity to attach the configuration onto.
         * @param {ApiV1AuthKubernetesAuthIdentitiesIdentityIdPostRequest} apiV1AuthKubernetesAuthIdentitiesIdentityIdPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthKubernetesAuthIdentitiesIdentityIdPost: async (identityId: string, apiV1AuthKubernetesAuthIdentitiesIdentityIdPostRequest: ApiV1AuthKubernetesAuthIdentitiesIdentityIdPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identityId' is not null or undefined
            assertParamExists('apiV1AuthKubernetesAuthIdentitiesIdentityIdPost', 'identityId', identityId)
            // verify required parameter 'apiV1AuthKubernetesAuthIdentitiesIdentityIdPostRequest' is not null or undefined
            assertParamExists('apiV1AuthKubernetesAuthIdentitiesIdentityIdPost', 'apiV1AuthKubernetesAuthIdentitiesIdentityIdPostRequest', apiV1AuthKubernetesAuthIdentitiesIdentityIdPostRequest)
            const localVarPath = `/api/v1/auth/kubernetes-auth/identities/{identityId}`
                .replace(`{${"identityId"}}`, encodeURIComponent(String(identityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1AuthKubernetesAuthIdentitiesIdentityIdPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Login with Kubernetes Auth
         * @param {ApiV1AuthKubernetesAuthLoginPostRequest} apiV1AuthKubernetesAuthLoginPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthKubernetesAuthLoginPost: async (apiV1AuthKubernetesAuthLoginPostRequest: ApiV1AuthKubernetesAuthLoginPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1AuthKubernetesAuthLoginPostRequest' is not null or undefined
            assertParamExists('apiV1AuthKubernetesAuthLoginPost', 'apiV1AuthKubernetesAuthLoginPostRequest', apiV1AuthKubernetesAuthLoginPostRequest)
            const localVarPath = `/api/v1/auth/kubernetes-auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1AuthKubernetesAuthLoginPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthLogoutPost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/auth/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete OIDC Auth configuration on identity
         * @param {string} identityId The ID of the identity to revoke the auth method for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthOidcAuthIdentitiesIdentityIdDelete: async (identityId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identityId' is not null or undefined
            assertParamExists('apiV1AuthOidcAuthIdentitiesIdentityIdDelete', 'identityId', identityId)
            const localVarPath = `/api/v1/auth/oidc-auth/identities/{identityId}`
                .replace(`{${"identityId"}}`, encodeURIComponent(String(identityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve OIDC Auth configuration on identity
         * @param {string} identityId The ID of the identity to retrieve the auth method for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthOidcAuthIdentitiesIdentityIdGet: async (identityId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identityId' is not null or undefined
            assertParamExists('apiV1AuthOidcAuthIdentitiesIdentityIdGet', 'identityId', identityId)
            const localVarPath = `/api/v1/auth/oidc-auth/identities/{identityId}`
                .replace(`{${"identityId"}}`, encodeURIComponent(String(identityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update OIDC Auth configuration on identity
         * @param {string} identityId The ID of the identity to update the auth method for.
         * @param {ApiV1AuthOidcAuthIdentitiesIdentityIdPatchRequest} [apiV1AuthOidcAuthIdentitiesIdentityIdPatchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthOidcAuthIdentitiesIdentityIdPatch: async (identityId: string, apiV1AuthOidcAuthIdentitiesIdentityIdPatchRequest?: ApiV1AuthOidcAuthIdentitiesIdentityIdPatchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identityId' is not null or undefined
            assertParamExists('apiV1AuthOidcAuthIdentitiesIdentityIdPatch', 'identityId', identityId)
            const localVarPath = `/api/v1/auth/oidc-auth/identities/{identityId}`
                .replace(`{${"identityId"}}`, encodeURIComponent(String(identityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1AuthOidcAuthIdentitiesIdentityIdPatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Attach OIDC Auth configuration onto identity
         * @param {string} identityId The ID of the identity to attach the configuration onto.
         * @param {ApiV1AuthOidcAuthIdentitiesIdentityIdPostRequest} apiV1AuthOidcAuthIdentitiesIdentityIdPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthOidcAuthIdentitiesIdentityIdPost: async (identityId: string, apiV1AuthOidcAuthIdentitiesIdentityIdPostRequest: ApiV1AuthOidcAuthIdentitiesIdentityIdPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identityId' is not null or undefined
            assertParamExists('apiV1AuthOidcAuthIdentitiesIdentityIdPost', 'identityId', identityId)
            // verify required parameter 'apiV1AuthOidcAuthIdentitiesIdentityIdPostRequest' is not null or undefined
            assertParamExists('apiV1AuthOidcAuthIdentitiesIdentityIdPost', 'apiV1AuthOidcAuthIdentitiesIdentityIdPostRequest', apiV1AuthOidcAuthIdentitiesIdentityIdPostRequest)
            const localVarPath = `/api/v1/auth/oidc-auth/identities/{identityId}`
                .replace(`{${"identityId"}}`, encodeURIComponent(String(identityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1AuthOidcAuthIdentitiesIdentityIdPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Login with OIDC Auth
         * @param {ApiV1AuthKubernetesAuthLoginPostRequest} apiV1AuthKubernetesAuthLoginPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthOidcAuthLoginPost: async (apiV1AuthKubernetesAuthLoginPostRequest: ApiV1AuthKubernetesAuthLoginPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1AuthKubernetesAuthLoginPostRequest' is not null or undefined
            assertParamExists('apiV1AuthOidcAuthLoginPost', 'apiV1AuthKubernetesAuthLoginPostRequest', apiV1AuthKubernetesAuthLoginPostRequest)
            const localVarPath = `/api/v1/auth/oidc-auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1AuthKubernetesAuthLoginPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete Token Auth configuration on identity
         * @param {string} identityId The ID of the identity to revoke the auth method for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthTokenAuthIdentitiesIdentityIdDelete: async (identityId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identityId' is not null or undefined
            assertParamExists('apiV1AuthTokenAuthIdentitiesIdentityIdDelete', 'identityId', identityId)
            const localVarPath = `/api/v1/auth/token-auth/identities/{identityId}`
                .replace(`{${"identityId"}}`, encodeURIComponent(String(identityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve Token Auth configuration on identity
         * @param {string} identityId The ID of the identity to retrieve the auth method for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthTokenAuthIdentitiesIdentityIdGet: async (identityId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identityId' is not null or undefined
            assertParamExists('apiV1AuthTokenAuthIdentitiesIdentityIdGet', 'identityId', identityId)
            const localVarPath = `/api/v1/auth/token-auth/identities/{identityId}`
                .replace(`{${"identityId"}}`, encodeURIComponent(String(identityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update Token Auth configuration on identity
         * @param {string} identityId The ID of the identity to update the auth method for.
         * @param {ApiV1AuthTokenAuthIdentitiesIdentityIdPatchRequest} [apiV1AuthTokenAuthIdentitiesIdentityIdPatchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthTokenAuthIdentitiesIdentityIdPatch: async (identityId: string, apiV1AuthTokenAuthIdentitiesIdentityIdPatchRequest?: ApiV1AuthTokenAuthIdentitiesIdentityIdPatchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identityId' is not null or undefined
            assertParamExists('apiV1AuthTokenAuthIdentitiesIdentityIdPatch', 'identityId', identityId)
            const localVarPath = `/api/v1/auth/token-auth/identities/{identityId}`
                .replace(`{${"identityId"}}`, encodeURIComponent(String(identityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1AuthTokenAuthIdentitiesIdentityIdPatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Attach Token Auth configuration onto identity
         * @param {string} identityId The ID of the identity to attach the configuration onto.
         * @param {ApiV1AuthTokenAuthIdentitiesIdentityIdPostRequest} [apiV1AuthTokenAuthIdentitiesIdentityIdPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthTokenAuthIdentitiesIdentityIdPost: async (identityId: string, apiV1AuthTokenAuthIdentitiesIdentityIdPostRequest?: ApiV1AuthTokenAuthIdentitiesIdentityIdPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identityId' is not null or undefined
            assertParamExists('apiV1AuthTokenAuthIdentitiesIdentityIdPost', 'identityId', identityId)
            const localVarPath = `/api/v1/auth/token-auth/identities/{identityId}`
                .replace(`{${"identityId"}}`, encodeURIComponent(String(identityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1AuthTokenAuthIdentitiesIdentityIdPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get tokens for identity with Token Auth
         * @param {string} identityId The ID of the identity to list token metadata for.
         * @param {number} [offset] The offset to start from. If you enter 10, it will start from the 10th token.
         * @param {number} [limit] The number of tokens to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthTokenAuthIdentitiesIdentityIdTokensGet: async (identityId: string, offset?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identityId' is not null or undefined
            assertParamExists('apiV1AuthTokenAuthIdentitiesIdentityIdTokensGet', 'identityId', identityId)
            const localVarPath = `/api/v1/auth/token-auth/identities/{identityId}/tokens`
                .replace(`{${"identityId"}}`, encodeURIComponent(String(identityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create token for identity with Token Auth
         * @param {string} identityId The ID of the identity to create the token for.
         * @param {ApiV1AuthTokenAuthIdentitiesIdentityIdTokensPostRequest} [apiV1AuthTokenAuthIdentitiesIdentityIdTokensPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthTokenAuthIdentitiesIdentityIdTokensPost: async (identityId: string, apiV1AuthTokenAuthIdentitiesIdentityIdTokensPostRequest?: ApiV1AuthTokenAuthIdentitiesIdentityIdTokensPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identityId' is not null or undefined
            assertParamExists('apiV1AuthTokenAuthIdentitiesIdentityIdTokensPost', 'identityId', identityId)
            const localVarPath = `/api/v1/auth/token-auth/identities/{identityId}/tokens`
                .replace(`{${"identityId"}}`, encodeURIComponent(String(identityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1AuthTokenAuthIdentitiesIdentityIdTokensPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update token for identity with Token Auth
         * @param {string} tokenId The ID of the token to update metadata for
         * @param {ApiV1AuthTokenAuthTokensTokenIdPatchRequest} [apiV1AuthTokenAuthTokensTokenIdPatchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthTokenAuthTokensTokenIdPatch: async (tokenId: string, apiV1AuthTokenAuthTokensTokenIdPatchRequest?: ApiV1AuthTokenAuthTokensTokenIdPatchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tokenId' is not null or undefined
            assertParamExists('apiV1AuthTokenAuthTokensTokenIdPatch', 'tokenId', tokenId)
            const localVarPath = `/api/v1/auth/token-auth/tokens/{tokenId}`
                .replace(`{${"tokenId"}}`, encodeURIComponent(String(tokenId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1AuthTokenAuthTokensTokenIdPatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Revoke token for identity with Token Auth
         * @param {string} tokenId The ID of the token to revoke
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthTokenAuthTokensTokenIdRevokePost: async (tokenId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tokenId' is not null or undefined
            assertParamExists('apiV1AuthTokenAuthTokensTokenIdRevokePost', 'tokenId', tokenId)
            const localVarPath = `/api/v1/auth/token-auth/tokens/{tokenId}/revoke`
                .replace(`{${"tokenId"}}`, encodeURIComponent(String(tokenId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthTokenPost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/auth/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Renew access token
         * @param {ApiV1AuthTokenRenewPostRequest} apiV1AuthTokenRenewPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthTokenRenewPost: async (apiV1AuthTokenRenewPostRequest: ApiV1AuthTokenRenewPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1AuthTokenRenewPostRequest' is not null or undefined
            assertParamExists('apiV1AuthTokenRenewPost', 'apiV1AuthTokenRenewPostRequest', apiV1AuthTokenRenewPostRequest)
            const localVarPath = `/api/v1/auth/token/renew`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1AuthTokenRenewPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Revoke access token
         * @param {ApiV1AuthTokenRevokePostRequest} apiV1AuthTokenRevokePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthTokenRevokePost: async (apiV1AuthTokenRevokePostRequest: ApiV1AuthTokenRevokePostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1AuthTokenRevokePostRequest' is not null or undefined
            assertParamExists('apiV1AuthTokenRevokePost', 'apiV1AuthTokenRevokePostRequest', apiV1AuthTokenRevokePostRequest)
            const localVarPath = `/api/v1/auth/token/revoke`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1AuthTokenRevokePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Universal Auth Client Secret for identity
         * @param {string} identityId The ID of the identity to get the client secret from.
         * @param {string} clientSecretId The ID of the client secret to get details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsClientSecretIdGet: async (identityId: string, clientSecretId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identityId' is not null or undefined
            assertParamExists('apiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsClientSecretIdGet', 'identityId', identityId)
            // verify required parameter 'clientSecretId' is not null or undefined
            assertParamExists('apiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsClientSecretIdGet', 'clientSecretId', clientSecretId)
            const localVarPath = `/api/v1/auth/universal-auth/identities/{identityId}/client-secrets/{clientSecretId}`
                .replace(`{${"identityId"}}`, encodeURIComponent(String(identityId)))
                .replace(`{${"clientSecretId"}}`, encodeURIComponent(String(clientSecretId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Revoke Universal Auth Client Secrets for identity
         * @param {string} identityId The ID of the identity to revoke the client secret from.
         * @param {string} clientSecretId The ID of the client secret to revoke.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsClientSecretIdRevokePost: async (identityId: string, clientSecretId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identityId' is not null or undefined
            assertParamExists('apiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsClientSecretIdRevokePost', 'identityId', identityId)
            // verify required parameter 'clientSecretId' is not null or undefined
            assertParamExists('apiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsClientSecretIdRevokePost', 'clientSecretId', clientSecretId)
            const localVarPath = `/api/v1/auth/universal-auth/identities/{identityId}/client-secrets/{clientSecretId}/revoke`
                .replace(`{${"identityId"}}`, encodeURIComponent(String(identityId)))
                .replace(`{${"clientSecretId"}}`, encodeURIComponent(String(clientSecretId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List Universal Auth Client Secrets for identity
         * @param {string} identityId The ID of the identity to list client secrets for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsGet: async (identityId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identityId' is not null or undefined
            assertParamExists('apiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsGet', 'identityId', identityId)
            const localVarPath = `/api/v1/auth/universal-auth/identities/{identityId}/client-secrets`
                .replace(`{${"identityId"}}`, encodeURIComponent(String(identityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create Universal Auth Client Secret for identity
         * @param {string} identityId The ID of the identity to create a client secret for.
         * @param {ApiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsPostRequest} [apiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsPost: async (identityId: string, apiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsPostRequest?: ApiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identityId' is not null or undefined
            assertParamExists('apiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsPost', 'identityId', identityId)
            const localVarPath = `/api/v1/auth/universal-auth/identities/{identityId}/client-secrets`
                .replace(`{${"identityId"}}`, encodeURIComponent(String(identityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete Universal Auth configuration on identity
         * @param {string} identityId The ID of the identity to revoke the auth method for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthUniversalAuthIdentitiesIdentityIdDelete: async (identityId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identityId' is not null or undefined
            assertParamExists('apiV1AuthUniversalAuthIdentitiesIdentityIdDelete', 'identityId', identityId)
            const localVarPath = `/api/v1/auth/universal-auth/identities/{identityId}`
                .replace(`{${"identityId"}}`, encodeURIComponent(String(identityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve Universal Auth configuration on identity
         * @param {string} identityId The ID of the identity to retrieve the auth method for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthUniversalAuthIdentitiesIdentityIdGet: async (identityId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identityId' is not null or undefined
            assertParamExists('apiV1AuthUniversalAuthIdentitiesIdentityIdGet', 'identityId', identityId)
            const localVarPath = `/api/v1/auth/universal-auth/identities/{identityId}`
                .replace(`{${"identityId"}}`, encodeURIComponent(String(identityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update Universal Auth configuration on identity
         * @param {string} identityId The ID of the identity to update the auth method for.
         * @param {ApiV1AuthUniversalAuthIdentitiesIdentityIdPatchRequest} [apiV1AuthUniversalAuthIdentitiesIdentityIdPatchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthUniversalAuthIdentitiesIdentityIdPatch: async (identityId: string, apiV1AuthUniversalAuthIdentitiesIdentityIdPatchRequest?: ApiV1AuthUniversalAuthIdentitiesIdentityIdPatchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identityId' is not null or undefined
            assertParamExists('apiV1AuthUniversalAuthIdentitiesIdentityIdPatch', 'identityId', identityId)
            const localVarPath = `/api/v1/auth/universal-auth/identities/{identityId}`
                .replace(`{${"identityId"}}`, encodeURIComponent(String(identityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1AuthUniversalAuthIdentitiesIdentityIdPatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Attach Universal Auth configuration onto identity
         * @param {string} identityId The ID of the identity to attach the configuration onto.
         * @param {ApiV1AuthUniversalAuthIdentitiesIdentityIdPostRequest} [apiV1AuthUniversalAuthIdentitiesIdentityIdPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthUniversalAuthIdentitiesIdentityIdPost: async (identityId: string, apiV1AuthUniversalAuthIdentitiesIdentityIdPostRequest?: ApiV1AuthUniversalAuthIdentitiesIdentityIdPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identityId' is not null or undefined
            assertParamExists('apiV1AuthUniversalAuthIdentitiesIdentityIdPost', 'identityId', identityId)
            const localVarPath = `/api/v1/auth/universal-auth/identities/{identityId}`
                .replace(`{${"identityId"}}`, encodeURIComponent(String(identityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1AuthUniversalAuthIdentitiesIdentityIdPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Login with Universal Auth
         * @param {ApiV1AuthUniversalAuthLoginPostRequest} apiV1AuthUniversalAuthLoginPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthUniversalAuthLoginPost: async (apiV1AuthUniversalAuthLoginPostRequest: ApiV1AuthUniversalAuthLoginPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1AuthUniversalAuthLoginPostRequest' is not null or undefined
            assertParamExists('apiV1AuthUniversalAuthLoginPost', 'apiV1AuthUniversalAuthLoginPostRequest', apiV1AuthUniversalAuthLoginPostRequest)
            const localVarPath = `/api/v1/auth/universal-auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1AuthUniversalAuthLoginPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} botId 
         * @param {ApiV1BotBotIdActivePatchRequest} apiV1BotBotIdActivePatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1BotBotIdActivePatch: async (botId: string, apiV1BotBotIdActivePatchRequest: ApiV1BotBotIdActivePatchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'botId' is not null or undefined
            assertParamExists('apiV1BotBotIdActivePatch', 'botId', botId)
            // verify required parameter 'apiV1BotBotIdActivePatchRequest' is not null or undefined
            assertParamExists('apiV1BotBotIdActivePatch', 'apiV1BotBotIdActivePatchRequest', apiV1BotBotIdActivePatchRequest)
            const localVarPath = `/api/v1/bot/{botId}/active`
                .replace(`{${"botId"}}`, encodeURIComponent(String(botId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1BotBotIdActivePatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1BotProjectIdGet: async (projectId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('apiV1BotProjectIdGet', 'projectId', projectId)
            const localVarPath = `/api/v1/bot/{projectId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} projectSlug The slug of the project to create dynamic secret in.
         * @param {string} environmentSlug The slug of the environment to list folders from.
         * @param {string} [path] The path to list folders from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DynamicSecretsGet: async (projectSlug: string, environmentSlug: string, path?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectSlug' is not null or undefined
            assertParamExists('apiV1DynamicSecretsGet', 'projectSlug', projectSlug)
            // verify required parameter 'environmentSlug' is not null or undefined
            assertParamExists('apiV1DynamicSecretsGet', 'environmentSlug', environmentSlug)
            const localVarPath = `/api/v1/dynamic-secrets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (projectSlug !== undefined) {
                localVarQueryParameter['projectSlug'] = projectSlug;
            }

            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }

            if (environmentSlug !== undefined) {
                localVarQueryParameter['environmentSlug'] = environmentSlug;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} leaseId The ID of the dynamic secret lease.
         * @param {ApiV1DynamicSecretsLeasesLeaseIdDeleteRequest} apiV1DynamicSecretsLeasesLeaseIdDeleteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DynamicSecretsLeasesLeaseIdDelete: async (leaseId: string, apiV1DynamicSecretsLeasesLeaseIdDeleteRequest: ApiV1DynamicSecretsLeasesLeaseIdDeleteRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'leaseId' is not null or undefined
            assertParamExists('apiV1DynamicSecretsLeasesLeaseIdDelete', 'leaseId', leaseId)
            // verify required parameter 'apiV1DynamicSecretsLeasesLeaseIdDeleteRequest' is not null or undefined
            assertParamExists('apiV1DynamicSecretsLeasesLeaseIdDelete', 'apiV1DynamicSecretsLeasesLeaseIdDeleteRequest', apiV1DynamicSecretsLeasesLeaseIdDeleteRequest)
            const localVarPath = `/api/v1/dynamic-secrets/leases/{leaseId}`
                .replace(`{${"leaseId"}}`, encodeURIComponent(String(leaseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1DynamicSecretsLeasesLeaseIdDeleteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} projectSlug The slug of the project to create dynamic secret in.
         * @param {string} environmentSlug The slug of the environment to list folders from.
         * @param {string} leaseId The ID of the dynamic secret lease.
         * @param {string} [path] The path to list folders from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DynamicSecretsLeasesLeaseIdGet: async (projectSlug: string, environmentSlug: string, leaseId: string, path?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectSlug' is not null or undefined
            assertParamExists('apiV1DynamicSecretsLeasesLeaseIdGet', 'projectSlug', projectSlug)
            // verify required parameter 'environmentSlug' is not null or undefined
            assertParamExists('apiV1DynamicSecretsLeasesLeaseIdGet', 'environmentSlug', environmentSlug)
            // verify required parameter 'leaseId' is not null or undefined
            assertParamExists('apiV1DynamicSecretsLeasesLeaseIdGet', 'leaseId', leaseId)
            const localVarPath = `/api/v1/dynamic-secrets/leases/{leaseId}`
                .replace(`{${"leaseId"}}`, encodeURIComponent(String(leaseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (projectSlug !== undefined) {
                localVarQueryParameter['projectSlug'] = projectSlug;
            }

            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }

            if (environmentSlug !== undefined) {
                localVarQueryParameter['environmentSlug'] = environmentSlug;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} leaseId The ID of the dynamic secret lease.
         * @param {ApiV1DynamicSecretsLeasesLeaseIdRenewPostRequest} apiV1DynamicSecretsLeasesLeaseIdRenewPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DynamicSecretsLeasesLeaseIdRenewPost: async (leaseId: string, apiV1DynamicSecretsLeasesLeaseIdRenewPostRequest: ApiV1DynamicSecretsLeasesLeaseIdRenewPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'leaseId' is not null or undefined
            assertParamExists('apiV1DynamicSecretsLeasesLeaseIdRenewPost', 'leaseId', leaseId)
            // verify required parameter 'apiV1DynamicSecretsLeasesLeaseIdRenewPostRequest' is not null or undefined
            assertParamExists('apiV1DynamicSecretsLeasesLeaseIdRenewPost', 'apiV1DynamicSecretsLeasesLeaseIdRenewPostRequest', apiV1DynamicSecretsLeasesLeaseIdRenewPostRequest)
            const localVarPath = `/api/v1/dynamic-secrets/leases/{leaseId}/renew`
                .replace(`{${"leaseId"}}`, encodeURIComponent(String(leaseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1DynamicSecretsLeasesLeaseIdRenewPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1DynamicSecretsLeasesPostRequest} apiV1DynamicSecretsLeasesPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DynamicSecretsLeasesPost: async (apiV1DynamicSecretsLeasesPostRequest: ApiV1DynamicSecretsLeasesPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1DynamicSecretsLeasesPostRequest' is not null or undefined
            assertParamExists('apiV1DynamicSecretsLeasesPost', 'apiV1DynamicSecretsLeasesPostRequest', apiV1DynamicSecretsLeasesPostRequest)
            const localVarPath = `/api/v1/dynamic-secrets/leases`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1DynamicSecretsLeasesPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} name The name of the dynamic secret.
         * @param {ApiV1DynamicSecretsNameDeleteRequest} apiV1DynamicSecretsNameDeleteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DynamicSecretsNameDelete: async (name: string, apiV1DynamicSecretsNameDeleteRequest: ApiV1DynamicSecretsNameDeleteRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('apiV1DynamicSecretsNameDelete', 'name', name)
            // verify required parameter 'apiV1DynamicSecretsNameDeleteRequest' is not null or undefined
            assertParamExists('apiV1DynamicSecretsNameDelete', 'apiV1DynamicSecretsNameDeleteRequest', apiV1DynamicSecretsNameDeleteRequest)
            const localVarPath = `/api/v1/dynamic-secrets/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1DynamicSecretsNameDeleteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} projectSlug The slug of the project to create dynamic secret in.
         * @param {string} environmentSlug The slug of the environment to list folders from.
         * @param {string} name The name of the dynamic secret.
         * @param {string} [path] The path to list folders from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DynamicSecretsNameGet: async (projectSlug: string, environmentSlug: string, name: string, path?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectSlug' is not null or undefined
            assertParamExists('apiV1DynamicSecretsNameGet', 'projectSlug', projectSlug)
            // verify required parameter 'environmentSlug' is not null or undefined
            assertParamExists('apiV1DynamicSecretsNameGet', 'environmentSlug', environmentSlug)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('apiV1DynamicSecretsNameGet', 'name', name)
            const localVarPath = `/api/v1/dynamic-secrets/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (projectSlug !== undefined) {
                localVarQueryParameter['projectSlug'] = projectSlug;
            }

            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }

            if (environmentSlug !== undefined) {
                localVarQueryParameter['environmentSlug'] = environmentSlug;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} projectSlug The slug of the project to create dynamic secret in.
         * @param {string} environmentSlug The slug of the environment to list folders from.
         * @param {string} name The name of the dynamic secret.
         * @param {string} [path] The path to list folders from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DynamicSecretsNameLeasesGet: async (projectSlug: string, environmentSlug: string, name: string, path?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectSlug' is not null or undefined
            assertParamExists('apiV1DynamicSecretsNameLeasesGet', 'projectSlug', projectSlug)
            // verify required parameter 'environmentSlug' is not null or undefined
            assertParamExists('apiV1DynamicSecretsNameLeasesGet', 'environmentSlug', environmentSlug)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('apiV1DynamicSecretsNameLeasesGet', 'name', name)
            const localVarPath = `/api/v1/dynamic-secrets/{name}/leases`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (projectSlug !== undefined) {
                localVarQueryParameter['projectSlug'] = projectSlug;
            }

            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }

            if (environmentSlug !== undefined) {
                localVarQueryParameter['environmentSlug'] = environmentSlug;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} name The name of the dynamic secret.
         * @param {ApiV1DynamicSecretsNamePatchRequest} apiV1DynamicSecretsNamePatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DynamicSecretsNamePatch: async (name: string, apiV1DynamicSecretsNamePatchRequest: ApiV1DynamicSecretsNamePatchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('apiV1DynamicSecretsNamePatch', 'name', name)
            // verify required parameter 'apiV1DynamicSecretsNamePatchRequest' is not null or undefined
            assertParamExists('apiV1DynamicSecretsNamePatch', 'apiV1DynamicSecretsNamePatchRequest', apiV1DynamicSecretsNamePatchRequest)
            const localVarPath = `/api/v1/dynamic-secrets/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1DynamicSecretsNamePatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1DynamicSecretsPostRequest} apiV1DynamicSecretsPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DynamicSecretsPost: async (apiV1DynamicSecretsPostRequest: ApiV1DynamicSecretsPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1DynamicSecretsPostRequest' is not null or undefined
            assertParamExists('apiV1DynamicSecretsPost', 'apiV1DynamicSecretsPostRequest', apiV1DynamicSecretsPostRequest)
            const localVarPath = `/api/v1/dynamic-secrets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1DynamicSecretsPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ExternalKmsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/external-kms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ExternalKmsIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1ExternalKmsIdDelete', 'id', id)
            const localVarPath = `/api/v1/external-kms/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ExternalKmsIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1ExternalKmsIdGet', 'id', id)
            const localVarPath = `/api/v1/external-kms/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {ApiV1ExternalKmsIdPatchRequest} apiV1ExternalKmsIdPatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ExternalKmsIdPatch: async (id: string, apiV1ExternalKmsIdPatchRequest: ApiV1ExternalKmsIdPatchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1ExternalKmsIdPatch', 'id', id)
            // verify required parameter 'apiV1ExternalKmsIdPatchRequest' is not null or undefined
            assertParamExists('apiV1ExternalKmsIdPatch', 'apiV1ExternalKmsIdPatchRequest', apiV1ExternalKmsIdPatchRequest)
            const localVarPath = `/api/v1/external-kms/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1ExternalKmsIdPatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1ExternalKmsPostRequest} apiV1ExternalKmsPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ExternalKmsPost: async (apiV1ExternalKmsPostRequest: ApiV1ExternalKmsPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1ExternalKmsPostRequest' is not null or undefined
            assertParamExists('apiV1ExternalKmsPost', 'apiV1ExternalKmsPostRequest', apiV1ExternalKmsPostRequest)
            const localVarPath = `/api/v1/external-kms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1ExternalKmsPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ExternalKmsSlugSlugGet: async (slug: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('apiV1ExternalKmsSlugSlugGet', 'slug', slug)
            const localVarPath = `/api/v1/external-kms/slug/{slug}`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update folders by batch
         * @param {ApiV1FoldersBatchPatchRequest} apiV1FoldersBatchPatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1FoldersBatchPatch: async (apiV1FoldersBatchPatchRequest: ApiV1FoldersBatchPatchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1FoldersBatchPatchRequest' is not null or undefined
            assertParamExists('apiV1FoldersBatchPatch', 'apiV1FoldersBatchPatchRequest', apiV1FoldersBatchPatchRequest)
            const localVarPath = `/api/v1/folders/batch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1FoldersBatchPatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a folder
         * @param {string} folderIdOrName The ID or name of the folder to delete.
         * @param {ApiV1FoldersFolderIdOrNameDeleteRequest} apiV1FoldersFolderIdOrNameDeleteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1FoldersFolderIdOrNameDelete: async (folderIdOrName: string, apiV1FoldersFolderIdOrNameDeleteRequest: ApiV1FoldersFolderIdOrNameDeleteRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderIdOrName' is not null or undefined
            assertParamExists('apiV1FoldersFolderIdOrNameDelete', 'folderIdOrName', folderIdOrName)
            // verify required parameter 'apiV1FoldersFolderIdOrNameDeleteRequest' is not null or undefined
            assertParamExists('apiV1FoldersFolderIdOrNameDelete', 'apiV1FoldersFolderIdOrNameDeleteRequest', apiV1FoldersFolderIdOrNameDeleteRequest)
            const localVarPath = `/api/v1/folders/{folderIdOrName}`
                .replace(`{${"folderIdOrName"}}`, encodeURIComponent(String(folderIdOrName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1FoldersFolderIdOrNameDeleteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update folder
         * @param {string} folderId The ID of the folder to update.
         * @param {ApiV1FoldersFolderIdPatchRequest} apiV1FoldersFolderIdPatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1FoldersFolderIdPatch: async (folderId: string, apiV1FoldersFolderIdPatchRequest: ApiV1FoldersFolderIdPatchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderId' is not null or undefined
            assertParamExists('apiV1FoldersFolderIdPatch', 'folderId', folderId)
            // verify required parameter 'apiV1FoldersFolderIdPatchRequest' is not null or undefined
            assertParamExists('apiV1FoldersFolderIdPatch', 'apiV1FoldersFolderIdPatchRequest', apiV1FoldersFolderIdPatchRequest)
            const localVarPath = `/api/v1/folders/{folderId}`
                .replace(`{${"folderId"}}`, encodeURIComponent(String(folderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1FoldersFolderIdPatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get folders
         * @param {string} workspaceId The ID of the project to list folders from.
         * @param {string} environment The slug of the environment to list folders from.
         * @param {string} [path] The path to list folders from.
         * @param {string} [directory] The directory to list folders from. (Deprecated in favor of path)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1FoldersGet: async (workspaceId: string, environment: string, path?: string, directory?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('apiV1FoldersGet', 'workspaceId', workspaceId)
            // verify required parameter 'environment' is not null or undefined
            assertParamExists('apiV1FoldersGet', 'environment', environment)
            const localVarPath = `/api/v1/folders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (workspaceId !== undefined) {
                localVarQueryParameter['workspaceId'] = workspaceId;
            }

            if (environment !== undefined) {
                localVarQueryParameter['environment'] = environment;
            }

            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }

            if (directory !== undefined) {
                localVarQueryParameter['directory'] = directory;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get folder by id
         * @param {string} id The id of the folder to get details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1FoldersIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1FoldersIdGet', 'id', id)
            const localVarPath = `/api/v1/folders/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create folders
         * @param {ApiV1FoldersPostRequest} apiV1FoldersPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1FoldersPost: async (apiV1FoldersPostRequest: ApiV1FoldersPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1FoldersPostRequest' is not null or undefined
            assertParamExists('apiV1FoldersPost', 'apiV1FoldersPostRequest', apiV1FoldersPostRequest)
            const localVarPath = `/api/v1/folders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1FoldersPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} currentSlug The current slug of the group to update.
         * @param {ApiV1GroupsCurrentSlugPatchRequest} [apiV1GroupsCurrentSlugPatchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1GroupsCurrentSlugPatch: async (currentSlug: string, apiV1GroupsCurrentSlugPatchRequest?: ApiV1GroupsCurrentSlugPatchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'currentSlug' is not null or undefined
            assertParamExists('apiV1GroupsCurrentSlugPatch', 'currentSlug', currentSlug)
            const localVarPath = `/api/v1/groups/{currentSlug}`
                .replace(`{${"currentSlug"}}`, encodeURIComponent(String(currentSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1GroupsCurrentSlugPatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1GroupsPostRequest} apiV1GroupsPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1GroupsPost: async (apiV1GroupsPostRequest: ApiV1GroupsPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1GroupsPostRequest' is not null or undefined
            assertParamExists('apiV1GroupsPost', 'apiV1GroupsPostRequest', apiV1GroupsPostRequest)
            const localVarPath = `/api/v1/groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1GroupsPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} slug The slug of the group to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1GroupsSlugDelete: async (slug: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('apiV1GroupsSlugDelete', 'slug', slug)
            const localVarPath = `/api/v1/groups/{slug}`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} slug The slug of the group to list users for
         * @param {number} [offset] The offset to start from. If you enter 10, it will start from the 10th user.
         * @param {number} [limit] The number of users to return.
         * @param {string} [username] The username to search for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1GroupsSlugUsersGet: async (slug: string, offset?: number, limit?: number, username?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('apiV1GroupsSlugUsersGet', 'slug', slug)
            const localVarPath = `/api/v1/groups/{slug}/users`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} slug The slug of the group to remove the user from.
         * @param {string} username The username of the user to remove from the group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1GroupsSlugUsersUsernameDelete: async (slug: string, username: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('apiV1GroupsSlugUsersUsernameDelete', 'slug', slug)
            // verify required parameter 'username' is not null or undefined
            assertParamExists('apiV1GroupsSlugUsersUsernameDelete', 'username', username)
            const localVarPath = `/api/v1/groups/{slug}/users/{username}`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)))
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} slug The slug of the group to add the user to.
         * @param {string} username The username of the user to add to the group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1GroupsSlugUsersUsernamePost: async (slug: string, username: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('apiV1GroupsSlugUsersUsernamePost', 'slug', slug)
            // verify required parameter 'username' is not null or undefined
            assertParamExists('apiV1GroupsSlugUsersUsernamePost', 'username', username)
            const localVarPath = `/api/v1/groups/{slug}/users/{username}`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)))
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List identities
         * @param {string} orgId The ID of the organization to list identities.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdentitiesGet: async (orgId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('apiV1IdentitiesGet', 'orgId', orgId)
            const localVarPath = `/api/v1/identities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (orgId !== undefined) {
                localVarQueryParameter['orgId'] = orgId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete identity
         * @param {string} identityId The ID of the identity to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdentitiesIdentityIdDelete: async (identityId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identityId' is not null or undefined
            assertParamExists('apiV1IdentitiesIdentityIdDelete', 'identityId', identityId)
            const localVarPath = `/api/v1/identities/{identityId}`
                .replace(`{${"identityId"}}`, encodeURIComponent(String(identityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get an identity by id
         * @param {string} identityId The ID of the identity to get details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdentitiesIdentityIdGet: async (identityId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identityId' is not null or undefined
            assertParamExists('apiV1IdentitiesIdentityIdGet', 'identityId', identityId)
            const localVarPath = `/api/v1/identities/{identityId}`
                .replace(`{${"identityId"}}`, encodeURIComponent(String(identityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List project memberships that identity with id is part of
         * @param {string} identityId The ID of the identity to get details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdentitiesIdentityIdIdentityMembershipsGet: async (identityId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identityId' is not null or undefined
            assertParamExists('apiV1IdentitiesIdentityIdIdentityMembershipsGet', 'identityId', identityId)
            const localVarPath = `/api/v1/identities/{identityId}/identity-memberships`
                .replace(`{${"identityId"}}`, encodeURIComponent(String(identityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update identity
         * @param {string} identityId The ID of the identity to update.
         * @param {ApiV1IdentitiesIdentityIdPatchRequest} [apiV1IdentitiesIdentityIdPatchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdentitiesIdentityIdPatch: async (identityId: string, apiV1IdentitiesIdentityIdPatchRequest?: ApiV1IdentitiesIdentityIdPatchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identityId' is not null or undefined
            assertParamExists('apiV1IdentitiesIdentityIdPatch', 'identityId', identityId)
            const localVarPath = `/api/v1/identities/{identityId}`
                .replace(`{${"identityId"}}`, encodeURIComponent(String(identityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1IdentitiesIdentityIdPatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create identity
         * @param {ApiV1IdentitiesPostRequest} apiV1IdentitiesPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdentitiesPost: async (apiV1IdentitiesPostRequest: ApiV1IdentitiesPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1IdentitiesPostRequest' is not null or undefined
            assertParamExists('apiV1IdentitiesPost', 'apiV1IdentitiesPostRequest', apiV1IdentitiesPostRequest)
            const localVarPath = `/api/v1/identities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1IdentitiesPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create the integration authentication object required for syncing secrets.
         * @param {ApiV1IntegrationAuthAccessTokenPostRequest} apiV1IntegrationAuthAccessTokenPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IntegrationAuthAccessTokenPost: async (apiV1IntegrationAuthAccessTokenPostRequest: ApiV1IntegrationAuthAccessTokenPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1IntegrationAuthAccessTokenPostRequest' is not null or undefined
            assertParamExists('apiV1IntegrationAuthAccessTokenPost', 'apiV1IntegrationAuthAccessTokenPostRequest', apiV1IntegrationAuthAccessTokenPostRequest)
            const localVarPath = `/api/v1/integration-auth/access-token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1IntegrationAuthAccessTokenPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove all integration\'s auth object from the project.
         * @param {string} integration The slug of the integration to be unauthorized.
         * @param {string} projectId The ID of the project to delete the integration auth from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IntegrationAuthDelete: async (integration: string, projectId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'integration' is not null or undefined
            assertParamExists('apiV1IntegrationAuthDelete', 'integration', integration)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('apiV1IntegrationAuthDelete', 'projectId', projectId)
            const localVarPath = `/api/v1/integration-auth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (integration !== undefined) {
                localVarQueryParameter['integration'] = integration;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['projectId'] = projectId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} integrationAuthId 
         * @param {string} [teamId] 
         * @param {string} [azureDevOpsOrgName] 
         * @param {string} [workspaceSlug] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IntegrationAuthIntegrationAuthIdAppsGet: async (integrationAuthId: string, teamId?: string, azureDevOpsOrgName?: string, workspaceSlug?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'integrationAuthId' is not null or undefined
            assertParamExists('apiV1IntegrationAuthIntegrationAuthIdAppsGet', 'integrationAuthId', integrationAuthId)
            const localVarPath = `/api/v1/integration-auth/{integrationAuthId}/apps`
                .replace(`{${"integrationAuthId"}}`, encodeURIComponent(String(integrationAuthId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (teamId !== undefined) {
                localVarQueryParameter['teamId'] = teamId;
            }

            if (azureDevOpsOrgName !== undefined) {
                localVarQueryParameter['azureDevOpsOrgName'] = azureDevOpsOrgName;
            }

            if (workspaceSlug !== undefined) {
                localVarQueryParameter['workspaceSlug'] = workspaceSlug;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} region 
         * @param {string} integrationAuthId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IntegrationAuthIntegrationAuthIdAwsSecretsManagerKmsKeysGet: async (region: string, integrationAuthId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'region' is not null or undefined
            assertParamExists('apiV1IntegrationAuthIntegrationAuthIdAwsSecretsManagerKmsKeysGet', 'region', region)
            // verify required parameter 'integrationAuthId' is not null or undefined
            assertParamExists('apiV1IntegrationAuthIntegrationAuthIdAwsSecretsManagerKmsKeysGet', 'integrationAuthId', integrationAuthId)
            const localVarPath = `/api/v1/integration-auth/{integrationAuthId}/aws-secrets-manager/kms-keys`
                .replace(`{${"integrationAuthId"}}`, encodeURIComponent(String(integrationAuthId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (region !== undefined) {
                localVarQueryParameter['region'] = region;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} integrationAuthId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IntegrationAuthIntegrationAuthIdBitbucketWorkspacesGet: async (integrationAuthId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'integrationAuthId' is not null or undefined
            assertParamExists('apiV1IntegrationAuthIntegrationAuthIdBitbucketWorkspacesGet', 'integrationAuthId', integrationAuthId)
            const localVarPath = `/api/v1/integration-auth/{integrationAuthId}/bitbucket/workspaces`
                .replace(`{${"integrationAuthId"}}`, encodeURIComponent(String(integrationAuthId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} accountId 
         * @param {string} integrationAuthId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IntegrationAuthIntegrationAuthIdChecklyGroupsGet: async (accountId: string, integrationAuthId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('apiV1IntegrationAuthIntegrationAuthIdChecklyGroupsGet', 'accountId', accountId)
            // verify required parameter 'integrationAuthId' is not null or undefined
            assertParamExists('apiV1IntegrationAuthIntegrationAuthIdChecklyGroupsGet', 'integrationAuthId', integrationAuthId)
            const localVarPath = `/api/v1/integration-auth/{integrationAuthId}/checkly/groups`
                .replace(`{${"integrationAuthId"}}`, encodeURIComponent(String(integrationAuthId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (accountId !== undefined) {
                localVarQueryParameter['accountId'] = accountId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove an integration auth object by object id.
         * @param {string} integrationAuthId The id of integration authentication object to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IntegrationAuthIntegrationAuthIdDelete: async (integrationAuthId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'integrationAuthId' is not null or undefined
            assertParamExists('apiV1IntegrationAuthIntegrationAuthIdDelete', 'integrationAuthId', integrationAuthId)
            const localVarPath = `/api/v1/integration-auth/{integrationAuthId}`
                .replace(`{${"integrationAuthId"}}`, encodeURIComponent(String(integrationAuthId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get details of an integration authorization by auth object id.
         * @param {string} integrationAuthId The id of integration authentication object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IntegrationAuthIntegrationAuthIdGet: async (integrationAuthId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'integrationAuthId' is not null or undefined
            assertParamExists('apiV1IntegrationAuthIntegrationAuthIdGet', 'integrationAuthId', integrationAuthId)
            const localVarPath = `/api/v1/integration-auth/{integrationAuthId}`
                .replace(`{${"integrationAuthId"}}`, encodeURIComponent(String(integrationAuthId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} repoOwner 
         * @param {string} repoName 
         * @param {string} integrationAuthId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IntegrationAuthIntegrationAuthIdGithubEnvsGet: async (repoOwner: string, repoName: string, integrationAuthId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'repoOwner' is not null or undefined
            assertParamExists('apiV1IntegrationAuthIntegrationAuthIdGithubEnvsGet', 'repoOwner', repoOwner)
            // verify required parameter 'repoName' is not null or undefined
            assertParamExists('apiV1IntegrationAuthIntegrationAuthIdGithubEnvsGet', 'repoName', repoName)
            // verify required parameter 'integrationAuthId' is not null or undefined
            assertParamExists('apiV1IntegrationAuthIntegrationAuthIdGithubEnvsGet', 'integrationAuthId', integrationAuthId)
            const localVarPath = `/api/v1/integration-auth/{integrationAuthId}/github/envs`
                .replace(`{${"integrationAuthId"}}`, encodeURIComponent(String(integrationAuthId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (repoOwner !== undefined) {
                localVarQueryParameter['repoOwner'] = repoOwner;
            }

            if (repoName !== undefined) {
                localVarQueryParameter['repoName'] = repoName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} integrationAuthId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IntegrationAuthIntegrationAuthIdGithubOrgsGet: async (integrationAuthId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'integrationAuthId' is not null or undefined
            assertParamExists('apiV1IntegrationAuthIntegrationAuthIdGithubOrgsGet', 'integrationAuthId', integrationAuthId)
            const localVarPath = `/api/v1/integration-auth/{integrationAuthId}/github/orgs`
                .replace(`{${"integrationAuthId"}}`, encodeURIComponent(String(integrationAuthId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} integrationAuthId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IntegrationAuthIntegrationAuthIdHerokuPipelinesGet: async (integrationAuthId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'integrationAuthId' is not null or undefined
            assertParamExists('apiV1IntegrationAuthIntegrationAuthIdHerokuPipelinesGet', 'integrationAuthId', integrationAuthId)
            const localVarPath = `/api/v1/integration-auth/{integrationAuthId}/heroku/pipelines`
                .replace(`{${"integrationAuthId"}}`, encodeURIComponent(String(integrationAuthId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} appId 
         * @param {string} integrationAuthId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IntegrationAuthIntegrationAuthIdNorthflankSecretGroupsGet: async (appId: string, integrationAuthId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('apiV1IntegrationAuthIntegrationAuthIdNorthflankSecretGroupsGet', 'appId', appId)
            // verify required parameter 'integrationAuthId' is not null or undefined
            assertParamExists('apiV1IntegrationAuthIntegrationAuthIdNorthflankSecretGroupsGet', 'integrationAuthId', integrationAuthId)
            const localVarPath = `/api/v1/integration-auth/{integrationAuthId}/northflank/secret-groups`
                .replace(`{${"integrationAuthId"}}`, encodeURIComponent(String(integrationAuthId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (appId !== undefined) {
                localVarQueryParameter['appId'] = appId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} environmentId 
         * @param {string} integrationAuthId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IntegrationAuthIntegrationAuthIdQoveryAppsGet: async (environmentId: string, integrationAuthId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'environmentId' is not null or undefined
            assertParamExists('apiV1IntegrationAuthIntegrationAuthIdQoveryAppsGet', 'environmentId', environmentId)
            // verify required parameter 'integrationAuthId' is not null or undefined
            assertParamExists('apiV1IntegrationAuthIntegrationAuthIdQoveryAppsGet', 'integrationAuthId', integrationAuthId)
            const localVarPath = `/api/v1/integration-auth/{integrationAuthId}/qovery/apps`
                .replace(`{${"integrationAuthId"}}`, encodeURIComponent(String(integrationAuthId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (environmentId !== undefined) {
                localVarQueryParameter['environmentId'] = environmentId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} environmentId 
         * @param {string} integrationAuthId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IntegrationAuthIntegrationAuthIdQoveryContainersGet: async (environmentId: string, integrationAuthId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'environmentId' is not null or undefined
            assertParamExists('apiV1IntegrationAuthIntegrationAuthIdQoveryContainersGet', 'environmentId', environmentId)
            // verify required parameter 'integrationAuthId' is not null or undefined
            assertParamExists('apiV1IntegrationAuthIntegrationAuthIdQoveryContainersGet', 'integrationAuthId', integrationAuthId)
            const localVarPath = `/api/v1/integration-auth/{integrationAuthId}/qovery/containers`
                .replace(`{${"integrationAuthId"}}`, encodeURIComponent(String(integrationAuthId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (environmentId !== undefined) {
                localVarQueryParameter['environmentId'] = environmentId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} projectId 
         * @param {string} integrationAuthId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IntegrationAuthIntegrationAuthIdQoveryEnvironmentsGet: async (projectId: string, integrationAuthId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('apiV1IntegrationAuthIntegrationAuthIdQoveryEnvironmentsGet', 'projectId', projectId)
            // verify required parameter 'integrationAuthId' is not null or undefined
            assertParamExists('apiV1IntegrationAuthIntegrationAuthIdQoveryEnvironmentsGet', 'integrationAuthId', integrationAuthId)
            const localVarPath = `/api/v1/integration-auth/{integrationAuthId}/qovery/environments`
                .replace(`{${"integrationAuthId"}}`, encodeURIComponent(String(integrationAuthId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (projectId !== undefined) {
                localVarQueryParameter['projectId'] = projectId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} environmentId 
         * @param {string} integrationAuthId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IntegrationAuthIntegrationAuthIdQoveryJobsGet: async (environmentId: string, integrationAuthId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'environmentId' is not null or undefined
            assertParamExists('apiV1IntegrationAuthIntegrationAuthIdQoveryJobsGet', 'environmentId', environmentId)
            // verify required parameter 'integrationAuthId' is not null or undefined
            assertParamExists('apiV1IntegrationAuthIntegrationAuthIdQoveryJobsGet', 'integrationAuthId', integrationAuthId)
            const localVarPath = `/api/v1/integration-auth/{integrationAuthId}/qovery/jobs`
                .replace(`{${"integrationAuthId"}}`, encodeURIComponent(String(integrationAuthId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (environmentId !== undefined) {
                localVarQueryParameter['environmentId'] = environmentId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} integrationAuthId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IntegrationAuthIntegrationAuthIdQoveryOrgsGet: async (integrationAuthId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'integrationAuthId' is not null or undefined
            assertParamExists('apiV1IntegrationAuthIntegrationAuthIdQoveryOrgsGet', 'integrationAuthId', integrationAuthId)
            const localVarPath = `/api/v1/integration-auth/{integrationAuthId}/qovery/orgs`
                .replace(`{${"integrationAuthId"}}`, encodeURIComponent(String(integrationAuthId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} orgId 
         * @param {string} integrationAuthId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IntegrationAuthIntegrationAuthIdQoveryProjectsGet: async (orgId: string, integrationAuthId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('apiV1IntegrationAuthIntegrationAuthIdQoveryProjectsGet', 'orgId', orgId)
            // verify required parameter 'integrationAuthId' is not null or undefined
            assertParamExists('apiV1IntegrationAuthIntegrationAuthIdQoveryProjectsGet', 'integrationAuthId', integrationAuthId)
            const localVarPath = `/api/v1/integration-auth/{integrationAuthId}/qovery/projects`
                .replace(`{${"integrationAuthId"}}`, encodeURIComponent(String(integrationAuthId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (orgId !== undefined) {
                localVarQueryParameter['orgId'] = orgId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} appId 
         * @param {string} integrationAuthId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IntegrationAuthIntegrationAuthIdRailwayEnvironmentsGet: async (appId: string, integrationAuthId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('apiV1IntegrationAuthIntegrationAuthIdRailwayEnvironmentsGet', 'appId', appId)
            // verify required parameter 'integrationAuthId' is not null or undefined
            assertParamExists('apiV1IntegrationAuthIntegrationAuthIdRailwayEnvironmentsGet', 'integrationAuthId', integrationAuthId)
            const localVarPath = `/api/v1/integration-auth/{integrationAuthId}/railway/environments`
                .replace(`{${"integrationAuthId"}}`, encodeURIComponent(String(integrationAuthId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (appId !== undefined) {
                localVarQueryParameter['appId'] = appId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} appId 
         * @param {string} integrationAuthId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IntegrationAuthIntegrationAuthIdRailwayServicesGet: async (appId: string, integrationAuthId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('apiV1IntegrationAuthIntegrationAuthIdRailwayServicesGet', 'appId', appId)
            // verify required parameter 'integrationAuthId' is not null or undefined
            assertParamExists('apiV1IntegrationAuthIntegrationAuthIdRailwayServicesGet', 'integrationAuthId', integrationAuthId)
            const localVarPath = `/api/v1/integration-auth/{integrationAuthId}/railway/services`
                .replace(`{${"integrationAuthId"}}`, encodeURIComponent(String(integrationAuthId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (appId !== undefined) {
                localVarQueryParameter['appId'] = appId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} appId 
         * @param {string} integrationAuthId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IntegrationAuthIntegrationAuthIdTeamcityBuildConfigsGet: async (appId: string, integrationAuthId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('apiV1IntegrationAuthIntegrationAuthIdTeamcityBuildConfigsGet', 'appId', appId)
            // verify required parameter 'integrationAuthId' is not null or undefined
            assertParamExists('apiV1IntegrationAuthIntegrationAuthIdTeamcityBuildConfigsGet', 'integrationAuthId', integrationAuthId)
            const localVarPath = `/api/v1/integration-auth/{integrationAuthId}/teamcity/build-configs`
                .replace(`{${"integrationAuthId"}}`, encodeURIComponent(String(integrationAuthId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (appId !== undefined) {
                localVarQueryParameter['appId'] = appId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} integrationAuthId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IntegrationAuthIntegrationAuthIdTeamsGet: async (integrationAuthId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'integrationAuthId' is not null or undefined
            assertParamExists('apiV1IntegrationAuthIntegrationAuthIdTeamsGet', 'integrationAuthId', integrationAuthId)
            const localVarPath = `/api/v1/integration-auth/{integrationAuthId}/teams`
                .replace(`{${"integrationAuthId"}}`, encodeURIComponent(String(integrationAuthId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} appId 
         * @param {string} integrationAuthId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IntegrationAuthIntegrationAuthIdVercelBranchesGet: async (appId: string, integrationAuthId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            assertParamExists('apiV1IntegrationAuthIntegrationAuthIdVercelBranchesGet', 'appId', appId)
            // verify required parameter 'integrationAuthId' is not null or undefined
            assertParamExists('apiV1IntegrationAuthIntegrationAuthIdVercelBranchesGet', 'integrationAuthId', integrationAuthId)
            const localVarPath = `/api/v1/integration-auth/{integrationAuthId}/vercel/branches`
                .replace(`{${"integrationAuthId"}}`, encodeURIComponent(String(integrationAuthId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (appId !== undefined) {
                localVarQueryParameter['appId'] = appId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List of integrations available.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IntegrationAuthIntegrationOptionsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/integration-auth/integration-options`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1IntegrationAuthOauthTokenPostRequest} apiV1IntegrationAuthOauthTokenPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IntegrationAuthOauthTokenPost: async (apiV1IntegrationAuthOauthTokenPostRequest: ApiV1IntegrationAuthOauthTokenPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1IntegrationAuthOauthTokenPostRequest' is not null or undefined
            assertParamExists('apiV1IntegrationAuthOauthTokenPost', 'apiV1IntegrationAuthOauthTokenPostRequest', apiV1IntegrationAuthOauthTokenPostRequest)
            const localVarPath = `/api/v1/integration-auth/oauth-token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1IntegrationAuthOauthTokenPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove an integration using the integration object ID
         * @param {string} integrationId The ID of the integration object.
         * @param {ApiV1IntegrationIntegrationIdDeleteShouldDeleteIntegrationSecretsEnum} [shouldDeleteIntegrationSecrets] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IntegrationIntegrationIdDelete: async (integrationId: string, shouldDeleteIntegrationSecrets?: ApiV1IntegrationIntegrationIdDeleteShouldDeleteIntegrationSecretsEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'integrationId' is not null or undefined
            assertParamExists('apiV1IntegrationIntegrationIdDelete', 'integrationId', integrationId)
            const localVarPath = `/api/v1/integration/{integrationId}`
                .replace(`{${"integrationId"}}`, encodeURIComponent(String(integrationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (shouldDeleteIntegrationSecrets !== undefined) {
                localVarQueryParameter['shouldDeleteIntegrationSecrets'] = shouldDeleteIntegrationSecrets;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an integration by integration id
         * @param {string} integrationId The ID of the integration object.
         * @param {ApiV1IntegrationIntegrationIdPatchRequest} apiV1IntegrationIntegrationIdPatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IntegrationIntegrationIdPatch: async (integrationId: string, apiV1IntegrationIntegrationIdPatchRequest: ApiV1IntegrationIntegrationIdPatchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'integrationId' is not null or undefined
            assertParamExists('apiV1IntegrationIntegrationIdPatch', 'integrationId', integrationId)
            // verify required parameter 'apiV1IntegrationIntegrationIdPatchRequest' is not null or undefined
            assertParamExists('apiV1IntegrationIntegrationIdPatch', 'apiV1IntegrationIntegrationIdPatchRequest', apiV1IntegrationIntegrationIdPatchRequest)
            const localVarPath = `/api/v1/integration/{integrationId}`
                .replace(`{${"integrationId"}}`, encodeURIComponent(String(integrationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1IntegrationIntegrationIdPatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Manually trigger sync of an integration by integration id
         * @param {string} integrationId The ID of the integration object to manually sync
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IntegrationIntegrationIdSyncPost: async (integrationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'integrationId' is not null or undefined
            assertParamExists('apiV1IntegrationIntegrationIdSyncPost', 'integrationId', integrationId)
            const localVarPath = `/api/v1/integration/{integrationId}/sync`
                .replace(`{${"integrationId"}}`, encodeURIComponent(String(integrationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create an integration to sync secrets.
         * @param {ApiV1IntegrationPostRequest} apiV1IntegrationPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IntegrationPost: async (apiV1IntegrationPostRequest: ApiV1IntegrationPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1IntegrationPostRequest' is not null or undefined
            assertParamExists('apiV1IntegrationPost', 'apiV1IntegrationPostRequest', apiV1IntegrationPostRequest)
            const localVarPath = `/api/v1/integration`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1IntegrationPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1InviteOrgSignupPostRequest} apiV1InviteOrgSignupPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1InviteOrgSignupPost: async (apiV1InviteOrgSignupPostRequest: ApiV1InviteOrgSignupPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1InviteOrgSignupPostRequest' is not null or undefined
            assertParamExists('apiV1InviteOrgSignupPost', 'apiV1InviteOrgSignupPostRequest', apiV1InviteOrgSignupPostRequest)
            const localVarPath = `/api/v1/invite-org/signup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1InviteOrgSignupPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1InviteOrgVerifyPostRequest} apiV1InviteOrgVerifyPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1InviteOrgVerifyPost: async (apiV1InviteOrgVerifyPostRequest: ApiV1InviteOrgVerifyPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1InviteOrgVerifyPostRequest' is not null or undefined
            assertParamExists('apiV1InviteOrgVerifyPost', 'apiV1InviteOrgVerifyPostRequest', apiV1InviteOrgVerifyPostRequest)
            const localVarPath = `/api/v1/invite-org/verify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1InviteOrgVerifyPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} configId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LdapConfigConfigIdGroupMapsGet: async (configId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'configId' is not null or undefined
            assertParamExists('apiV1LdapConfigConfigIdGroupMapsGet', 'configId', configId)
            const localVarPath = `/api/v1/ldap/config/{configId}/group-maps`
                .replace(`{${"configId"}}`, encodeURIComponent(String(configId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} configId 
         * @param {string} groupMapId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LdapConfigConfigIdGroupMapsGroupMapIdDelete: async (configId: string, groupMapId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'configId' is not null or undefined
            assertParamExists('apiV1LdapConfigConfigIdGroupMapsGroupMapIdDelete', 'configId', configId)
            // verify required parameter 'groupMapId' is not null or undefined
            assertParamExists('apiV1LdapConfigConfigIdGroupMapsGroupMapIdDelete', 'groupMapId', groupMapId)
            const localVarPath = `/api/v1/ldap/config/{configId}/group-maps/{groupMapId}`
                .replace(`{${"configId"}}`, encodeURIComponent(String(configId)))
                .replace(`{${"groupMapId"}}`, encodeURIComponent(String(groupMapId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} configId 
         * @param {ApiV1LdapConfigConfigIdGroupMapsPostRequest} apiV1LdapConfigConfigIdGroupMapsPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LdapConfigConfigIdGroupMapsPost: async (configId: string, apiV1LdapConfigConfigIdGroupMapsPostRequest: ApiV1LdapConfigConfigIdGroupMapsPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'configId' is not null or undefined
            assertParamExists('apiV1LdapConfigConfigIdGroupMapsPost', 'configId', configId)
            // verify required parameter 'apiV1LdapConfigConfigIdGroupMapsPostRequest' is not null or undefined
            assertParamExists('apiV1LdapConfigConfigIdGroupMapsPost', 'apiV1LdapConfigConfigIdGroupMapsPostRequest', apiV1LdapConfigConfigIdGroupMapsPostRequest)
            const localVarPath = `/api/v1/ldap/config/{configId}/group-maps`
                .replace(`{${"configId"}}`, encodeURIComponent(String(configId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1LdapConfigConfigIdGroupMapsPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} configId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LdapConfigConfigIdTestConnectionPost: async (configId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'configId' is not null or undefined
            assertParamExists('apiV1LdapConfigConfigIdTestConnectionPost', 'configId', configId)
            const localVarPath = `/api/v1/ldap/config/{configId}/test-connection`
                .replace(`{${"configId"}}`, encodeURIComponent(String(configId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LdapConfigGet: async (organizationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('apiV1LdapConfigGet', 'organizationId', organizationId)
            const localVarPath = `/api/v1/ldap/config`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (organizationId !== undefined) {
                localVarQueryParameter['organizationId'] = organizationId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1LdapConfigPatchRequest} apiV1LdapConfigPatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LdapConfigPatch: async (apiV1LdapConfigPatchRequest: ApiV1LdapConfigPatchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1LdapConfigPatchRequest' is not null or undefined
            assertParamExists('apiV1LdapConfigPatch', 'apiV1LdapConfigPatchRequest', apiV1LdapConfigPatchRequest)
            const localVarPath = `/api/v1/ldap/config`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1LdapConfigPatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1LdapConfigPostRequest} apiV1LdapConfigPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LdapConfigPost: async (apiV1LdapConfigPostRequest: ApiV1LdapConfigPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1LdapConfigPostRequest' is not null or undefined
            assertParamExists('apiV1LdapConfigPost', 'apiV1LdapConfigPostRequest', apiV1LdapConfigPostRequest)
            const localVarPath = `/api/v1/ldap/config`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1LdapConfigPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1LdapLoginPostRequest} apiV1LdapLoginPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LdapLoginPost: async (apiV1LdapLoginPostRequest: ApiV1LdapLoginPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1LdapLoginPostRequest' is not null or undefined
            assertParamExists('apiV1LdapLoginPost', 'apiV1LdapLoginPostRequest', apiV1LdapLoginPostRequest)
            const localVarPath = `/api/v1/ldap/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1LdapLoginPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [search] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrganizationAdminProjectsGet: async (search?: string, offset?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/organization-admin/projects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrganizationAdminProjectsProjectIdGrantAdminAccessPost: async (projectId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('apiV1OrganizationAdminProjectsProjectIdGrantAdminAccessPost', 'projectId', projectId)
            const localVarPath = `/api/v1/organization-admin/projects/{projectId}/grant-admin-access`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrganizationGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/organization`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrganizationOrganizationIdGet: async (organizationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('apiV1OrganizationOrganizationIdGet', 'organizationId', organizationId)
            const localVarPath = `/api/v1/organization/{organizationId}`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} organizationId The ID of the organization to list groups for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrganizationOrganizationIdGroupsGet: async (organizationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('apiV1OrganizationOrganizationIdGroupsGet', 'organizationId', organizationId)
            const localVarPath = `/api/v1/organization/{organizationId}/groups`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrganizationOrganizationIdIncidentContactOrgGet: async (organizationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('apiV1OrganizationOrganizationIdIncidentContactOrgGet', 'organizationId', organizationId)
            const localVarPath = `/api/v1/organization/{organizationId}/incidentContactOrg`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {string} incidentContactId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrganizationOrganizationIdIncidentContactOrgIncidentContactIdDelete: async (organizationId: string, incidentContactId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('apiV1OrganizationOrganizationIdIncidentContactOrgIncidentContactIdDelete', 'organizationId', organizationId)
            // verify required parameter 'incidentContactId' is not null or undefined
            assertParamExists('apiV1OrganizationOrganizationIdIncidentContactOrgIncidentContactIdDelete', 'incidentContactId', incidentContactId)
            const localVarPath = `/api/v1/organization/{organizationId}/incidentContactOrg/{incidentContactId}`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)))
                .replace(`{${"incidentContactId"}}`, encodeURIComponent(String(incidentContactId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {ApiV1PasswordEmailPasswordResetPostRequest} apiV1PasswordEmailPasswordResetPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrganizationOrganizationIdIncidentContactOrgPost: async (organizationId: string, apiV1PasswordEmailPasswordResetPostRequest: ApiV1PasswordEmailPasswordResetPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('apiV1OrganizationOrganizationIdIncidentContactOrgPost', 'organizationId', organizationId)
            // verify required parameter 'apiV1PasswordEmailPasswordResetPostRequest' is not null or undefined
            assertParamExists('apiV1OrganizationOrganizationIdIncidentContactOrgPost', 'apiV1PasswordEmailPasswordResetPostRequest', apiV1PasswordEmailPasswordResetPostRequest)
            const localVarPath = `/api/v1/organization/{organizationId}/incidentContactOrg`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1PasswordEmailPasswordResetPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {ApiV1OrganizationOrganizationIdPatchRequest} [apiV1OrganizationOrganizationIdPatchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrganizationOrganizationIdPatch: async (organizationId: string, apiV1OrganizationOrganizationIdPatchRequest?: ApiV1OrganizationOrganizationIdPatchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('apiV1OrganizationOrganizationIdPatch', 'organizationId', organizationId)
            const localVarPath = `/api/v1/organization/{organizationId}`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1OrganizationOrganizationIdPatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrganizationOrganizationIdPermissionsGet: async (organizationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('apiV1OrganizationOrganizationIdPermissionsGet', 'organizationId', organizationId)
            const localVarPath = `/api/v1/organization/{organizationId}/permissions`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrganizationOrganizationIdRolesGet: async (organizationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('apiV1OrganizationOrganizationIdRolesGet', 'organizationId', organizationId)
            const localVarPath = `/api/v1/organization/{organizationId}/roles`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {ApiV1OrganizationOrganizationIdRolesPostRequest} apiV1OrganizationOrganizationIdRolesPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrganizationOrganizationIdRolesPost: async (organizationId: string, apiV1OrganizationOrganizationIdRolesPostRequest: ApiV1OrganizationOrganizationIdRolesPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('apiV1OrganizationOrganizationIdRolesPost', 'organizationId', organizationId)
            // verify required parameter 'apiV1OrganizationOrganizationIdRolesPostRequest' is not null or undefined
            assertParamExists('apiV1OrganizationOrganizationIdRolesPost', 'apiV1OrganizationOrganizationIdRolesPostRequest', apiV1OrganizationOrganizationIdRolesPostRequest)
            const localVarPath = `/api/v1/organization/{organizationId}/roles`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1OrganizationOrganizationIdRolesPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {string} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrganizationOrganizationIdRolesRoleIdDelete: async (organizationId: string, roleId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('apiV1OrganizationOrganizationIdRolesRoleIdDelete', 'organizationId', organizationId)
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('apiV1OrganizationOrganizationIdRolesRoleIdDelete', 'roleId', roleId)
            const localVarPath = `/api/v1/organization/{organizationId}/roles/{roleId}`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)))
                .replace(`{${"roleId"}}`, encodeURIComponent(String(roleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {string} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrganizationOrganizationIdRolesRoleIdGet: async (organizationId: string, roleId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('apiV1OrganizationOrganizationIdRolesRoleIdGet', 'organizationId', organizationId)
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('apiV1OrganizationOrganizationIdRolesRoleIdGet', 'roleId', roleId)
            const localVarPath = `/api/v1/organization/{organizationId}/roles/{roleId}`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)))
                .replace(`{${"roleId"}}`, encodeURIComponent(String(roleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {string} roleId 
         * @param {ApiV1OrganizationOrganizationIdRolesRoleIdPatchRequest} apiV1OrganizationOrganizationIdRolesRoleIdPatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrganizationOrganizationIdRolesRoleIdPatch: async (organizationId: string, roleId: string, apiV1OrganizationOrganizationIdRolesRoleIdPatchRequest: ApiV1OrganizationOrganizationIdRolesRoleIdPatchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('apiV1OrganizationOrganizationIdRolesRoleIdPatch', 'organizationId', organizationId)
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('apiV1OrganizationOrganizationIdRolesRoleIdPatch', 'roleId', roleId)
            // verify required parameter 'apiV1OrganizationOrganizationIdRolesRoleIdPatchRequest' is not null or undefined
            assertParamExists('apiV1OrganizationOrganizationIdRolesRoleIdPatch', 'apiV1OrganizationOrganizationIdRolesRoleIdPatchRequest', apiV1OrganizationOrganizationIdRolesRoleIdPatchRequest)
            const localVarPath = `/api/v1/organization/{organizationId}/roles/{roleId}`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)))
                .replace(`{${"roleId"}}`, encodeURIComponent(String(roleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1OrganizationOrganizationIdRolesRoleIdPatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrganizationOrganizationIdUsersGet: async (organizationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('apiV1OrganizationOrganizationIdUsersGet', 'organizationId', organizationId)
            const localVarPath = `/api/v1/organization/{organizationId}/users`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrganizationsOrganizationIdBillingDetailsGet: async (organizationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('apiV1OrganizationsOrganizationIdBillingDetailsGet', 'organizationId', organizationId)
            const localVarPath = `/api/v1/organizations/{organizationId}/billing-details`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {ApiV1OrganizationsOrganizationIdBillingDetailsPatchRequest} [apiV1OrganizationsOrganizationIdBillingDetailsPatchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrganizationsOrganizationIdBillingDetailsPatch: async (organizationId: string, apiV1OrganizationsOrganizationIdBillingDetailsPatchRequest?: ApiV1OrganizationsOrganizationIdBillingDetailsPatchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('apiV1OrganizationsOrganizationIdBillingDetailsPatch', 'organizationId', organizationId)
            const localVarPath = `/api/v1/organizations/{organizationId}/billing-details`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1OrganizationsOrganizationIdBillingDetailsPatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrganizationsOrganizationIdBillingDetailsPaymentMethodsGet: async (organizationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('apiV1OrganizationsOrganizationIdBillingDetailsPaymentMethodsGet', 'organizationId', organizationId)
            const localVarPath = `/api/v1/organizations/{organizationId}/billing-details/payment-methods`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {string} pmtMethodId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrganizationsOrganizationIdBillingDetailsPaymentMethodsPmtMethodIdDelete: async (organizationId: string, pmtMethodId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('apiV1OrganizationsOrganizationIdBillingDetailsPaymentMethodsPmtMethodIdDelete', 'organizationId', organizationId)
            // verify required parameter 'pmtMethodId' is not null or undefined
            assertParamExists('apiV1OrganizationsOrganizationIdBillingDetailsPaymentMethodsPmtMethodIdDelete', 'pmtMethodId', pmtMethodId)
            const localVarPath = `/api/v1/organizations/{organizationId}/billing-details/payment-methods/{pmtMethodId}`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)))
                .replace(`{${"pmtMethodId"}}`, encodeURIComponent(String(pmtMethodId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {ApiV1OrganizationsOrganizationIdBillingDetailsPaymentMethodsPostRequest} apiV1OrganizationsOrganizationIdBillingDetailsPaymentMethodsPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrganizationsOrganizationIdBillingDetailsPaymentMethodsPost: async (organizationId: string, apiV1OrganizationsOrganizationIdBillingDetailsPaymentMethodsPostRequest: ApiV1OrganizationsOrganizationIdBillingDetailsPaymentMethodsPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('apiV1OrganizationsOrganizationIdBillingDetailsPaymentMethodsPost', 'organizationId', organizationId)
            // verify required parameter 'apiV1OrganizationsOrganizationIdBillingDetailsPaymentMethodsPostRequest' is not null or undefined
            assertParamExists('apiV1OrganizationsOrganizationIdBillingDetailsPaymentMethodsPost', 'apiV1OrganizationsOrganizationIdBillingDetailsPaymentMethodsPostRequest', apiV1OrganizationsOrganizationIdBillingDetailsPaymentMethodsPostRequest)
            const localVarPath = `/api/v1/organizations/{organizationId}/billing-details/payment-methods`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1OrganizationsOrganizationIdBillingDetailsPaymentMethodsPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrganizationsOrganizationIdBillingDetailsTaxIdsGet: async (organizationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('apiV1OrganizationsOrganizationIdBillingDetailsTaxIdsGet', 'organizationId', organizationId)
            const localVarPath = `/api/v1/organizations/{organizationId}/billing-details/tax-ids`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {ApiV1OrganizationsOrganizationIdBillingDetailsTaxIdsPostRequest} apiV1OrganizationsOrganizationIdBillingDetailsTaxIdsPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrganizationsOrganizationIdBillingDetailsTaxIdsPost: async (organizationId: string, apiV1OrganizationsOrganizationIdBillingDetailsTaxIdsPostRequest: ApiV1OrganizationsOrganizationIdBillingDetailsTaxIdsPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('apiV1OrganizationsOrganizationIdBillingDetailsTaxIdsPost', 'organizationId', organizationId)
            // verify required parameter 'apiV1OrganizationsOrganizationIdBillingDetailsTaxIdsPostRequest' is not null or undefined
            assertParamExists('apiV1OrganizationsOrganizationIdBillingDetailsTaxIdsPost', 'apiV1OrganizationsOrganizationIdBillingDetailsTaxIdsPostRequest', apiV1OrganizationsOrganizationIdBillingDetailsTaxIdsPostRequest)
            const localVarPath = `/api/v1/organizations/{organizationId}/billing-details/tax-ids`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1OrganizationsOrganizationIdBillingDetailsTaxIdsPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {string} taxId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrganizationsOrganizationIdBillingDetailsTaxIdsTaxIdDelete: async (organizationId: string, taxId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('apiV1OrganizationsOrganizationIdBillingDetailsTaxIdsTaxIdDelete', 'organizationId', organizationId)
            // verify required parameter 'taxId' is not null or undefined
            assertParamExists('apiV1OrganizationsOrganizationIdBillingDetailsTaxIdsTaxIdDelete', 'taxId', taxId)
            const localVarPath = `/api/v1/organizations/{organizationId}/billing-details/tax-ids/{taxId}`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)))
                .replace(`{${"taxId"}}`, encodeURIComponent(String(taxId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrganizationsOrganizationIdCustomerPortalSessionPost: async (organizationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('apiV1OrganizationsOrganizationIdCustomerPortalSessionPost', 'organizationId', organizationId)
            const localVarPath = `/api/v1/organizations/{organizationId}/customer-portal-session`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrganizationsOrganizationIdInvoicesGet: async (organizationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('apiV1OrganizationsOrganizationIdInvoicesGet', 'organizationId', organizationId)
            const localVarPath = `/api/v1/organizations/{organizationId}/invoices`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrganizationsOrganizationIdLicensesGet: async (organizationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('apiV1OrganizationsOrganizationIdLicensesGet', 'organizationId', organizationId)
            const localVarPath = `/api/v1/organizations/{organizationId}/licenses`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrganizationsOrganizationIdPlanBillingGet: async (organizationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('apiV1OrganizationsOrganizationIdPlanBillingGet', 'organizationId', organizationId)
            const localVarPath = `/api/v1/organizations/{organizationId}/plan/billing`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrganizationsOrganizationIdPlanGet: async (organizationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('apiV1OrganizationsOrganizationIdPlanGet', 'organizationId', organizationId)
            const localVarPath = `/api/v1/organizations/{organizationId}/plan`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrganizationsOrganizationIdPlanTableGet: async (organizationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('apiV1OrganizationsOrganizationIdPlanTableGet', 'organizationId', organizationId)
            const localVarPath = `/api/v1/organizations/{organizationId}/plan/table`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {string} [workspaceId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrganizationsOrganizationIdPlansGet: async (organizationId: string, workspaceId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('apiV1OrganizationsOrganizationIdPlansGet', 'organizationId', organizationId)
            const localVarPath = `/api/v1/organizations/{organizationId}/plans`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (workspaceId !== undefined) {
                localVarQueryParameter['workspaceId'] = workspaceId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1OrganizationsOrganizationIdPlansTableGetBillingCycleEnum} billingCycle 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrganizationsOrganizationIdPlansTableGet: async (billingCycle: ApiV1OrganizationsOrganizationIdPlansTableGetBillingCycleEnum, organizationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'billingCycle' is not null or undefined
            assertParamExists('apiV1OrganizationsOrganizationIdPlansTableGet', 'billingCycle', billingCycle)
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('apiV1OrganizationsOrganizationIdPlansTableGet', 'organizationId', organizationId)
            const localVarPath = `/api/v1/organizations/{organizationId}/plans/table`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (billingCycle !== undefined) {
                localVarQueryParameter['billingCycle'] = billingCycle;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {ApiV1OrganizationsOrganizationIdSessionTrialPostRequest} apiV1OrganizationsOrganizationIdSessionTrialPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrganizationsOrganizationIdSessionTrialPost: async (organizationId: string, apiV1OrganizationsOrganizationIdSessionTrialPostRequest: ApiV1OrganizationsOrganizationIdSessionTrialPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('apiV1OrganizationsOrganizationIdSessionTrialPost', 'organizationId', organizationId)
            // verify required parameter 'apiV1OrganizationsOrganizationIdSessionTrialPostRequest' is not null or undefined
            assertParamExists('apiV1OrganizationsOrganizationIdSessionTrialPost', 'apiV1OrganizationsOrganizationIdSessionTrialPostRequest', apiV1OrganizationsOrganizationIdSessionTrialPostRequest)
            const localVarPath = `/api/v1/organizations/{organizationId}/session/trial`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1OrganizationsOrganizationIdSessionTrialPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PasswordBackupPrivateKeyGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/password/backup-private-key`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1PasswordBackupPrivateKeyPostRequest} apiV1PasswordBackupPrivateKeyPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PasswordBackupPrivateKeyPost: async (apiV1PasswordBackupPrivateKeyPostRequest: ApiV1PasswordBackupPrivateKeyPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1PasswordBackupPrivateKeyPostRequest' is not null or undefined
            assertParamExists('apiV1PasswordBackupPrivateKeyPost', 'apiV1PasswordBackupPrivateKeyPostRequest', apiV1PasswordBackupPrivateKeyPostRequest)
            const localVarPath = `/api/v1/password/backup-private-key`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1PasswordBackupPrivateKeyPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1PasswordChangePasswordPostRequest} apiV1PasswordChangePasswordPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PasswordChangePasswordPost: async (apiV1PasswordChangePasswordPostRequest: ApiV1PasswordChangePasswordPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1PasswordChangePasswordPostRequest' is not null or undefined
            assertParamExists('apiV1PasswordChangePasswordPost', 'apiV1PasswordChangePasswordPostRequest', apiV1PasswordChangePasswordPostRequest)
            const localVarPath = `/api/v1/password/change-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1PasswordChangePasswordPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1PasswordEmailPasswordResetPostRequest} apiV1PasswordEmailPasswordResetPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PasswordEmailPasswordResetPost: async (apiV1PasswordEmailPasswordResetPostRequest: ApiV1PasswordEmailPasswordResetPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1PasswordEmailPasswordResetPostRequest' is not null or undefined
            assertParamExists('apiV1PasswordEmailPasswordResetPost', 'apiV1PasswordEmailPasswordResetPostRequest', apiV1PasswordEmailPasswordResetPostRequest)
            const localVarPath = `/api/v1/password/email/password-reset`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1PasswordEmailPasswordResetPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1PasswordEmailPasswordResetVerifyPostRequest} apiV1PasswordEmailPasswordResetVerifyPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PasswordEmailPasswordResetVerifyPost: async (apiV1PasswordEmailPasswordResetVerifyPostRequest: ApiV1PasswordEmailPasswordResetVerifyPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1PasswordEmailPasswordResetVerifyPostRequest' is not null or undefined
            assertParamExists('apiV1PasswordEmailPasswordResetVerifyPost', 'apiV1PasswordEmailPasswordResetVerifyPostRequest', apiV1PasswordEmailPasswordResetVerifyPostRequest)
            const localVarPath = `/api/v1/password/email/password-reset-verify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1PasswordEmailPasswordResetVerifyPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1PasswordPasswordResetPostRequest} apiV1PasswordPasswordResetPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PasswordPasswordResetPost: async (apiV1PasswordPasswordResetPostRequest: ApiV1PasswordPasswordResetPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1PasswordPasswordResetPostRequest' is not null or undefined
            assertParamExists('apiV1PasswordPasswordResetPost', 'apiV1PasswordPasswordResetPostRequest', apiV1PasswordPasswordResetPostRequest)
            const localVarPath = `/api/v1/password/password-reset`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1PasswordPasswordResetPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1PasswordSrp1PostRequest} apiV1PasswordSrp1PostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PasswordSrp1Post: async (apiV1PasswordSrp1PostRequest: ApiV1PasswordSrp1PostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1PasswordSrp1PostRequest' is not null or undefined
            assertParamExists('apiV1PasswordSrp1Post', 'apiV1PasswordSrp1PostRequest', apiV1PasswordSrp1PostRequest)
            const localVarPath = `/api/v1/password/srp1`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1PasswordSrp1PostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete PKI alert
         * @param {string} alertId The ID of the alert to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PkiAlertsAlertIdDelete: async (alertId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'alertId' is not null or undefined
            assertParamExists('apiV1PkiAlertsAlertIdDelete', 'alertId', alertId)
            const localVarPath = `/api/v1/pki/alerts/{alertId}`
                .replace(`{${"alertId"}}`, encodeURIComponent(String(alertId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get PKI alert
         * @param {string} alertId The ID of the alert to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PkiAlertsAlertIdGet: async (alertId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'alertId' is not null or undefined
            assertParamExists('apiV1PkiAlertsAlertIdGet', 'alertId', alertId)
            const localVarPath = `/api/v1/pki/alerts/{alertId}`
                .replace(`{${"alertId"}}`, encodeURIComponent(String(alertId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update PKI alert
         * @param {string} alertId The ID of the alert to update
         * @param {ApiV1PkiAlertsAlertIdPatchRequest} [apiV1PkiAlertsAlertIdPatchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PkiAlertsAlertIdPatch: async (alertId: string, apiV1PkiAlertsAlertIdPatchRequest?: ApiV1PkiAlertsAlertIdPatchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'alertId' is not null or undefined
            assertParamExists('apiV1PkiAlertsAlertIdPatch', 'alertId', alertId)
            const localVarPath = `/api/v1/pki/alerts/{alertId}`
                .replace(`{${"alertId"}}`, encodeURIComponent(String(alertId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1PkiAlertsAlertIdPatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create PKI alert
         * @param {ApiV1PkiAlertsPostRequest} apiV1PkiAlertsPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PkiAlertsPost: async (apiV1PkiAlertsPostRequest: ApiV1PkiAlertsPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1PkiAlertsPostRequest' is not null or undefined
            assertParamExists('apiV1PkiAlertsPost', 'apiV1PkiAlertsPostRequest', apiV1PkiAlertsPostRequest)
            const localVarPath = `/api/v1/pki/alerts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1PkiAlertsPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get list of past and current CA certificates for a CA
         * @param {string} caId The ID of the CA to get the CA certificates for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PkiCaCaIdCaCertificatesGet: async (caId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'caId' is not null or undefined
            assertParamExists('apiV1PkiCaCaIdCaCertificatesGet', 'caId', caId)
            const localVarPath = `/api/v1/pki/ca/{caId}/ca-certificates`
                .replace(`{${"caId"}}`, encodeURIComponent(String(caId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get current CA cert and cert chain of a CA
         * @param {string} caId The ID of the CA to get the certificate body and certificate chain from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PkiCaCaIdCertificateGet: async (caId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'caId' is not null or undefined
            assertParamExists('apiV1PkiCaCaIdCertificateGet', 'caId', caId)
            const localVarPath = `/api/v1/pki/ca/{caId}/certificate`
                .replace(`{${"caId"}}`, encodeURIComponent(String(caId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get list of CRLs of the CA
         * @param {string} caId The ID of the CA to get the certificate revocation lists (CRLs) for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PkiCaCaIdCrlsGet: async (caId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'caId' is not null or undefined
            assertParamExists('apiV1PkiCaCaIdCrlsGet', 'caId', caId)
            const localVarPath = `/api/v1/pki/ca/{caId}/crls`
                .replace(`{${"caId"}}`, encodeURIComponent(String(caId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get CA CSR
         * @param {string} caId The ID of the CA to generate CSR from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PkiCaCaIdCsrGet: async (caId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'caId' is not null or undefined
            assertParamExists('apiV1PkiCaCaIdCsrGet', 'caId', caId)
            const localVarPath = `/api/v1/pki/ca/{caId}/csr`
                .replace(`{${"caId"}}`, encodeURIComponent(String(caId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete CA
         * @param {string} caId The ID of the CA to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PkiCaCaIdDelete: async (caId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'caId' is not null or undefined
            assertParamExists('apiV1PkiCaCaIdDelete', 'caId', caId)
            const localVarPath = `/api/v1/pki/ca/{caId}`
                .replace(`{${"caId"}}`, encodeURIComponent(String(caId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get CA
         * @param {string} caId The ID of the CA to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PkiCaCaIdGet: async (caId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'caId' is not null or undefined
            assertParamExists('apiV1PkiCaCaIdGet', 'caId', caId)
            const localVarPath = `/api/v1/pki/ca/{caId}`
                .replace(`{${"caId"}}`, encodeURIComponent(String(caId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Import certificate and chain to CA
         * @param {string} caId The ID of the CA to import the certificate for
         * @param {ApiV1PkiCaCaIdImportCertificatePostRequest} apiV1PkiCaCaIdImportCertificatePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PkiCaCaIdImportCertificatePost: async (caId: string, apiV1PkiCaCaIdImportCertificatePostRequest: ApiV1PkiCaCaIdImportCertificatePostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'caId' is not null or undefined
            assertParamExists('apiV1PkiCaCaIdImportCertificatePost', 'caId', caId)
            // verify required parameter 'apiV1PkiCaCaIdImportCertificatePostRequest' is not null or undefined
            assertParamExists('apiV1PkiCaCaIdImportCertificatePost', 'apiV1PkiCaCaIdImportCertificatePostRequest', apiV1PkiCaCaIdImportCertificatePostRequest)
            const localVarPath = `/api/v1/pki/ca/{caId}/import-certificate`
                .replace(`{${"caId"}}`, encodeURIComponent(String(caId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1PkiCaCaIdImportCertificatePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Issue certificate from CA
         * @param {string} caId The ID of the CA to issue the certificate from
         * @param {ApiV1PkiCaCaIdIssueCertificatePostRequest} apiV1PkiCaCaIdIssueCertificatePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PkiCaCaIdIssueCertificatePost: async (caId: string, apiV1PkiCaCaIdIssueCertificatePostRequest: ApiV1PkiCaCaIdIssueCertificatePostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'caId' is not null or undefined
            assertParamExists('apiV1PkiCaCaIdIssueCertificatePost', 'caId', caId)
            // verify required parameter 'apiV1PkiCaCaIdIssueCertificatePostRequest' is not null or undefined
            assertParamExists('apiV1PkiCaCaIdIssueCertificatePost', 'apiV1PkiCaCaIdIssueCertificatePostRequest', apiV1PkiCaCaIdIssueCertificatePostRequest)
            const localVarPath = `/api/v1/pki/ca/{caId}/issue-certificate`
                .replace(`{${"caId"}}`, encodeURIComponent(String(caId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1PkiCaCaIdIssueCertificatePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update CA
         * @param {string} caId The ID of the CA to update
         * @param {ApiV1PkiCaCaIdPatchRequest} [apiV1PkiCaCaIdPatchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PkiCaCaIdPatch: async (caId: string, apiV1PkiCaCaIdPatchRequest?: ApiV1PkiCaCaIdPatchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'caId' is not null or undefined
            assertParamExists('apiV1PkiCaCaIdPatch', 'caId', caId)
            const localVarPath = `/api/v1/pki/ca/{caId}`
                .replace(`{${"caId"}}`, encodeURIComponent(String(caId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1PkiCaCaIdPatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Perform CA certificate renewal
         * @param {string} caId The ID of the CA to renew the CA certificate for
         * @param {ApiV1PkiCaCaIdRenewPostRequest} apiV1PkiCaCaIdRenewPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PkiCaCaIdRenewPost: async (caId: string, apiV1PkiCaCaIdRenewPostRequest: ApiV1PkiCaCaIdRenewPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'caId' is not null or undefined
            assertParamExists('apiV1PkiCaCaIdRenewPost', 'caId', caId)
            // verify required parameter 'apiV1PkiCaCaIdRenewPostRequest' is not null or undefined
            assertParamExists('apiV1PkiCaCaIdRenewPost', 'apiV1PkiCaCaIdRenewPostRequest', apiV1PkiCaCaIdRenewPostRequest)
            const localVarPath = `/api/v1/pki/ca/{caId}/renew`
                .replace(`{${"caId"}}`, encodeURIComponent(String(caId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1PkiCaCaIdRenewPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sign certificate from CA
         * @param {string} caId The ID of the CA to issue the certificate from
         * @param {ApiV1PkiCaCaIdSignCertificatePostRequest} apiV1PkiCaCaIdSignCertificatePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PkiCaCaIdSignCertificatePost: async (caId: string, apiV1PkiCaCaIdSignCertificatePostRequest: ApiV1PkiCaCaIdSignCertificatePostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'caId' is not null or undefined
            assertParamExists('apiV1PkiCaCaIdSignCertificatePost', 'caId', caId)
            // verify required parameter 'apiV1PkiCaCaIdSignCertificatePostRequest' is not null or undefined
            assertParamExists('apiV1PkiCaCaIdSignCertificatePost', 'apiV1PkiCaCaIdSignCertificatePostRequest', apiV1PkiCaCaIdSignCertificatePostRequest)
            const localVarPath = `/api/v1/pki/ca/{caId}/sign-certificate`
                .replace(`{${"caId"}}`, encodeURIComponent(String(caId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1PkiCaCaIdSignCertificatePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create intermediate CA certificate from parent CA
         * @param {string} caId The ID of the CA to sign the intermediate certificate with
         * @param {ApiV1PkiCaCaIdSignIntermediatePostRequest} apiV1PkiCaCaIdSignIntermediatePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PkiCaCaIdSignIntermediatePost: async (caId: string, apiV1PkiCaCaIdSignIntermediatePostRequest: ApiV1PkiCaCaIdSignIntermediatePostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'caId' is not null or undefined
            assertParamExists('apiV1PkiCaCaIdSignIntermediatePost', 'caId', caId)
            // verify required parameter 'apiV1PkiCaCaIdSignIntermediatePostRequest' is not null or undefined
            assertParamExists('apiV1PkiCaCaIdSignIntermediatePost', 'apiV1PkiCaCaIdSignIntermediatePostRequest', apiV1PkiCaCaIdSignIntermediatePostRequest)
            const localVarPath = `/api/v1/pki/ca/{caId}/sign-intermediate`
                .replace(`{${"caId"}}`, encodeURIComponent(String(caId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1PkiCaCaIdSignIntermediatePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create CA
         * @param {ApiV1PkiCaPostRequest} apiV1PkiCaPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PkiCaPost: async (apiV1PkiCaPostRequest: ApiV1PkiCaPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1PkiCaPostRequest' is not null or undefined
            assertParamExists('apiV1PkiCaPost', 'apiV1PkiCaPostRequest', apiV1PkiCaPostRequest)
            const localVarPath = `/api/v1/pki/ca`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1PkiCaPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} certificateTemplateId The ID of the certificate template to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PkiCertificateTemplatesCertificateTemplateIdDelete: async (certificateTemplateId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'certificateTemplateId' is not null or undefined
            assertParamExists('apiV1PkiCertificateTemplatesCertificateTemplateIdDelete', 'certificateTemplateId', certificateTemplateId)
            const localVarPath = `/api/v1/pki/certificate-templates/{certificateTemplateId}`
                .replace(`{${"certificateTemplateId"}}`, encodeURIComponent(String(certificateTemplateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Certificate Template EST configuration
         * @param {string} certificateTemplateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigGet: async (certificateTemplateId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'certificateTemplateId' is not null or undefined
            assertParamExists('apiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigGet', 'certificateTemplateId', certificateTemplateId)
            const localVarPath = `/api/v1/pki/certificate-templates/{certificateTemplateId}/est-config`
                .replace(`{${"certificateTemplateId"}}`, encodeURIComponent(String(certificateTemplateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update Certificate Template EST configuration
         * @param {string} certificateTemplateId 
         * @param {ApiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPatchRequest} [apiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPatchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPatch: async (certificateTemplateId: string, apiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPatchRequest?: ApiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPatchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'certificateTemplateId' is not null or undefined
            assertParamExists('apiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPatch', 'certificateTemplateId', certificateTemplateId)
            const localVarPath = `/api/v1/pki/certificate-templates/{certificateTemplateId}/est-config`
                .replace(`{${"certificateTemplateId"}}`, encodeURIComponent(String(certificateTemplateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create Certificate Template EST configuration
         * @param {string} certificateTemplateId 
         * @param {ApiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPostRequest} apiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPost: async (certificateTemplateId: string, apiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPostRequest: ApiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'certificateTemplateId' is not null or undefined
            assertParamExists('apiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPost', 'certificateTemplateId', certificateTemplateId)
            // verify required parameter 'apiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPostRequest' is not null or undefined
            assertParamExists('apiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPost', 'apiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPostRequest', apiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPostRequest)
            const localVarPath = `/api/v1/pki/certificate-templates/{certificateTemplateId}/est-config`
                .replace(`{${"certificateTemplateId"}}`, encodeURIComponent(String(certificateTemplateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} certificateTemplateId The ID of the certificate template to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PkiCertificateTemplatesCertificateTemplateIdGet: async (certificateTemplateId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'certificateTemplateId' is not null or undefined
            assertParamExists('apiV1PkiCertificateTemplatesCertificateTemplateIdGet', 'certificateTemplateId', certificateTemplateId)
            const localVarPath = `/api/v1/pki/certificate-templates/{certificateTemplateId}`
                .replace(`{${"certificateTemplateId"}}`, encodeURIComponent(String(certificateTemplateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} certificateTemplateId The ID of the certificate template to update
         * @param {ApiV1PkiCertificateTemplatesCertificateTemplateIdPatchRequest} [apiV1PkiCertificateTemplatesCertificateTemplateIdPatchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PkiCertificateTemplatesCertificateTemplateIdPatch: async (certificateTemplateId: string, apiV1PkiCertificateTemplatesCertificateTemplateIdPatchRequest?: ApiV1PkiCertificateTemplatesCertificateTemplateIdPatchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'certificateTemplateId' is not null or undefined
            assertParamExists('apiV1PkiCertificateTemplatesCertificateTemplateIdPatch', 'certificateTemplateId', certificateTemplateId)
            const localVarPath = `/api/v1/pki/certificate-templates/{certificateTemplateId}`
                .replace(`{${"certificateTemplateId"}}`, encodeURIComponent(String(certificateTemplateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1PkiCertificateTemplatesCertificateTemplateIdPatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1PkiCertificateTemplatesPostRequest} apiV1PkiCertificateTemplatesPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PkiCertificateTemplatesPost: async (apiV1PkiCertificateTemplatesPostRequest: ApiV1PkiCertificateTemplatesPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1PkiCertificateTemplatesPostRequest' is not null or undefined
            assertParamExists('apiV1PkiCertificateTemplatesPost', 'apiV1PkiCertificateTemplatesPostRequest', apiV1PkiCertificateTemplatesPostRequest)
            const localVarPath = `/api/v1/pki/certificate-templates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1PkiCertificateTemplatesPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Issue certificate
         * @param {ApiV1PkiCertificatesIssueCertificatePostRequest} apiV1PkiCertificatesIssueCertificatePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PkiCertificatesIssueCertificatePost: async (apiV1PkiCertificatesIssueCertificatePostRequest: ApiV1PkiCertificatesIssueCertificatePostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1PkiCertificatesIssueCertificatePostRequest' is not null or undefined
            assertParamExists('apiV1PkiCertificatesIssueCertificatePost', 'apiV1PkiCertificatesIssueCertificatePostRequest', apiV1PkiCertificatesIssueCertificatePostRequest)
            const localVarPath = `/api/v1/pki/certificates/issue-certificate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1PkiCertificatesIssueCertificatePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get certificate body of certificate
         * @param {string} serialNumber The serial number of the certificate to get the certificate body and certificate chain for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PkiCertificatesSerialNumberCertificateGet: async (serialNumber: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'serialNumber' is not null or undefined
            assertParamExists('apiV1PkiCertificatesSerialNumberCertificateGet', 'serialNumber', serialNumber)
            const localVarPath = `/api/v1/pki/certificates/{serialNumber}/certificate`
                .replace(`{${"serialNumber"}}`, encodeURIComponent(String(serialNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete certificate
         * @param {string} serialNumber The serial number of the certificate to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PkiCertificatesSerialNumberDelete: async (serialNumber: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'serialNumber' is not null or undefined
            assertParamExists('apiV1PkiCertificatesSerialNumberDelete', 'serialNumber', serialNumber)
            const localVarPath = `/api/v1/pki/certificates/{serialNumber}`
                .replace(`{${"serialNumber"}}`, encodeURIComponent(String(serialNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get certificate
         * @param {string} serialNumber The serial number of the certificate to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PkiCertificatesSerialNumberGet: async (serialNumber: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'serialNumber' is not null or undefined
            assertParamExists('apiV1PkiCertificatesSerialNumberGet', 'serialNumber', serialNumber)
            const localVarPath = `/api/v1/pki/certificates/{serialNumber}`
                .replace(`{${"serialNumber"}}`, encodeURIComponent(String(serialNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Revoke
         * @param {string} serialNumber The serial number of the certificate to revoke. The revoked certificate will be added to the certificate revocation list (CRL) of the CA.
         * @param {ApiV1PkiCertificatesSerialNumberRevokePostRequest} apiV1PkiCertificatesSerialNumberRevokePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PkiCertificatesSerialNumberRevokePost: async (serialNumber: string, apiV1PkiCertificatesSerialNumberRevokePostRequest: ApiV1PkiCertificatesSerialNumberRevokePostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'serialNumber' is not null or undefined
            assertParamExists('apiV1PkiCertificatesSerialNumberRevokePost', 'serialNumber', serialNumber)
            // verify required parameter 'apiV1PkiCertificatesSerialNumberRevokePostRequest' is not null or undefined
            assertParamExists('apiV1PkiCertificatesSerialNumberRevokePost', 'apiV1PkiCertificatesSerialNumberRevokePostRequest', apiV1PkiCertificatesSerialNumberRevokePostRequest)
            const localVarPath = `/api/v1/pki/certificates/{serialNumber}/revoke`
                .replace(`{${"serialNumber"}}`, encodeURIComponent(String(serialNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1PkiCertificatesSerialNumberRevokePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sign certificate
         * @param {ApiV1PkiCertificatesSignCertificatePostRequest} apiV1PkiCertificatesSignCertificatePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PkiCertificatesSignCertificatePost: async (apiV1PkiCertificatesSignCertificatePostRequest: ApiV1PkiCertificatesSignCertificatePostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1PkiCertificatesSignCertificatePostRequest' is not null or undefined
            assertParamExists('apiV1PkiCertificatesSignCertificatePost', 'apiV1PkiCertificatesSignCertificatePostRequest', apiV1PkiCertificatesSignCertificatePostRequest)
            const localVarPath = `/api/v1/pki/certificates/sign-certificate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1PkiCertificatesSignCertificatePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete PKI collection
         * @param {string} collectionId The ID of the PKI collection to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PkiCollectionsCollectionIdDelete: async (collectionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('apiV1PkiCollectionsCollectionIdDelete', 'collectionId', collectionId)
            const localVarPath = `/api/v1/pki/collections/{collectionId}`
                .replace(`{${"collectionId"}}`, encodeURIComponent(String(collectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get PKI collection
         * @param {string} collectionId The ID of the PKI collection to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PkiCollectionsCollectionIdGet: async (collectionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('apiV1PkiCollectionsCollectionIdGet', 'collectionId', collectionId)
            const localVarPath = `/api/v1/pki/collections/{collectionId}`
                .replace(`{${"collectionId"}}`, encodeURIComponent(String(collectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove item from PKI collection
         * @param {string} collectionId The ID of the PKI collection to delete the item from
         * @param {string} collectionItemId The ID of the PKI collection item to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PkiCollectionsCollectionIdItemsCollectionItemIdDelete: async (collectionId: string, collectionItemId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('apiV1PkiCollectionsCollectionIdItemsCollectionItemIdDelete', 'collectionId', collectionId)
            // verify required parameter 'collectionItemId' is not null or undefined
            assertParamExists('apiV1PkiCollectionsCollectionIdItemsCollectionItemIdDelete', 'collectionItemId', collectionItemId)
            const localVarPath = `/api/v1/pki/collections/{collectionId}/items/{collectionItemId}`
                .replace(`{${"collectionId"}}`, encodeURIComponent(String(collectionId)))
                .replace(`{${"collectionItemId"}}`, encodeURIComponent(String(collectionItemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get items in PKI collection
         * @param {string} collectionId The ID of the PKI collection to list items from
         * @param {ApiV1PkiCollectionsCollectionIdItemsGetTypeEnum} [type] The type of the PKI collection item to list
         * @param {number} [offset] The offset to start from
         * @param {number} [limit] The number of items to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PkiCollectionsCollectionIdItemsGet: async (collectionId: string, type?: ApiV1PkiCollectionsCollectionIdItemsGetTypeEnum, offset?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('apiV1PkiCollectionsCollectionIdItemsGet', 'collectionId', collectionId)
            const localVarPath = `/api/v1/pki/collections/{collectionId}/items`
                .replace(`{${"collectionId"}}`, encodeURIComponent(String(collectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add item to PKI collection
         * @param {string} collectionId The ID of the PKI collection to add the item to
         * @param {ApiV1PkiCollectionsCollectionIdItemsPostRequest} apiV1PkiCollectionsCollectionIdItemsPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PkiCollectionsCollectionIdItemsPost: async (collectionId: string, apiV1PkiCollectionsCollectionIdItemsPostRequest: ApiV1PkiCollectionsCollectionIdItemsPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('apiV1PkiCollectionsCollectionIdItemsPost', 'collectionId', collectionId)
            // verify required parameter 'apiV1PkiCollectionsCollectionIdItemsPostRequest' is not null or undefined
            assertParamExists('apiV1PkiCollectionsCollectionIdItemsPost', 'apiV1PkiCollectionsCollectionIdItemsPostRequest', apiV1PkiCollectionsCollectionIdItemsPostRequest)
            const localVarPath = `/api/v1/pki/collections/{collectionId}/items`
                .replace(`{${"collectionId"}}`, encodeURIComponent(String(collectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1PkiCollectionsCollectionIdItemsPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update PKI collection
         * @param {string} collectionId The ID of the PKI collection to update
         * @param {ApiV1PkiCollectionsCollectionIdPatchRequest} [apiV1PkiCollectionsCollectionIdPatchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PkiCollectionsCollectionIdPatch: async (collectionId: string, apiV1PkiCollectionsCollectionIdPatchRequest?: ApiV1PkiCollectionsCollectionIdPatchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('apiV1PkiCollectionsCollectionIdPatch', 'collectionId', collectionId)
            const localVarPath = `/api/v1/pki/collections/{collectionId}`
                .replace(`{${"collectionId"}}`, encodeURIComponent(String(collectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1PkiCollectionsCollectionIdPatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create PKI collection
         * @param {ApiV1PkiCollectionsPostRequest} apiV1PkiCollectionsPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PkiCollectionsPost: async (apiV1PkiCollectionsPostRequest: ApiV1PkiCollectionsPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1PkiCollectionsPostRequest' is not null or undefined
            assertParamExists('apiV1PkiCollectionsPost', 'apiV1PkiCollectionsPostRequest', apiV1PkiCollectionsPostRequest)
            const localVarPath = `/api/v1/pki/collections`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1PkiCollectionsPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get CRL in DER format
         * @param {string} crlId The ID of the certificate revocation list (CRL) to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PkiCrlCrlIdGet: async (crlId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'crlId' is not null or undefined
            assertParamExists('apiV1PkiCrlCrlIdGet', 'crlId', crlId)
            const localVarPath = `/api/v1/pki/crl/{crlId}`
                .replace(`{${"crlId"}}`, encodeURIComponent(String(crlId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1RateLimitGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/rate-limit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1RateLimitPutRequest} apiV1RateLimitPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1RateLimitPut: async (apiV1RateLimitPutRequest: ApiV1RateLimitPutRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1RateLimitPutRequest' is not null or undefined
            assertParamExists('apiV1RateLimitPut', 'apiV1RateLimitPutRequest', apiV1RateLimitPutRequest)
            const localVarPath = `/api/v1/rate-limit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1RateLimitPutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [startIndex] 
         * @param {number} [count] 
         * @param {string} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ScimGroupsGet: async (startIndex?: number, count?: number, filter?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/scim/Groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startIndex !== undefined) {
                localVarQueryParameter['startIndex'] = startIndex;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} groupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ScimGroupsGroupIdDelete: async (groupId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('apiV1ScimGroupsGroupIdDelete', 'groupId', groupId)
            const localVarPath = `/api/v1/scim/Groups/{groupId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} groupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ScimGroupsGroupIdGet: async (groupId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('apiV1ScimGroupsGroupIdGet', 'groupId', groupId)
            const localVarPath = `/api/v1/scim/Groups/{groupId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} groupId 
         * @param {ApiV1ScimGroupsGroupIdPatchRequest} apiV1ScimGroupsGroupIdPatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ScimGroupsGroupIdPatch: async (groupId: string, apiV1ScimGroupsGroupIdPatchRequest: ApiV1ScimGroupsGroupIdPatchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('apiV1ScimGroupsGroupIdPatch', 'groupId', groupId)
            // verify required parameter 'apiV1ScimGroupsGroupIdPatchRequest' is not null or undefined
            assertParamExists('apiV1ScimGroupsGroupIdPatch', 'apiV1ScimGroupsGroupIdPatchRequest', apiV1ScimGroupsGroupIdPatchRequest)
            const localVarPath = `/api/v1/scim/Groups/{groupId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1ScimGroupsGroupIdPatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} groupId 
         * @param {ApiV1ScimGroupsGroupIdPutRequest} apiV1ScimGroupsGroupIdPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ScimGroupsGroupIdPut: async (groupId: string, apiV1ScimGroupsGroupIdPutRequest: ApiV1ScimGroupsGroupIdPutRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('apiV1ScimGroupsGroupIdPut', 'groupId', groupId)
            // verify required parameter 'apiV1ScimGroupsGroupIdPutRequest' is not null or undefined
            assertParamExists('apiV1ScimGroupsGroupIdPut', 'apiV1ScimGroupsGroupIdPutRequest', apiV1ScimGroupsGroupIdPutRequest)
            const localVarPath = `/api/v1/scim/Groups/{groupId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1ScimGroupsGroupIdPutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1ScimGroupsPostRequest} apiV1ScimGroupsPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ScimGroupsPost: async (apiV1ScimGroupsPostRequest: ApiV1ScimGroupsPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1ScimGroupsPostRequest' is not null or undefined
            assertParamExists('apiV1ScimGroupsPost', 'apiV1ScimGroupsPostRequest', apiV1ScimGroupsPostRequest)
            const localVarPath = `/api/v1/scim/Groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1ScimGroupsPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ScimScimTokensGet: async (organizationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('apiV1ScimScimTokensGet', 'organizationId', organizationId)
            const localVarPath = `/api/v1/scim/scim-tokens`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (organizationId !== undefined) {
                localVarQueryParameter['organizationId'] = organizationId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1ScimScimTokensPostRequest} apiV1ScimScimTokensPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ScimScimTokensPost: async (apiV1ScimScimTokensPostRequest: ApiV1ScimScimTokensPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1ScimScimTokensPostRequest' is not null or undefined
            assertParamExists('apiV1ScimScimTokensPost', 'apiV1ScimScimTokensPostRequest', apiV1ScimScimTokensPostRequest)
            const localVarPath = `/api/v1/scim/scim-tokens`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1ScimScimTokensPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} scimTokenId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ScimScimTokensScimTokenIdDelete: async (scimTokenId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scimTokenId' is not null or undefined
            assertParamExists('apiV1ScimScimTokensScimTokenIdDelete', 'scimTokenId', scimTokenId)
            const localVarPath = `/api/v1/scim/scim-tokens/{scimTokenId}`
                .replace(`{${"scimTokenId"}}`, encodeURIComponent(String(scimTokenId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [startIndex] 
         * @param {number} [count] 
         * @param {string} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ScimUsersGet: async (startIndex?: number, count?: number, filter?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/scim/Users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startIndex !== undefined) {
                localVarQueryParameter['startIndex'] = startIndex;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} orgMembershipId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ScimUsersOrgMembershipIdDelete: async (orgMembershipId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgMembershipId' is not null or undefined
            assertParamExists('apiV1ScimUsersOrgMembershipIdDelete', 'orgMembershipId', orgMembershipId)
            const localVarPath = `/api/v1/scim/Users/{orgMembershipId}`
                .replace(`{${"orgMembershipId"}}`, encodeURIComponent(String(orgMembershipId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} orgMembershipId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ScimUsersOrgMembershipIdGet: async (orgMembershipId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgMembershipId' is not null or undefined
            assertParamExists('apiV1ScimUsersOrgMembershipIdGet', 'orgMembershipId', orgMembershipId)
            const localVarPath = `/api/v1/scim/Users/{orgMembershipId}`
                .replace(`{${"orgMembershipId"}}`, encodeURIComponent(String(orgMembershipId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} orgMembershipId 
         * @param {ApiV1ScimUsersOrgMembershipIdPutRequest} apiV1ScimUsersOrgMembershipIdPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ScimUsersOrgMembershipIdPut: async (orgMembershipId: string, apiV1ScimUsersOrgMembershipIdPutRequest: ApiV1ScimUsersOrgMembershipIdPutRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgMembershipId' is not null or undefined
            assertParamExists('apiV1ScimUsersOrgMembershipIdPut', 'orgMembershipId', orgMembershipId)
            // verify required parameter 'apiV1ScimUsersOrgMembershipIdPutRequest' is not null or undefined
            assertParamExists('apiV1ScimUsersOrgMembershipIdPut', 'apiV1ScimUsersOrgMembershipIdPutRequest', apiV1ScimUsersOrgMembershipIdPutRequest)
            const localVarPath = `/api/v1/scim/Users/{orgMembershipId}`
                .replace(`{${"orgMembershipId"}}`, encodeURIComponent(String(orgMembershipId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1ScimUsersOrgMembershipIdPutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1ScimUsersPostRequest} apiV1ScimUsersPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ScimUsersPost: async (apiV1ScimUsersPostRequest: ApiV1ScimUsersPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1ScimUsersPostRequest' is not null or undefined
            assertParamExists('apiV1ScimUsersPost', 'apiV1ScimUsersPostRequest', apiV1ScimUsersPostRequest)
            const localVarPath = `/api/v1/scim/Users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1ScimUsersPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SecretApprovalRequestsCountGet: async (workspaceId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('apiV1SecretApprovalRequestsCountGet', 'workspaceId', workspaceId)
            const localVarPath = `/api/v1/secret-approval-requests/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (workspaceId !== undefined) {
                localVarQueryParameter['workspaceId'] = workspaceId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {string} [environment] 
         * @param {string} [committer] 
         * @param {ApiV1SecretApprovalRequestsGetStatusEnum} [status] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SecretApprovalRequestsGet: async (workspaceId: string, environment?: string, committer?: string, status?: ApiV1SecretApprovalRequestsGetStatusEnum, limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('apiV1SecretApprovalRequestsGet', 'workspaceId', workspaceId)
            const localVarPath = `/api/v1/secret-approval-requests`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (workspaceId !== undefined) {
                localVarQueryParameter['workspaceId'] = workspaceId;
            }

            if (environment !== undefined) {
                localVarQueryParameter['environment'] = environment;
            }

            if (committer !== undefined) {
                localVarQueryParameter['committer'] = committer;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SecretApprovalRequestsIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1SecretApprovalRequestsIdGet', 'id', id)
            const localVarPath = `/api/v1/secret-approval-requests/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {ApiV1SecretApprovalRequestsIdMergePostRequest} [apiV1SecretApprovalRequestsIdMergePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SecretApprovalRequestsIdMergePost: async (id: string, apiV1SecretApprovalRequestsIdMergePostRequest?: ApiV1SecretApprovalRequestsIdMergePostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1SecretApprovalRequestsIdMergePost', 'id', id)
            const localVarPath = `/api/v1/secret-approval-requests/{id}/merge`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1SecretApprovalRequestsIdMergePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {ApiV1SecretApprovalRequestsIdReviewPostRequest} apiV1SecretApprovalRequestsIdReviewPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SecretApprovalRequestsIdReviewPost: async (id: string, apiV1SecretApprovalRequestsIdReviewPostRequest: ApiV1SecretApprovalRequestsIdReviewPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1SecretApprovalRequestsIdReviewPost', 'id', id)
            // verify required parameter 'apiV1SecretApprovalRequestsIdReviewPostRequest' is not null or undefined
            assertParamExists('apiV1SecretApprovalRequestsIdReviewPost', 'apiV1SecretApprovalRequestsIdReviewPostRequest', apiV1SecretApprovalRequestsIdReviewPostRequest)
            const localVarPath = `/api/v1/secret-approval-requests/{id}/review`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1SecretApprovalRequestsIdReviewPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {ApiV1SecretApprovalRequestsIdStatusPostRequest} apiV1SecretApprovalRequestsIdStatusPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SecretApprovalRequestsIdStatusPost: async (id: string, apiV1SecretApprovalRequestsIdStatusPostRequest: ApiV1SecretApprovalRequestsIdStatusPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1SecretApprovalRequestsIdStatusPost', 'id', id)
            // verify required parameter 'apiV1SecretApprovalRequestsIdStatusPostRequest' is not null or undefined
            assertParamExists('apiV1SecretApprovalRequestsIdStatusPost', 'apiV1SecretApprovalRequestsIdStatusPostRequest', apiV1SecretApprovalRequestsIdStatusPostRequest)
            const localVarPath = `/api/v1/secret-approval-requests/{id}/status`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1SecretApprovalRequestsIdStatusPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {string} environment 
         * @param {string} secretPath 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SecretApprovalsBoardGet: async (workspaceId: string, environment: string, secretPath: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('apiV1SecretApprovalsBoardGet', 'workspaceId', workspaceId)
            // verify required parameter 'environment' is not null or undefined
            assertParamExists('apiV1SecretApprovalsBoardGet', 'environment', environment)
            // verify required parameter 'secretPath' is not null or undefined
            assertParamExists('apiV1SecretApprovalsBoardGet', 'secretPath', secretPath)
            const localVarPath = `/api/v1/secret-approvals/board`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (workspaceId !== undefined) {
                localVarQueryParameter['workspaceId'] = workspaceId;
            }

            if (environment !== undefined) {
                localVarQueryParameter['environment'] = environment;
            }

            if (secretPath !== undefined) {
                localVarQueryParameter['secretPath'] = secretPath;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SecretApprovalsGet: async (workspaceId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('apiV1SecretApprovalsGet', 'workspaceId', workspaceId)
            const localVarPath = `/api/v1/secret-approvals`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (workspaceId !== undefined) {
                localVarQueryParameter['workspaceId'] = workspaceId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1SecretApprovalsPostRequest} apiV1SecretApprovalsPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SecretApprovalsPost: async (apiV1SecretApprovalsPostRequest: ApiV1SecretApprovalsPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1SecretApprovalsPostRequest' is not null or undefined
            assertParamExists('apiV1SecretApprovalsPost', 'apiV1SecretApprovalsPostRequest', apiV1SecretApprovalsPostRequest)
            const localVarPath = `/api/v1/secret-approvals`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1SecretApprovalsPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} sapId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SecretApprovalsSapIdDelete: async (sapId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sapId' is not null or undefined
            assertParamExists('apiV1SecretApprovalsSapIdDelete', 'sapId', sapId)
            const localVarPath = `/api/v1/secret-approvals/{sapId}`
                .replace(`{${"sapId"}}`, encodeURIComponent(String(sapId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} sapId 
         * @param {ApiV1SecretApprovalsSapIdPatchRequest} apiV1SecretApprovalsSapIdPatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SecretApprovalsSapIdPatch: async (sapId: string, apiV1SecretApprovalsSapIdPatchRequest: ApiV1SecretApprovalsSapIdPatchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sapId' is not null or undefined
            assertParamExists('apiV1SecretApprovalsSapIdPatch', 'sapId', sapId)
            // verify required parameter 'apiV1SecretApprovalsSapIdPatchRequest' is not null or undefined
            assertParamExists('apiV1SecretApprovalsSapIdPatch', 'apiV1SecretApprovalsSapIdPatchRequest', apiV1SecretApprovalsSapIdPatchRequest)
            const localVarPath = `/api/v1/secret-approvals/{sapId}`
                .replace(`{${"sapId"}}`, encodeURIComponent(String(sapId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1SecretApprovalsSapIdPatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get secret imports
         * @param {string} workspaceId The ID of the project to list secret imports from.
         * @param {string} environment The slug of the environment to list secret imports from.
         * @param {string} [path] The path to list secret imports from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SecretImportsGet: async (workspaceId: string, environment: string, path?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('apiV1SecretImportsGet', 'workspaceId', workspaceId)
            // verify required parameter 'environment' is not null or undefined
            assertParamExists('apiV1SecretImportsGet', 'environment', environment)
            const localVarPath = `/api/v1/secret-imports`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (workspaceId !== undefined) {
                localVarQueryParameter['workspaceId'] = workspaceId;
            }

            if (environment !== undefined) {
                localVarQueryParameter['environment'] = environment;
            }

            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create secret imports
         * @param {ApiV1SecretImportsPostRequest} apiV1SecretImportsPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SecretImportsPost: async (apiV1SecretImportsPostRequest: ApiV1SecretImportsPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1SecretImportsPostRequest' is not null or undefined
            assertParamExists('apiV1SecretImportsPost', 'apiV1SecretImportsPostRequest', apiV1SecretImportsPostRequest)
            const localVarPath = `/api/v1/secret-imports`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1SecretImportsPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete secret imports
         * @param {string} secretImportId The ID of the secret import to delete.
         * @param {ApiV1SecretImportsSecretImportIdDeleteRequest} apiV1SecretImportsSecretImportIdDeleteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SecretImportsSecretImportIdDelete: async (secretImportId: string, apiV1SecretImportsSecretImportIdDeleteRequest: ApiV1SecretImportsSecretImportIdDeleteRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'secretImportId' is not null or undefined
            assertParamExists('apiV1SecretImportsSecretImportIdDelete', 'secretImportId', secretImportId)
            // verify required parameter 'apiV1SecretImportsSecretImportIdDeleteRequest' is not null or undefined
            assertParamExists('apiV1SecretImportsSecretImportIdDelete', 'apiV1SecretImportsSecretImportIdDeleteRequest', apiV1SecretImportsSecretImportIdDeleteRequest)
            const localVarPath = `/api/v1/secret-imports/{secretImportId}`
                .replace(`{${"secretImportId"}}`, encodeURIComponent(String(secretImportId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1SecretImportsSecretImportIdDeleteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update secret imports
         * @param {string} secretImportId The ID of the secret import to update.
         * @param {ApiV1SecretImportsSecretImportIdPatchRequest} apiV1SecretImportsSecretImportIdPatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SecretImportsSecretImportIdPatch: async (secretImportId: string, apiV1SecretImportsSecretImportIdPatchRequest: ApiV1SecretImportsSecretImportIdPatchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'secretImportId' is not null or undefined
            assertParamExists('apiV1SecretImportsSecretImportIdPatch', 'secretImportId', secretImportId)
            // verify required parameter 'apiV1SecretImportsSecretImportIdPatchRequest' is not null or undefined
            assertParamExists('apiV1SecretImportsSecretImportIdPatch', 'apiV1SecretImportsSecretImportIdPatchRequest', apiV1SecretImportsSecretImportIdPatchRequest)
            const localVarPath = `/api/v1/secret-imports/{secretImportId}`
                .replace(`{${"secretImportId"}}`, encodeURIComponent(String(secretImportId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1SecretImportsSecretImportIdPatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Resync secret replication of secret imports
         * @param {string} secretImportId The ID of the secret import to update.
         * @param {ApiV1SecretImportsSecretImportIdReplicationResyncPostRequest} apiV1SecretImportsSecretImportIdReplicationResyncPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SecretImportsSecretImportIdReplicationResyncPost: async (secretImportId: string, apiV1SecretImportsSecretImportIdReplicationResyncPostRequest: ApiV1SecretImportsSecretImportIdReplicationResyncPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'secretImportId' is not null or undefined
            assertParamExists('apiV1SecretImportsSecretImportIdReplicationResyncPost', 'secretImportId', secretImportId)
            // verify required parameter 'apiV1SecretImportsSecretImportIdReplicationResyncPostRequest' is not null or undefined
            assertParamExists('apiV1SecretImportsSecretImportIdReplicationResyncPost', 'apiV1SecretImportsSecretImportIdReplicationResyncPostRequest', apiV1SecretImportsSecretImportIdReplicationResyncPostRequest)
            const localVarPath = `/api/v1/secret-imports/{secretImportId}/replication-resync`
                .replace(`{${"secretImportId"}}`, encodeURIComponent(String(secretImportId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1SecretImportsSecretImportIdReplicationResyncPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {string} environment 
         * @param {string} [path] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SecretImportsSecretsGet: async (workspaceId: string, environment: string, path?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('apiV1SecretImportsSecretsGet', 'workspaceId', workspaceId)
            // verify required parameter 'environment' is not null or undefined
            assertParamExists('apiV1SecretImportsSecretsGet', 'environment', environment)
            const localVarPath = `/api/v1/secret-imports/secrets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (workspaceId !== undefined) {
                localVarQueryParameter['workspaceId'] = workspaceId;
            }

            if (environment !== undefined) {
                localVarQueryParameter['environment'] = environment;
            }

            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {string} environment 
         * @param {string} [path] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SecretImportsSecretsRawGet: async (workspaceId: string, environment: string, path?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('apiV1SecretImportsSecretsRawGet', 'workspaceId', workspaceId)
            // verify required parameter 'environment' is not null or undefined
            assertParamExists('apiV1SecretImportsSecretsRawGet', 'environment', environment)
            const localVarPath = `/api/v1/secret-imports/secrets/raw`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (workspaceId !== undefined) {
                localVarQueryParameter['workspaceId'] = workspaceId;
            }

            if (environment !== undefined) {
                localVarQueryParameter['environment'] = environment;
            }

            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SecretRotationProvidersWorkspaceIdGet: async (workspaceId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('apiV1SecretRotationProvidersWorkspaceIdGet', 'workspaceId', workspaceId)
            const localVarPath = `/api/v1/secret-rotation-providers/{workspaceId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SecretRotationsGet: async (workspaceId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('apiV1SecretRotationsGet', 'workspaceId', workspaceId)
            const localVarPath = `/api/v1/secret-rotations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (workspaceId !== undefined) {
                localVarQueryParameter['workspaceId'] = workspaceId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SecretRotationsIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1SecretRotationsIdDelete', 'id', id)
            const localVarPath = `/api/v1/secret-rotations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1SecretRotationsPostRequest} apiV1SecretRotationsPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SecretRotationsPost: async (apiV1SecretRotationsPostRequest: ApiV1SecretRotationsPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1SecretRotationsPostRequest' is not null or undefined
            assertParamExists('apiV1SecretRotationsPost', 'apiV1SecretRotationsPostRequest', apiV1SecretRotationsPostRequest)
            const localVarPath = `/api/v1/secret-rotations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1SecretRotationsPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1SecretRotationsRestartPostRequest} apiV1SecretRotationsRestartPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SecretRotationsRestartPost: async (apiV1SecretRotationsRestartPostRequest: ApiV1SecretRotationsRestartPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1SecretRotationsRestartPostRequest' is not null or undefined
            assertParamExists('apiV1SecretRotationsRestartPost', 'apiV1SecretRotationsRestartPostRequest', apiV1SecretRotationsRestartPostRequest)
            const localVarPath = `/api/v1/secret-rotations/restart`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1SecretRotationsRestartPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1SecretScanningCreateInstallationSessionOrganizationPostRequest} apiV1SecretScanningCreateInstallationSessionOrganizationPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SecretScanningCreateInstallationSessionOrganizationPost: async (apiV1SecretScanningCreateInstallationSessionOrganizationPostRequest: ApiV1SecretScanningCreateInstallationSessionOrganizationPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1SecretScanningCreateInstallationSessionOrganizationPostRequest' is not null or undefined
            assertParamExists('apiV1SecretScanningCreateInstallationSessionOrganizationPost', 'apiV1SecretScanningCreateInstallationSessionOrganizationPostRequest', apiV1SecretScanningCreateInstallationSessionOrganizationPostRequest)
            const localVarPath = `/api/v1/secret-scanning/create-installation-session/organization`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1SecretScanningCreateInstallationSessionOrganizationPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SecretScanningInstallationStatusOrganizationOrganizationIdGet: async (organizationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('apiV1SecretScanningInstallationStatusOrganizationOrganizationIdGet', 'organizationId', organizationId)
            const localVarPath = `/api/v1/secret-scanning/installation-status/organization/{organizationId}`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1SecretScanningLinkInstallationPostRequest} apiV1SecretScanningLinkInstallationPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SecretScanningLinkInstallationPost: async (apiV1SecretScanningLinkInstallationPostRequest: ApiV1SecretScanningLinkInstallationPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1SecretScanningLinkInstallationPostRequest' is not null or undefined
            assertParamExists('apiV1SecretScanningLinkInstallationPost', 'apiV1SecretScanningLinkInstallationPostRequest', apiV1SecretScanningLinkInstallationPostRequest)
            const localVarPath = `/api/v1/secret-scanning/link-installation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1SecretScanningLinkInstallationPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SecretScanningOrganizationOrganizationIdRisksGet: async (organizationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('apiV1SecretScanningOrganizationOrganizationIdRisksGet', 'organizationId', organizationId)
            const localVarPath = `/api/v1/secret-scanning/organization/{organizationId}/risks`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {string} riskId 
         * @param {ApiV1SecretScanningOrganizationOrganizationIdRisksRiskIdStatusPostRequest} apiV1SecretScanningOrganizationOrganizationIdRisksRiskIdStatusPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SecretScanningOrganizationOrganizationIdRisksRiskIdStatusPost: async (organizationId: string, riskId: string, apiV1SecretScanningOrganizationOrganizationIdRisksRiskIdStatusPostRequest: ApiV1SecretScanningOrganizationOrganizationIdRisksRiskIdStatusPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('apiV1SecretScanningOrganizationOrganizationIdRisksRiskIdStatusPost', 'organizationId', organizationId)
            // verify required parameter 'riskId' is not null or undefined
            assertParamExists('apiV1SecretScanningOrganizationOrganizationIdRisksRiskIdStatusPost', 'riskId', riskId)
            // verify required parameter 'apiV1SecretScanningOrganizationOrganizationIdRisksRiskIdStatusPostRequest' is not null or undefined
            assertParamExists('apiV1SecretScanningOrganizationOrganizationIdRisksRiskIdStatusPost', 'apiV1SecretScanningOrganizationOrganizationIdRisksRiskIdStatusPostRequest', apiV1SecretScanningOrganizationOrganizationIdRisksRiskIdStatusPostRequest)
            const localVarPath = `/api/v1/secret-scanning/organization/{organizationId}/risks/{riskId}/status`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)))
                .replace(`{${"riskId"}}`, encodeURIComponent(String(riskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1SecretScanningOrganizationOrganizationIdRisksRiskIdStatusPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} offset 
         * @param {number} limit 
         * @param {string} secretId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SecretSecretIdSecretVersionsGet: async (offset: number, limit: number, secretId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'offset' is not null or undefined
            assertParamExists('apiV1SecretSecretIdSecretVersionsGet', 'offset', offset)
            // verify required parameter 'limit' is not null or undefined
            assertParamExists('apiV1SecretSecretIdSecretVersionsGet', 'limit', limit)
            // verify required parameter 'secretId' is not null or undefined
            assertParamExists('apiV1SecretSecretIdSecretVersionsGet', 'secretId', secretId)
            const localVarPath = `/api/v1/secret/{secretId}/secret-versions`
                .replace(`{${"secretId"}}`, encodeURIComponent(String(secretId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SecretSharingGet: async (offset?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/secret-sharing`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1SecretSharingPostRequest} apiV1SecretSharingPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SecretSharingPost: async (apiV1SecretSharingPostRequest: ApiV1SecretSharingPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1SecretSharingPostRequest' is not null or undefined
            assertParamExists('apiV1SecretSharingPost', 'apiV1SecretSharingPostRequest', apiV1SecretSharingPostRequest)
            const localVarPath = `/api/v1/secret-sharing`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1SecretSharingPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} hashedHex 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SecretSharingPublicIdGet: async (hashedHex: string, id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'hashedHex' is not null or undefined
            assertParamExists('apiV1SecretSharingPublicIdGet', 'hashedHex', hashedHex)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1SecretSharingPublicIdGet', 'id', id)
            const localVarPath = `/api/v1/secret-sharing/public/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (hashedHex !== undefined) {
                localVarQueryParameter['hashedHex'] = hashedHex;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1SecretSharingPublicPostRequest} apiV1SecretSharingPublicPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SecretSharingPublicPost: async (apiV1SecretSharingPublicPostRequest: ApiV1SecretSharingPublicPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1SecretSharingPublicPostRequest' is not null or undefined
            assertParamExists('apiV1SecretSharingPublicPost', 'apiV1SecretSharingPublicPostRequest', apiV1SecretSharingPublicPostRequest)
            const localVarPath = `/api/v1/secret-sharing/public`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1SecretSharingPublicPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} sharedSecretId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SecretSharingSharedSecretIdDelete: async (sharedSecretId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sharedSecretId' is not null or undefined
            assertParamExists('apiV1SecretSharingSharedSecretIdDelete', 'sharedSecretId', sharedSecretId)
            const localVarPath = `/api/v1/secret-sharing/{sharedSecretId}`
                .replace(`{${"sharedSecretId"}}`, encodeURIComponent(String(sharedSecretId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} secretSnapshotId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SecretSnapshotSecretSnapshotIdGet: async (secretSnapshotId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'secretSnapshotId' is not null or undefined
            assertParamExists('apiV1SecretSnapshotSecretSnapshotIdGet', 'secretSnapshotId', secretSnapshotId)
            const localVarPath = `/api/v1/secret-snapshot/{secretSnapshotId}`
                .replace(`{${"secretSnapshotId"}}`, encodeURIComponent(String(secretSnapshotId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Roll back project secrets to those captured in a secret snapshot version.
         * @param {string} secretSnapshotId The ID of the snapshot to rollback to.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SecretSnapshotSecretSnapshotIdRollbackPost: async (secretSnapshotId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'secretSnapshotId' is not null or undefined
            assertParamExists('apiV1SecretSnapshotSecretSnapshotIdRollbackPost', 'secretSnapshotId', secretSnapshotId)
            const localVarPath = `/api/v1/secret-snapshot/{secretSnapshotId}/rollback`
                .replace(`{${"secretSnapshotId"}}`, encodeURIComponent(String(secretSnapshotId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SsoConfigGet: async (organizationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('apiV1SsoConfigGet', 'organizationId', organizationId)
            const localVarPath = `/api/v1/sso/config`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (organizationId !== undefined) {
                localVarQueryParameter['organizationId'] = organizationId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1SsoConfigPatchRequest} apiV1SsoConfigPatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SsoConfigPatch: async (apiV1SsoConfigPatchRequest: ApiV1SsoConfigPatchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1SsoConfigPatchRequest' is not null or undefined
            assertParamExists('apiV1SsoConfigPatch', 'apiV1SsoConfigPatchRequest', apiV1SsoConfigPatchRequest)
            const localVarPath = `/api/v1/sso/config`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1SsoConfigPatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1SsoConfigPostRequest} apiV1SsoConfigPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SsoConfigPost: async (apiV1SsoConfigPostRequest: ApiV1SsoConfigPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1SsoConfigPostRequest' is not null or undefined
            assertParamExists('apiV1SsoConfigPost', 'apiV1SsoConfigPostRequest', apiV1SsoConfigPostRequest)
            const localVarPath = `/api/v1/sso/config`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1SsoConfigPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SsoGithubGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/sso/github`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SsoGitlabGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/sso/gitlab`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SsoGoogleGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/sso/google`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SsoOidcCallbackGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/sso/oidc/callback`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} orgSlug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SsoOidcConfigGet: async (orgSlug: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgSlug' is not null or undefined
            assertParamExists('apiV1SsoOidcConfigGet', 'orgSlug', orgSlug)
            const localVarPath = `/api/v1/sso/oidc/config`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (orgSlug !== undefined) {
                localVarQueryParameter['orgSlug'] = orgSlug;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1SsoOidcConfigPatchRequest} apiV1SsoOidcConfigPatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SsoOidcConfigPatch: async (apiV1SsoOidcConfigPatchRequest: ApiV1SsoOidcConfigPatchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1SsoOidcConfigPatchRequest' is not null or undefined
            assertParamExists('apiV1SsoOidcConfigPatch', 'apiV1SsoOidcConfigPatchRequest', apiV1SsoOidcConfigPatchRequest)
            const localVarPath = `/api/v1/sso/oidc/config`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1SsoOidcConfigPatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1SsoOidcConfigPostRequest} apiV1SsoOidcConfigPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SsoOidcConfigPost: async (apiV1SsoOidcConfigPostRequest: ApiV1SsoOidcConfigPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1SsoOidcConfigPostRequest' is not null or undefined
            assertParamExists('apiV1SsoOidcConfigPost', 'apiV1SsoOidcConfigPostRequest', apiV1SsoOidcConfigPostRequest)
            const localVarPath = `/api/v1/sso/oidc/config`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1SsoOidcConfigPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SsoOidcLoginErrorGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/sso/oidc/login/error`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} orgSlug 
         * @param {string} [callbackPort] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SsoOidcLoginGet: async (orgSlug: string, callbackPort?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgSlug' is not null or undefined
            assertParamExists('apiV1SsoOidcLoginGet', 'orgSlug', orgSlug)
            const localVarPath = `/api/v1/sso/oidc/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (orgSlug !== undefined) {
                localVarQueryParameter['orgSlug'] = orgSlug;
            }

            if (callbackPort !== undefined) {
                localVarQueryParameter['callbackPort'] = callbackPort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [callbackPort] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SsoRedirectGithubGet: async (callbackPort?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/sso/redirect/github`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (callbackPort !== undefined) {
                localVarQueryParameter['callback_port'] = callbackPort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [callbackPort] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SsoRedirectGitlabGet: async (callbackPort?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/sso/redirect/gitlab`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (callbackPort !== undefined) {
                localVarQueryParameter['callback_port'] = callbackPort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [callbackPort] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SsoRedirectGoogleGet: async (callbackPort?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/sso/redirect/google`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (callbackPort !== undefined) {
                localVarQueryParameter['callback_port'] = callbackPort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} orgSlug 
         * @param {string} [callbackPort] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SsoRedirectSaml2OrganizationsOrgSlugGet: async (orgSlug: string, callbackPort?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgSlug' is not null or undefined
            assertParamExists('apiV1SsoRedirectSaml2OrganizationsOrgSlugGet', 'orgSlug', orgSlug)
            const localVarPath = `/api/v1/sso/redirect/saml2/organizations/{orgSlug}`
                .replace(`{${"orgSlug"}}`, encodeURIComponent(String(orgSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (callbackPort !== undefined) {
                localVarQueryParameter['callback_port'] = callbackPort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} samlConfigId 
         * @param {string} [callbackPort] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SsoRedirectSaml2SamlConfigIdGet: async (samlConfigId: string, callbackPort?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'samlConfigId' is not null or undefined
            assertParamExists('apiV1SsoRedirectSaml2SamlConfigIdGet', 'samlConfigId', samlConfigId)
            const localVarPath = `/api/v1/sso/redirect/saml2/{samlConfigId}`
                .replace(`{${"samlConfigId"}}`, encodeURIComponent(String(samlConfigId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (callbackPort !== undefined) {
                localVarQueryParameter['callback_port'] = callbackPort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} samlConfigId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SsoSaml2SamlConfigIdPost: async (samlConfigId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'samlConfigId' is not null or undefined
            assertParamExists('apiV1SsoSaml2SamlConfigIdPost', 'samlConfigId', samlConfigId)
            const localVarPath = `/api/v1/sso/saml2/{samlConfigId}`
                .replace(`{${"samlConfigId"}}`, encodeURIComponent(String(samlConfigId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1SsoTokenExchangePostRequest} apiV1SsoTokenExchangePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SsoTokenExchangePost: async (apiV1SsoTokenExchangePostRequest: ApiV1SsoTokenExchangePostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1SsoTokenExchangePostRequest' is not null or undefined
            assertParamExists('apiV1SsoTokenExchangePost', 'apiV1SsoTokenExchangePostRequest', apiV1SsoTokenExchangePostRequest)
            const localVarPath = `/api/v1/sso/token-exchange`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1SsoTokenExchangePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} action 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserActionGet: async (action: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'action' is not null or undefined
            assertParamExists('apiV1UserActionGet', 'action', action)
            const localVarPath = `/api/v1/user-action`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (action !== undefined) {
                localVarQueryParameter['action'] = action;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1UserActionPostRequest} apiV1UserActionPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserActionPost: async (apiV1UserActionPostRequest: ApiV1UserActionPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1UserActionPostRequest' is not null or undefined
            assertParamExists('apiV1UserActionPost', 'apiV1UserActionPostRequest', apiV1UserActionPostRequest)
            const localVarPath = `/api/v1/user-action`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1UserActionPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1UserEngagementMeWishPostRequest} apiV1UserEngagementMeWishPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserEngagementMeWishPost: async (apiV1UserEngagementMeWishPostRequest: ApiV1UserEngagementMeWishPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1UserEngagementMeWishPostRequest' is not null or undefined
            assertParamExists('apiV1UserEngagementMeWishPost', 'apiV1UserEngagementMeWishPostRequest', apiV1UserEngagementMeWishPostRequest)
            const localVarPath = `/api/v1/user-engagement/me/wish`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1UserEngagementMeWishPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} orgId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserMeProjectFavoritesGet: async (orgId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('apiV1UserMeProjectFavoritesGet', 'orgId', orgId)
            const localVarPath = `/api/v1/user/me/project-favorites`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (orgId !== undefined) {
                localVarQueryParameter['orgId'] = orgId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1UserMeProjectFavoritesPutRequest} apiV1UserMeProjectFavoritesPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserMeProjectFavoritesPut: async (apiV1UserMeProjectFavoritesPutRequest: ApiV1UserMeProjectFavoritesPutRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1UserMeProjectFavoritesPutRequest' is not null or undefined
            assertParamExists('apiV1UserMeProjectFavoritesPut', 'apiV1UserMeProjectFavoritesPutRequest', apiV1UserMeProjectFavoritesPutRequest)
            const localVarPath = `/api/v1/user/me/project-favorites`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1UserMeProjectFavoritesPutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserPrivateKeyGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/user/private-key`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} token 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserUserIdUnlockGet: async (token: string, userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('apiV1UserUserIdUnlockGet', 'token', token)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('apiV1UserUserIdUnlockGet', 'userId', userId)
            const localVarPath = `/api/v1/user/{userId}/unlock`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {string} [environment] 
         * @param {string} [secretPath] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WebhooksGet: async (workspaceId: string, environment?: string, secretPath?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('apiV1WebhooksGet', 'workspaceId', workspaceId)
            const localVarPath = `/api/v1/webhooks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (workspaceId !== undefined) {
                localVarQueryParameter['workspaceId'] = workspaceId;
            }

            if (environment !== undefined) {
                localVarQueryParameter['environment'] = environment;
            }

            if (secretPath !== undefined) {
                localVarQueryParameter['secretPath'] = secretPath;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1WebhooksPostRequest} apiV1WebhooksPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WebhooksPost: async (apiV1WebhooksPostRequest: ApiV1WebhooksPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1WebhooksPostRequest' is not null or undefined
            assertParamExists('apiV1WebhooksPost', 'apiV1WebhooksPostRequest', apiV1WebhooksPostRequest)
            const localVarPath = `/api/v1/webhooks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1WebhooksPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} webhookId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WebhooksWebhookIdDelete: async (webhookId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webhookId' is not null or undefined
            assertParamExists('apiV1WebhooksWebhookIdDelete', 'webhookId', webhookId)
            const localVarPath = `/api/v1/webhooks/{webhookId}`
                .replace(`{${"webhookId"}}`, encodeURIComponent(String(webhookId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} webhookId 
         * @param {ApiV1WebhooksWebhookIdPatchRequest} [apiV1WebhooksWebhookIdPatchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WebhooksWebhookIdPatch: async (webhookId: string, apiV1WebhooksWebhookIdPatchRequest?: ApiV1WebhooksWebhookIdPatchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webhookId' is not null or undefined
            assertParamExists('apiV1WebhooksWebhookIdPatch', 'webhookId', webhookId)
            const localVarPath = `/api/v1/webhooks/{webhookId}`
                .replace(`{${"webhookId"}}`, encodeURIComponent(String(webhookId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1WebhooksWebhookIdPatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} webhookId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WebhooksWebhookIdTestPost: async (webhookId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webhookId' is not null or undefined
            assertParamExists('apiV1WebhooksWebhookIdTestPost', 'webhookId', webhookId)
            const localVarPath = `/api/v1/webhooks/{webhookId}/test`
                .replace(`{${"webhookId"}}`, encodeURIComponent(String(webhookId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1WorkspaceGetIncludeRolesEnum} [includeRoles] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceGet: async (includeRoles?: ApiV1WorkspaceGetIncludeRolesEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/workspace`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (includeRoles !== undefined) {
                localVarQueryParameter['includeRoles'] = includeRoles;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceProjectIdPermissionsGet: async (projectId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('apiV1WorkspaceProjectIdPermissionsGet', 'projectId', projectId)
            const localVarPath = `/api/v1/workspace/{projectId}/permissions`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} projectId The ID of the project to list tags from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceProjectIdTagsGet: async (projectId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('apiV1WorkspaceProjectIdTagsGet', 'projectId', projectId)
            const localVarPath = `/api/v1/workspace/{projectId}/tags`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} projectId The ID of the project to create the tag in.
         * @param {ApiV1WorkspaceProjectIdTagsPostRequest} apiV1WorkspaceProjectIdTagsPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceProjectIdTagsPost: async (projectId: string, apiV1WorkspaceProjectIdTagsPostRequest: ApiV1WorkspaceProjectIdTagsPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('apiV1WorkspaceProjectIdTagsPost', 'projectId', projectId)
            // verify required parameter 'apiV1WorkspaceProjectIdTagsPostRequest' is not null or undefined
            assertParamExists('apiV1WorkspaceProjectIdTagsPost', 'apiV1WorkspaceProjectIdTagsPostRequest', apiV1WorkspaceProjectIdTagsPostRequest)
            const localVarPath = `/api/v1/workspace/{projectId}/tags`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1WorkspaceProjectIdTagsPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} projectId The ID of the project to get tags from.
         * @param {string} tagSlug The slug of the tag to get details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceProjectIdTagsSlugTagSlugGet: async (projectId: string, tagSlug: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('apiV1WorkspaceProjectIdTagsSlugTagSlugGet', 'projectId', projectId)
            // verify required parameter 'tagSlug' is not null or undefined
            assertParamExists('apiV1WorkspaceProjectIdTagsSlugTagSlugGet', 'tagSlug', tagSlug)
            const localVarPath = `/api/v1/workspace/{projectId}/tags/slug/{tagSlug}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"tagSlug"}}`, encodeURIComponent(String(tagSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} projectId The ID of the project to delete the tag from.
         * @param {string} tagId The ID of the tag to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceProjectIdTagsTagIdDelete: async (projectId: string, tagId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('apiV1WorkspaceProjectIdTagsTagIdDelete', 'projectId', projectId)
            // verify required parameter 'tagId' is not null or undefined
            assertParamExists('apiV1WorkspaceProjectIdTagsTagIdDelete', 'tagId', tagId)
            const localVarPath = `/api/v1/workspace/{projectId}/tags/{tagId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"tagId"}}`, encodeURIComponent(String(tagId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} projectId The ID of the project to get tags from.
         * @param {string} tagId The ID of the tag to get details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceProjectIdTagsTagIdGet: async (projectId: string, tagId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('apiV1WorkspaceProjectIdTagsTagIdGet', 'projectId', projectId)
            // verify required parameter 'tagId' is not null or undefined
            assertParamExists('apiV1WorkspaceProjectIdTagsTagIdGet', 'tagId', tagId)
            const localVarPath = `/api/v1/workspace/{projectId}/tags/{tagId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"tagId"}}`, encodeURIComponent(String(tagId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} projectId The ID of the project to update the tag in.
         * @param {string} tagId The ID of the tag to get details
         * @param {ApiV1WorkspaceProjectIdTagsTagIdPatchRequest} apiV1WorkspaceProjectIdTagsTagIdPatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceProjectIdTagsTagIdPatch: async (projectId: string, tagId: string, apiV1WorkspaceProjectIdTagsTagIdPatchRequest: ApiV1WorkspaceProjectIdTagsTagIdPatchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('apiV1WorkspaceProjectIdTagsTagIdPatch', 'projectId', projectId)
            // verify required parameter 'tagId' is not null or undefined
            assertParamExists('apiV1WorkspaceProjectIdTagsTagIdPatch', 'tagId', tagId)
            // verify required parameter 'apiV1WorkspaceProjectIdTagsTagIdPatchRequest' is not null or undefined
            assertParamExists('apiV1WorkspaceProjectIdTagsTagIdPatch', 'apiV1WorkspaceProjectIdTagsTagIdPatchRequest', apiV1WorkspaceProjectIdTagsTagIdPatchRequest)
            const localVarPath = `/api/v1/workspace/{projectId}/tags/{tagId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"tagId"}}`, encodeURIComponent(String(tagId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1WorkspaceProjectIdTagsTagIdPatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List project role
         * @param {string} projectSlug The slug of the project to list the roles of.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceProjectSlugRolesGet: async (projectSlug: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectSlug' is not null or undefined
            assertParamExists('apiV1WorkspaceProjectSlugRolesGet', 'projectSlug', projectSlug)
            const localVarPath = `/api/v1/workspace/{projectSlug}/roles`
                .replace(`{${"projectSlug"}}`, encodeURIComponent(String(projectSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a project role
         * @param {string} projectSlug Slug of the project to create the role for.
         * @param {ApiV1WorkspaceProjectSlugRolesPostRequest} apiV1WorkspaceProjectSlugRolesPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceProjectSlugRolesPost: async (projectSlug: string, apiV1WorkspaceProjectSlugRolesPostRequest: ApiV1WorkspaceProjectSlugRolesPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectSlug' is not null or undefined
            assertParamExists('apiV1WorkspaceProjectSlugRolesPost', 'projectSlug', projectSlug)
            // verify required parameter 'apiV1WorkspaceProjectSlugRolesPostRequest' is not null or undefined
            assertParamExists('apiV1WorkspaceProjectSlugRolesPost', 'apiV1WorkspaceProjectSlugRolesPostRequest', apiV1WorkspaceProjectSlugRolesPostRequest)
            const localVarPath = `/api/v1/workspace/{projectSlug}/roles`
                .replace(`{${"projectSlug"}}`, encodeURIComponent(String(projectSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1WorkspaceProjectSlugRolesPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a project role
         * @param {string} projectSlug Slug of the project to delete this role for.
         * @param {string} roleId The ID of the role to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceProjectSlugRolesRoleIdDelete: async (projectSlug: string, roleId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectSlug' is not null or undefined
            assertParamExists('apiV1WorkspaceProjectSlugRolesRoleIdDelete', 'projectSlug', projectSlug)
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('apiV1WorkspaceProjectSlugRolesRoleIdDelete', 'roleId', roleId)
            const localVarPath = `/api/v1/workspace/{projectSlug}/roles/{roleId}`
                .replace(`{${"projectSlug"}}`, encodeURIComponent(String(projectSlug)))
                .replace(`{${"roleId"}}`, encodeURIComponent(String(roleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a project role
         * @param {string} projectSlug Slug of the project to update the role for.
         * @param {string} roleId The ID of the role to update
         * @param {ApiV1WorkspaceProjectSlugRolesRoleIdPatchRequest} [apiV1WorkspaceProjectSlugRolesRoleIdPatchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceProjectSlugRolesRoleIdPatch: async (projectSlug: string, roleId: string, apiV1WorkspaceProjectSlugRolesRoleIdPatchRequest?: ApiV1WorkspaceProjectSlugRolesRoleIdPatchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectSlug' is not null or undefined
            assertParamExists('apiV1WorkspaceProjectSlugRolesRoleIdPatch', 'projectSlug', projectSlug)
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('apiV1WorkspaceProjectSlugRolesRoleIdPatch', 'roleId', roleId)
            const localVarPath = `/api/v1/workspace/{projectSlug}/roles/{roleId}`
                .replace(`{${"projectSlug"}}`, encodeURIComponent(String(projectSlug)))
                .replace(`{${"roleId"}}`, encodeURIComponent(String(roleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1WorkspaceProjectSlugRolesRoleIdPatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} projectSlug The slug of the project.
         * @param {string} slug The slug of the role to get details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceProjectSlugRolesSlugSlugGet: async (projectSlug: string, slug: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectSlug' is not null or undefined
            assertParamExists('apiV1WorkspaceProjectSlugRolesSlugSlugGet', 'projectSlug', projectSlug)
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('apiV1WorkspaceProjectSlugRolesSlugSlugGet', 'slug', slug)
            const localVarPath = `/api/v1/workspace/{projectSlug}/roles/slug/{slug}`
                .replace(`{${"projectSlug"}}`, encodeURIComponent(String(projectSlug)))
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceWorkspaceIdAuditLogsFiltersActorsGet: async (workspaceId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('apiV1WorkspaceWorkspaceIdAuditLogsFiltersActorsGet', 'workspaceId', workspaceId)
            const localVarPath = `/api/v1/workspace/{workspaceId}/audit-logs/filters/actors`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return audit logs
         * @param {string} workspaceId The ID of the project to export audit logs from.
         * @param {ApiV1WorkspaceWorkspaceIdAuditLogsGetEventTypeEnum} [eventType] The type of the event to export.
         * @param {ApiV1WorkspaceWorkspaceIdAuditLogsGetUserAgentTypeEnum} [userAgentType] Choose which consuming application to export audit logs for.
         * @param {string} [startDate] The date to start the export from.
         * @param {string} [endDate] The date to end the export at.
         * @param {number} [offset] The offset to start from. If you enter 10, it will start from the 10th audit log.
         * @param {number} [limit] The number of audit logs to return.
         * @param {string} [actor] The actor to filter the audit logs by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceWorkspaceIdAuditLogsGet: async (workspaceId: string, eventType?: ApiV1WorkspaceWorkspaceIdAuditLogsGetEventTypeEnum, userAgentType?: ApiV1WorkspaceWorkspaceIdAuditLogsGetUserAgentTypeEnum, startDate?: string, endDate?: string, offset?: number, limit?: number, actor?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('apiV1WorkspaceWorkspaceIdAuditLogsGet', 'workspaceId', workspaceId)
            const localVarPath = `/api/v1/workspace/{workspaceId}/audit-logs`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (eventType !== undefined) {
                localVarQueryParameter['eventType'] = eventType;
            }

            if (userAgentType !== undefined) {
                localVarQueryParameter['userAgentType'] = userAgentType;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString() :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (actor !== undefined) {
                localVarQueryParameter['actor'] = actor;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List integration auth objects for a workspace.
         * @param {string} workspaceId The ID of the project to list integration auths for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceWorkspaceIdAuthorizationsGet: async (workspaceId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('apiV1WorkspaceWorkspaceIdAuthorizationsGet', 'workspaceId', workspaceId)
            const localVarPath = `/api/v1/workspace/{workspaceId}/authorizations`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {ApiV1WorkspaceWorkspaceIdAutoCapitalizationPostRequest} apiV1WorkspaceWorkspaceIdAutoCapitalizationPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceWorkspaceIdAutoCapitalizationPost: async (workspaceId: string, apiV1WorkspaceWorkspaceIdAutoCapitalizationPostRequest: ApiV1WorkspaceWorkspaceIdAutoCapitalizationPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('apiV1WorkspaceWorkspaceIdAutoCapitalizationPost', 'workspaceId', workspaceId)
            // verify required parameter 'apiV1WorkspaceWorkspaceIdAutoCapitalizationPostRequest' is not null or undefined
            assertParamExists('apiV1WorkspaceWorkspaceIdAutoCapitalizationPost', 'apiV1WorkspaceWorkspaceIdAutoCapitalizationPostRequest', apiV1WorkspaceWorkspaceIdAutoCapitalizationPostRequest)
            const localVarPath = `/api/v1/workspace/{workspaceId}/auto-capitalization`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1WorkspaceWorkspaceIdAutoCapitalizationPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete project
         * @param {string} workspaceId The ID of the project to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceWorkspaceIdDelete: async (workspaceId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('apiV1WorkspaceWorkspaceIdDelete', 'workspaceId', workspaceId)
            const localVarPath = `/api/v1/workspace/{workspaceId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Environment
         * @param {string} workspaceId The ID of the project the environment belongs to.
         * @param {string} envId The ID of the environment to fetch.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceWorkspaceIdEnvironmentsEnvIdGet: async (workspaceId: string, envId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('apiV1WorkspaceWorkspaceIdEnvironmentsEnvIdGet', 'workspaceId', workspaceId)
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('apiV1WorkspaceWorkspaceIdEnvironmentsEnvIdGet', 'envId', envId)
            const localVarPath = `/api/v1/workspace/{workspaceId}/environments/{envId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"envId"}}`, encodeURIComponent(String(envId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete environment
         * @param {string} workspaceId The ID of the project to delete the environment from.
         * @param {string} id The ID of the environment to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceWorkspaceIdEnvironmentsIdDelete: async (workspaceId: string, id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('apiV1WorkspaceWorkspaceIdEnvironmentsIdDelete', 'workspaceId', workspaceId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1WorkspaceWorkspaceIdEnvironmentsIdDelete', 'id', id)
            const localVarPath = `/api/v1/workspace/{workspaceId}/environments/{id}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update environment
         * @param {string} workspaceId The ID of the project to update the environment in.
         * @param {string} id The ID of the environment to update.
         * @param {ApiV1WorkspaceWorkspaceIdEnvironmentsIdPatchRequest} [apiV1WorkspaceWorkspaceIdEnvironmentsIdPatchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceWorkspaceIdEnvironmentsIdPatch: async (workspaceId: string, id: string, apiV1WorkspaceWorkspaceIdEnvironmentsIdPatchRequest?: ApiV1WorkspaceWorkspaceIdEnvironmentsIdPatchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('apiV1WorkspaceWorkspaceIdEnvironmentsIdPatch', 'workspaceId', workspaceId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1WorkspaceWorkspaceIdEnvironmentsIdPatch', 'id', id)
            const localVarPath = `/api/v1/workspace/{workspaceId}/environments/{id}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1WorkspaceWorkspaceIdEnvironmentsIdPatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create environment
         * @param {string} workspaceId The ID of the project to create the environment in.
         * @param {ApiV1WorkspaceWorkspaceIdEnvironmentsPostRequest} apiV1WorkspaceWorkspaceIdEnvironmentsPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceWorkspaceIdEnvironmentsPost: async (workspaceId: string, apiV1WorkspaceWorkspaceIdEnvironmentsPostRequest: ApiV1WorkspaceWorkspaceIdEnvironmentsPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('apiV1WorkspaceWorkspaceIdEnvironmentsPost', 'workspaceId', workspaceId)
            // verify required parameter 'apiV1WorkspaceWorkspaceIdEnvironmentsPostRequest' is not null or undefined
            assertParamExists('apiV1WorkspaceWorkspaceIdEnvironmentsPost', 'apiV1WorkspaceWorkspaceIdEnvironmentsPostRequest', apiV1WorkspaceWorkspaceIdEnvironmentsPostRequest)
            const localVarPath = `/api/v1/workspace/{workspaceId}/environments`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1WorkspaceWorkspaceIdEnvironmentsPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get project
         * @param {string} workspaceId The ID of the project.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceWorkspaceIdGet: async (workspaceId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('apiV1WorkspaceWorkspaceIdGet', 'workspaceId', workspaceId)
            const localVarPath = `/api/v1/workspace/{workspaceId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List integrations for a project.
         * @param {string} workspaceId The ID of the project to list integrations for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceWorkspaceIdIntegrationsGet: async (workspaceId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('apiV1WorkspaceWorkspaceIdIntegrationsGet', 'workspaceId', workspaceId)
            const localVarPath = `/api/v1/workspace/{workspaceId}/integrations`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {ApiV1WorkspaceWorkspaceIdKeyPostRequest} apiV1WorkspaceWorkspaceIdKeyPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceWorkspaceIdKeyPost: async (workspaceId: string, apiV1WorkspaceWorkspaceIdKeyPostRequest: ApiV1WorkspaceWorkspaceIdKeyPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('apiV1WorkspaceWorkspaceIdKeyPost', 'workspaceId', workspaceId)
            // verify required parameter 'apiV1WorkspaceWorkspaceIdKeyPostRequest' is not null or undefined
            assertParamExists('apiV1WorkspaceWorkspaceIdKeyPost', 'apiV1WorkspaceWorkspaceIdKeyPostRequest', apiV1WorkspaceWorkspaceIdKeyPostRequest)
            const localVarPath = `/api/v1/workspace/{workspaceId}/key`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1WorkspaceWorkspaceIdKeyPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceWorkspaceIdKeysGet: async (workspaceId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('apiV1WorkspaceWorkspaceIdKeysGet', 'workspaceId', workspaceId)
            const localVarPath = `/api/v1/workspace/{workspaceId}/keys`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceWorkspaceIdKmsBackupGet: async (workspaceId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('apiV1WorkspaceWorkspaceIdKmsBackupGet', 'workspaceId', workspaceId)
            const localVarPath = `/api/v1/workspace/{workspaceId}/kms/backup`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {ApiV1WorkspaceWorkspaceIdKmsBackupPostRequest} apiV1WorkspaceWorkspaceIdKmsBackupPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceWorkspaceIdKmsBackupPost: async (workspaceId: string, apiV1WorkspaceWorkspaceIdKmsBackupPostRequest: ApiV1WorkspaceWorkspaceIdKmsBackupPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('apiV1WorkspaceWorkspaceIdKmsBackupPost', 'workspaceId', workspaceId)
            // verify required parameter 'apiV1WorkspaceWorkspaceIdKmsBackupPostRequest' is not null or undefined
            assertParamExists('apiV1WorkspaceWorkspaceIdKmsBackupPost', 'apiV1WorkspaceWorkspaceIdKmsBackupPostRequest', apiV1WorkspaceWorkspaceIdKmsBackupPostRequest)
            const localVarPath = `/api/v1/workspace/{workspaceId}/kms/backup`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1WorkspaceWorkspaceIdKmsBackupPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceWorkspaceIdKmsGet: async (workspaceId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('apiV1WorkspaceWorkspaceIdKmsGet', 'workspaceId', workspaceId)
            const localVarPath = `/api/v1/workspace/{workspaceId}/kms`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {ApiV1WorkspaceWorkspaceIdKmsPatchRequest} apiV1WorkspaceWorkspaceIdKmsPatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceWorkspaceIdKmsPatch: async (workspaceId: string, apiV1WorkspaceWorkspaceIdKmsPatchRequest: ApiV1WorkspaceWorkspaceIdKmsPatchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('apiV1WorkspaceWorkspaceIdKmsPatch', 'workspaceId', workspaceId)
            // verify required parameter 'apiV1WorkspaceWorkspaceIdKmsPatchRequest' is not null or undefined
            assertParamExists('apiV1WorkspaceWorkspaceIdKmsPatch', 'apiV1WorkspaceWorkspaceIdKmsPatchRequest', apiV1WorkspaceWorkspaceIdKmsPatchRequest)
            const localVarPath = `/api/v1/workspace/{workspaceId}/kms`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1WorkspaceWorkspaceIdKmsPatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceWorkspaceIdLeaveDelete: async (workspaceId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('apiV1WorkspaceWorkspaceIdLeaveDelete', 'workspaceId', workspaceId)
            const localVarPath = `/api/v1/workspace/{workspaceId}/leave`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return project user memberships
         * @param {string} workspaceId The ID of the project to get memberships from.
         * @param {ApiV1WorkspaceWorkspaceIdMembershipsDetailsPostRequest} apiV1WorkspaceWorkspaceIdMembershipsDetailsPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceWorkspaceIdMembershipsDetailsPost: async (workspaceId: string, apiV1WorkspaceWorkspaceIdMembershipsDetailsPostRequest: ApiV1WorkspaceWorkspaceIdMembershipsDetailsPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('apiV1WorkspaceWorkspaceIdMembershipsDetailsPost', 'workspaceId', workspaceId)
            // verify required parameter 'apiV1WorkspaceWorkspaceIdMembershipsDetailsPostRequest' is not null or undefined
            assertParamExists('apiV1WorkspaceWorkspaceIdMembershipsDetailsPost', 'apiV1WorkspaceWorkspaceIdMembershipsDetailsPostRequest', apiV1WorkspaceWorkspaceIdMembershipsDetailsPostRequest)
            const localVarPath = `/api/v1/workspace/{workspaceId}/memberships/details`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1WorkspaceWorkspaceIdMembershipsDetailsPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return project user memberships
         * @param {string} workspaceId The ID of the project to get memberships from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceWorkspaceIdMembershipsGet: async (workspaceId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('apiV1WorkspaceWorkspaceIdMembershipsGet', 'workspaceId', workspaceId)
            const localVarPath = `/api/v1/workspace/{workspaceId}/memberships`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete project user membership
         * @param {string} workspaceId 
         * @param {string} membershipId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceWorkspaceIdMembershipsMembershipIdDelete: async (workspaceId: string, membershipId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('apiV1WorkspaceWorkspaceIdMembershipsMembershipIdDelete', 'workspaceId', workspaceId)
            // verify required parameter 'membershipId' is not null or undefined
            assertParamExists('apiV1WorkspaceWorkspaceIdMembershipsMembershipIdDelete', 'membershipId', membershipId)
            const localVarPath = `/api/v1/workspace/{workspaceId}/memberships/{membershipId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"membershipId"}}`, encodeURIComponent(String(membershipId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update project user membership
         * @param {string} workspaceId The ID of the project to update the membership for.
         * @param {string} membershipId The ID of the membership to update.
         * @param {ApiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatchRequest} apiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatch: async (workspaceId: string, membershipId: string, apiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatchRequest: ApiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('apiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatch', 'workspaceId', workspaceId)
            // verify required parameter 'membershipId' is not null or undefined
            assertParamExists('apiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatch', 'membershipId', membershipId)
            // verify required parameter 'apiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatchRequest' is not null or undefined
            assertParamExists('apiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatch', 'apiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatchRequest', apiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatchRequest)
            const localVarPath = `/api/v1/workspace/{workspaceId}/memberships/{membershipId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"membershipId"}}`, encodeURIComponent(String(membershipId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {ApiV1WorkspaceWorkspaceIdMembershipsPostRequest} apiV1WorkspaceWorkspaceIdMembershipsPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceWorkspaceIdMembershipsPost: async (workspaceId: string, apiV1WorkspaceWorkspaceIdMembershipsPostRequest: ApiV1WorkspaceWorkspaceIdMembershipsPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('apiV1WorkspaceWorkspaceIdMembershipsPost', 'workspaceId', workspaceId)
            // verify required parameter 'apiV1WorkspaceWorkspaceIdMembershipsPostRequest' is not null or undefined
            assertParamExists('apiV1WorkspaceWorkspaceIdMembershipsPost', 'apiV1WorkspaceWorkspaceIdMembershipsPostRequest', apiV1WorkspaceWorkspaceIdMembershipsPostRequest)
            const localVarPath = `/api/v1/workspace/{workspaceId}/memberships`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1WorkspaceWorkspaceIdMembershipsPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceWorkspaceIdMigrateV3Post: async (workspaceId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('apiV1WorkspaceWorkspaceIdMigrateV3Post', 'workspaceId', workspaceId)
            const localVarPath = `/api/v1/workspace/{workspaceId}/migrate-v3`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {ApiV1WorkspaceWorkspaceIdNamePostRequest} apiV1WorkspaceWorkspaceIdNamePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceWorkspaceIdNamePost: async (workspaceId: string, apiV1WorkspaceWorkspaceIdNamePostRequest: ApiV1WorkspaceWorkspaceIdNamePostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('apiV1WorkspaceWorkspaceIdNamePost', 'workspaceId', workspaceId)
            // verify required parameter 'apiV1WorkspaceWorkspaceIdNamePostRequest' is not null or undefined
            assertParamExists('apiV1WorkspaceWorkspaceIdNamePost', 'apiV1WorkspaceWorkspaceIdNamePostRequest', apiV1WorkspaceWorkspaceIdNamePostRequest)
            const localVarPath = `/api/v1/workspace/{workspaceId}/name`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1WorkspaceWorkspaceIdNamePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update project
         * @param {string} workspaceId The ID of the project to update.
         * @param {ApiV1WorkspaceWorkspaceIdPatchRequest} [apiV1WorkspaceWorkspaceIdPatchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceWorkspaceIdPatch: async (workspaceId: string, apiV1WorkspaceWorkspaceIdPatchRequest?: ApiV1WorkspaceWorkspaceIdPatchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('apiV1WorkspaceWorkspaceIdPatch', 'workspaceId', workspaceId)
            const localVarPath = `/api/v1/workspace/{workspaceId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1WorkspaceWorkspaceIdPatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} environment 
         * @param {string} workspaceId 
         * @param {string} [path] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceWorkspaceIdSecretSnapshotsCountGet: async (environment: string, workspaceId: string, path?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'environment' is not null or undefined
            assertParamExists('apiV1WorkspaceWorkspaceIdSecretSnapshotsCountGet', 'environment', environment)
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('apiV1WorkspaceWorkspaceIdSecretSnapshotsCountGet', 'workspaceId', workspaceId)
            const localVarPath = `/api/v1/workspace/{workspaceId}/secret-snapshots/count`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (environment !== undefined) {
                localVarQueryParameter['environment'] = environment;
            }

            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return project secret snapshots ids
         * @param {string} environment The environment to get snapshots from.
         * @param {string} workspaceId The ID of the project to get snapshots from.
         * @param {string} [path] The secret path to get snapshots from.
         * @param {number} [offset] The offset to start from. If you enter 10, it will start from the 10th snapshot.
         * @param {number} [limit] The number of snapshots to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceWorkspaceIdSecretSnapshotsGet: async (environment: string, workspaceId: string, path?: string, offset?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'environment' is not null or undefined
            assertParamExists('apiV1WorkspaceWorkspaceIdSecretSnapshotsGet', 'environment', environment)
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('apiV1WorkspaceWorkspaceIdSecretSnapshotsGet', 'workspaceId', workspaceId)
            const localVarPath = `/api/v1/workspace/{workspaceId}/secret-snapshots`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (environment !== undefined) {
                localVarQueryParameter['environment'] = environment;
            }

            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceWorkspaceIdServiceTokenDataGet: async (workspaceId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('apiV1WorkspaceWorkspaceIdServiceTokenDataGet', 'workspaceId', workspaceId)
            const localVarPath = `/api/v1/workspace/{workspaceId}/service-token-data`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceWorkspaceIdTrustedIpsGet: async (workspaceId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('apiV1WorkspaceWorkspaceIdTrustedIpsGet', 'workspaceId', workspaceId)
            const localVarPath = `/api/v1/workspace/{workspaceId}/trusted-ips`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {ApiV1WorkspaceWorkspaceIdTrustedIpsPostRequest} apiV1WorkspaceWorkspaceIdTrustedIpsPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceWorkspaceIdTrustedIpsPost: async (workspaceId: string, apiV1WorkspaceWorkspaceIdTrustedIpsPostRequest: ApiV1WorkspaceWorkspaceIdTrustedIpsPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('apiV1WorkspaceWorkspaceIdTrustedIpsPost', 'workspaceId', workspaceId)
            // verify required parameter 'apiV1WorkspaceWorkspaceIdTrustedIpsPostRequest' is not null or undefined
            assertParamExists('apiV1WorkspaceWorkspaceIdTrustedIpsPost', 'apiV1WorkspaceWorkspaceIdTrustedIpsPostRequest', apiV1WorkspaceWorkspaceIdTrustedIpsPostRequest)
            const localVarPath = `/api/v1/workspace/{workspaceId}/trusted-ips`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1WorkspaceWorkspaceIdTrustedIpsPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {string} trustedIpId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceWorkspaceIdTrustedIpsTrustedIpIdDelete: async (workspaceId: string, trustedIpId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('apiV1WorkspaceWorkspaceIdTrustedIpsTrustedIpIdDelete', 'workspaceId', workspaceId)
            // verify required parameter 'trustedIpId' is not null or undefined
            assertParamExists('apiV1WorkspaceWorkspaceIdTrustedIpsTrustedIpIdDelete', 'trustedIpId', trustedIpId)
            const localVarPath = `/api/v1/workspace/{workspaceId}/trusted-ips/{trustedIpId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"trustedIpId"}}`, encodeURIComponent(String(trustedIpId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {string} trustedIpId 
         * @param {ApiV1WorkspaceWorkspaceIdTrustedIpsTrustedIpIdPatchRequest} apiV1WorkspaceWorkspaceIdTrustedIpsTrustedIpIdPatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceWorkspaceIdTrustedIpsTrustedIpIdPatch: async (workspaceId: string, trustedIpId: string, apiV1WorkspaceWorkspaceIdTrustedIpsTrustedIpIdPatchRequest: ApiV1WorkspaceWorkspaceIdTrustedIpsTrustedIpIdPatchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('apiV1WorkspaceWorkspaceIdTrustedIpsTrustedIpIdPatch', 'workspaceId', workspaceId)
            // verify required parameter 'trustedIpId' is not null or undefined
            assertParamExists('apiV1WorkspaceWorkspaceIdTrustedIpsTrustedIpIdPatch', 'trustedIpId', trustedIpId)
            // verify required parameter 'apiV1WorkspaceWorkspaceIdTrustedIpsTrustedIpIdPatchRequest' is not null or undefined
            assertParamExists('apiV1WorkspaceWorkspaceIdTrustedIpsTrustedIpIdPatch', 'apiV1WorkspaceWorkspaceIdTrustedIpsTrustedIpIdPatchRequest', apiV1WorkspaceWorkspaceIdTrustedIpsTrustedIpIdPatchRequest)
            const localVarPath = `/api/v1/workspace/{workspaceId}/trusted-ips/{trustedIpId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"trustedIpId"}}`, encodeURIComponent(String(trustedIpId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1WorkspaceWorkspaceIdTrustedIpsTrustedIpIdPatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {ApiV1WorkspaceWorkspaceIdUsersGetIncludeGroupMembersEnum} [includeGroupMembers] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceWorkspaceIdUsersGet: async (workspaceId: string, includeGroupMembers?: ApiV1WorkspaceWorkspaceIdUsersGetIncludeGroupMembersEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('apiV1WorkspaceWorkspaceIdUsersGet', 'workspaceId', workspaceId)
            const localVarPath = `/api/v1/workspace/{workspaceId}/users`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (includeGroupMembers !== undefined) {
                localVarQueryParameter['includeGroupMembers'] = includeGroupMembers;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} workspaceSlug 
         * @param {ApiV1WorkspaceWorkspaceSlugAuditLogsRetentionPutRequest} apiV1WorkspaceWorkspaceSlugAuditLogsRetentionPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceWorkspaceSlugAuditLogsRetentionPut: async (workspaceSlug: string, apiV1WorkspaceWorkspaceSlugAuditLogsRetentionPutRequest: ApiV1WorkspaceWorkspaceSlugAuditLogsRetentionPutRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceSlug' is not null or undefined
            assertParamExists('apiV1WorkspaceWorkspaceSlugAuditLogsRetentionPut', 'workspaceSlug', workspaceSlug)
            // verify required parameter 'apiV1WorkspaceWorkspaceSlugAuditLogsRetentionPutRequest' is not null or undefined
            assertParamExists('apiV1WorkspaceWorkspaceSlugAuditLogsRetentionPut', 'apiV1WorkspaceWorkspaceSlugAuditLogsRetentionPutRequest', apiV1WorkspaceWorkspaceSlugAuditLogsRetentionPutRequest)
            const localVarPath = `/api/v1/workspace/{workspaceSlug}/audit-logs-retention`
                .replace(`{${"workspaceSlug"}}`, encodeURIComponent(String(workspaceSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1WorkspaceWorkspaceSlugAuditLogsRetentionPutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} workspaceSlug 
         * @param {ApiV1WorkspaceWorkspaceSlugVersionLimitPutRequest} apiV1WorkspaceWorkspaceSlugVersionLimitPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceWorkspaceSlugVersionLimitPut: async (workspaceSlug: string, apiV1WorkspaceWorkspaceSlugVersionLimitPutRequest: ApiV1WorkspaceWorkspaceSlugVersionLimitPutRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceSlug' is not null or undefined
            assertParamExists('apiV1WorkspaceWorkspaceSlugVersionLimitPut', 'workspaceSlug', workspaceSlug)
            // verify required parameter 'apiV1WorkspaceWorkspaceSlugVersionLimitPutRequest' is not null or undefined
            assertParamExists('apiV1WorkspaceWorkspaceSlugVersionLimitPut', 'apiV1WorkspaceWorkspaceSlugVersionLimitPutRequest', apiV1WorkspaceWorkspaceSlugVersionLimitPutRequest)
            const localVarPath = `/api/v1/workspace/{workspaceSlug}/version-limit`
                .replace(`{${"workspaceSlug"}}`, encodeURIComponent(String(workspaceSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1WorkspaceWorkspaceSlugVersionLimitPutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AuthMfaSendPost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/auth/mfa/send`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV2AuthMfaVerifyPostRequest} apiV2AuthMfaVerifyPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AuthMfaVerifyPost: async (apiV2AuthMfaVerifyPostRequest: ApiV2AuthMfaVerifyPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV2AuthMfaVerifyPostRequest' is not null or undefined
            assertParamExists('apiV2AuthMfaVerifyPost', 'apiV2AuthMfaVerifyPostRequest', apiV2AuthMfaVerifyPostRequest)
            const localVarPath = `/api/v2/auth/mfa/verify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV2AuthMfaVerifyPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return organization identity memberships
         * @param {string} orgId The ID of the organization to get identity memberships from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2OrganizationsOrgIdIdentityMembershipsGet: async (orgId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgId' is not null or undefined
            assertParamExists('apiV2OrganizationsOrgIdIdentityMembershipsGet', 'orgId', orgId)
            const localVarPath = `/api/v2/organizations/{orgId}/identity-memberships`
                .replace(`{${"orgId"}}`, encodeURIComponent(String(orgId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2OrganizationsOrganizationIdDelete: async (organizationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('apiV2OrganizationsOrganizationIdDelete', 'organizationId', organizationId)
            const localVarPath = `/api/v2/organizations/{organizationId}`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return organization user memberships
         * @param {string} organizationId The ID of the organization to get memberships from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2OrganizationsOrganizationIdMembershipsGet: async (organizationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('apiV2OrganizationsOrganizationIdMembershipsGet', 'organizationId', organizationId)
            const localVarPath = `/api/v2/organizations/{organizationId}/memberships`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete organization user memberships
         * @param {string} organizationId The ID of the organization to delete the membership from.
         * @param {string} membershipId The ID of the membership to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2OrganizationsOrganizationIdMembershipsMembershipIdDelete: async (organizationId: string, membershipId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('apiV2OrganizationsOrganizationIdMembershipsMembershipIdDelete', 'organizationId', organizationId)
            // verify required parameter 'membershipId' is not null or undefined
            assertParamExists('apiV2OrganizationsOrganizationIdMembershipsMembershipIdDelete', 'membershipId', membershipId)
            const localVarPath = `/api/v2/organizations/{organizationId}/memberships/{membershipId}`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)))
                .replace(`{${"membershipId"}}`, encodeURIComponent(String(membershipId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get organization user membership
         * @param {string} organizationId The ID of the organization to get the membership for.
         * @param {string} membershipId The ID of the membership to get.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2OrganizationsOrganizationIdMembershipsMembershipIdGet: async (organizationId: string, membershipId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('apiV2OrganizationsOrganizationIdMembershipsMembershipIdGet', 'organizationId', organizationId)
            // verify required parameter 'membershipId' is not null or undefined
            assertParamExists('apiV2OrganizationsOrganizationIdMembershipsMembershipIdGet', 'membershipId', membershipId)
            const localVarPath = `/api/v2/organizations/{organizationId}/memberships/{membershipId}`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)))
                .replace(`{${"membershipId"}}`, encodeURIComponent(String(membershipId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update organization user memberships
         * @param {string} organizationId The ID of the organization to update the membership for.
         * @param {string} membershipId The ID of the membership to update.
         * @param {ApiV2OrganizationsOrganizationIdMembershipsMembershipIdPatchRequest} [apiV2OrganizationsOrganizationIdMembershipsMembershipIdPatchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2OrganizationsOrganizationIdMembershipsMembershipIdPatch: async (organizationId: string, membershipId: string, apiV2OrganizationsOrganizationIdMembershipsMembershipIdPatchRequest?: ApiV2OrganizationsOrganizationIdMembershipsMembershipIdPatchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('apiV2OrganizationsOrganizationIdMembershipsMembershipIdPatch', 'organizationId', organizationId)
            // verify required parameter 'membershipId' is not null or undefined
            assertParamExists('apiV2OrganizationsOrganizationIdMembershipsMembershipIdPatch', 'membershipId', membershipId)
            const localVarPath = `/api/v2/organizations/{organizationId}/memberships/{membershipId}`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)))
                .replace(`{${"membershipId"}}`, encodeURIComponent(String(membershipId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV2OrganizationsOrganizationIdMembershipsMembershipIdPatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get project memberships given organization membership
         * @param {string} organizationId The ID of the organization to delete the membership from.
         * @param {string} membershipId The ID of the membership to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2OrganizationsOrganizationIdMembershipsMembershipIdProjectMembershipsGet: async (organizationId: string, membershipId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('apiV2OrganizationsOrganizationIdMembershipsMembershipIdProjectMembershipsGet', 'organizationId', organizationId)
            // verify required parameter 'membershipId' is not null or undefined
            assertParamExists('apiV2OrganizationsOrganizationIdMembershipsMembershipIdProjectMembershipsGet', 'membershipId', membershipId)
            const localVarPath = `/api/v2/organizations/{organizationId}/memberships/{membershipId}/project-memberships`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)))
                .replace(`{${"membershipId"}}`, encodeURIComponent(String(membershipId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return projects in organization that user is part of
         * @param {string} organizationId The ID of the organization to get projects from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2OrganizationsOrganizationIdWorkspacesGet: async (organizationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('apiV2OrganizationsOrganizationIdWorkspacesGet', 'organizationId', organizationId)
            const localVarPath = `/api/v2/organizations/{organizationId}/workspaces`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1WorkspaceWorkspaceIdNamePostRequest} apiV1WorkspaceWorkspaceIdNamePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2OrganizationsPost: async (apiV1WorkspaceWorkspaceIdNamePostRequest: ApiV1WorkspaceWorkspaceIdNamePostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1WorkspaceWorkspaceIdNamePostRequest' is not null or undefined
            assertParamExists('apiV2OrganizationsPost', 'apiV1WorkspaceWorkspaceIdNamePostRequest', apiV1WorkspaceWorkspaceIdNamePostRequest)
            const localVarPath = `/api/v2/organizations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1WorkspaceWorkspaceIdNamePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return Infisical Token data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2ServiceTokenGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/service-token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV2ServiceTokenPostRequest} apiV2ServiceTokenPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2ServiceTokenPost: async (apiV2ServiceTokenPostRequest: ApiV2ServiceTokenPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV2ServiceTokenPostRequest' is not null or undefined
            assertParamExists('apiV2ServiceTokenPost', 'apiV2ServiceTokenPostRequest', apiV2ServiceTokenPostRequest)
            const localVarPath = `/api/v2/service-token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV2ServiceTokenPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} serviceTokenId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2ServiceTokenServiceTokenIdDelete: async (serviceTokenId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'serviceTokenId' is not null or undefined
            assertParamExists('apiV2ServiceTokenServiceTokenIdDelete', 'serviceTokenId', serviceTokenId)
            const localVarPath = `/api/v2/service-token/{serviceTokenId}`
                .replace(`{${"serviceTokenId"}}`, encodeURIComponent(String(serviceTokenId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} apiKeyDataId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2UsersMeApiKeysApiKeyDataIdDelete: async (apiKeyDataId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiKeyDataId' is not null or undefined
            assertParamExists('apiV2UsersMeApiKeysApiKeyDataIdDelete', 'apiKeyDataId', apiKeyDataId)
            const localVarPath = `/api/v2/users/me/api-keys/{apiKeyDataId}`
                .replace(`{${"apiKeyDataId"}}`, encodeURIComponent(String(apiKeyDataId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2UsersMeApiKeysGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/users/me/api-keys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV2UsersMeApiKeysPostRequest} apiV2UsersMeApiKeysPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2UsersMeApiKeysPost: async (apiV2UsersMeApiKeysPostRequest: ApiV2UsersMeApiKeysPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV2UsersMeApiKeysPostRequest' is not null or undefined
            assertParamExists('apiV2UsersMeApiKeysPost', 'apiV2UsersMeApiKeysPostRequest', apiV2UsersMeApiKeysPostRequest)
            const localVarPath = `/api/v2/users/me/api-keys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV2UsersMeApiKeysPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV2UsersMeAuthMethodsPutRequest} apiV2UsersMeAuthMethodsPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2UsersMeAuthMethodsPut: async (apiV2UsersMeAuthMethodsPutRequest: ApiV2UsersMeAuthMethodsPutRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV2UsersMeAuthMethodsPutRequest' is not null or undefined
            assertParamExists('apiV2UsersMeAuthMethodsPut', 'apiV2UsersMeAuthMethodsPutRequest', apiV2UsersMeAuthMethodsPutRequest)
            const localVarPath = `/api/v2/users/me/auth-methods`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV2UsersMeAuthMethodsPutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2UsersMeDelete: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/users/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV2UsersMeEmailsCodePostRequest} apiV2UsersMeEmailsCodePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2UsersMeEmailsCodePost: async (apiV2UsersMeEmailsCodePostRequest: ApiV2UsersMeEmailsCodePostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV2UsersMeEmailsCodePostRequest' is not null or undefined
            assertParamExists('apiV2UsersMeEmailsCodePost', 'apiV2UsersMeEmailsCodePostRequest', apiV2UsersMeEmailsCodePostRequest)
            const localVarPath = `/api/v2/users/me/emails/code`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV2UsersMeEmailsCodePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV2UsersMeEmailsVerifyPostRequest} apiV2UsersMeEmailsVerifyPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2UsersMeEmailsVerifyPost: async (apiV2UsersMeEmailsVerifyPostRequest: ApiV2UsersMeEmailsVerifyPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV2UsersMeEmailsVerifyPostRequest' is not null or undefined
            assertParamExists('apiV2UsersMeEmailsVerifyPost', 'apiV2UsersMeEmailsVerifyPostRequest', apiV2UsersMeEmailsVerifyPostRequest)
            const localVarPath = `/api/v2/users/me/emails/verify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV2UsersMeEmailsVerifyPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the current user on the request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2UsersMeGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/users/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV2UsersMeMfaPatchRequest} apiV2UsersMeMfaPatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2UsersMeMfaPatch: async (apiV2UsersMeMfaPatchRequest: ApiV2UsersMeMfaPatchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV2UsersMeMfaPatchRequest' is not null or undefined
            assertParamExists('apiV2UsersMeMfaPatch', 'apiV2UsersMeMfaPatchRequest', apiV2UsersMeMfaPatchRequest)
            const localVarPath = `/api/v2/users/me/mfa`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV2UsersMeMfaPatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV2UsersMeNamePatchRequest} apiV2UsersMeNamePatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2UsersMeNamePatch: async (apiV2UsersMeNamePatchRequest: ApiV2UsersMeNamePatchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV2UsersMeNamePatchRequest' is not null or undefined
            assertParamExists('apiV2UsersMeNamePatch', 'apiV2UsersMeNamePatchRequest', apiV2UsersMeNamePatchRequest)
            const localVarPath = `/api/v2/users/me/name`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV2UsersMeNamePatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return organizations that current user is part of
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2UsersMeOrganizationsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/users/me/organizations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2UsersMeSessionsDelete: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/users/me/sessions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2UsersMeSessionsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/users/me/sessions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new project
         * @param {ApiV2WorkspacePostRequest} apiV2WorkspacePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2WorkspacePost: async (apiV2WorkspacePostRequest: ApiV2WorkspacePostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV2WorkspacePostRequest' is not null or undefined
            assertParamExists('apiV2WorkspacePost', 'apiV2WorkspacePostRequest', apiV2WorkspacePostRequest)
            const localVarPath = `/api/v2/workspace`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV2WorkspacePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2WorkspaceProjectIdCertificateTemplatesGet: async (projectId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('apiV2WorkspaceProjectIdCertificateTemplatesGet', 'projectId', projectId)
            const localVarPath = `/api/v2/workspace/{projectId}/certificate-templates`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return project identity memberships
         * @param {string} projectId The ID of the project to get identity memberships from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2WorkspaceProjectIdIdentityMembershipsGet: async (projectId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('apiV2WorkspaceProjectIdIdentityMembershipsGet', 'projectId', projectId)
            const localVarPath = `/api/v2/workspace/{projectId}/identity-memberships`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete project identity memberships
         * @param {string} projectId The ID of the project to delete the identity membership from.
         * @param {string} identityId The ID of the identity to delete the membership from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2WorkspaceProjectIdIdentityMembershipsIdentityIdDelete: async (projectId: string, identityId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('apiV2WorkspaceProjectIdIdentityMembershipsIdentityIdDelete', 'projectId', projectId)
            // verify required parameter 'identityId' is not null or undefined
            assertParamExists('apiV2WorkspaceProjectIdIdentityMembershipsIdentityIdDelete', 'identityId', identityId)
            const localVarPath = `/api/v2/workspace/{projectId}/identity-memberships/{identityId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"identityId"}}`, encodeURIComponent(String(identityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return project identity membership
         * @param {string} projectId The ID of the project to get the identity membership for.
         * @param {string} identityId The ID of the identity to get the membership for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2WorkspaceProjectIdIdentityMembershipsIdentityIdGet: async (projectId: string, identityId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('apiV2WorkspaceProjectIdIdentityMembershipsIdentityIdGet', 'projectId', projectId)
            // verify required parameter 'identityId' is not null or undefined
            assertParamExists('apiV2WorkspaceProjectIdIdentityMembershipsIdentityIdGet', 'identityId', identityId)
            const localVarPath = `/api/v2/workspace/{projectId}/identity-memberships/{identityId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"identityId"}}`, encodeURIComponent(String(identityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update project identity memberships
         * @param {string} projectId The ID of the project to update the identity membership for.
         * @param {string} identityId The ID of the identity to update the membership for.
         * @param {ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPatchRequest} apiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPatch: async (projectId: string, identityId: string, apiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPatchRequest: ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPatchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('apiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPatch', 'projectId', projectId)
            // verify required parameter 'identityId' is not null or undefined
            assertParamExists('apiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPatch', 'identityId', identityId)
            // verify required parameter 'apiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPatchRequest' is not null or undefined
            assertParamExists('apiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPatch', 'apiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPatchRequest', apiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPatchRequest)
            const localVarPath = `/api/v2/workspace/{projectId}/identity-memberships/{identityId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"identityId"}}`, encodeURIComponent(String(identityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create project identity membership
         * @param {string} projectId 
         * @param {string} identityId 
         * @param {ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPostRequest} [apiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPost: async (projectId: string, identityId: string, apiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPostRequest?: ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('apiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPost', 'projectId', projectId)
            // verify required parameter 'identityId' is not null or undefined
            assertParamExists('apiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPost', 'identityId', identityId)
            const localVarPath = `/api/v2/workspace/{projectId}/identity-memberships/{identityId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)))
                .replace(`{${"identityId"}}`, encodeURIComponent(String(identityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove members from project
         * @param {string} projectId The ID of the project to remove the member from.
         * @param {ApiV2WorkspaceProjectIdMembershipsDeleteRequest} [apiV2WorkspaceProjectIdMembershipsDeleteRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2WorkspaceProjectIdMembershipsDelete: async (projectId: string, apiV2WorkspaceProjectIdMembershipsDeleteRequest?: ApiV2WorkspaceProjectIdMembershipsDeleteRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('apiV2WorkspaceProjectIdMembershipsDelete', 'projectId', projectId)
            const localVarPath = `/api/v2/workspace/{projectId}/memberships`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV2WorkspaceProjectIdMembershipsDeleteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invite members to project
         * @param {string} projectId The ID of the project to invite the member to.
         * @param {ApiV2WorkspaceProjectIdMembershipsPostRequest} [apiV2WorkspaceProjectIdMembershipsPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2WorkspaceProjectIdMembershipsPost: async (projectId: string, apiV2WorkspaceProjectIdMembershipsPostRequest?: ApiV2WorkspaceProjectIdMembershipsPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('apiV2WorkspaceProjectIdMembershipsPost', 'projectId', projectId)
            const localVarPath = `/api/v2/workspace/{projectId}/memberships`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV2WorkspaceProjectIdMembershipsPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2WorkspaceProjectIdPkiAlertsGet: async (projectId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('apiV2WorkspaceProjectIdPkiAlertsGet', 'projectId', projectId)
            const localVarPath = `/api/v2/workspace/{projectId}/pki-alerts`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2WorkspaceProjectIdPkiCollectionsGet: async (projectId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('apiV2WorkspaceProjectIdPkiCollectionsGet', 'projectId', projectId)
            const localVarPath = `/api/v2/workspace/{projectId}/pki-collections`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} projectId 
         * @param {ApiV2WorkspaceProjectIdUpgradePostRequest} apiV2WorkspaceProjectIdUpgradePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2WorkspaceProjectIdUpgradePost: async (projectId: string, apiV2WorkspaceProjectIdUpgradePostRequest: ApiV2WorkspaceProjectIdUpgradePostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('apiV2WorkspaceProjectIdUpgradePost', 'projectId', projectId)
            // verify required parameter 'apiV2WorkspaceProjectIdUpgradePostRequest' is not null or undefined
            assertParamExists('apiV2WorkspaceProjectIdUpgradePost', 'apiV2WorkspaceProjectIdUpgradePostRequest', apiV2WorkspaceProjectIdUpgradePostRequest)
            const localVarPath = `/api/v2/workspace/{projectId}/upgrade`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV2WorkspaceProjectIdUpgradePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2WorkspaceProjectIdUpgradeStatusGet: async (projectId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('apiV2WorkspaceProjectIdUpgradeStatusGet', 'projectId', projectId)
            const localVarPath = `/api/v2/workspace/{projectId}/upgrade/status`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return list of groups in project
         * @param {string} projectSlug The slug of the project to list groups for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2WorkspaceProjectSlugGroupsGet: async (projectSlug: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectSlug' is not null or undefined
            assertParamExists('apiV2WorkspaceProjectSlugGroupsGet', 'projectSlug', projectSlug)
            const localVarPath = `/api/v2/workspace/{projectSlug}/groups`
                .replace(`{${"projectSlug"}}`, encodeURIComponent(String(projectSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove group from project
         * @param {string} projectSlug The slug of the project to delete the group from.
         * @param {string} groupSlug The slug of the group to delete from the project.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2WorkspaceProjectSlugGroupsGroupSlugDelete: async (projectSlug: string, groupSlug: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectSlug' is not null or undefined
            assertParamExists('apiV2WorkspaceProjectSlugGroupsGroupSlugDelete', 'projectSlug', projectSlug)
            // verify required parameter 'groupSlug' is not null or undefined
            assertParamExists('apiV2WorkspaceProjectSlugGroupsGroupSlugDelete', 'groupSlug', groupSlug)
            const localVarPath = `/api/v2/workspace/{projectSlug}/groups/{groupSlug}`
                .replace(`{${"projectSlug"}}`, encodeURIComponent(String(projectSlug)))
                .replace(`{${"groupSlug"}}`, encodeURIComponent(String(groupSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update group in project
         * @param {string} projectSlug The slug of the project to update the group in.
         * @param {string} groupSlug The slug of the group to update in the project.
         * @param {ApiV2WorkspaceProjectSlugGroupsGroupSlugPatchRequest} apiV2WorkspaceProjectSlugGroupsGroupSlugPatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2WorkspaceProjectSlugGroupsGroupSlugPatch: async (projectSlug: string, groupSlug: string, apiV2WorkspaceProjectSlugGroupsGroupSlugPatchRequest: ApiV2WorkspaceProjectSlugGroupsGroupSlugPatchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectSlug' is not null or undefined
            assertParamExists('apiV2WorkspaceProjectSlugGroupsGroupSlugPatch', 'projectSlug', projectSlug)
            // verify required parameter 'groupSlug' is not null or undefined
            assertParamExists('apiV2WorkspaceProjectSlugGroupsGroupSlugPatch', 'groupSlug', groupSlug)
            // verify required parameter 'apiV2WorkspaceProjectSlugGroupsGroupSlugPatchRequest' is not null or undefined
            assertParamExists('apiV2WorkspaceProjectSlugGroupsGroupSlugPatch', 'apiV2WorkspaceProjectSlugGroupsGroupSlugPatchRequest', apiV2WorkspaceProjectSlugGroupsGroupSlugPatchRequest)
            const localVarPath = `/api/v2/workspace/{projectSlug}/groups/{groupSlug}`
                .replace(`{${"projectSlug"}}`, encodeURIComponent(String(projectSlug)))
                .replace(`{${"groupSlug"}}`, encodeURIComponent(String(groupSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV2WorkspaceProjectSlugGroupsGroupSlugPatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add group to project
         * @param {string} projectSlug The slug of the project to add the group to.
         * @param {string} groupSlug The slug of the group to add to the project.
         * @param {ApiV2WorkspaceProjectSlugGroupsGroupSlugPostRequest} [apiV2WorkspaceProjectSlugGroupsGroupSlugPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2WorkspaceProjectSlugGroupsGroupSlugPost: async (projectSlug: string, groupSlug: string, apiV2WorkspaceProjectSlugGroupsGroupSlugPostRequest?: ApiV2WorkspaceProjectSlugGroupsGroupSlugPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectSlug' is not null or undefined
            assertParamExists('apiV2WorkspaceProjectSlugGroupsGroupSlugPost', 'projectSlug', projectSlug)
            // verify required parameter 'groupSlug' is not null or undefined
            assertParamExists('apiV2WorkspaceProjectSlugGroupsGroupSlugPost', 'groupSlug', groupSlug)
            const localVarPath = `/api/v2/workspace/{projectSlug}/groups/{groupSlug}`
                .replace(`{${"projectSlug"}}`, encodeURIComponent(String(projectSlug)))
                .replace(`{${"groupSlug"}}`, encodeURIComponent(String(groupSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV2WorkspaceProjectSlugGroupsGroupSlugPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} slug The slug of the project to list CAs for.
         * @param {ApiV2WorkspaceSlugCasGetStatusEnum} [status] The status of the CA to filter by.
         * @param {string} [friendlyName] The friendly name of the CA to filter by.
         * @param {string} [commonName] The common name of the CA to filter by.
         * @param {number} [offset] The offset to start from. If you enter 10, it will start from the 10th CA.
         * @param {number} [limit] The number of CAs to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2WorkspaceSlugCasGet: async (slug: string, status?: ApiV2WorkspaceSlugCasGetStatusEnum, friendlyName?: string, commonName?: string, offset?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('apiV2WorkspaceSlugCasGet', 'slug', slug)
            const localVarPath = `/api/v2/workspace/{slug}/cas`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (friendlyName !== undefined) {
                localVarQueryParameter['friendlyName'] = friendlyName;
            }

            if (commonName !== undefined) {
                localVarQueryParameter['commonName'] = commonName;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} slug The slug of the project to list certificates for.
         * @param {string} [friendlyName] The friendly name of the certificate to filter by.
         * @param {string} [commonName] The common name of the certificate to filter by.
         * @param {number} [offset] The offset to start from. If you enter 10, it will start from the 10th certificate.
         * @param {number} [limit] The number of certificates to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2WorkspaceSlugCertificatesGet: async (slug: string, friendlyName?: string, commonName?: string, offset?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('apiV2WorkspaceSlugCertificatesGet', 'slug', slug)
            const localVarPath = `/api/v2/workspace/{slug}/certificates`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (friendlyName !== undefined) {
                localVarQueryParameter['friendlyName'] = friendlyName;
            }

            if (commonName !== undefined) {
                localVarQueryParameter['commonName'] = commonName;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete project
         * @param {string} slug The slug of the project to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2WorkspaceSlugDelete: async (slug: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('apiV2WorkspaceSlugDelete', 'slug', slug)
            const localVarPath = `/api/v2/workspace/{slug}`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} slug The slug of the project to get.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2WorkspaceSlugGet: async (slug: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('apiV2WorkspaceSlugGet', 'slug', slug)
            const localVarPath = `/api/v2/workspace/{slug}`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} slug The slug of the project to update.
         * @param {ApiV2WorkspaceSlugPatchRequest} [apiV2WorkspaceSlugPatchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2WorkspaceSlugPatch: async (slug: string, apiV2WorkspaceSlugPatchRequest?: ApiV2WorkspaceSlugPatchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('apiV2WorkspaceSlugPatch', 'slug', slug)
            const localVarPath = `/api/v2/workspace/{slug}`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV2WorkspaceSlugPatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return encrypted project key
         * @param {string} workspaceId The ID of the project to get the key from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2WorkspaceWorkspaceIdEncryptedKeyGet: async (workspaceId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('apiV2WorkspaceWorkspaceIdEncryptedKeyGet', 'workspaceId', workspaceId)
            const localVarPath = `/api/v2/workspace/{workspaceId}/encrypted-key`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV3AuthLogin1PostRequest} apiV3AuthLogin1PostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV3AuthLogin1Post: async (apiV3AuthLogin1PostRequest: ApiV3AuthLogin1PostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV3AuthLogin1PostRequest' is not null or undefined
            assertParamExists('apiV3AuthLogin1Post', 'apiV3AuthLogin1PostRequest', apiV3AuthLogin1PostRequest)
            const localVarPath = `/api/v3/auth/login1`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV3AuthLogin1PostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV3AuthLogin2PostRequest} apiV3AuthLogin2PostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV3AuthLogin2Post: async (apiV3AuthLogin2PostRequest: ApiV3AuthLogin2PostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV3AuthLogin2PostRequest' is not null or undefined
            assertParamExists('apiV3AuthLogin2Post', 'apiV3AuthLogin2PostRequest', apiV3AuthLogin2PostRequest)
            const localVarPath = `/api/v3/auth/login2`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV3AuthLogin2PostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1SecretScanningCreateInstallationSessionOrganizationPostRequest} apiV1SecretScanningCreateInstallationSessionOrganizationPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV3AuthSelectOrganizationPost: async (apiV1SecretScanningCreateInstallationSessionOrganizationPostRequest: ApiV1SecretScanningCreateInstallationSessionOrganizationPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1SecretScanningCreateInstallationSessionOrganizationPostRequest' is not null or undefined
            assertParamExists('apiV3AuthSelectOrganizationPost', 'apiV1SecretScanningCreateInstallationSessionOrganizationPostRequest', apiV1SecretScanningCreateInstallationSessionOrganizationPostRequest)
            const localVarPath = `/api/v3/auth/select-organization`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1SecretScanningCreateInstallationSessionOrganizationPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Backfill secret references
         * @param {ApiV3SecretsBackfillSecretReferencesPostRequest} apiV3SecretsBackfillSecretReferencesPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV3SecretsBackfillSecretReferencesPost: async (apiV3SecretsBackfillSecretReferencesPostRequest: ApiV3SecretsBackfillSecretReferencesPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV3SecretsBackfillSecretReferencesPostRequest' is not null or undefined
            assertParamExists('apiV3SecretsBackfillSecretReferencesPost', 'apiV3SecretsBackfillSecretReferencesPostRequest', apiV3SecretsBackfillSecretReferencesPostRequest)
            const localVarPath = `/api/v3/secrets/backfill-secret-references`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV3SecretsBackfillSecretReferencesPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV3SecretsBatchDeleteRequest} apiV3SecretsBatchDeleteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV3SecretsBatchDelete: async (apiV3SecretsBatchDeleteRequest: ApiV3SecretsBatchDeleteRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV3SecretsBatchDeleteRequest' is not null or undefined
            assertParamExists('apiV3SecretsBatchDelete', 'apiV3SecretsBatchDeleteRequest', apiV3SecretsBatchDeleteRequest)
            const localVarPath = `/api/v3/secrets/batch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV3SecretsBatchDeleteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV3SecretsBatchPatchRequest} apiV3SecretsBatchPatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV3SecretsBatchPatch: async (apiV3SecretsBatchPatchRequest: ApiV3SecretsBatchPatchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV3SecretsBatchPatchRequest' is not null or undefined
            assertParamExists('apiV3SecretsBatchPatch', 'apiV3SecretsBatchPatchRequest', apiV3SecretsBatchPatchRequest)
            const localVarPath = `/api/v3/secrets/batch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV3SecretsBatchPatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV3SecretsBatchPostRequest} apiV3SecretsBatchPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV3SecretsBatchPost: async (apiV3SecretsBatchPostRequest: ApiV3SecretsBatchPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV3SecretsBatchPostRequest' is not null or undefined
            assertParamExists('apiV3SecretsBatchPost', 'apiV3SecretsBatchPostRequest', apiV3SecretsBatchPostRequest)
            const localVarPath = `/api/v3/secrets/batch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV3SecretsBatchPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete many secrets
         * @param {ApiV3SecretsBatchRawDeleteRequest} apiV3SecretsBatchRawDeleteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV3SecretsBatchRawDelete: async (apiV3SecretsBatchRawDeleteRequest: ApiV3SecretsBatchRawDeleteRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV3SecretsBatchRawDeleteRequest' is not null or undefined
            assertParamExists('apiV3SecretsBatchRawDelete', 'apiV3SecretsBatchRawDeleteRequest', apiV3SecretsBatchRawDeleteRequest)
            const localVarPath = `/api/v3/secrets/batch/raw`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV3SecretsBatchRawDeleteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update many secrets
         * @param {ApiV3SecretsBatchRawPatchRequest} apiV3SecretsBatchRawPatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV3SecretsBatchRawPatch: async (apiV3SecretsBatchRawPatchRequest: ApiV3SecretsBatchRawPatchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV3SecretsBatchRawPatchRequest' is not null or undefined
            assertParamExists('apiV3SecretsBatchRawPatch', 'apiV3SecretsBatchRawPatchRequest', apiV3SecretsBatchRawPatchRequest)
            const localVarPath = `/api/v3/secrets/batch/raw`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV3SecretsBatchRawPatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create many secrets
         * @param {ApiV3SecretsBatchRawPostRequest} apiV3SecretsBatchRawPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV3SecretsBatchRawPost: async (apiV3SecretsBatchRawPostRequest: ApiV3SecretsBatchRawPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV3SecretsBatchRawPostRequest' is not null or undefined
            assertParamExists('apiV3SecretsBatchRawPost', 'apiV3SecretsBatchRawPostRequest', apiV3SecretsBatchRawPostRequest)
            const localVarPath = `/api/v3/secrets/batch/raw`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV3SecretsBatchRawPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {string} environment 
         * @param {string} [secretPath] 
         * @param {ApiV3SecretsGetRecursiveEnum} [recursive] 
         * @param {ApiV3SecretsGetIncludeImportsEnum} [includeImports] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV3SecretsGet: async (workspaceId: string, environment: string, secretPath?: string, recursive?: ApiV3SecretsGetRecursiveEnum, includeImports?: ApiV3SecretsGetIncludeImportsEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('apiV3SecretsGet', 'workspaceId', workspaceId)
            // verify required parameter 'environment' is not null or undefined
            assertParamExists('apiV3SecretsGet', 'environment', environment)
            const localVarPath = `/api/v3/secrets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (workspaceId !== undefined) {
                localVarQueryParameter['workspaceId'] = workspaceId;
            }

            if (environment !== undefined) {
                localVarQueryParameter['environment'] = environment;
            }

            if (secretPath !== undefined) {
                localVarQueryParameter['secretPath'] = secretPath;
            }

            if (recursive !== undefined) {
                localVarQueryParameter['recursive'] = recursive;
            }

            if (includeImports !== undefined) {
                localVarQueryParameter['include_imports'] = includeImports;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV3SecretsMovePostRequest} apiV3SecretsMovePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV3SecretsMovePost: async (apiV3SecretsMovePostRequest: ApiV3SecretsMovePostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV3SecretsMovePostRequest' is not null or undefined
            assertParamExists('apiV3SecretsMovePost', 'apiV3SecretsMovePostRequest', apiV3SecretsMovePostRequest)
            const localVarPath = `/api/v3/secrets/move`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV3SecretsMovePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List secrets
         * @param {string} [workspaceId] The ID of the project to list secrets from.
         * @param {string} [workspaceSlug] The slug of the project to list secrets from. This parameter is only applicable by machine identities.
         * @param {string} [environment] The slug of the environment to list secrets from.
         * @param {string} [secretPath] The secret path to list secrets from.
         * @param {ApiV3SecretsRawGetExpandSecretReferencesEnum} [expandSecretReferences] Whether or not to expand secret references
         * @param {ApiV3SecretsRawGetRecursiveEnum} [recursive] Whether or not to fetch all secrets from the specified base path, and all of its subdirectories. Note, the max depth is 20 deep.
         * @param {ApiV3SecretsRawGetIncludeImportsEnum} [includeImports] Weather to include imported secrets or not.
         * @param {string} [tagSlugs] The comma separated tag slugs to filter secrets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV3SecretsRawGet: async (workspaceId?: string, workspaceSlug?: string, environment?: string, secretPath?: string, expandSecretReferences?: ApiV3SecretsRawGetExpandSecretReferencesEnum, recursive?: ApiV3SecretsRawGetRecursiveEnum, includeImports?: ApiV3SecretsRawGetIncludeImportsEnum, tagSlugs?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v3/secrets/raw`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (workspaceId !== undefined) {
                localVarQueryParameter['workspaceId'] = workspaceId;
            }

            if (workspaceSlug !== undefined) {
                localVarQueryParameter['workspaceSlug'] = workspaceSlug;
            }

            if (environment !== undefined) {
                localVarQueryParameter['environment'] = environment;
            }

            if (secretPath !== undefined) {
                localVarQueryParameter['secretPath'] = secretPath;
            }

            if (expandSecretReferences !== undefined) {
                localVarQueryParameter['expandSecretReferences'] = expandSecretReferences;
            }

            if (recursive !== undefined) {
                localVarQueryParameter['recursive'] = recursive;
            }

            if (includeImports !== undefined) {
                localVarQueryParameter['include_imports'] = includeImports;
            }

            if (tagSlugs !== undefined) {
                localVarQueryParameter['tagSlugs'] = tagSlugs;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete secret
         * @param {string} secretName The name of the secret to delete.
         * @param {ApiV3SecretsRawSecretNameDeleteRequest} apiV3SecretsRawSecretNameDeleteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV3SecretsRawSecretNameDelete: async (secretName: string, apiV3SecretsRawSecretNameDeleteRequest: ApiV3SecretsRawSecretNameDeleteRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'secretName' is not null or undefined
            assertParamExists('apiV3SecretsRawSecretNameDelete', 'secretName', secretName)
            // verify required parameter 'apiV3SecretsRawSecretNameDeleteRequest' is not null or undefined
            assertParamExists('apiV3SecretsRawSecretNameDelete', 'apiV3SecretsRawSecretNameDeleteRequest', apiV3SecretsRawSecretNameDeleteRequest)
            const localVarPath = `/api/v3/secrets/raw/{secretName}`
                .replace(`{${"secretName"}}`, encodeURIComponent(String(secretName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV3SecretsRawSecretNameDeleteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a secret by name
         * @param {string} secretName The name of the secret to get.
         * @param {string} [workspaceId] The ID of the project to get the secret from.
         * @param {string} [workspaceSlug] The slug of the project to get the secret from.
         * @param {string} [environment] The slug of the environment to get the secret from.
         * @param {string} [secretPath] The path of the secret to get.
         * @param {number} [version] The version of the secret to get.
         * @param {ApiV3SecretsRawSecretNameGetTypeEnum} [type] The type of the secret to get.
         * @param {ApiV3SecretsRawSecretNameGetExpandSecretReferencesEnum} [expandSecretReferences] Whether or not to expand secret references
         * @param {ApiV3SecretsRawSecretNameGetIncludeImportsEnum} [includeImports] Weather to include imported secrets or not.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV3SecretsRawSecretNameGet: async (secretName: string, workspaceId?: string, workspaceSlug?: string, environment?: string, secretPath?: string, version?: number, type?: ApiV3SecretsRawSecretNameGetTypeEnum, expandSecretReferences?: ApiV3SecretsRawSecretNameGetExpandSecretReferencesEnum, includeImports?: ApiV3SecretsRawSecretNameGetIncludeImportsEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'secretName' is not null or undefined
            assertParamExists('apiV3SecretsRawSecretNameGet', 'secretName', secretName)
            const localVarPath = `/api/v3/secrets/raw/{secretName}`
                .replace(`{${"secretName"}}`, encodeURIComponent(String(secretName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (workspaceId !== undefined) {
                localVarQueryParameter['workspaceId'] = workspaceId;
            }

            if (workspaceSlug !== undefined) {
                localVarQueryParameter['workspaceSlug'] = workspaceSlug;
            }

            if (environment !== undefined) {
                localVarQueryParameter['environment'] = environment;
            }

            if (secretPath !== undefined) {
                localVarQueryParameter['secretPath'] = secretPath;
            }

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (expandSecretReferences !== undefined) {
                localVarQueryParameter['expandSecretReferences'] = expandSecretReferences;
            }

            if (includeImports !== undefined) {
                localVarQueryParameter['include_imports'] = includeImports;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update secret
         * @param {string} secretName The name of the secret to update.
         * @param {ApiV3SecretsRawSecretNamePatchRequest} apiV3SecretsRawSecretNamePatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV3SecretsRawSecretNamePatch: async (secretName: string, apiV3SecretsRawSecretNamePatchRequest: ApiV3SecretsRawSecretNamePatchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'secretName' is not null or undefined
            assertParamExists('apiV3SecretsRawSecretNamePatch', 'secretName', secretName)
            // verify required parameter 'apiV3SecretsRawSecretNamePatchRequest' is not null or undefined
            assertParamExists('apiV3SecretsRawSecretNamePatch', 'apiV3SecretsRawSecretNamePatchRequest', apiV3SecretsRawSecretNamePatchRequest)
            const localVarPath = `/api/v3/secrets/raw/{secretName}`
                .replace(`{${"secretName"}}`, encodeURIComponent(String(secretName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV3SecretsRawSecretNamePatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create secret
         * @param {string} secretName The name of the secret to create.
         * @param {ApiV3SecretsRawSecretNamePostRequest} apiV3SecretsRawSecretNamePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV3SecretsRawSecretNamePost: async (secretName: string, apiV3SecretsRawSecretNamePostRequest: ApiV3SecretsRawSecretNamePostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'secretName' is not null or undefined
            assertParamExists('apiV3SecretsRawSecretNamePost', 'secretName', secretName)
            // verify required parameter 'apiV3SecretsRawSecretNamePostRequest' is not null or undefined
            assertParamExists('apiV3SecretsRawSecretNamePost', 'apiV3SecretsRawSecretNamePostRequest', apiV3SecretsRawSecretNamePostRequest)
            const localVarPath = `/api/v3/secrets/raw/{secretName}`
                .replace(`{${"secretName"}}`, encodeURIComponent(String(secretName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV3SecretsRawSecretNamePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} secretName 
         * @param {ApiV3SecretsSecretNameDeleteRequest} apiV3SecretsSecretNameDeleteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV3SecretsSecretNameDelete: async (secretName: string, apiV3SecretsSecretNameDeleteRequest: ApiV3SecretsSecretNameDeleteRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'secretName' is not null or undefined
            assertParamExists('apiV3SecretsSecretNameDelete', 'secretName', secretName)
            // verify required parameter 'apiV3SecretsSecretNameDeleteRequest' is not null or undefined
            assertParamExists('apiV3SecretsSecretNameDelete', 'apiV3SecretsSecretNameDeleteRequest', apiV3SecretsSecretNameDeleteRequest)
            const localVarPath = `/api/v3/secrets/{secretName}`
                .replace(`{${"secretName"}}`, encodeURIComponent(String(secretName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV3SecretsSecretNameDeleteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {string} environment 
         * @param {string} secretName 
         * @param {string} [secretPath] 
         * @param {ApiV3SecretsSecretNameGetTypeEnum} [type] 
         * @param {number} [version] 
         * @param {ApiV3SecretsSecretNameGetIncludeImportsEnum} [includeImports] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV3SecretsSecretNameGet: async (workspaceId: string, environment: string, secretName: string, secretPath?: string, type?: ApiV3SecretsSecretNameGetTypeEnum, version?: number, includeImports?: ApiV3SecretsSecretNameGetIncludeImportsEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('apiV3SecretsSecretNameGet', 'workspaceId', workspaceId)
            // verify required parameter 'environment' is not null or undefined
            assertParamExists('apiV3SecretsSecretNameGet', 'environment', environment)
            // verify required parameter 'secretName' is not null or undefined
            assertParamExists('apiV3SecretsSecretNameGet', 'secretName', secretName)
            const localVarPath = `/api/v3/secrets/{secretName}`
                .replace(`{${"secretName"}}`, encodeURIComponent(String(secretName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (workspaceId !== undefined) {
                localVarQueryParameter['workspaceId'] = workspaceId;
            }

            if (environment !== undefined) {
                localVarQueryParameter['environment'] = environment;
            }

            if (secretPath !== undefined) {
                localVarQueryParameter['secretPath'] = secretPath;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }

            if (includeImports !== undefined) {
                localVarQueryParameter['include_imports'] = includeImports;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} secretName 
         * @param {ApiV3SecretsSecretNamePatchRequest} apiV3SecretsSecretNamePatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV3SecretsSecretNamePatch: async (secretName: string, apiV3SecretsSecretNamePatchRequest: ApiV3SecretsSecretNamePatchRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'secretName' is not null or undefined
            assertParamExists('apiV3SecretsSecretNamePatch', 'secretName', secretName)
            // verify required parameter 'apiV3SecretsSecretNamePatchRequest' is not null or undefined
            assertParamExists('apiV3SecretsSecretNamePatch', 'apiV3SecretsSecretNamePatchRequest', apiV3SecretsSecretNamePatchRequest)
            const localVarPath = `/api/v3/secrets/{secretName}`
                .replace(`{${"secretName"}}`, encodeURIComponent(String(secretName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV3SecretsSecretNamePatchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} secretName 
         * @param {ApiV3SecretsSecretNamePostRequest} apiV3SecretsSecretNamePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV3SecretsSecretNamePost: async (secretName: string, apiV3SecretsSecretNamePostRequest: ApiV3SecretsSecretNamePostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'secretName' is not null or undefined
            assertParamExists('apiV3SecretsSecretNamePost', 'secretName', secretName)
            // verify required parameter 'apiV3SecretsSecretNamePostRequest' is not null or undefined
            assertParamExists('apiV3SecretsSecretNamePost', 'apiV3SecretsSecretNamePostRequest', apiV3SecretsSecretNamePostRequest)
            const localVarPath = `/api/v3/secrets/{secretName}`
                .replace(`{${"secretName"}}`, encodeURIComponent(String(secretName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV3SecretsSecretNamePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Detach tags from a secret
         * @param {string} secretName The name of the secret to detach tags from.
         * @param {ApiV3SecretsTagsSecretNameDeleteRequest} apiV3SecretsTagsSecretNameDeleteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV3SecretsTagsSecretNameDelete: async (secretName: string, apiV3SecretsTagsSecretNameDeleteRequest: ApiV3SecretsTagsSecretNameDeleteRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'secretName' is not null or undefined
            assertParamExists('apiV3SecretsTagsSecretNameDelete', 'secretName', secretName)
            // verify required parameter 'apiV3SecretsTagsSecretNameDeleteRequest' is not null or undefined
            assertParamExists('apiV3SecretsTagsSecretNameDelete', 'apiV3SecretsTagsSecretNameDeleteRequest', apiV3SecretsTagsSecretNameDeleteRequest)
            const localVarPath = `/api/v3/secrets/tags/{secretName}`
                .replace(`{${"secretName"}}`, encodeURIComponent(String(secretName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV3SecretsTagsSecretNameDeleteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Attach tags to a secret
         * @param {string} secretName The name of the secret to attach tags to.
         * @param {ApiV3SecretsTagsSecretNamePostRequest} apiV3SecretsTagsSecretNamePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV3SecretsTagsSecretNamePost: async (secretName: string, apiV3SecretsTagsSecretNamePostRequest: ApiV3SecretsTagsSecretNamePostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'secretName' is not null or undefined
            assertParamExists('apiV3SecretsTagsSecretNamePost', 'secretName', secretName)
            // verify required parameter 'apiV3SecretsTagsSecretNamePostRequest' is not null or undefined
            assertParamExists('apiV3SecretsTagsSecretNamePost', 'apiV3SecretsTagsSecretNamePostRequest', apiV3SecretsTagsSecretNamePostRequest)
            const localVarPath = `/api/v3/secrets/tags/{secretName}`
                .replace(`{${"secretName"}}`, encodeURIComponent(String(secretName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV3SecretsTagsSecretNamePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV3SignupCompleteAccountInvitePostRequest} apiV3SignupCompleteAccountInvitePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV3SignupCompleteAccountInvitePost: async (apiV3SignupCompleteAccountInvitePostRequest: ApiV3SignupCompleteAccountInvitePostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV3SignupCompleteAccountInvitePostRequest' is not null or undefined
            assertParamExists('apiV3SignupCompleteAccountInvitePost', 'apiV3SignupCompleteAccountInvitePostRequest', apiV3SignupCompleteAccountInvitePostRequest)
            const localVarPath = `/api/v3/signup/complete-account/invite`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV3SignupCompleteAccountInvitePostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV3SignupCompleteAccountSignupPostRequest} apiV3SignupCompleteAccountSignupPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV3SignupCompleteAccountSignupPost: async (apiV3SignupCompleteAccountSignupPostRequest: ApiV3SignupCompleteAccountSignupPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV3SignupCompleteAccountSignupPostRequest' is not null or undefined
            assertParamExists('apiV3SignupCompleteAccountSignupPost', 'apiV3SignupCompleteAccountSignupPostRequest', apiV3SignupCompleteAccountSignupPostRequest)
            const localVarPath = `/api/v3/signup/complete-account/signup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV3SignupCompleteAccountSignupPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1PasswordEmailPasswordResetPostRequest} apiV1PasswordEmailPasswordResetPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV3SignupEmailSignupPost: async (apiV1PasswordEmailPasswordResetPostRequest: ApiV1PasswordEmailPasswordResetPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1PasswordEmailPasswordResetPostRequest' is not null or undefined
            assertParamExists('apiV3SignupEmailSignupPost', 'apiV1PasswordEmailPasswordResetPostRequest', apiV1PasswordEmailPasswordResetPostRequest)
            const localVarPath = `/api/v3/signup/email/signup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1PasswordEmailPasswordResetPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiV1PasswordEmailPasswordResetVerifyPostRequest} apiV1PasswordEmailPasswordResetVerifyPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV3SignupEmailVerifyPost: async (apiV1PasswordEmailPasswordResetVerifyPostRequest: ApiV1PasswordEmailPasswordResetVerifyPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1PasswordEmailPasswordResetVerifyPostRequest' is not null or undefined
            assertParamExists('apiV3SignupEmailVerifyPost', 'apiV1PasswordEmailPasswordResetVerifyPostRequest', apiV1PasswordEmailPasswordResetVerifyPostRequest)
            const localVarPath = `/api/v3/signup/email/verify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1PasswordEmailPasswordResetVerifyPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV3UsersMeApiKeysGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v3/users/me/api-keys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV3WorkspacesProjectIdSecretsBlindIndexStatusGet: async (projectId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('apiV3WorkspacesProjectIdSecretsBlindIndexStatusGet', 'projectId', projectId)
            const localVarPath = `/api/v3/workspaces/{projectId}/secrets/blind-index-status`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV3WorkspacesProjectIdSecretsGet: async (projectId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('apiV3WorkspacesProjectIdSecretsGet', 'projectId', projectId)
            const localVarPath = `/api/v3/workspaces/{projectId}/secrets`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} projectId 
         * @param {ApiV3WorkspacesProjectIdSecretsNamesPostRequest} apiV3WorkspacesProjectIdSecretsNamesPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV3WorkspacesProjectIdSecretsNamesPost: async (projectId: string, apiV3WorkspacesProjectIdSecretsNamesPostRequest: ApiV3WorkspacesProjectIdSecretsNamesPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('apiV3WorkspacesProjectIdSecretsNamesPost', 'projectId', projectId)
            // verify required parameter 'apiV3WorkspacesProjectIdSecretsNamesPostRequest' is not null or undefined
            assertParamExists('apiV3WorkspacesProjectIdSecretsNamesPost', 'apiV3WorkspacesProjectIdSecretsNamesPostRequest', apiV3WorkspacesProjectIdSecretsNamesPostRequest)
            const localVarPath = `/api/v3/workspaces/{projectId}/secrets/names`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV3WorkspacesProjectIdSecretsNamesPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} certificateTemplateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wellKnownEstCertificateTemplateIdCacertsGet: async (certificateTemplateId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'certificateTemplateId' is not null or undefined
            assertParamExists('wellKnownEstCertificateTemplateIdCacertsGet', 'certificateTemplateId', certificateTemplateId)
            const localVarPath = `/.well-known/est/{certificateTemplateId}/cacerts`
                .replace(`{${"certificateTemplateId"}}`, encodeURIComponent(String(certificateTemplateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} certificateTemplateId 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wellKnownEstCertificateTemplateIdSimpleenrollPost: async (certificateTemplateId: string, body?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'certificateTemplateId' is not null or undefined
            assertParamExists('wellKnownEstCertificateTemplateIdSimpleenrollPost', 'certificateTemplateId', certificateTemplateId)
            const localVarPath = `/.well-known/est/{certificateTemplateId}/simpleenroll`
                .replace(`{${"certificateTemplateId"}}`, encodeURIComponent(String(certificateTemplateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} certificateTemplateId 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wellKnownEstCertificateTemplateIdSimplereenrollPost: async (certificateTemplateId: string, body?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'certificateTemplateId' is not null or undefined
            assertParamExists('wellKnownEstCertificateTemplateIdSimplereenrollPost', 'certificateTemplateId', certificateTemplateId)
            const localVarPath = `/.well-known/est/{certificateTemplateId}/simplereenroll`
                .replace(`{${"certificateTemplateId"}}`, encodeURIComponent(String(certificateTemplateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiStatusGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiStatusGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiStatusGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiStatusGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} projectSlug 
         * @param {string} envSlug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AccessApprovalsPoliciesCountGet(projectSlug: string, envSlug: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1WorkspaceWorkspaceIdSecretSnapshotsCountGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AccessApprovalsPoliciesCountGet(projectSlug, envSlug, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AccessApprovalsPoliciesCountGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} projectSlug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AccessApprovalsPoliciesGet(projectSlug: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1SecretApprovalsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AccessApprovalsPoliciesGet(projectSlug, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AccessApprovalsPoliciesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} policyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AccessApprovalsPoliciesPolicyIdDelete(policyId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1SecretApprovalsPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AccessApprovalsPoliciesPolicyIdDelete(policyId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AccessApprovalsPoliciesPolicyIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} policyId 
         * @param {ApiV1AccessApprovalsPoliciesPolicyIdPatchRequest} apiV1AccessApprovalsPoliciesPolicyIdPatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AccessApprovalsPoliciesPolicyIdPatch(policyId: string, apiV1AccessApprovalsPoliciesPolicyIdPatchRequest: ApiV1AccessApprovalsPoliciesPolicyIdPatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1SecretApprovalsPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AccessApprovalsPoliciesPolicyIdPatch(policyId, apiV1AccessApprovalsPoliciesPolicyIdPatchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AccessApprovalsPoliciesPolicyIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1AccessApprovalsPoliciesPostRequest} apiV1AccessApprovalsPoliciesPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AccessApprovalsPoliciesPost(apiV1AccessApprovalsPoliciesPostRequest: ApiV1AccessApprovalsPoliciesPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1SecretApprovalsPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AccessApprovalsPoliciesPost(apiV1AccessApprovalsPoliciesPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AccessApprovalsPoliciesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} projectSlug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AccessApprovalsRequestsCountGet(projectSlug: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AccessApprovalsRequestsCountGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AccessApprovalsRequestsCountGet(projectSlug, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AccessApprovalsRequestsCountGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} projectSlug 
         * @param {string} [authorProjectMembershipId] 
         * @param {string} [envSlug] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AccessApprovalsRequestsGet(projectSlug: string, authorProjectMembershipId?: string, envSlug?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AccessApprovalsRequestsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AccessApprovalsRequestsGet(projectSlug, authorProjectMembershipId, envSlug, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AccessApprovalsRequestsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} projectSlug 
         * @param {ApiV1AccessApprovalsRequestsPostRequest} apiV1AccessApprovalsRequestsPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AccessApprovalsRequestsPost(projectSlug: string, apiV1AccessApprovalsRequestsPostRequest: ApiV1AccessApprovalsRequestsPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AccessApprovalsRequestsPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AccessApprovalsRequestsPost(projectSlug, apiV1AccessApprovalsRequestsPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AccessApprovalsRequestsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} requestId 
         * @param {ApiV1SecretApprovalRequestsIdReviewPostRequest} apiV1SecretApprovalRequestsIdReviewPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AccessApprovalsRequestsRequestIdReviewPost(requestId: string, apiV1SecretApprovalRequestsIdReviewPostRequest: ApiV1SecretApprovalRequestsIdReviewPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AccessApprovalsRequestsRequestIdReviewPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AccessApprovalsRequestsRequestIdReviewPost(requestId, apiV1SecretApprovalRequestsIdReviewPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AccessApprovalsRequestsRequestIdReviewPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete a specific privilege of an identity.
         * @param {ApiV1AdditionalPrivilegeIdentityDeleteRequest} apiV1AdditionalPrivilegeIdentityDeleteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AdditionalPrivilegeIdentityDelete(apiV1AdditionalPrivilegeIdentityDeleteRequest: ApiV1AdditionalPrivilegeIdentityDeleteRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AdditionalPrivilegeIdentityPermanentPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AdditionalPrivilegeIdentityDelete(apiV1AdditionalPrivilegeIdentityDeleteRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AdditionalPrivilegeIdentityDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List of a specific privilege of an identity in a project.
         * @param {string} identityId The ID of the identity to list.
         * @param {string} projectSlug The slug of the project of the identity in.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AdditionalPrivilegeIdentityGet(identityId: string, projectSlug: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AdditionalPrivilegeIdentityGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AdditionalPrivilegeIdentityGet(identityId, projectSlug, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AdditionalPrivilegeIdentityGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update a specific privilege of an identity.
         * @param {ApiV1AdditionalPrivilegeIdentityPatchRequest} apiV1AdditionalPrivilegeIdentityPatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AdditionalPrivilegeIdentityPatch(apiV1AdditionalPrivilegeIdentityPatchRequest: ApiV1AdditionalPrivilegeIdentityPatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AdditionalPrivilegeIdentityPermanentPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AdditionalPrivilegeIdentityPatch(apiV1AdditionalPrivilegeIdentityPatchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AdditionalPrivilegeIdentityPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a permanent or a non expiry specific privilege for identity.
         * @param {ApiV1AdditionalPrivilegeIdentityPermanentPostRequest} apiV1AdditionalPrivilegeIdentityPermanentPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AdditionalPrivilegeIdentityPermanentPost(apiV1AdditionalPrivilegeIdentityPermanentPostRequest: ApiV1AdditionalPrivilegeIdentityPermanentPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AdditionalPrivilegeIdentityPermanentPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AdditionalPrivilegeIdentityPermanentPost(apiV1AdditionalPrivilegeIdentityPermanentPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AdditionalPrivilegeIdentityPermanentPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve details of a specific privilege by privilege slug.
         * @param {string} identityId The ID of the identity to list.
         * @param {string} projectSlug The slug of the project of the identity in.
         * @param {string} privilegeSlug The slug of the privilege.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AdditionalPrivilegeIdentityPrivilegeSlugGet(identityId: string, projectSlug: string, privilegeSlug: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AdditionalPrivilegeIdentityPermanentPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AdditionalPrivilegeIdentityPrivilegeSlugGet(identityId, projectSlug, privilegeSlug, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AdditionalPrivilegeIdentityPrivilegeSlugGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a temporary or a expiring specific privilege for identity.
         * @param {ApiV1AdditionalPrivilegeIdentityTemporaryPostRequest} apiV1AdditionalPrivilegeIdentityTemporaryPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AdditionalPrivilegeIdentityTemporaryPost(apiV1AdditionalPrivilegeIdentityTemporaryPostRequest: ApiV1AdditionalPrivilegeIdentityTemporaryPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AdditionalPrivilegeIdentityPermanentPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AdditionalPrivilegeIdentityTemporaryPost(apiV1AdditionalPrivilegeIdentityTemporaryPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AdditionalPrivilegeIdentityTemporaryPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} projectMembershipId Project membership id of user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AdditionalPrivilegeUsersGet(projectMembershipId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AdditionalPrivilegeUsersGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AdditionalPrivilegeUsersGet(projectMembershipId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AdditionalPrivilegeUsersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1AdditionalPrivilegeUsersPermanentPostRequest} apiV1AdditionalPrivilegeUsersPermanentPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AdditionalPrivilegeUsersPermanentPost(apiV1AdditionalPrivilegeUsersPermanentPostRequest: ApiV1AdditionalPrivilegeUsersPermanentPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AdditionalPrivilegeUsersPermanentPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AdditionalPrivilegeUsersPermanentPost(apiV1AdditionalPrivilegeUsersPermanentPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AdditionalPrivilegeUsersPermanentPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} privilegeId The id of privilege object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AdditionalPrivilegeUsersPrivilegeIdDelete(privilegeId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AdditionalPrivilegeUsersPermanentPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AdditionalPrivilegeUsersPrivilegeIdDelete(privilegeId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AdditionalPrivilegeUsersPrivilegeIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} privilegeId The id of privilege object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AdditionalPrivilegeUsersPrivilegeIdGet(privilegeId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AdditionalPrivilegeUsersPermanentPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AdditionalPrivilegeUsersPrivilegeIdGet(privilegeId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AdditionalPrivilegeUsersPrivilegeIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} privilegeId The id of privilege object
         * @param {ApiV1AdditionalPrivilegeUsersPrivilegeIdPatchRequest} [apiV1AdditionalPrivilegeUsersPrivilegeIdPatchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AdditionalPrivilegeUsersPrivilegeIdPatch(privilegeId: string, apiV1AdditionalPrivilegeUsersPrivilegeIdPatchRequest?: ApiV1AdditionalPrivilegeUsersPrivilegeIdPatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AdditionalPrivilegeUsersPermanentPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AdditionalPrivilegeUsersPrivilegeIdPatch(privilegeId, apiV1AdditionalPrivilegeUsersPrivilegeIdPatchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AdditionalPrivilegeUsersPrivilegeIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1AdditionalPrivilegeUsersTemporaryPostRequest} apiV1AdditionalPrivilegeUsersTemporaryPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AdditionalPrivilegeUsersTemporaryPost(apiV1AdditionalPrivilegeUsersTemporaryPostRequest: ApiV1AdditionalPrivilegeUsersTemporaryPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AdditionalPrivilegeUsersPermanentPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AdditionalPrivilegeUsersTemporaryPost(apiV1AdditionalPrivilegeUsersTemporaryPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AdditionalPrivilegeUsersTemporaryPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AdminConfigGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AdminConfigGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AdminConfigGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AdminConfigGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1AdminConfigPatchRequest} [apiV1AdminConfigPatchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AdminConfigPatch(apiV1AdminConfigPatchRequest?: ApiV1AdminConfigPatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AdminConfigPatch200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AdminConfigPatch(apiV1AdminConfigPatchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AdminConfigPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1AdminSignupPostRequest} apiV1AdminSignupPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AdminSignupPost(apiV1AdminSignupPostRequest: ApiV1AdminSignupPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AdminSignupPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AdminSignupPost(apiV1AdminSignupPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AdminSignupPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [searchTerm] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AdminUserManagementUsersGet(searchTerm?: string, offset?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AdminUserManagementUsersGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AdminUserManagementUsersGet(searchTerm, offset, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AdminUserManagementUsersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AdminUserManagementUsersUserIdDelete(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AdminUserManagementUsersUserIdDelete200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AdminUserManagementUsersUserIdDelete(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AdminUserManagementUsersUserIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List Audit Log Streams.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuditLogStreamsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AuditLogStreamsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuditLogStreamsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AuditLogStreamsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete an Audit Log Stream by ID.
         * @param {string} id The ID of the audit log stream to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuditLogStreamsIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AuditLogStreamsPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuditLogStreamsIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AuditLogStreamsIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get an Audit Log Stream by ID.
         * @param {string} id The ID of the audit log stream to get details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuditLogStreamsIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AuditLogStreamsIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuditLogStreamsIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AuditLogStreamsIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update an Audit Log Stream by ID.
         * @param {string} id The ID of the audit log stream to update.
         * @param {ApiV1AuditLogStreamsIdPatchRequest} [apiV1AuditLogStreamsIdPatchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuditLogStreamsIdPatch(id: string, apiV1AuditLogStreamsIdPatchRequest?: ApiV1AuditLogStreamsIdPatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AuditLogStreamsPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuditLogStreamsIdPatch(id, apiV1AuditLogStreamsIdPatchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AuditLogStreamsIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create an Audit Log Stream.
         * @param {ApiV1AuditLogStreamsPostRequest} apiV1AuditLogStreamsPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuditLogStreamsPost(apiV1AuditLogStreamsPostRequest: ApiV1AuditLogStreamsPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AuditLogStreamsPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuditLogStreamsPost(apiV1AuditLogStreamsPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AuditLogStreamsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete AWS Auth configuration on identity
         * @param {string} identityId The ID of the identity to revoke the auth method for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthAwsAuthIdentitiesIdentityIdDelete(identityId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AuthAwsAuthIdentitiesIdentityIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthAwsAuthIdentitiesIdentityIdDelete(identityId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AuthAwsAuthIdentitiesIdentityIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve AWS Auth configuration on identity
         * @param {string} identityId The ID of the identity to retrieve the auth method for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthAwsAuthIdentitiesIdentityIdGet(identityId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AuthAwsAuthIdentitiesIdentityIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthAwsAuthIdentitiesIdentityIdGet(identityId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AuthAwsAuthIdentitiesIdentityIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update AWS Auth configuration on identity
         * @param {string} identityId The ID of the identity to update the auth method for.
         * @param {ApiV1AuthAwsAuthIdentitiesIdentityIdPatchRequest} [apiV1AuthAwsAuthIdentitiesIdentityIdPatchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthAwsAuthIdentitiesIdentityIdPatch(identityId: string, apiV1AuthAwsAuthIdentitiesIdentityIdPatchRequest?: ApiV1AuthAwsAuthIdentitiesIdentityIdPatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AuthAwsAuthIdentitiesIdentityIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthAwsAuthIdentitiesIdentityIdPatch(identityId, apiV1AuthAwsAuthIdentitiesIdentityIdPatchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AuthAwsAuthIdentitiesIdentityIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Attach AWS Auth configuration onto identity
         * @param {string} identityId The ID of the identity to attach the configuration onto.
         * @param {ApiV1AuthAwsAuthIdentitiesIdentityIdPostRequest} [apiV1AuthAwsAuthIdentitiesIdentityIdPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthAwsAuthIdentitiesIdentityIdPost(identityId: string, apiV1AuthAwsAuthIdentitiesIdentityIdPostRequest?: ApiV1AuthAwsAuthIdentitiesIdentityIdPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AuthAwsAuthIdentitiesIdentityIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthAwsAuthIdentitiesIdentityIdPost(identityId, apiV1AuthAwsAuthIdentitiesIdentityIdPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AuthAwsAuthIdentitiesIdentityIdPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Login with AWS Auth
         * @param {ApiV1AuthAwsAuthLoginPostRequest} apiV1AuthAwsAuthLoginPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthAwsAuthLoginPost(apiV1AuthAwsAuthLoginPostRequest: ApiV1AuthAwsAuthLoginPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AuthTokenAuthIdentitiesIdentityIdTokensPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthAwsAuthLoginPost(apiV1AuthAwsAuthLoginPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AuthAwsAuthLoginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete Azure Auth configuration on identity
         * @param {string} identityId The ID of the identity to revoke the auth method for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthAzureAuthIdentitiesIdentityIdDelete(identityId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AuthAzureAuthIdentitiesIdentityIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthAzureAuthIdentitiesIdentityIdDelete(identityId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AuthAzureAuthIdentitiesIdentityIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve Azure Auth configuration on identity
         * @param {string} identityId The ID of the identity to retrieve the auth method for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthAzureAuthIdentitiesIdentityIdGet(identityId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AuthAzureAuthIdentitiesIdentityIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthAzureAuthIdentitiesIdentityIdGet(identityId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AuthAzureAuthIdentitiesIdentityIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update Azure Auth configuration on identity
         * @param {string} identityId The ID of the identity to update the auth method for.
         * @param {ApiV1AuthAzureAuthIdentitiesIdentityIdPatchRequest} [apiV1AuthAzureAuthIdentitiesIdentityIdPatchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthAzureAuthIdentitiesIdentityIdPatch(identityId: string, apiV1AuthAzureAuthIdentitiesIdentityIdPatchRequest?: ApiV1AuthAzureAuthIdentitiesIdentityIdPatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AuthAzureAuthIdentitiesIdentityIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthAzureAuthIdentitiesIdentityIdPatch(identityId, apiV1AuthAzureAuthIdentitiesIdentityIdPatchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AuthAzureAuthIdentitiesIdentityIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Attach Azure Auth configuration onto identity
         * @param {string} identityId The ID of the identity to login.
         * @param {ApiV1AuthAzureAuthIdentitiesIdentityIdPostRequest} apiV1AuthAzureAuthIdentitiesIdentityIdPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthAzureAuthIdentitiesIdentityIdPost(identityId: string, apiV1AuthAzureAuthIdentitiesIdentityIdPostRequest: ApiV1AuthAzureAuthIdentitiesIdentityIdPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AuthAzureAuthIdentitiesIdentityIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthAzureAuthIdentitiesIdentityIdPost(identityId, apiV1AuthAzureAuthIdentitiesIdentityIdPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AuthAzureAuthIdentitiesIdentityIdPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Login with Azure Auth
         * @param {ApiV1AuthKubernetesAuthLoginPostRequest} apiV1AuthKubernetesAuthLoginPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthAzureAuthLoginPost(apiV1AuthKubernetesAuthLoginPostRequest: ApiV1AuthKubernetesAuthLoginPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AuthTokenAuthIdentitiesIdentityIdTokensPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthAzureAuthLoginPost(apiV1AuthKubernetesAuthLoginPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AuthAzureAuthLoginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthCheckAuthPost(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AuthCheckAuthPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthCheckAuthPost(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AuthCheckAuthPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete GCP Auth configuration on identity
         * @param {string} identityId The ID of the identity to revoke the auth method for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthGcpAuthIdentitiesIdentityIdDelete(identityId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AuthGcpAuthIdentitiesIdentityIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthGcpAuthIdentitiesIdentityIdDelete(identityId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AuthGcpAuthIdentitiesIdentityIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve GCP Auth configuration on identity
         * @param {string} identityId The ID of the identity to retrieve the auth method for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthGcpAuthIdentitiesIdentityIdGet(identityId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AuthGcpAuthIdentitiesIdentityIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthGcpAuthIdentitiesIdentityIdGet(identityId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AuthGcpAuthIdentitiesIdentityIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update GCP Auth configuration on identity
         * @param {string} identityId The ID of the identity to update the auth method for.
         * @param {ApiV1AuthGcpAuthIdentitiesIdentityIdPatchRequest} [apiV1AuthGcpAuthIdentitiesIdentityIdPatchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthGcpAuthIdentitiesIdentityIdPatch(identityId: string, apiV1AuthGcpAuthIdentitiesIdentityIdPatchRequest?: ApiV1AuthGcpAuthIdentitiesIdentityIdPatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AuthGcpAuthIdentitiesIdentityIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthGcpAuthIdentitiesIdentityIdPatch(identityId, apiV1AuthGcpAuthIdentitiesIdentityIdPatchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AuthGcpAuthIdentitiesIdentityIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Attach GCP Auth configuration onto identity
         * @param {string} identityId The ID of the identity to attach the configuration onto.
         * @param {ApiV1AuthGcpAuthIdentitiesIdentityIdPostRequest} apiV1AuthGcpAuthIdentitiesIdentityIdPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthGcpAuthIdentitiesIdentityIdPost(identityId: string, apiV1AuthGcpAuthIdentitiesIdentityIdPostRequest: ApiV1AuthGcpAuthIdentitiesIdentityIdPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AuthGcpAuthIdentitiesIdentityIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthGcpAuthIdentitiesIdentityIdPost(identityId, apiV1AuthGcpAuthIdentitiesIdentityIdPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AuthGcpAuthIdentitiesIdentityIdPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Login with GCP Auth
         * @param {ApiV1AuthKubernetesAuthLoginPostRequest} apiV1AuthKubernetesAuthLoginPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthGcpAuthLoginPost(apiV1AuthKubernetesAuthLoginPostRequest: ApiV1AuthKubernetesAuthLoginPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AuthTokenAuthIdentitiesIdentityIdTokensPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthGcpAuthLoginPost(apiV1AuthKubernetesAuthLoginPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AuthGcpAuthLoginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete Kubernetes Auth configuration on identity
         * @param {string} identityId The ID of the identity to revoke the auth method for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthKubernetesAuthIdentitiesIdentityIdDelete(identityId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AuthKubernetesAuthIdentitiesIdentityIdDelete200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthKubernetesAuthIdentitiesIdentityIdDelete(identityId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AuthKubernetesAuthIdentitiesIdentityIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve Kubernetes Auth configuration on identity
         * @param {string} identityId The ID of the identity to retrieve the auth method for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthKubernetesAuthIdentitiesIdentityIdGet(identityId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AuthKubernetesAuthIdentitiesIdentityIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthKubernetesAuthIdentitiesIdentityIdGet(identityId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AuthKubernetesAuthIdentitiesIdentityIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update Kubernetes Auth configuration on identity
         * @param {string} identityId The ID of the identity to update the auth method for.
         * @param {ApiV1AuthKubernetesAuthIdentitiesIdentityIdPatchRequest} [apiV1AuthKubernetesAuthIdentitiesIdentityIdPatchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthKubernetesAuthIdentitiesIdentityIdPatch(identityId: string, apiV1AuthKubernetesAuthIdentitiesIdentityIdPatchRequest?: ApiV1AuthKubernetesAuthIdentitiesIdentityIdPatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AuthKubernetesAuthIdentitiesIdentityIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthKubernetesAuthIdentitiesIdentityIdPatch(identityId, apiV1AuthKubernetesAuthIdentitiesIdentityIdPatchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AuthKubernetesAuthIdentitiesIdentityIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Attach Kubernetes Auth configuration onto identity
         * @param {string} identityId The ID of the identity to attach the configuration onto.
         * @param {ApiV1AuthKubernetesAuthIdentitiesIdentityIdPostRequest} apiV1AuthKubernetesAuthIdentitiesIdentityIdPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthKubernetesAuthIdentitiesIdentityIdPost(identityId: string, apiV1AuthKubernetesAuthIdentitiesIdentityIdPostRequest: ApiV1AuthKubernetesAuthIdentitiesIdentityIdPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AuthKubernetesAuthIdentitiesIdentityIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthKubernetesAuthIdentitiesIdentityIdPost(identityId, apiV1AuthKubernetesAuthIdentitiesIdentityIdPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AuthKubernetesAuthIdentitiesIdentityIdPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Login with Kubernetes Auth
         * @param {ApiV1AuthKubernetesAuthLoginPostRequest} apiV1AuthKubernetesAuthLoginPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthKubernetesAuthLoginPost(apiV1AuthKubernetesAuthLoginPostRequest: ApiV1AuthKubernetesAuthLoginPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AuthTokenAuthIdentitiesIdentityIdTokensPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthKubernetesAuthLoginPost(apiV1AuthKubernetesAuthLoginPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AuthKubernetesAuthLoginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthLogoutPost(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1WorkspaceWorkspaceIdMigrateV3Post200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthLogoutPost(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AuthLogoutPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete OIDC Auth configuration on identity
         * @param {string} identityId The ID of the identity to revoke the auth method for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthOidcAuthIdentitiesIdentityIdDelete(identityId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AuthOidcAuthIdentitiesIdentityIdDelete200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthOidcAuthIdentitiesIdentityIdDelete(identityId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AuthOidcAuthIdentitiesIdentityIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve OIDC Auth configuration on identity
         * @param {string} identityId The ID of the identity to retrieve the auth method for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthOidcAuthIdentitiesIdentityIdGet(identityId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AuthOidcAuthIdentitiesIdentityIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthOidcAuthIdentitiesIdentityIdGet(identityId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AuthOidcAuthIdentitiesIdentityIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update OIDC Auth configuration on identity
         * @param {string} identityId The ID of the identity to update the auth method for.
         * @param {ApiV1AuthOidcAuthIdentitiesIdentityIdPatchRequest} [apiV1AuthOidcAuthIdentitiesIdentityIdPatchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthOidcAuthIdentitiesIdentityIdPatch(identityId: string, apiV1AuthOidcAuthIdentitiesIdentityIdPatchRequest?: ApiV1AuthOidcAuthIdentitiesIdentityIdPatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AuthOidcAuthIdentitiesIdentityIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthOidcAuthIdentitiesIdentityIdPatch(identityId, apiV1AuthOidcAuthIdentitiesIdentityIdPatchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AuthOidcAuthIdentitiesIdentityIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Attach OIDC Auth configuration onto identity
         * @param {string} identityId The ID of the identity to attach the configuration onto.
         * @param {ApiV1AuthOidcAuthIdentitiesIdentityIdPostRequest} apiV1AuthOidcAuthIdentitiesIdentityIdPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthOidcAuthIdentitiesIdentityIdPost(identityId: string, apiV1AuthOidcAuthIdentitiesIdentityIdPostRequest: ApiV1AuthOidcAuthIdentitiesIdentityIdPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AuthOidcAuthIdentitiesIdentityIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthOidcAuthIdentitiesIdentityIdPost(identityId, apiV1AuthOidcAuthIdentitiesIdentityIdPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AuthOidcAuthIdentitiesIdentityIdPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Login with OIDC Auth
         * @param {ApiV1AuthKubernetesAuthLoginPostRequest} apiV1AuthKubernetesAuthLoginPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthOidcAuthLoginPost(apiV1AuthKubernetesAuthLoginPostRequest: ApiV1AuthKubernetesAuthLoginPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AuthTokenAuthIdentitiesIdentityIdTokensPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthOidcAuthLoginPost(apiV1AuthKubernetesAuthLoginPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AuthOidcAuthLoginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete Token Auth configuration on identity
         * @param {string} identityId The ID of the identity to revoke the auth method for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthTokenAuthIdentitiesIdentityIdDelete(identityId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AuthTokenAuthIdentitiesIdentityIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthTokenAuthIdentitiesIdentityIdDelete(identityId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AuthTokenAuthIdentitiesIdentityIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve Token Auth configuration on identity
         * @param {string} identityId The ID of the identity to retrieve the auth method for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthTokenAuthIdentitiesIdentityIdGet(identityId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AuthTokenAuthIdentitiesIdentityIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthTokenAuthIdentitiesIdentityIdGet(identityId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AuthTokenAuthIdentitiesIdentityIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update Token Auth configuration on identity
         * @param {string} identityId The ID of the identity to update the auth method for.
         * @param {ApiV1AuthTokenAuthIdentitiesIdentityIdPatchRequest} [apiV1AuthTokenAuthIdentitiesIdentityIdPatchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthTokenAuthIdentitiesIdentityIdPatch(identityId: string, apiV1AuthTokenAuthIdentitiesIdentityIdPatchRequest?: ApiV1AuthTokenAuthIdentitiesIdentityIdPatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AuthTokenAuthIdentitiesIdentityIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthTokenAuthIdentitiesIdentityIdPatch(identityId, apiV1AuthTokenAuthIdentitiesIdentityIdPatchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AuthTokenAuthIdentitiesIdentityIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Attach Token Auth configuration onto identity
         * @param {string} identityId The ID of the identity to attach the configuration onto.
         * @param {ApiV1AuthTokenAuthIdentitiesIdentityIdPostRequest} [apiV1AuthTokenAuthIdentitiesIdentityIdPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthTokenAuthIdentitiesIdentityIdPost(identityId: string, apiV1AuthTokenAuthIdentitiesIdentityIdPostRequest?: ApiV1AuthTokenAuthIdentitiesIdentityIdPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AuthTokenAuthIdentitiesIdentityIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthTokenAuthIdentitiesIdentityIdPost(identityId, apiV1AuthTokenAuthIdentitiesIdentityIdPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AuthTokenAuthIdentitiesIdentityIdPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get tokens for identity with Token Auth
         * @param {string} identityId The ID of the identity to list token metadata for.
         * @param {number} [offset] The offset to start from. If you enter 10, it will start from the 10th token.
         * @param {number} [limit] The number of tokens to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthTokenAuthIdentitiesIdentityIdTokensGet(identityId: string, offset?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AuthTokenAuthIdentitiesIdentityIdTokensGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthTokenAuthIdentitiesIdentityIdTokensGet(identityId, offset, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AuthTokenAuthIdentitiesIdentityIdTokensGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create token for identity with Token Auth
         * @param {string} identityId The ID of the identity to create the token for.
         * @param {ApiV1AuthTokenAuthIdentitiesIdentityIdTokensPostRequest} [apiV1AuthTokenAuthIdentitiesIdentityIdTokensPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthTokenAuthIdentitiesIdentityIdTokensPost(identityId: string, apiV1AuthTokenAuthIdentitiesIdentityIdTokensPostRequest?: ApiV1AuthTokenAuthIdentitiesIdentityIdTokensPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AuthTokenAuthIdentitiesIdentityIdTokensPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthTokenAuthIdentitiesIdentityIdTokensPost(identityId, apiV1AuthTokenAuthIdentitiesIdentityIdTokensPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AuthTokenAuthIdentitiesIdentityIdTokensPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update token for identity with Token Auth
         * @param {string} tokenId The ID of the token to update metadata for
         * @param {ApiV1AuthTokenAuthTokensTokenIdPatchRequest} [apiV1AuthTokenAuthTokensTokenIdPatchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthTokenAuthTokensTokenIdPatch(tokenId: string, apiV1AuthTokenAuthTokensTokenIdPatchRequest?: ApiV1AuthTokenAuthTokensTokenIdPatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AuthTokenAuthTokensTokenIdPatch200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthTokenAuthTokensTokenIdPatch(tokenId, apiV1AuthTokenAuthTokensTokenIdPatchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AuthTokenAuthTokensTokenIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Revoke token for identity with Token Auth
         * @param {string} tokenId The ID of the token to revoke
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthTokenAuthTokensTokenIdRevokePost(tokenId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1WorkspaceWorkspaceIdMigrateV3Post200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthTokenAuthTokensTokenIdRevokePost(tokenId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AuthTokenAuthTokensTokenIdRevokePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthTokenPost(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AuthTokenPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthTokenPost(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AuthTokenPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Renew access token
         * @param {ApiV1AuthTokenRenewPostRequest} apiV1AuthTokenRenewPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthTokenRenewPost(apiV1AuthTokenRenewPostRequest: ApiV1AuthTokenRenewPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AuthTokenAuthIdentitiesIdentityIdTokensPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthTokenRenewPost(apiV1AuthTokenRenewPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AuthTokenRenewPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Revoke access token
         * @param {ApiV1AuthTokenRevokePostRequest} apiV1AuthTokenRevokePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthTokenRevokePost(apiV1AuthTokenRevokePostRequest: ApiV1AuthTokenRevokePostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1WorkspaceWorkspaceIdMigrateV3Post200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthTokenRevokePost(apiV1AuthTokenRevokePostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AuthTokenRevokePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Universal Auth Client Secret for identity
         * @param {string} identityId The ID of the identity to get the client secret from.
         * @param {string} clientSecretId The ID of the client secret to get details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsClientSecretIdGet(identityId: string, clientSecretId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsClientSecretIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsClientSecretIdGet(identityId, clientSecretId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsClientSecretIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Revoke Universal Auth Client Secrets for identity
         * @param {string} identityId The ID of the identity to revoke the client secret from.
         * @param {string} clientSecretId The ID of the client secret to revoke.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsClientSecretIdRevokePost(identityId: string, clientSecretId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsClientSecretIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsClientSecretIdRevokePost(identityId, clientSecretId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsClientSecretIdRevokePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List Universal Auth Client Secrets for identity
         * @param {string} identityId The ID of the identity to list client secrets for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsGet(identityId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsGet(identityId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create Universal Auth Client Secret for identity
         * @param {string} identityId The ID of the identity to create a client secret for.
         * @param {ApiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsPostRequest} [apiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsPost(identityId: string, apiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsPostRequest?: ApiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsPost(identityId, apiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete Universal Auth configuration on identity
         * @param {string} identityId The ID of the identity to revoke the auth method for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthUniversalAuthIdentitiesIdentityIdDelete(identityId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AuthUniversalAuthIdentitiesIdentityIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthUniversalAuthIdentitiesIdentityIdDelete(identityId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AuthUniversalAuthIdentitiesIdentityIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve Universal Auth configuration on identity
         * @param {string} identityId The ID of the identity to retrieve the auth method for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthUniversalAuthIdentitiesIdentityIdGet(identityId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AuthUniversalAuthIdentitiesIdentityIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthUniversalAuthIdentitiesIdentityIdGet(identityId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AuthUniversalAuthIdentitiesIdentityIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update Universal Auth configuration on identity
         * @param {string} identityId The ID of the identity to update the auth method for.
         * @param {ApiV1AuthUniversalAuthIdentitiesIdentityIdPatchRequest} [apiV1AuthUniversalAuthIdentitiesIdentityIdPatchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthUniversalAuthIdentitiesIdentityIdPatch(identityId: string, apiV1AuthUniversalAuthIdentitiesIdentityIdPatchRequest?: ApiV1AuthUniversalAuthIdentitiesIdentityIdPatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AuthUniversalAuthIdentitiesIdentityIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthUniversalAuthIdentitiesIdentityIdPatch(identityId, apiV1AuthUniversalAuthIdentitiesIdentityIdPatchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AuthUniversalAuthIdentitiesIdentityIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Attach Universal Auth configuration onto identity
         * @param {string} identityId The ID of the identity to attach the configuration onto.
         * @param {ApiV1AuthUniversalAuthIdentitiesIdentityIdPostRequest} [apiV1AuthUniversalAuthIdentitiesIdentityIdPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthUniversalAuthIdentitiesIdentityIdPost(identityId: string, apiV1AuthUniversalAuthIdentitiesIdentityIdPostRequest?: ApiV1AuthUniversalAuthIdentitiesIdentityIdPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AuthUniversalAuthIdentitiesIdentityIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthUniversalAuthIdentitiesIdentityIdPost(identityId, apiV1AuthUniversalAuthIdentitiesIdentityIdPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AuthUniversalAuthIdentitiesIdentityIdPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Login with Universal Auth
         * @param {ApiV1AuthUniversalAuthLoginPostRequest} apiV1AuthUniversalAuthLoginPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1AuthUniversalAuthLoginPost(apiV1AuthUniversalAuthLoginPostRequest: ApiV1AuthUniversalAuthLoginPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AuthTokenAuthIdentitiesIdentityIdTokensPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1AuthUniversalAuthLoginPost(apiV1AuthUniversalAuthLoginPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1AuthUniversalAuthLoginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} botId 
         * @param {ApiV1BotBotIdActivePatchRequest} apiV1BotBotIdActivePatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1BotBotIdActivePatch(botId: string, apiV1BotBotIdActivePatchRequest: ApiV1BotBotIdActivePatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1BotProjectIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1BotBotIdActivePatch(botId, apiV1BotBotIdActivePatchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1BotBotIdActivePatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1BotProjectIdGet(projectId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1BotProjectIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1BotProjectIdGet(projectId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1BotProjectIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} projectSlug The slug of the project to create dynamic secret in.
         * @param {string} environmentSlug The slug of the environment to list folders from.
         * @param {string} [path] The path to list folders from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DynamicSecretsGet(projectSlug: string, environmentSlug: string, path?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1DynamicSecretsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1DynamicSecretsGet(projectSlug, environmentSlug, path, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1DynamicSecretsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} leaseId The ID of the dynamic secret lease.
         * @param {ApiV1DynamicSecretsLeasesLeaseIdDeleteRequest} apiV1DynamicSecretsLeasesLeaseIdDeleteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DynamicSecretsLeasesLeaseIdDelete(leaseId: string, apiV1DynamicSecretsLeasesLeaseIdDeleteRequest: ApiV1DynamicSecretsLeasesLeaseIdDeleteRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1DynamicSecretsLeasesLeaseIdDelete200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1DynamicSecretsLeasesLeaseIdDelete(leaseId, apiV1DynamicSecretsLeasesLeaseIdDeleteRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1DynamicSecretsLeasesLeaseIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} projectSlug The slug of the project to create dynamic secret in.
         * @param {string} environmentSlug The slug of the environment to list folders from.
         * @param {string} leaseId The ID of the dynamic secret lease.
         * @param {string} [path] The path to list folders from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DynamicSecretsLeasesLeaseIdGet(projectSlug: string, environmentSlug: string, leaseId: string, path?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1DynamicSecretsLeasesLeaseIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1DynamicSecretsLeasesLeaseIdGet(projectSlug, environmentSlug, leaseId, path, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1DynamicSecretsLeasesLeaseIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} leaseId The ID of the dynamic secret lease.
         * @param {ApiV1DynamicSecretsLeasesLeaseIdRenewPostRequest} apiV1DynamicSecretsLeasesLeaseIdRenewPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DynamicSecretsLeasesLeaseIdRenewPost(leaseId: string, apiV1DynamicSecretsLeasesLeaseIdRenewPostRequest: ApiV1DynamicSecretsLeasesLeaseIdRenewPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1DynamicSecretsLeasesLeaseIdDelete200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1DynamicSecretsLeasesLeaseIdRenewPost(leaseId, apiV1DynamicSecretsLeasesLeaseIdRenewPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1DynamicSecretsLeasesLeaseIdRenewPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1DynamicSecretsLeasesPostRequest} apiV1DynamicSecretsLeasesPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DynamicSecretsLeasesPost(apiV1DynamicSecretsLeasesPostRequest: ApiV1DynamicSecretsLeasesPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1DynamicSecretsLeasesPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1DynamicSecretsLeasesPost(apiV1DynamicSecretsLeasesPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1DynamicSecretsLeasesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} name The name of the dynamic secret.
         * @param {ApiV1DynamicSecretsNameDeleteRequest} apiV1DynamicSecretsNameDeleteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DynamicSecretsNameDelete(name: string, apiV1DynamicSecretsNameDeleteRequest: ApiV1DynamicSecretsNameDeleteRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1DynamicSecretsPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1DynamicSecretsNameDelete(name, apiV1DynamicSecretsNameDeleteRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1DynamicSecretsNameDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} projectSlug The slug of the project to create dynamic secret in.
         * @param {string} environmentSlug The slug of the environment to list folders from.
         * @param {string} name The name of the dynamic secret.
         * @param {string} [path] The path to list folders from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DynamicSecretsNameGet(projectSlug: string, environmentSlug: string, name: string, path?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1DynamicSecretsNameGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1DynamicSecretsNameGet(projectSlug, environmentSlug, name, path, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1DynamicSecretsNameGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} projectSlug The slug of the project to create dynamic secret in.
         * @param {string} environmentSlug The slug of the environment to list folders from.
         * @param {string} name The name of the dynamic secret.
         * @param {string} [path] The path to list folders from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DynamicSecretsNameLeasesGet(projectSlug: string, environmentSlug: string, name: string, path?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1DynamicSecretsNameLeasesGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1DynamicSecretsNameLeasesGet(projectSlug, environmentSlug, name, path, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1DynamicSecretsNameLeasesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} name The name of the dynamic secret.
         * @param {ApiV1DynamicSecretsNamePatchRequest} apiV1DynamicSecretsNamePatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DynamicSecretsNamePatch(name: string, apiV1DynamicSecretsNamePatchRequest: ApiV1DynamicSecretsNamePatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1DynamicSecretsPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1DynamicSecretsNamePatch(name, apiV1DynamicSecretsNamePatchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1DynamicSecretsNamePatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1DynamicSecretsPostRequest} apiV1DynamicSecretsPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DynamicSecretsPost(apiV1DynamicSecretsPostRequest: ApiV1DynamicSecretsPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1DynamicSecretsPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1DynamicSecretsPost(apiV1DynamicSecretsPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1DynamicSecretsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ExternalKmsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1ExternalKmsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ExternalKmsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1ExternalKmsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ExternalKmsIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1ExternalKmsPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ExternalKmsIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1ExternalKmsIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ExternalKmsIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1ExternalKmsIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ExternalKmsIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1ExternalKmsIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {ApiV1ExternalKmsIdPatchRequest} apiV1ExternalKmsIdPatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ExternalKmsIdPatch(id: string, apiV1ExternalKmsIdPatchRequest: ApiV1ExternalKmsIdPatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1ExternalKmsPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ExternalKmsIdPatch(id, apiV1ExternalKmsIdPatchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1ExternalKmsIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1ExternalKmsPostRequest} apiV1ExternalKmsPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ExternalKmsPost(apiV1ExternalKmsPostRequest: ApiV1ExternalKmsPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1ExternalKmsPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ExternalKmsPost(apiV1ExternalKmsPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1ExternalKmsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ExternalKmsSlugSlugGet(slug: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1ExternalKmsIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ExternalKmsSlugSlugGet(slug, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1ExternalKmsSlugSlugGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update folders by batch
         * @param {ApiV1FoldersBatchPatchRequest} apiV1FoldersBatchPatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1FoldersBatchPatch(apiV1FoldersBatchPatchRequest: ApiV1FoldersBatchPatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1FoldersGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1FoldersBatchPatch(apiV1FoldersBatchPatchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1FoldersBatchPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete a folder
         * @param {string} folderIdOrName The ID or name of the folder to delete.
         * @param {ApiV1FoldersFolderIdOrNameDeleteRequest} apiV1FoldersFolderIdOrNameDeleteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1FoldersFolderIdOrNameDelete(folderIdOrName: string, apiV1FoldersFolderIdOrNameDeleteRequest: ApiV1FoldersFolderIdOrNameDeleteRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1FoldersPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1FoldersFolderIdOrNameDelete(folderIdOrName, apiV1FoldersFolderIdOrNameDeleteRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1FoldersFolderIdOrNameDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update folder
         * @param {string} folderId The ID of the folder to update.
         * @param {ApiV1FoldersFolderIdPatchRequest} apiV1FoldersFolderIdPatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1FoldersFolderIdPatch(folderId: string, apiV1FoldersFolderIdPatchRequest: ApiV1FoldersFolderIdPatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1FoldersPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1FoldersFolderIdPatch(folderId, apiV1FoldersFolderIdPatchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1FoldersFolderIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get folders
         * @param {string} workspaceId The ID of the project to list folders from.
         * @param {string} environment The slug of the environment to list folders from.
         * @param {string} [path] The path to list folders from.
         * @param {string} [directory] The directory to list folders from. (Deprecated in favor of path)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1FoldersGet(workspaceId: string, environment: string, path?: string, directory?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1FoldersGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1FoldersGet(workspaceId, environment, path, directory, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1FoldersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get folder by id
         * @param {string} id The id of the folder to get details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1FoldersIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1FoldersPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1FoldersIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1FoldersIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create folders
         * @param {ApiV1FoldersPostRequest} apiV1FoldersPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1FoldersPost(apiV1FoldersPostRequest: ApiV1FoldersPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1FoldersPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1FoldersPost(apiV1FoldersPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1FoldersPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} currentSlug The current slug of the group to update.
         * @param {ApiV1GroupsCurrentSlugPatchRequest} [apiV1GroupsCurrentSlugPatchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1GroupsCurrentSlugPatch(currentSlug: string, apiV1GroupsCurrentSlugPatchRequest?: ApiV1GroupsCurrentSlugPatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1GroupsPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1GroupsCurrentSlugPatch(currentSlug, apiV1GroupsCurrentSlugPatchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1GroupsCurrentSlugPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1GroupsPostRequest} apiV1GroupsPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1GroupsPost(apiV1GroupsPostRequest: ApiV1GroupsPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1GroupsPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1GroupsPost(apiV1GroupsPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1GroupsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} slug The slug of the group to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1GroupsSlugDelete(slug: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1GroupsPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1GroupsSlugDelete(slug, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1GroupsSlugDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} slug The slug of the group to list users for
         * @param {number} [offset] The offset to start from. If you enter 10, it will start from the 10th user.
         * @param {number} [limit] The number of users to return.
         * @param {string} [username] The username to search for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1GroupsSlugUsersGet(slug: string, offset?: number, limit?: number, username?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1GroupsSlugUsersGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1GroupsSlugUsersGet(slug, offset, limit, username, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1GroupsSlugUsersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} slug The slug of the group to remove the user from.
         * @param {string} username The username of the user to remove from the group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1GroupsSlugUsersUsernameDelete(slug: string, username: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1GroupsSlugUsersUsernamePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1GroupsSlugUsersUsernameDelete(slug, username, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1GroupsSlugUsersUsernameDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} slug The slug of the group to add the user to.
         * @param {string} username The username of the user to add to the group.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1GroupsSlugUsersUsernamePost(slug: string, username: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1GroupsSlugUsersUsernamePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1GroupsSlugUsersUsernamePost(slug, username, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1GroupsSlugUsersUsernamePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List identities
         * @param {string} orgId The ID of the organization to list identities.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IdentitiesGet(orgId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1IdentitiesGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IdentitiesGet(orgId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1IdentitiesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete identity
         * @param {string} identityId The ID of the identity to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IdentitiesIdentityIdDelete(identityId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1IdentitiesPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IdentitiesIdentityIdDelete(identityId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1IdentitiesIdentityIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get an identity by id
         * @param {string} identityId The ID of the identity to get details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IdentitiesIdentityIdGet(identityId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1IdentitiesIdentityIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IdentitiesIdentityIdGet(identityId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1IdentitiesIdentityIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List project memberships that identity with id is part of
         * @param {string} identityId The ID of the identity to get details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IdentitiesIdentityIdIdentityMembershipsGet(identityId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1IdentitiesIdentityIdIdentityMembershipsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IdentitiesIdentityIdIdentityMembershipsGet(identityId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1IdentitiesIdentityIdIdentityMembershipsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update identity
         * @param {string} identityId The ID of the identity to update.
         * @param {ApiV1IdentitiesIdentityIdPatchRequest} [apiV1IdentitiesIdentityIdPatchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IdentitiesIdentityIdPatch(identityId: string, apiV1IdentitiesIdentityIdPatchRequest?: ApiV1IdentitiesIdentityIdPatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1IdentitiesPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IdentitiesIdentityIdPatch(identityId, apiV1IdentitiesIdentityIdPatchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1IdentitiesIdentityIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create identity
         * @param {ApiV1IdentitiesPostRequest} apiV1IdentitiesPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IdentitiesPost(apiV1IdentitiesPostRequest: ApiV1IdentitiesPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1IdentitiesPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IdentitiesPost(apiV1IdentitiesPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1IdentitiesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create the integration authentication object required for syncing secrets.
         * @param {ApiV1IntegrationAuthAccessTokenPostRequest} apiV1IntegrationAuthAccessTokenPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IntegrationAuthAccessTokenPost(apiV1IntegrationAuthAccessTokenPostRequest: ApiV1IntegrationAuthAccessTokenPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1IntegrationAuthIntegrationAuthIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IntegrationAuthAccessTokenPost(apiV1IntegrationAuthAccessTokenPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1IntegrationAuthAccessTokenPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Remove all integration\'s auth object from the project.
         * @param {string} integration The slug of the integration to be unauthorized.
         * @param {string} projectId The ID of the project to delete the integration auth from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IntegrationAuthDelete(integration: string, projectId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1IntegrationAuthDelete200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IntegrationAuthDelete(integration, projectId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1IntegrationAuthDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} integrationAuthId 
         * @param {string} [teamId] 
         * @param {string} [azureDevOpsOrgName] 
         * @param {string} [workspaceSlug] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IntegrationAuthIntegrationAuthIdAppsGet(integrationAuthId: string, teamId?: string, azureDevOpsOrgName?: string, workspaceSlug?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1IntegrationAuthIntegrationAuthIdAppsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IntegrationAuthIntegrationAuthIdAppsGet(integrationAuthId, teamId, azureDevOpsOrgName, workspaceSlug, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1IntegrationAuthIntegrationAuthIdAppsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} region 
         * @param {string} integrationAuthId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IntegrationAuthIntegrationAuthIdAwsSecretsManagerKmsKeysGet(region: string, integrationAuthId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1IntegrationAuthIntegrationAuthIdAwsSecretsManagerKmsKeysGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IntegrationAuthIntegrationAuthIdAwsSecretsManagerKmsKeysGet(region, integrationAuthId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1IntegrationAuthIntegrationAuthIdAwsSecretsManagerKmsKeysGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} integrationAuthId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IntegrationAuthIntegrationAuthIdBitbucketWorkspacesGet(integrationAuthId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1IntegrationAuthIntegrationAuthIdBitbucketWorkspacesGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IntegrationAuthIntegrationAuthIdBitbucketWorkspacesGet(integrationAuthId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1IntegrationAuthIntegrationAuthIdBitbucketWorkspacesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} accountId 
         * @param {string} integrationAuthId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IntegrationAuthIntegrationAuthIdChecklyGroupsGet(accountId: string, integrationAuthId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1IntegrationAuthIntegrationAuthIdChecklyGroupsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IntegrationAuthIntegrationAuthIdChecklyGroupsGet(accountId, integrationAuthId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1IntegrationAuthIntegrationAuthIdChecklyGroupsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Remove an integration auth object by object id.
         * @param {string} integrationAuthId The id of integration authentication object to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IntegrationAuthIntegrationAuthIdDelete(integrationAuthId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1IntegrationAuthIntegrationAuthIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IntegrationAuthIntegrationAuthIdDelete(integrationAuthId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1IntegrationAuthIntegrationAuthIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get details of an integration authorization by auth object id.
         * @param {string} integrationAuthId The id of integration authentication object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IntegrationAuthIntegrationAuthIdGet(integrationAuthId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1IntegrationAuthIntegrationAuthIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IntegrationAuthIntegrationAuthIdGet(integrationAuthId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1IntegrationAuthIntegrationAuthIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} repoOwner 
         * @param {string} repoName 
         * @param {string} integrationAuthId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IntegrationAuthIntegrationAuthIdGithubEnvsGet(repoOwner: string, repoName: string, integrationAuthId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1IntegrationAuthIntegrationAuthIdGithubEnvsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IntegrationAuthIntegrationAuthIdGithubEnvsGet(repoOwner, repoName, integrationAuthId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1IntegrationAuthIntegrationAuthIdGithubEnvsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} integrationAuthId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IntegrationAuthIntegrationAuthIdGithubOrgsGet(integrationAuthId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1IntegrationAuthIntegrationAuthIdGithubOrgsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IntegrationAuthIntegrationAuthIdGithubOrgsGet(integrationAuthId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1IntegrationAuthIntegrationAuthIdGithubOrgsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} integrationAuthId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IntegrationAuthIntegrationAuthIdHerokuPipelinesGet(integrationAuthId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1IntegrationAuthIntegrationAuthIdHerokuPipelinesGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IntegrationAuthIntegrationAuthIdHerokuPipelinesGet(integrationAuthId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1IntegrationAuthIntegrationAuthIdHerokuPipelinesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} appId 
         * @param {string} integrationAuthId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IntegrationAuthIntegrationAuthIdNorthflankSecretGroupsGet(appId: string, integrationAuthId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1IntegrationAuthIntegrationAuthIdNorthflankSecretGroupsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IntegrationAuthIntegrationAuthIdNorthflankSecretGroupsGet(appId, integrationAuthId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1IntegrationAuthIntegrationAuthIdNorthflankSecretGroupsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} environmentId 
         * @param {string} integrationAuthId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IntegrationAuthIntegrationAuthIdQoveryAppsGet(environmentId: string, integrationAuthId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1IntegrationAuthIntegrationAuthIdQoveryAppsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IntegrationAuthIntegrationAuthIdQoveryAppsGet(environmentId, integrationAuthId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1IntegrationAuthIntegrationAuthIdQoveryAppsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} environmentId 
         * @param {string} integrationAuthId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IntegrationAuthIntegrationAuthIdQoveryContainersGet(environmentId: string, integrationAuthId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1IntegrationAuthIntegrationAuthIdQoveryContainersGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IntegrationAuthIntegrationAuthIdQoveryContainersGet(environmentId, integrationAuthId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1IntegrationAuthIntegrationAuthIdQoveryContainersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} projectId 
         * @param {string} integrationAuthId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IntegrationAuthIntegrationAuthIdQoveryEnvironmentsGet(projectId: string, integrationAuthId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1IntegrationAuthIntegrationAuthIdQoveryEnvironmentsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IntegrationAuthIntegrationAuthIdQoveryEnvironmentsGet(projectId, integrationAuthId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1IntegrationAuthIntegrationAuthIdQoveryEnvironmentsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} environmentId 
         * @param {string} integrationAuthId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IntegrationAuthIntegrationAuthIdQoveryJobsGet(environmentId: string, integrationAuthId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1IntegrationAuthIntegrationAuthIdQoveryJobsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IntegrationAuthIntegrationAuthIdQoveryJobsGet(environmentId, integrationAuthId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1IntegrationAuthIntegrationAuthIdQoveryJobsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} integrationAuthId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IntegrationAuthIntegrationAuthIdQoveryOrgsGet(integrationAuthId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1IntegrationAuthIntegrationAuthIdGithubOrgsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IntegrationAuthIntegrationAuthIdQoveryOrgsGet(integrationAuthId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1IntegrationAuthIntegrationAuthIdQoveryOrgsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} orgId 
         * @param {string} integrationAuthId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IntegrationAuthIntegrationAuthIdQoveryProjectsGet(orgId: string, integrationAuthId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1IntegrationAuthIntegrationAuthIdQoveryProjectsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IntegrationAuthIntegrationAuthIdQoveryProjectsGet(orgId, integrationAuthId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1IntegrationAuthIntegrationAuthIdQoveryProjectsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} appId 
         * @param {string} integrationAuthId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IntegrationAuthIntegrationAuthIdRailwayEnvironmentsGet(appId: string, integrationAuthId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1IntegrationAuthIntegrationAuthIdQoveryEnvironmentsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IntegrationAuthIntegrationAuthIdRailwayEnvironmentsGet(appId, integrationAuthId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1IntegrationAuthIntegrationAuthIdRailwayEnvironmentsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} appId 
         * @param {string} integrationAuthId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IntegrationAuthIntegrationAuthIdRailwayServicesGet(appId: string, integrationAuthId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1IntegrationAuthIntegrationAuthIdRailwayServicesGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IntegrationAuthIntegrationAuthIdRailwayServicesGet(appId, integrationAuthId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1IntegrationAuthIntegrationAuthIdRailwayServicesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} appId 
         * @param {string} integrationAuthId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IntegrationAuthIntegrationAuthIdTeamcityBuildConfigsGet(appId: string, integrationAuthId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1IntegrationAuthIntegrationAuthIdTeamcityBuildConfigsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IntegrationAuthIntegrationAuthIdTeamcityBuildConfigsGet(appId, integrationAuthId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1IntegrationAuthIntegrationAuthIdTeamcityBuildConfigsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} integrationAuthId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IntegrationAuthIntegrationAuthIdTeamsGet(integrationAuthId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1IntegrationAuthIntegrationAuthIdTeamsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IntegrationAuthIntegrationAuthIdTeamsGet(integrationAuthId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1IntegrationAuthIntegrationAuthIdTeamsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} appId 
         * @param {string} integrationAuthId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IntegrationAuthIntegrationAuthIdVercelBranchesGet(appId: string, integrationAuthId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1IntegrationAuthIntegrationAuthIdVercelBranchesGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IntegrationAuthIntegrationAuthIdVercelBranchesGet(appId, integrationAuthId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1IntegrationAuthIntegrationAuthIdVercelBranchesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List of integrations available.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IntegrationAuthIntegrationOptionsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1IntegrationAuthIntegrationOptionsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IntegrationAuthIntegrationOptionsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1IntegrationAuthIntegrationOptionsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1IntegrationAuthOauthTokenPostRequest} apiV1IntegrationAuthOauthTokenPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IntegrationAuthOauthTokenPost(apiV1IntegrationAuthOauthTokenPostRequest: ApiV1IntegrationAuthOauthTokenPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1IntegrationAuthIntegrationAuthIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IntegrationAuthOauthTokenPost(apiV1IntegrationAuthOauthTokenPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1IntegrationAuthOauthTokenPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Remove an integration using the integration object ID
         * @param {string} integrationId The ID of the integration object.
         * @param {ApiV1IntegrationIntegrationIdDeleteShouldDeleteIntegrationSecretsEnum} [shouldDeleteIntegrationSecrets] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IntegrationIntegrationIdDelete(integrationId: string, shouldDeleteIntegrationSecrets?: ApiV1IntegrationIntegrationIdDeleteShouldDeleteIntegrationSecretsEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1IntegrationPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IntegrationIntegrationIdDelete(integrationId, shouldDeleteIntegrationSecrets, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1IntegrationIntegrationIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update an integration by integration id
         * @param {string} integrationId The ID of the integration object.
         * @param {ApiV1IntegrationIntegrationIdPatchRequest} apiV1IntegrationIntegrationIdPatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IntegrationIntegrationIdPatch(integrationId: string, apiV1IntegrationIntegrationIdPatchRequest: ApiV1IntegrationIntegrationIdPatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1IntegrationPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IntegrationIntegrationIdPatch(integrationId, apiV1IntegrationIntegrationIdPatchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1IntegrationIntegrationIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Manually trigger sync of an integration by integration id
         * @param {string} integrationId The ID of the integration object to manually sync
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IntegrationIntegrationIdSyncPost(integrationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1IntegrationPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IntegrationIntegrationIdSyncPost(integrationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1IntegrationIntegrationIdSyncPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create an integration to sync secrets.
         * @param {ApiV1IntegrationPostRequest} apiV1IntegrationPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1IntegrationPost(apiV1IntegrationPostRequest: ApiV1IntegrationPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1IntegrationPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1IntegrationPost(apiV1IntegrationPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1IntegrationPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1InviteOrgSignupPostRequest} apiV1InviteOrgSignupPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1InviteOrgSignupPost(apiV1InviteOrgSignupPostRequest: ApiV1InviteOrgSignupPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1InviteOrgSignupPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1InviteOrgSignupPost(apiV1InviteOrgSignupPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1InviteOrgSignupPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1InviteOrgVerifyPostRequest} apiV1InviteOrgVerifyPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1InviteOrgVerifyPost(apiV1InviteOrgVerifyPostRequest: ApiV1InviteOrgVerifyPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1InviteOrgVerifyPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1InviteOrgVerifyPost(apiV1InviteOrgVerifyPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1InviteOrgVerifyPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} configId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1LdapConfigConfigIdGroupMapsGet(configId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ApiV1LdapConfigConfigIdGroupMapsGet200ResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1LdapConfigConfigIdGroupMapsGet(configId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1LdapConfigConfigIdGroupMapsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} configId 
         * @param {string} groupMapId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1LdapConfigConfigIdGroupMapsGroupMapIdDelete(configId: string, groupMapId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1LdapConfigConfigIdGroupMapsPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1LdapConfigConfigIdGroupMapsGroupMapIdDelete(configId, groupMapId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1LdapConfigConfigIdGroupMapsGroupMapIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} configId 
         * @param {ApiV1LdapConfigConfigIdGroupMapsPostRequest} apiV1LdapConfigConfigIdGroupMapsPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1LdapConfigConfigIdGroupMapsPost(configId: string, apiV1LdapConfigConfigIdGroupMapsPostRequest: ApiV1LdapConfigConfigIdGroupMapsPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1LdapConfigConfigIdGroupMapsPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1LdapConfigConfigIdGroupMapsPost(configId, apiV1LdapConfigConfigIdGroupMapsPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1LdapConfigConfigIdGroupMapsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} configId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1LdapConfigConfigIdTestConnectionPost(configId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1LdapConfigConfigIdTestConnectionPost(configId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1LdapConfigConfigIdTestConnectionPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1LdapConfigGet(organizationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1LdapConfigGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1LdapConfigGet(organizationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1LdapConfigGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1LdapConfigPatchRequest} apiV1LdapConfigPatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1LdapConfigPatch(apiV1LdapConfigPatchRequest: ApiV1LdapConfigPatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1LdapConfigPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1LdapConfigPatch(apiV1LdapConfigPatchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1LdapConfigPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1LdapConfigPostRequest} apiV1LdapConfigPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1LdapConfigPost(apiV1LdapConfigPostRequest: ApiV1LdapConfigPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1LdapConfigPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1LdapConfigPost(apiV1LdapConfigPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1LdapConfigPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1LdapLoginPostRequest} apiV1LdapLoginPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1LdapLoginPost(apiV1LdapLoginPostRequest: ApiV1LdapLoginPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1LdapLoginPost(apiV1LdapLoginPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1LdapLoginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [search] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1OrganizationAdminProjectsGet(search?: string, offset?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1OrganizationAdminProjectsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OrganizationAdminProjectsGet(search, offset, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1OrganizationAdminProjectsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1OrganizationAdminProjectsProjectIdGrantAdminAccessPost(projectId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1OrganizationAdminProjectsProjectIdGrantAdminAccessPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OrganizationAdminProjectsProjectIdGrantAdminAccessPost(projectId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1OrganizationAdminProjectsProjectIdGrantAdminAccessPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1OrganizationGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1OrganizationGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OrganizationGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1OrganizationGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1OrganizationOrganizationIdGet(organizationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1OrganizationOrganizationIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OrganizationOrganizationIdGet(organizationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1OrganizationOrganizationIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} organizationId The ID of the organization to list groups for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1OrganizationOrganizationIdGroupsGet(organizationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1OrganizationOrganizationIdGroupsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OrganizationOrganizationIdGroupsGet(organizationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1OrganizationOrganizationIdGroupsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1OrganizationOrganizationIdIncidentContactOrgGet(organizationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1OrganizationOrganizationIdIncidentContactOrgGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OrganizationOrganizationIdIncidentContactOrgGet(organizationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1OrganizationOrganizationIdIncidentContactOrgGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {string} incidentContactId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1OrganizationOrganizationIdIncidentContactOrgIncidentContactIdDelete(organizationId: string, incidentContactId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1OrganizationOrganizationIdIncidentContactOrgPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OrganizationOrganizationIdIncidentContactOrgIncidentContactIdDelete(organizationId, incidentContactId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1OrganizationOrganizationIdIncidentContactOrgIncidentContactIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {ApiV1PasswordEmailPasswordResetPostRequest} apiV1PasswordEmailPasswordResetPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1OrganizationOrganizationIdIncidentContactOrgPost(organizationId: string, apiV1PasswordEmailPasswordResetPostRequest: ApiV1PasswordEmailPasswordResetPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1OrganizationOrganizationIdIncidentContactOrgPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OrganizationOrganizationIdIncidentContactOrgPost(organizationId, apiV1PasswordEmailPasswordResetPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1OrganizationOrganizationIdIncidentContactOrgPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {ApiV1OrganizationOrganizationIdPatchRequest} [apiV1OrganizationOrganizationIdPatchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1OrganizationOrganizationIdPatch(organizationId: string, apiV1OrganizationOrganizationIdPatchRequest?: ApiV1OrganizationOrganizationIdPatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1OrganizationOrganizationIdPatch200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OrganizationOrganizationIdPatch(organizationId, apiV1OrganizationOrganizationIdPatchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1OrganizationOrganizationIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1OrganizationOrganizationIdPermissionsGet(organizationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1OrganizationOrganizationIdPermissionsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OrganizationOrganizationIdPermissionsGet(organizationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1OrganizationOrganizationIdPermissionsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1OrganizationOrganizationIdRolesGet(organizationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1OrganizationOrganizationIdRolesGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OrganizationOrganizationIdRolesGet(organizationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1OrganizationOrganizationIdRolesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {ApiV1OrganizationOrganizationIdRolesPostRequest} apiV1OrganizationOrganizationIdRolesPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1OrganizationOrganizationIdRolesPost(organizationId: string, apiV1OrganizationOrganizationIdRolesPostRequest: ApiV1OrganizationOrganizationIdRolesPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1OrganizationOrganizationIdRolesPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OrganizationOrganizationIdRolesPost(organizationId, apiV1OrganizationOrganizationIdRolesPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1OrganizationOrganizationIdRolesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {string} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1OrganizationOrganizationIdRolesRoleIdDelete(organizationId: string, roleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1OrganizationOrganizationIdRolesPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OrganizationOrganizationIdRolesRoleIdDelete(organizationId, roleId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1OrganizationOrganizationIdRolesRoleIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {string} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1OrganizationOrganizationIdRolesRoleIdGet(organizationId: string, roleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1OrganizationOrganizationIdRolesPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OrganizationOrganizationIdRolesRoleIdGet(organizationId, roleId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1OrganizationOrganizationIdRolesRoleIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {string} roleId 
         * @param {ApiV1OrganizationOrganizationIdRolesRoleIdPatchRequest} apiV1OrganizationOrganizationIdRolesRoleIdPatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1OrganizationOrganizationIdRolesRoleIdPatch(organizationId: string, roleId: string, apiV1OrganizationOrganizationIdRolesRoleIdPatchRequest: ApiV1OrganizationOrganizationIdRolesRoleIdPatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1OrganizationOrganizationIdRolesPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OrganizationOrganizationIdRolesRoleIdPatch(organizationId, roleId, apiV1OrganizationOrganizationIdRolesRoleIdPatchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1OrganizationOrganizationIdRolesRoleIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1OrganizationOrganizationIdUsersGet(organizationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1OrganizationOrganizationIdUsersGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OrganizationOrganizationIdUsersGet(organizationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1OrganizationOrganizationIdUsersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1OrganizationsOrganizationIdBillingDetailsGet(organizationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OrganizationsOrganizationIdBillingDetailsGet(organizationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1OrganizationsOrganizationIdBillingDetailsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {ApiV1OrganizationsOrganizationIdBillingDetailsPatchRequest} [apiV1OrganizationsOrganizationIdBillingDetailsPatchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1OrganizationsOrganizationIdBillingDetailsPatch(organizationId: string, apiV1OrganizationsOrganizationIdBillingDetailsPatchRequest?: ApiV1OrganizationsOrganizationIdBillingDetailsPatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OrganizationsOrganizationIdBillingDetailsPatch(organizationId, apiV1OrganizationsOrganizationIdBillingDetailsPatchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1OrganizationsOrganizationIdBillingDetailsPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1OrganizationsOrganizationIdBillingDetailsPaymentMethodsGet(organizationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OrganizationsOrganizationIdBillingDetailsPaymentMethodsGet(organizationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1OrganizationsOrganizationIdBillingDetailsPaymentMethodsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {string} pmtMethodId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1OrganizationsOrganizationIdBillingDetailsPaymentMethodsPmtMethodIdDelete(organizationId: string, pmtMethodId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OrganizationsOrganizationIdBillingDetailsPaymentMethodsPmtMethodIdDelete(organizationId, pmtMethodId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1OrganizationsOrganizationIdBillingDetailsPaymentMethodsPmtMethodIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {ApiV1OrganizationsOrganizationIdBillingDetailsPaymentMethodsPostRequest} apiV1OrganizationsOrganizationIdBillingDetailsPaymentMethodsPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1OrganizationsOrganizationIdBillingDetailsPaymentMethodsPost(organizationId: string, apiV1OrganizationsOrganizationIdBillingDetailsPaymentMethodsPostRequest: ApiV1OrganizationsOrganizationIdBillingDetailsPaymentMethodsPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OrganizationsOrganizationIdBillingDetailsPaymentMethodsPost(organizationId, apiV1OrganizationsOrganizationIdBillingDetailsPaymentMethodsPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1OrganizationsOrganizationIdBillingDetailsPaymentMethodsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1OrganizationsOrganizationIdBillingDetailsTaxIdsGet(organizationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OrganizationsOrganizationIdBillingDetailsTaxIdsGet(organizationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1OrganizationsOrganizationIdBillingDetailsTaxIdsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {ApiV1OrganizationsOrganizationIdBillingDetailsTaxIdsPostRequest} apiV1OrganizationsOrganizationIdBillingDetailsTaxIdsPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1OrganizationsOrganizationIdBillingDetailsTaxIdsPost(organizationId: string, apiV1OrganizationsOrganizationIdBillingDetailsTaxIdsPostRequest: ApiV1OrganizationsOrganizationIdBillingDetailsTaxIdsPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OrganizationsOrganizationIdBillingDetailsTaxIdsPost(organizationId, apiV1OrganizationsOrganizationIdBillingDetailsTaxIdsPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1OrganizationsOrganizationIdBillingDetailsTaxIdsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {string} taxId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1OrganizationsOrganizationIdBillingDetailsTaxIdsTaxIdDelete(organizationId: string, taxId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OrganizationsOrganizationIdBillingDetailsTaxIdsTaxIdDelete(organizationId, taxId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1OrganizationsOrganizationIdBillingDetailsTaxIdsTaxIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1OrganizationsOrganizationIdCustomerPortalSessionPost(organizationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OrganizationsOrganizationIdCustomerPortalSessionPost(organizationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1OrganizationsOrganizationIdCustomerPortalSessionPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1OrganizationsOrganizationIdInvoicesGet(organizationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OrganizationsOrganizationIdInvoicesGet(organizationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1OrganizationsOrganizationIdInvoicesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1OrganizationsOrganizationIdLicensesGet(organizationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OrganizationsOrganizationIdLicensesGet(organizationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1OrganizationsOrganizationIdLicensesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1OrganizationsOrganizationIdPlanBillingGet(organizationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OrganizationsOrganizationIdPlanBillingGet(organizationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1OrganizationsOrganizationIdPlanBillingGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1OrganizationsOrganizationIdPlanGet(organizationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1OrganizationsOrganizationIdPlanGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OrganizationsOrganizationIdPlanGet(organizationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1OrganizationsOrganizationIdPlanGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1OrganizationsOrganizationIdPlanTableGet(organizationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OrganizationsOrganizationIdPlanTableGet(organizationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1OrganizationsOrganizationIdPlanTableGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {string} [workspaceId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1OrganizationsOrganizationIdPlansGet(organizationId: string, workspaceId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OrganizationsOrganizationIdPlansGet(organizationId, workspaceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1OrganizationsOrganizationIdPlansGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1OrganizationsOrganizationIdPlansTableGetBillingCycleEnum} billingCycle 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1OrganizationsOrganizationIdPlansTableGet(billingCycle: ApiV1OrganizationsOrganizationIdPlansTableGetBillingCycleEnum, organizationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OrganizationsOrganizationIdPlansTableGet(billingCycle, organizationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1OrganizationsOrganizationIdPlansTableGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {ApiV1OrganizationsOrganizationIdSessionTrialPostRequest} apiV1OrganizationsOrganizationIdSessionTrialPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1OrganizationsOrganizationIdSessionTrialPost(organizationId: string, apiV1OrganizationsOrganizationIdSessionTrialPostRequest: ApiV1OrganizationsOrganizationIdSessionTrialPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1OrganizationsOrganizationIdSessionTrialPost(organizationId, apiV1OrganizationsOrganizationIdSessionTrialPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1OrganizationsOrganizationIdSessionTrialPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PasswordBackupPrivateKeyGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1PasswordBackupPrivateKeyGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PasswordBackupPrivateKeyGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1PasswordBackupPrivateKeyGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1PasswordBackupPrivateKeyPostRequest} apiV1PasswordBackupPrivateKeyPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PasswordBackupPrivateKeyPost(apiV1PasswordBackupPrivateKeyPostRequest: ApiV1PasswordBackupPrivateKeyPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1PasswordBackupPrivateKeyGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PasswordBackupPrivateKeyPost(apiV1PasswordBackupPrivateKeyPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1PasswordBackupPrivateKeyPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1PasswordChangePasswordPostRequest} apiV1PasswordChangePasswordPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PasswordChangePasswordPost(apiV1PasswordChangePasswordPostRequest: ApiV1PasswordChangePasswordPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1WorkspaceWorkspaceIdMigrateV3Post200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PasswordChangePasswordPost(apiV1PasswordChangePasswordPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1PasswordChangePasswordPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1PasswordEmailPasswordResetPostRequest} apiV1PasswordEmailPasswordResetPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PasswordEmailPasswordResetPost(apiV1PasswordEmailPasswordResetPostRequest: ApiV1PasswordEmailPasswordResetPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1WorkspaceWorkspaceIdMigrateV3Post200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PasswordEmailPasswordResetPost(apiV1PasswordEmailPasswordResetPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1PasswordEmailPasswordResetPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1PasswordEmailPasswordResetVerifyPostRequest} apiV1PasswordEmailPasswordResetVerifyPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PasswordEmailPasswordResetVerifyPost(apiV1PasswordEmailPasswordResetVerifyPostRequest: ApiV1PasswordEmailPasswordResetVerifyPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1PasswordEmailPasswordResetVerifyPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PasswordEmailPasswordResetVerifyPost(apiV1PasswordEmailPasswordResetVerifyPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1PasswordEmailPasswordResetVerifyPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1PasswordPasswordResetPostRequest} apiV1PasswordPasswordResetPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PasswordPasswordResetPost(apiV1PasswordPasswordResetPostRequest: ApiV1PasswordPasswordResetPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1WorkspaceWorkspaceIdMigrateV3Post200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PasswordPasswordResetPost(apiV1PasswordPasswordResetPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1PasswordPasswordResetPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1PasswordSrp1PostRequest} apiV1PasswordSrp1PostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PasswordSrp1Post(apiV1PasswordSrp1PostRequest: ApiV1PasswordSrp1PostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1PasswordSrp1Post200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PasswordSrp1Post(apiV1PasswordSrp1PostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1PasswordSrp1Post']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete PKI alert
         * @param {string} alertId The ID of the alert to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PkiAlertsAlertIdDelete(alertId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1PkiAlertsPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PkiAlertsAlertIdDelete(alertId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1PkiAlertsAlertIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get PKI alert
         * @param {string} alertId The ID of the alert to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PkiAlertsAlertIdGet(alertId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1PkiAlertsPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PkiAlertsAlertIdGet(alertId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1PkiAlertsAlertIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update PKI alert
         * @param {string} alertId The ID of the alert to update
         * @param {ApiV1PkiAlertsAlertIdPatchRequest} [apiV1PkiAlertsAlertIdPatchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PkiAlertsAlertIdPatch(alertId: string, apiV1PkiAlertsAlertIdPatchRequest?: ApiV1PkiAlertsAlertIdPatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1PkiAlertsPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PkiAlertsAlertIdPatch(alertId, apiV1PkiAlertsAlertIdPatchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1PkiAlertsAlertIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create PKI alert
         * @param {ApiV1PkiAlertsPostRequest} apiV1PkiAlertsPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PkiAlertsPost(apiV1PkiAlertsPostRequest: ApiV1PkiAlertsPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1PkiAlertsPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PkiAlertsPost(apiV1PkiAlertsPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1PkiAlertsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get list of past and current CA certificates for a CA
         * @param {string} caId The ID of the CA to get the CA certificates for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PkiCaCaIdCaCertificatesGet(caId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ApiV1PkiCaCaIdCaCertificatesGet200ResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PkiCaCaIdCaCertificatesGet(caId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1PkiCaCaIdCaCertificatesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get current CA cert and cert chain of a CA
         * @param {string} caId The ID of the CA to get the certificate body and certificate chain from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PkiCaCaIdCertificateGet(caId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1PkiCaCaIdCertificateGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PkiCaCaIdCertificateGet(caId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1PkiCaCaIdCertificateGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get list of CRLs of the CA
         * @param {string} caId The ID of the CA to get the certificate revocation lists (CRLs) for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PkiCaCaIdCrlsGet(caId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ApiV1PkiCaCaIdCrlsGet200ResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PkiCaCaIdCrlsGet(caId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1PkiCaCaIdCrlsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get CA CSR
         * @param {string} caId The ID of the CA to generate CSR from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PkiCaCaIdCsrGet(caId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1PkiCaCaIdCsrGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PkiCaCaIdCsrGet(caId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1PkiCaCaIdCsrGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete CA
         * @param {string} caId The ID of the CA to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PkiCaCaIdDelete(caId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1PkiCaPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PkiCaCaIdDelete(caId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1PkiCaCaIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get CA
         * @param {string} caId The ID of the CA to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PkiCaCaIdGet(caId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1PkiCaPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PkiCaCaIdGet(caId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1PkiCaCaIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Import certificate and chain to CA
         * @param {string} caId The ID of the CA to import the certificate for
         * @param {ApiV1PkiCaCaIdImportCertificatePostRequest} apiV1PkiCaCaIdImportCertificatePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PkiCaCaIdImportCertificatePost(caId: string, apiV1PkiCaCaIdImportCertificatePostRequest: ApiV1PkiCaCaIdImportCertificatePostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1PkiCaCaIdImportCertificatePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PkiCaCaIdImportCertificatePost(caId, apiV1PkiCaCaIdImportCertificatePostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1PkiCaCaIdImportCertificatePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Issue certificate from CA
         * @param {string} caId The ID of the CA to issue the certificate from
         * @param {ApiV1PkiCaCaIdIssueCertificatePostRequest} apiV1PkiCaCaIdIssueCertificatePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PkiCaCaIdIssueCertificatePost(caId: string, apiV1PkiCaCaIdIssueCertificatePostRequest: ApiV1PkiCaCaIdIssueCertificatePostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1PkiCaCaIdIssueCertificatePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PkiCaCaIdIssueCertificatePost(caId, apiV1PkiCaCaIdIssueCertificatePostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1PkiCaCaIdIssueCertificatePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update CA
         * @param {string} caId The ID of the CA to update
         * @param {ApiV1PkiCaCaIdPatchRequest} [apiV1PkiCaCaIdPatchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PkiCaCaIdPatch(caId: string, apiV1PkiCaCaIdPatchRequest?: ApiV1PkiCaCaIdPatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1PkiCaPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PkiCaCaIdPatch(caId, apiV1PkiCaCaIdPatchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1PkiCaCaIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Perform CA certificate renewal
         * @param {string} caId The ID of the CA to renew the CA certificate for
         * @param {ApiV1PkiCaCaIdRenewPostRequest} apiV1PkiCaCaIdRenewPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PkiCaCaIdRenewPost(caId: string, apiV1PkiCaCaIdRenewPostRequest: ApiV1PkiCaCaIdRenewPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1PkiCaCaIdRenewPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PkiCaCaIdRenewPost(caId, apiV1PkiCaCaIdRenewPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1PkiCaCaIdRenewPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Sign certificate from CA
         * @param {string} caId The ID of the CA to issue the certificate from
         * @param {ApiV1PkiCaCaIdSignCertificatePostRequest} apiV1PkiCaCaIdSignCertificatePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PkiCaCaIdSignCertificatePost(caId: string, apiV1PkiCaCaIdSignCertificatePostRequest: ApiV1PkiCaCaIdSignCertificatePostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1PkiCaCaIdSignCertificatePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PkiCaCaIdSignCertificatePost(caId, apiV1PkiCaCaIdSignCertificatePostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1PkiCaCaIdSignCertificatePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create intermediate CA certificate from parent CA
         * @param {string} caId The ID of the CA to sign the intermediate certificate with
         * @param {ApiV1PkiCaCaIdSignIntermediatePostRequest} apiV1PkiCaCaIdSignIntermediatePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PkiCaCaIdSignIntermediatePost(caId: string, apiV1PkiCaCaIdSignIntermediatePostRequest: ApiV1PkiCaCaIdSignIntermediatePostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1PkiCaCaIdSignIntermediatePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PkiCaCaIdSignIntermediatePost(caId, apiV1PkiCaCaIdSignIntermediatePostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1PkiCaCaIdSignIntermediatePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create CA
         * @param {ApiV1PkiCaPostRequest} apiV1PkiCaPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PkiCaPost(apiV1PkiCaPostRequest: ApiV1PkiCaPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1PkiCaPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PkiCaPost(apiV1PkiCaPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1PkiCaPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} certificateTemplateId The ID of the certificate template to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PkiCertificateTemplatesCertificateTemplateIdDelete(certificateTemplateId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1PkiCertificateTemplatesCertificateTemplateIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PkiCertificateTemplatesCertificateTemplateIdDelete(certificateTemplateId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1PkiCertificateTemplatesCertificateTemplateIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Certificate Template EST configuration
         * @param {string} certificateTemplateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigGet(certificateTemplateId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigGet(certificateTemplateId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update Certificate Template EST configuration
         * @param {string} certificateTemplateId 
         * @param {ApiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPatchRequest} [apiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPatchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPatch(certificateTemplateId: string, apiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPatchRequest?: ApiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPatch(certificateTemplateId, apiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPatchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create Certificate Template EST configuration
         * @param {string} certificateTemplateId 
         * @param {ApiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPostRequest} apiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPost(certificateTemplateId: string, apiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPostRequest: ApiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPost(certificateTemplateId, apiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} certificateTemplateId The ID of the certificate template to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PkiCertificateTemplatesCertificateTemplateIdGet(certificateTemplateId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1PkiCertificateTemplatesCertificateTemplateIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PkiCertificateTemplatesCertificateTemplateIdGet(certificateTemplateId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1PkiCertificateTemplatesCertificateTemplateIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} certificateTemplateId The ID of the certificate template to update
         * @param {ApiV1PkiCertificateTemplatesCertificateTemplateIdPatchRequest} [apiV1PkiCertificateTemplatesCertificateTemplateIdPatchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PkiCertificateTemplatesCertificateTemplateIdPatch(certificateTemplateId: string, apiV1PkiCertificateTemplatesCertificateTemplateIdPatchRequest?: ApiV1PkiCertificateTemplatesCertificateTemplateIdPatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1PkiCertificateTemplatesCertificateTemplateIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PkiCertificateTemplatesCertificateTemplateIdPatch(certificateTemplateId, apiV1PkiCertificateTemplatesCertificateTemplateIdPatchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1PkiCertificateTemplatesCertificateTemplateIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1PkiCertificateTemplatesPostRequest} apiV1PkiCertificateTemplatesPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PkiCertificateTemplatesPost(apiV1PkiCertificateTemplatesPostRequest: ApiV1PkiCertificateTemplatesPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1PkiCertificateTemplatesCertificateTemplateIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PkiCertificateTemplatesPost(apiV1PkiCertificateTemplatesPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1PkiCertificateTemplatesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Issue certificate
         * @param {ApiV1PkiCertificatesIssueCertificatePostRequest} apiV1PkiCertificatesIssueCertificatePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PkiCertificatesIssueCertificatePost(apiV1PkiCertificatesIssueCertificatePostRequest: ApiV1PkiCertificatesIssueCertificatePostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1PkiCaCaIdIssueCertificatePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PkiCertificatesIssueCertificatePost(apiV1PkiCertificatesIssueCertificatePostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1PkiCertificatesIssueCertificatePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get certificate body of certificate
         * @param {string} serialNumber The serial number of the certificate to get the certificate body and certificate chain for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PkiCertificatesSerialNumberCertificateGet(serialNumber: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1PkiCertificatesSerialNumberCertificateGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PkiCertificatesSerialNumberCertificateGet(serialNumber, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1PkiCertificatesSerialNumberCertificateGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete certificate
         * @param {string} serialNumber The serial number of the certificate to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PkiCertificatesSerialNumberDelete(serialNumber: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1PkiCertificatesSerialNumberGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PkiCertificatesSerialNumberDelete(serialNumber, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1PkiCertificatesSerialNumberDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get certificate
         * @param {string} serialNumber The serial number of the certificate to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PkiCertificatesSerialNumberGet(serialNumber: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1PkiCertificatesSerialNumberGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PkiCertificatesSerialNumberGet(serialNumber, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1PkiCertificatesSerialNumberGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Revoke
         * @param {string} serialNumber The serial number of the certificate to revoke. The revoked certificate will be added to the certificate revocation list (CRL) of the CA.
         * @param {ApiV1PkiCertificatesSerialNumberRevokePostRequest} apiV1PkiCertificatesSerialNumberRevokePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PkiCertificatesSerialNumberRevokePost(serialNumber: string, apiV1PkiCertificatesSerialNumberRevokePostRequest: ApiV1PkiCertificatesSerialNumberRevokePostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1PkiCertificatesSerialNumberRevokePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PkiCertificatesSerialNumberRevokePost(serialNumber, apiV1PkiCertificatesSerialNumberRevokePostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1PkiCertificatesSerialNumberRevokePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Sign certificate
         * @param {ApiV1PkiCertificatesSignCertificatePostRequest} apiV1PkiCertificatesSignCertificatePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PkiCertificatesSignCertificatePost(apiV1PkiCertificatesSignCertificatePostRequest: ApiV1PkiCertificatesSignCertificatePostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1PkiCaCaIdSignCertificatePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PkiCertificatesSignCertificatePost(apiV1PkiCertificatesSignCertificatePostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1PkiCertificatesSignCertificatePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete PKI collection
         * @param {string} collectionId The ID of the PKI collection to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PkiCollectionsCollectionIdDelete(collectionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1PkiCollectionsPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PkiCollectionsCollectionIdDelete(collectionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1PkiCollectionsCollectionIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get PKI collection
         * @param {string} collectionId The ID of the PKI collection to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PkiCollectionsCollectionIdGet(collectionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1PkiCollectionsPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PkiCollectionsCollectionIdGet(collectionId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1PkiCollectionsCollectionIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Remove item from PKI collection
         * @param {string} collectionId The ID of the PKI collection to delete the item from
         * @param {string} collectionItemId The ID of the PKI collection item to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PkiCollectionsCollectionIdItemsCollectionItemIdDelete(collectionId: string, collectionItemId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1PkiCollectionsCollectionIdItemsCollectionItemIdDelete200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PkiCollectionsCollectionIdItemsCollectionItemIdDelete(collectionId, collectionItemId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1PkiCollectionsCollectionIdItemsCollectionItemIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get items in PKI collection
         * @param {string} collectionId The ID of the PKI collection to list items from
         * @param {ApiV1PkiCollectionsCollectionIdItemsGetTypeEnum} [type] The type of the PKI collection item to list
         * @param {number} [offset] The offset to start from
         * @param {number} [limit] The number of items to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PkiCollectionsCollectionIdItemsGet(collectionId: string, type?: ApiV1PkiCollectionsCollectionIdItemsGetTypeEnum, offset?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1PkiCollectionsCollectionIdItemsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PkiCollectionsCollectionIdItemsGet(collectionId, type, offset, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1PkiCollectionsCollectionIdItemsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Add item to PKI collection
         * @param {string} collectionId The ID of the PKI collection to add the item to
         * @param {ApiV1PkiCollectionsCollectionIdItemsPostRequest} apiV1PkiCollectionsCollectionIdItemsPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PkiCollectionsCollectionIdItemsPost(collectionId: string, apiV1PkiCollectionsCollectionIdItemsPostRequest: ApiV1PkiCollectionsCollectionIdItemsPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1PkiCollectionsCollectionIdItemsPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PkiCollectionsCollectionIdItemsPost(collectionId, apiV1PkiCollectionsCollectionIdItemsPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1PkiCollectionsCollectionIdItemsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update PKI collection
         * @param {string} collectionId The ID of the PKI collection to update
         * @param {ApiV1PkiCollectionsCollectionIdPatchRequest} [apiV1PkiCollectionsCollectionIdPatchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PkiCollectionsCollectionIdPatch(collectionId: string, apiV1PkiCollectionsCollectionIdPatchRequest?: ApiV1PkiCollectionsCollectionIdPatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1PkiCollectionsPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PkiCollectionsCollectionIdPatch(collectionId, apiV1PkiCollectionsCollectionIdPatchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1PkiCollectionsCollectionIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create PKI collection
         * @param {ApiV1PkiCollectionsPostRequest} apiV1PkiCollectionsPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PkiCollectionsPost(apiV1PkiCollectionsPostRequest: ApiV1PkiCollectionsPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1PkiCollectionsPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PkiCollectionsPost(apiV1PkiCollectionsPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1PkiCollectionsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get CRL in DER format
         * @param {string} crlId The ID of the certificate revocation list (CRL) to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PkiCrlCrlIdGet(crlId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1PkiCrlCrlIdGet(crlId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1PkiCrlCrlIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1RateLimitGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1RateLimitGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1RateLimitGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1RateLimitGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1RateLimitPutRequest} apiV1RateLimitPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1RateLimitPut(apiV1RateLimitPutRequest: ApiV1RateLimitPutRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1RateLimitGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1RateLimitPut(apiV1RateLimitPutRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1RateLimitPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [startIndex] 
         * @param {number} [count] 
         * @param {string} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ScimGroupsGet(startIndex?: number, count?: number, filter?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1ScimGroupsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ScimGroupsGet(startIndex, count, filter, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1ScimGroupsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} groupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ScimGroupsGroupIdDelete(groupId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ScimGroupsGroupIdDelete(groupId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1ScimGroupsGroupIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} groupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ScimGroupsGroupIdGet(groupId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1ScimGroupsGet200ResponseResourcesInner>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ScimGroupsGroupIdGet(groupId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1ScimGroupsGroupIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} groupId 
         * @param {ApiV1ScimGroupsGroupIdPatchRequest} apiV1ScimGroupsGroupIdPatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ScimGroupsGroupIdPatch(groupId: string, apiV1ScimGroupsGroupIdPatchRequest: ApiV1ScimGroupsGroupIdPatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1ScimGroupsGet200ResponseResourcesInner>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ScimGroupsGroupIdPatch(groupId, apiV1ScimGroupsGroupIdPatchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1ScimGroupsGroupIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} groupId 
         * @param {ApiV1ScimGroupsGroupIdPutRequest} apiV1ScimGroupsGroupIdPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ScimGroupsGroupIdPut(groupId: string, apiV1ScimGroupsGroupIdPutRequest: ApiV1ScimGroupsGroupIdPutRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1ScimGroupsGet200ResponseResourcesInner>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ScimGroupsGroupIdPut(groupId, apiV1ScimGroupsGroupIdPutRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1ScimGroupsGroupIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1ScimGroupsPostRequest} apiV1ScimGroupsPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ScimGroupsPost(apiV1ScimGroupsPostRequest: ApiV1ScimGroupsPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1ScimGroupsPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ScimGroupsPost(apiV1ScimGroupsPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1ScimGroupsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ScimScimTokensGet(organizationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1ScimScimTokensGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ScimScimTokensGet(organizationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1ScimScimTokensGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1ScimScimTokensPostRequest} apiV1ScimScimTokensPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ScimScimTokensPost(apiV1ScimScimTokensPostRequest: ApiV1ScimScimTokensPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1ScimScimTokensPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ScimScimTokensPost(apiV1ScimScimTokensPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1ScimScimTokensPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} scimTokenId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ScimScimTokensScimTokenIdDelete(scimTokenId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1ScimScimTokensScimTokenIdDelete200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ScimScimTokensScimTokenIdDelete(scimTokenId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1ScimScimTokensScimTokenIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [startIndex] 
         * @param {number} [count] 
         * @param {string} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ScimUsersGet(startIndex?: number, count?: number, filter?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1ScimUsersGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ScimUsersGet(startIndex, count, filter, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1ScimUsersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} orgMembershipId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ScimUsersOrgMembershipIdDelete(orgMembershipId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ScimUsersOrgMembershipIdDelete(orgMembershipId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1ScimUsersOrgMembershipIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} orgMembershipId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ScimUsersOrgMembershipIdGet(orgMembershipId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1ScimUsersOrgMembershipIdGet201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ScimUsersOrgMembershipIdGet(orgMembershipId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1ScimUsersOrgMembershipIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} orgMembershipId 
         * @param {ApiV1ScimUsersOrgMembershipIdPutRequest} apiV1ScimUsersOrgMembershipIdPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ScimUsersOrgMembershipIdPut(orgMembershipId: string, apiV1ScimUsersOrgMembershipIdPutRequest: ApiV1ScimUsersOrgMembershipIdPutRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1ScimUsersOrgMembershipIdPut200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ScimUsersOrgMembershipIdPut(orgMembershipId, apiV1ScimUsersOrgMembershipIdPutRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1ScimUsersOrgMembershipIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1ScimUsersPostRequest} apiV1ScimUsersPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ScimUsersPost(apiV1ScimUsersPostRequest: ApiV1ScimUsersPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1ScimUsersPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ScimUsersPost(apiV1ScimUsersPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1ScimUsersPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SecretApprovalRequestsCountGet(workspaceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1SecretApprovalRequestsCountGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1SecretApprovalRequestsCountGet(workspaceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1SecretApprovalRequestsCountGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {string} [environment] 
         * @param {string} [committer] 
         * @param {ApiV1SecretApprovalRequestsGetStatusEnum} [status] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SecretApprovalRequestsGet(workspaceId: string, environment?: string, committer?: string, status?: ApiV1SecretApprovalRequestsGetStatusEnum, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1SecretApprovalRequestsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1SecretApprovalRequestsGet(workspaceId, environment, committer, status, limit, offset, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1SecretApprovalRequestsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SecretApprovalRequestsIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1SecretApprovalRequestsIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1SecretApprovalRequestsIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1SecretApprovalRequestsIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {ApiV1SecretApprovalRequestsIdMergePostRequest} [apiV1SecretApprovalRequestsIdMergePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SecretApprovalRequestsIdMergePost(id: string, apiV1SecretApprovalRequestsIdMergePostRequest?: ApiV1SecretApprovalRequestsIdMergePostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1SecretApprovalRequestsIdMergePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1SecretApprovalRequestsIdMergePost(id, apiV1SecretApprovalRequestsIdMergePostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1SecretApprovalRequestsIdMergePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {ApiV1SecretApprovalRequestsIdReviewPostRequest} apiV1SecretApprovalRequestsIdReviewPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SecretApprovalRequestsIdReviewPost(id: string, apiV1SecretApprovalRequestsIdReviewPostRequest: ApiV1SecretApprovalRequestsIdReviewPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1SecretApprovalRequestsIdReviewPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1SecretApprovalRequestsIdReviewPost(id, apiV1SecretApprovalRequestsIdReviewPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1SecretApprovalRequestsIdReviewPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {ApiV1SecretApprovalRequestsIdStatusPostRequest} apiV1SecretApprovalRequestsIdStatusPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SecretApprovalRequestsIdStatusPost(id: string, apiV1SecretApprovalRequestsIdStatusPostRequest: ApiV1SecretApprovalRequestsIdStatusPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1SecretApprovalRequestsIdMergePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1SecretApprovalRequestsIdStatusPost(id, apiV1SecretApprovalRequestsIdStatusPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1SecretApprovalRequestsIdStatusPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {string} environment 
         * @param {string} secretPath 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SecretApprovalsBoardGet(workspaceId: string, environment: string, secretPath: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1SecretApprovalsBoardGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1SecretApprovalsBoardGet(workspaceId, environment, secretPath, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1SecretApprovalsBoardGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SecretApprovalsGet(workspaceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1SecretApprovalsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1SecretApprovalsGet(workspaceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1SecretApprovalsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1SecretApprovalsPostRequest} apiV1SecretApprovalsPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SecretApprovalsPost(apiV1SecretApprovalsPostRequest: ApiV1SecretApprovalsPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1SecretApprovalsPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1SecretApprovalsPost(apiV1SecretApprovalsPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1SecretApprovalsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} sapId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SecretApprovalsSapIdDelete(sapId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1SecretApprovalsPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1SecretApprovalsSapIdDelete(sapId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1SecretApprovalsSapIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} sapId 
         * @param {ApiV1SecretApprovalsSapIdPatchRequest} apiV1SecretApprovalsSapIdPatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SecretApprovalsSapIdPatch(sapId: string, apiV1SecretApprovalsSapIdPatchRequest: ApiV1SecretApprovalsSapIdPatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1SecretApprovalsPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1SecretApprovalsSapIdPatch(sapId, apiV1SecretApprovalsSapIdPatchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1SecretApprovalsSapIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get secret imports
         * @param {string} workspaceId The ID of the project to list secret imports from.
         * @param {string} environment The slug of the environment to list secret imports from.
         * @param {string} [path] The path to list secret imports from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SecretImportsGet(workspaceId: string, environment: string, path?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1SecretImportsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1SecretImportsGet(workspaceId, environment, path, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1SecretImportsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create secret imports
         * @param {ApiV1SecretImportsPostRequest} apiV1SecretImportsPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SecretImportsPost(apiV1SecretImportsPostRequest: ApiV1SecretImportsPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1SecretImportsPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1SecretImportsPost(apiV1SecretImportsPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1SecretImportsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete secret imports
         * @param {string} secretImportId The ID of the secret import to delete.
         * @param {ApiV1SecretImportsSecretImportIdDeleteRequest} apiV1SecretImportsSecretImportIdDeleteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SecretImportsSecretImportIdDelete(secretImportId: string, apiV1SecretImportsSecretImportIdDeleteRequest: ApiV1SecretImportsSecretImportIdDeleteRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1SecretImportsPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1SecretImportsSecretImportIdDelete(secretImportId, apiV1SecretImportsSecretImportIdDeleteRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1SecretImportsSecretImportIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update secret imports
         * @param {string} secretImportId The ID of the secret import to update.
         * @param {ApiV1SecretImportsSecretImportIdPatchRequest} apiV1SecretImportsSecretImportIdPatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SecretImportsSecretImportIdPatch(secretImportId: string, apiV1SecretImportsSecretImportIdPatchRequest: ApiV1SecretImportsSecretImportIdPatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1SecretImportsPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1SecretImportsSecretImportIdPatch(secretImportId, apiV1SecretImportsSecretImportIdPatchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1SecretImportsSecretImportIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Resync secret replication of secret imports
         * @param {string} secretImportId The ID of the secret import to update.
         * @param {ApiV1SecretImportsSecretImportIdReplicationResyncPostRequest} apiV1SecretImportsSecretImportIdReplicationResyncPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SecretImportsSecretImportIdReplicationResyncPost(secretImportId: string, apiV1SecretImportsSecretImportIdReplicationResyncPostRequest: ApiV1SecretImportsSecretImportIdReplicationResyncPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1WorkspaceWorkspaceIdMigrateV3Post200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1SecretImportsSecretImportIdReplicationResyncPost(secretImportId, apiV1SecretImportsSecretImportIdReplicationResyncPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1SecretImportsSecretImportIdReplicationResyncPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {string} environment 
         * @param {string} [path] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SecretImportsSecretsGet(workspaceId: string, environment: string, path?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1SecretImportsSecretsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1SecretImportsSecretsGet(workspaceId, environment, path, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1SecretImportsSecretsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {string} environment 
         * @param {string} [path] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SecretImportsSecretsRawGet(workspaceId: string, environment: string, path?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1SecretImportsSecretsRawGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1SecretImportsSecretsRawGet(workspaceId, environment, path, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1SecretImportsSecretsRawGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SecretRotationProvidersWorkspaceIdGet(workspaceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1SecretRotationProvidersWorkspaceIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1SecretRotationProvidersWorkspaceIdGet(workspaceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1SecretRotationProvidersWorkspaceIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SecretRotationsGet(workspaceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1SecretRotationsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1SecretRotationsGet(workspaceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1SecretRotationsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SecretRotationsIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1SecretRotationsRestartPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1SecretRotationsIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1SecretRotationsIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1SecretRotationsPostRequest} apiV1SecretRotationsPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SecretRotationsPost(apiV1SecretRotationsPostRequest: ApiV1SecretRotationsPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1SecretRotationsPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1SecretRotationsPost(apiV1SecretRotationsPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1SecretRotationsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1SecretRotationsRestartPostRequest} apiV1SecretRotationsRestartPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SecretRotationsRestartPost(apiV1SecretRotationsRestartPostRequest: ApiV1SecretRotationsRestartPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1SecretRotationsRestartPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1SecretRotationsRestartPost(apiV1SecretRotationsRestartPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1SecretRotationsRestartPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1SecretScanningCreateInstallationSessionOrganizationPostRequest} apiV1SecretScanningCreateInstallationSessionOrganizationPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SecretScanningCreateInstallationSessionOrganizationPost(apiV1SecretScanningCreateInstallationSessionOrganizationPostRequest: ApiV1SecretScanningCreateInstallationSessionOrganizationPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1SecretScanningCreateInstallationSessionOrganizationPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1SecretScanningCreateInstallationSessionOrganizationPost(apiV1SecretScanningCreateInstallationSessionOrganizationPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1SecretScanningCreateInstallationSessionOrganizationPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SecretScanningInstallationStatusOrganizationOrganizationIdGet(organizationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1SecretScanningInstallationStatusOrganizationOrganizationIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1SecretScanningInstallationStatusOrganizationOrganizationIdGet(organizationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1SecretScanningInstallationStatusOrganizationOrganizationIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1SecretScanningLinkInstallationPostRequest} apiV1SecretScanningLinkInstallationPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SecretScanningLinkInstallationPost(apiV1SecretScanningLinkInstallationPostRequest: ApiV1SecretScanningLinkInstallationPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1SecretScanningLinkInstallationPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1SecretScanningLinkInstallationPost(apiV1SecretScanningLinkInstallationPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1SecretScanningLinkInstallationPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SecretScanningOrganizationOrganizationIdRisksGet(organizationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1SecretScanningOrganizationOrganizationIdRisksGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1SecretScanningOrganizationOrganizationIdRisksGet(organizationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1SecretScanningOrganizationOrganizationIdRisksGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {string} riskId 
         * @param {ApiV1SecretScanningOrganizationOrganizationIdRisksRiskIdStatusPostRequest} apiV1SecretScanningOrganizationOrganizationIdRisksRiskIdStatusPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SecretScanningOrganizationOrganizationIdRisksRiskIdStatusPost(organizationId: string, riskId: string, apiV1SecretScanningOrganizationOrganizationIdRisksRiskIdStatusPostRequest: ApiV1SecretScanningOrganizationOrganizationIdRisksRiskIdStatusPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1SecretScanningOrganizationOrganizationIdRisksGet200ResponseRisksInner>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1SecretScanningOrganizationOrganizationIdRisksRiskIdStatusPost(organizationId, riskId, apiV1SecretScanningOrganizationOrganizationIdRisksRiskIdStatusPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1SecretScanningOrganizationOrganizationIdRisksRiskIdStatusPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} offset 
         * @param {number} limit 
         * @param {string} secretId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SecretSecretIdSecretVersionsGet(offset: number, limit: number, secretId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1SecretSecretIdSecretVersionsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1SecretSecretIdSecretVersionsGet(offset, limit, secretId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1SecretSecretIdSecretVersionsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SecretSharingGet(offset?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1SecretSharingGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1SecretSharingGet(offset, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1SecretSharingGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1SecretSharingPostRequest} apiV1SecretSharingPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SecretSharingPost(apiV1SecretSharingPostRequest: ApiV1SecretSharingPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1SecretSharingPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1SecretSharingPost(apiV1SecretSharingPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1SecretSharingPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} hashedHex 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SecretSharingPublicIdGet(hashedHex: string, id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1SecretSharingPublicIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1SecretSharingPublicIdGet(hashedHex, id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1SecretSharingPublicIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1SecretSharingPublicPostRequest} apiV1SecretSharingPublicPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SecretSharingPublicPost(apiV1SecretSharingPublicPostRequest: ApiV1SecretSharingPublicPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1SecretSharingPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1SecretSharingPublicPost(apiV1SecretSharingPublicPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1SecretSharingPublicPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} sharedSecretId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SecretSharingSharedSecretIdDelete(sharedSecretId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1SecretSharingGet200ResponseSecretsInner>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1SecretSharingSharedSecretIdDelete(sharedSecretId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1SecretSharingSharedSecretIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} secretSnapshotId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SecretSnapshotSecretSnapshotIdGet(secretSnapshotId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1SecretSnapshotSecretSnapshotIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1SecretSnapshotSecretSnapshotIdGet(secretSnapshotId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1SecretSnapshotSecretSnapshotIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Roll back project secrets to those captured in a secret snapshot version.
         * @param {string} secretSnapshotId The ID of the snapshot to rollback to.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SecretSnapshotSecretSnapshotIdRollbackPost(secretSnapshotId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1SecretSnapshotSecretSnapshotIdRollbackPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1SecretSnapshotSecretSnapshotIdRollbackPost(secretSnapshotId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1SecretSnapshotSecretSnapshotIdRollbackPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SsoConfigGet(organizationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1SsoConfigGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1SsoConfigGet(organizationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1SsoConfigGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1SsoConfigPatchRequest} apiV1SsoConfigPatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SsoConfigPatch(apiV1SsoConfigPatchRequest: ApiV1SsoConfigPatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1SsoConfigPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1SsoConfigPatch(apiV1SsoConfigPatchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1SsoConfigPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1SsoConfigPostRequest} apiV1SsoConfigPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SsoConfigPost(apiV1SsoConfigPostRequest: ApiV1SsoConfigPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1SsoConfigPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1SsoConfigPost(apiV1SsoConfigPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1SsoConfigPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SsoGithubGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1SsoGithubGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1SsoGithubGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SsoGitlabGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1SsoGitlabGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1SsoGitlabGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SsoGoogleGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1SsoGoogleGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1SsoGoogleGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SsoOidcCallbackGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1SsoOidcCallbackGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1SsoOidcCallbackGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} orgSlug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SsoOidcConfigGet(orgSlug: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1SsoOidcConfigGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1SsoOidcConfigGet(orgSlug, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1SsoOidcConfigGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1SsoOidcConfigPatchRequest} apiV1SsoOidcConfigPatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SsoOidcConfigPatch(apiV1SsoOidcConfigPatchRequest: ApiV1SsoOidcConfigPatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1SsoOidcConfigPatch200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1SsoOidcConfigPatch(apiV1SsoOidcConfigPatchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1SsoOidcConfigPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1SsoOidcConfigPostRequest} apiV1SsoOidcConfigPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SsoOidcConfigPost(apiV1SsoOidcConfigPostRequest: ApiV1SsoOidcConfigPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1SsoOidcConfigPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1SsoOidcConfigPost(apiV1SsoOidcConfigPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1SsoOidcConfigPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SsoOidcLoginErrorGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1SsoOidcLoginErrorGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1SsoOidcLoginErrorGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} orgSlug 
         * @param {string} [callbackPort] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SsoOidcLoginGet(orgSlug: string, callbackPort?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1SsoOidcLoginGet(orgSlug, callbackPort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1SsoOidcLoginGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [callbackPort] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SsoRedirectGithubGet(callbackPort?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1SsoRedirectGithubGet(callbackPort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1SsoRedirectGithubGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [callbackPort] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SsoRedirectGitlabGet(callbackPort?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1SsoRedirectGitlabGet(callbackPort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1SsoRedirectGitlabGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [callbackPort] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SsoRedirectGoogleGet(callbackPort?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1SsoRedirectGoogleGet(callbackPort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1SsoRedirectGoogleGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} orgSlug 
         * @param {string} [callbackPort] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SsoRedirectSaml2OrganizationsOrgSlugGet(orgSlug: string, callbackPort?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1SsoRedirectSaml2OrganizationsOrgSlugGet(orgSlug, callbackPort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1SsoRedirectSaml2OrganizationsOrgSlugGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} samlConfigId 
         * @param {string} [callbackPort] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SsoRedirectSaml2SamlConfigIdGet(samlConfigId: string, callbackPort?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1SsoRedirectSaml2SamlConfigIdGet(samlConfigId, callbackPort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1SsoRedirectSaml2SamlConfigIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} samlConfigId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SsoSaml2SamlConfigIdPost(samlConfigId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1SsoSaml2SamlConfigIdPost(samlConfigId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1SsoSaml2SamlConfigIdPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1SsoTokenExchangePostRequest} apiV1SsoTokenExchangePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1SsoTokenExchangePost(apiV1SsoTokenExchangePostRequest: ApiV1SsoTokenExchangePostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1SsoTokenExchangePost(apiV1SsoTokenExchangePostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1SsoTokenExchangePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} action 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1UserActionGet(action: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1UserActionGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1UserActionGet(action, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1UserActionGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1UserActionPostRequest} apiV1UserActionPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1UserActionPost(apiV1UserActionPostRequest: ApiV1UserActionPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1UserActionPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1UserActionPost(apiV1UserActionPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1UserActionPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1UserEngagementMeWishPostRequest} apiV1UserEngagementMeWishPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1UserEngagementMeWishPost(apiV1UserEngagementMeWishPostRequest: ApiV1UserEngagementMeWishPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1UserEngagementMeWishPost(apiV1UserEngagementMeWishPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1UserEngagementMeWishPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1UserGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1UserGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1UserGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1UserGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} orgId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1UserMeProjectFavoritesGet(orgId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1UserMeProjectFavoritesGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1UserMeProjectFavoritesGet(orgId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1UserMeProjectFavoritesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1UserMeProjectFavoritesPutRequest} apiV1UserMeProjectFavoritesPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1UserMeProjectFavoritesPut(apiV1UserMeProjectFavoritesPutRequest: ApiV1UserMeProjectFavoritesPutRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1UserMeProjectFavoritesPut(apiV1UserMeProjectFavoritesPutRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1UserMeProjectFavoritesPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1UserPrivateKeyGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1UserPrivateKeyGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1UserPrivateKeyGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1UserPrivateKeyGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} token 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1UserUserIdUnlockGet(token: string, userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1UserUserIdUnlockGet(token, userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1UserUserIdUnlockGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {string} [environment] 
         * @param {string} [secretPath] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1WebhooksGet(workspaceId: string, environment?: string, secretPath?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1WebhooksGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1WebhooksGet(workspaceId, environment, secretPath, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1WebhooksGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1WebhooksPostRequest} apiV1WebhooksPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1WebhooksPost(apiV1WebhooksPostRequest: ApiV1WebhooksPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1WebhooksPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1WebhooksPost(apiV1WebhooksPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1WebhooksPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} webhookId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1WebhooksWebhookIdDelete(webhookId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1WebhooksWebhookIdDelete(webhookId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1WebhooksWebhookIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} webhookId 
         * @param {ApiV1WebhooksWebhookIdPatchRequest} [apiV1WebhooksWebhookIdPatchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1WebhooksWebhookIdPatch(webhookId: string, apiV1WebhooksWebhookIdPatchRequest?: ApiV1WebhooksWebhookIdPatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1WebhooksPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1WebhooksWebhookIdPatch(webhookId, apiV1WebhooksWebhookIdPatchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1WebhooksWebhookIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} webhookId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1WebhooksWebhookIdTestPost(webhookId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1WebhooksPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1WebhooksWebhookIdTestPost(webhookId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1WebhooksWebhookIdTestPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1WorkspaceGetIncludeRolesEnum} [includeRoles] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1WorkspaceGet(includeRoles?: ApiV1WorkspaceGetIncludeRolesEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1WorkspaceGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1WorkspaceGet(includeRoles, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1WorkspaceGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1WorkspaceProjectIdPermissionsGet(projectId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1WorkspaceProjectIdPermissionsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1WorkspaceProjectIdPermissionsGet(projectId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1WorkspaceProjectIdPermissionsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} projectId The ID of the project to list tags from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1WorkspaceProjectIdTagsGet(projectId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1WorkspaceProjectIdTagsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1WorkspaceProjectIdTagsGet(projectId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1WorkspaceProjectIdTagsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} projectId The ID of the project to create the tag in.
         * @param {ApiV1WorkspaceProjectIdTagsPostRequest} apiV1WorkspaceProjectIdTagsPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1WorkspaceProjectIdTagsPost(projectId: string, apiV1WorkspaceProjectIdTagsPostRequest: ApiV1WorkspaceProjectIdTagsPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1WorkspaceProjectIdTagsPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1WorkspaceProjectIdTagsPost(projectId, apiV1WorkspaceProjectIdTagsPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1WorkspaceProjectIdTagsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} projectId The ID of the project to get tags from.
         * @param {string} tagSlug The slug of the tag to get details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1WorkspaceProjectIdTagsSlugTagSlugGet(projectId: string, tagSlug: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1WorkspaceProjectIdTagsTagIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1WorkspaceProjectIdTagsSlugTagSlugGet(projectId, tagSlug, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1WorkspaceProjectIdTagsSlugTagSlugGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} projectId The ID of the project to delete the tag from.
         * @param {string} tagId The ID of the tag to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1WorkspaceProjectIdTagsTagIdDelete(projectId: string, tagId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1WorkspaceProjectIdTagsPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1WorkspaceProjectIdTagsTagIdDelete(projectId, tagId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1WorkspaceProjectIdTagsTagIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} projectId The ID of the project to get tags from.
         * @param {string} tagId The ID of the tag to get details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1WorkspaceProjectIdTagsTagIdGet(projectId: string, tagId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1WorkspaceProjectIdTagsTagIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1WorkspaceProjectIdTagsTagIdGet(projectId, tagId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1WorkspaceProjectIdTagsTagIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} projectId The ID of the project to update the tag in.
         * @param {string} tagId The ID of the tag to get details
         * @param {ApiV1WorkspaceProjectIdTagsTagIdPatchRequest} apiV1WorkspaceProjectIdTagsTagIdPatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1WorkspaceProjectIdTagsTagIdPatch(projectId: string, tagId: string, apiV1WorkspaceProjectIdTagsTagIdPatchRequest: ApiV1WorkspaceProjectIdTagsTagIdPatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1WorkspaceProjectIdTagsPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1WorkspaceProjectIdTagsTagIdPatch(projectId, tagId, apiV1WorkspaceProjectIdTagsTagIdPatchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1WorkspaceProjectIdTagsTagIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List project role
         * @param {string} projectSlug The slug of the project to list the roles of.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1WorkspaceProjectSlugRolesGet(projectSlug: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1WorkspaceProjectSlugRolesGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1WorkspaceProjectSlugRolesGet(projectSlug, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1WorkspaceProjectSlugRolesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a project role
         * @param {string} projectSlug Slug of the project to create the role for.
         * @param {ApiV1WorkspaceProjectSlugRolesPostRequest} apiV1WorkspaceProjectSlugRolesPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1WorkspaceProjectSlugRolesPost(projectSlug: string, apiV1WorkspaceProjectSlugRolesPostRequest: ApiV1WorkspaceProjectSlugRolesPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1WorkspaceProjectSlugRolesPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1WorkspaceProjectSlugRolesPost(projectSlug, apiV1WorkspaceProjectSlugRolesPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1WorkspaceProjectSlugRolesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete a project role
         * @param {string} projectSlug Slug of the project to delete this role for.
         * @param {string} roleId The ID of the role to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1WorkspaceProjectSlugRolesRoleIdDelete(projectSlug: string, roleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1WorkspaceProjectSlugRolesPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1WorkspaceProjectSlugRolesRoleIdDelete(projectSlug, roleId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1WorkspaceProjectSlugRolesRoleIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update a project role
         * @param {string} projectSlug Slug of the project to update the role for.
         * @param {string} roleId The ID of the role to update
         * @param {ApiV1WorkspaceProjectSlugRolesRoleIdPatchRequest} [apiV1WorkspaceProjectSlugRolesRoleIdPatchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1WorkspaceProjectSlugRolesRoleIdPatch(projectSlug: string, roleId: string, apiV1WorkspaceProjectSlugRolesRoleIdPatchRequest?: ApiV1WorkspaceProjectSlugRolesRoleIdPatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1WorkspaceProjectSlugRolesPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1WorkspaceProjectSlugRolesRoleIdPatch(projectSlug, roleId, apiV1WorkspaceProjectSlugRolesRoleIdPatchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1WorkspaceProjectSlugRolesRoleIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} projectSlug The slug of the project.
         * @param {string} slug The slug of the role to get details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1WorkspaceProjectSlugRolesSlugSlugGet(projectSlug: string, slug: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1WorkspaceProjectSlugRolesPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1WorkspaceProjectSlugRolesSlugSlugGet(projectSlug, slug, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1WorkspaceProjectSlugRolesSlugSlugGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1WorkspaceWorkspaceIdAuditLogsFiltersActorsGet(workspaceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1WorkspaceWorkspaceIdAuditLogsFiltersActorsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1WorkspaceWorkspaceIdAuditLogsFiltersActorsGet(workspaceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1WorkspaceWorkspaceIdAuditLogsFiltersActorsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Return audit logs
         * @param {string} workspaceId The ID of the project to export audit logs from.
         * @param {ApiV1WorkspaceWorkspaceIdAuditLogsGetEventTypeEnum} [eventType] The type of the event to export.
         * @param {ApiV1WorkspaceWorkspaceIdAuditLogsGetUserAgentTypeEnum} [userAgentType] Choose which consuming application to export audit logs for.
         * @param {string} [startDate] The date to start the export from.
         * @param {string} [endDate] The date to end the export at.
         * @param {number} [offset] The offset to start from. If you enter 10, it will start from the 10th audit log.
         * @param {number} [limit] The number of audit logs to return.
         * @param {string} [actor] The actor to filter the audit logs by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1WorkspaceWorkspaceIdAuditLogsGet(workspaceId: string, eventType?: ApiV1WorkspaceWorkspaceIdAuditLogsGetEventTypeEnum, userAgentType?: ApiV1WorkspaceWorkspaceIdAuditLogsGetUserAgentTypeEnum, startDate?: string, endDate?: string, offset?: number, limit?: number, actor?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1WorkspaceWorkspaceIdAuditLogsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1WorkspaceWorkspaceIdAuditLogsGet(workspaceId, eventType, userAgentType, startDate, endDate, offset, limit, actor, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1WorkspaceWorkspaceIdAuditLogsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List integration auth objects for a workspace.
         * @param {string} workspaceId The ID of the project to list integration auths for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1WorkspaceWorkspaceIdAuthorizationsGet(workspaceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1WorkspaceWorkspaceIdAuthorizationsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1WorkspaceWorkspaceIdAuthorizationsGet(workspaceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1WorkspaceWorkspaceIdAuthorizationsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {ApiV1WorkspaceWorkspaceIdAutoCapitalizationPostRequest} apiV1WorkspaceWorkspaceIdAutoCapitalizationPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1WorkspaceWorkspaceIdAutoCapitalizationPost(workspaceId: string, apiV1WorkspaceWorkspaceIdAutoCapitalizationPostRequest: ApiV1WorkspaceWorkspaceIdAutoCapitalizationPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1WorkspaceWorkspaceIdNamePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1WorkspaceWorkspaceIdAutoCapitalizationPost(workspaceId, apiV1WorkspaceWorkspaceIdAutoCapitalizationPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1WorkspaceWorkspaceIdAutoCapitalizationPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete project
         * @param {string} workspaceId The ID of the project to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1WorkspaceWorkspaceIdDelete(workspaceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1WorkspaceWorkspaceIdDelete200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1WorkspaceWorkspaceIdDelete(workspaceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1WorkspaceWorkspaceIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Environment
         * @param {string} workspaceId The ID of the project the environment belongs to.
         * @param {string} envId The ID of the environment to fetch.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1WorkspaceWorkspaceIdEnvironmentsEnvIdGet(workspaceId: string, envId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1WorkspaceWorkspaceIdEnvironmentsEnvIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1WorkspaceWorkspaceIdEnvironmentsEnvIdGet(workspaceId, envId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1WorkspaceWorkspaceIdEnvironmentsEnvIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete environment
         * @param {string} workspaceId The ID of the project to delete the environment from.
         * @param {string} id The ID of the environment to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1WorkspaceWorkspaceIdEnvironmentsIdDelete(workspaceId: string, id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1WorkspaceWorkspaceIdEnvironmentsPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1WorkspaceWorkspaceIdEnvironmentsIdDelete(workspaceId, id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1WorkspaceWorkspaceIdEnvironmentsIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update environment
         * @param {string} workspaceId The ID of the project to update the environment in.
         * @param {string} id The ID of the environment to update.
         * @param {ApiV1WorkspaceWorkspaceIdEnvironmentsIdPatchRequest} [apiV1WorkspaceWorkspaceIdEnvironmentsIdPatchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1WorkspaceWorkspaceIdEnvironmentsIdPatch(workspaceId: string, id: string, apiV1WorkspaceWorkspaceIdEnvironmentsIdPatchRequest?: ApiV1WorkspaceWorkspaceIdEnvironmentsIdPatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1WorkspaceWorkspaceIdEnvironmentsPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1WorkspaceWorkspaceIdEnvironmentsIdPatch(workspaceId, id, apiV1WorkspaceWorkspaceIdEnvironmentsIdPatchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1WorkspaceWorkspaceIdEnvironmentsIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create environment
         * @param {string} workspaceId The ID of the project to create the environment in.
         * @param {ApiV1WorkspaceWorkspaceIdEnvironmentsPostRequest} apiV1WorkspaceWorkspaceIdEnvironmentsPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1WorkspaceWorkspaceIdEnvironmentsPost(workspaceId: string, apiV1WorkspaceWorkspaceIdEnvironmentsPostRequest: ApiV1WorkspaceWorkspaceIdEnvironmentsPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1WorkspaceWorkspaceIdEnvironmentsPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1WorkspaceWorkspaceIdEnvironmentsPost(workspaceId, apiV1WorkspaceWorkspaceIdEnvironmentsPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1WorkspaceWorkspaceIdEnvironmentsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get project
         * @param {string} workspaceId The ID of the project.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1WorkspaceWorkspaceIdGet(workspaceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1WorkspaceWorkspaceIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1WorkspaceWorkspaceIdGet(workspaceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1WorkspaceWorkspaceIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List integrations for a project.
         * @param {string} workspaceId The ID of the project to list integrations for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1WorkspaceWorkspaceIdIntegrationsGet(workspaceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1WorkspaceWorkspaceIdIntegrationsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1WorkspaceWorkspaceIdIntegrationsGet(workspaceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1WorkspaceWorkspaceIdIntegrationsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {ApiV1WorkspaceWorkspaceIdKeyPostRequest} apiV1WorkspaceWorkspaceIdKeyPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1WorkspaceWorkspaceIdKeyPost(workspaceId: string, apiV1WorkspaceWorkspaceIdKeyPostRequest: ApiV1WorkspaceWorkspaceIdKeyPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1WorkspaceWorkspaceIdMigrateV3Post200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1WorkspaceWorkspaceIdKeyPost(workspaceId, apiV1WorkspaceWorkspaceIdKeyPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1WorkspaceWorkspaceIdKeyPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1WorkspaceWorkspaceIdKeysGet(workspaceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1WorkspaceWorkspaceIdKeysGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1WorkspaceWorkspaceIdKeysGet(workspaceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1WorkspaceWorkspaceIdKeysGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1WorkspaceWorkspaceIdKmsBackupGet(workspaceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1WorkspaceWorkspaceIdKmsBackupGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1WorkspaceWorkspaceIdKmsBackupGet(workspaceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1WorkspaceWorkspaceIdKmsBackupGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {ApiV1WorkspaceWorkspaceIdKmsBackupPostRequest} apiV1WorkspaceWorkspaceIdKmsBackupPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1WorkspaceWorkspaceIdKmsBackupPost(workspaceId: string, apiV1WorkspaceWorkspaceIdKmsBackupPostRequest: ApiV1WorkspaceWorkspaceIdKmsBackupPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1WorkspaceWorkspaceIdKmsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1WorkspaceWorkspaceIdKmsBackupPost(workspaceId, apiV1WorkspaceWorkspaceIdKmsBackupPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1WorkspaceWorkspaceIdKmsBackupPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1WorkspaceWorkspaceIdKmsGet(workspaceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1WorkspaceWorkspaceIdKmsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1WorkspaceWorkspaceIdKmsGet(workspaceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1WorkspaceWorkspaceIdKmsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {ApiV1WorkspaceWorkspaceIdKmsPatchRequest} apiV1WorkspaceWorkspaceIdKmsPatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1WorkspaceWorkspaceIdKmsPatch(workspaceId: string, apiV1WorkspaceWorkspaceIdKmsPatchRequest: ApiV1WorkspaceWorkspaceIdKmsPatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1WorkspaceWorkspaceIdKmsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1WorkspaceWorkspaceIdKmsPatch(workspaceId, apiV1WorkspaceWorkspaceIdKmsPatchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1WorkspaceWorkspaceIdKmsPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1WorkspaceWorkspaceIdLeaveDelete(workspaceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1OrganizationAdminProjectsProjectIdGrantAdminAccessPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1WorkspaceWorkspaceIdLeaveDelete(workspaceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1WorkspaceWorkspaceIdLeaveDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Return project user memberships
         * @param {string} workspaceId The ID of the project to get memberships from.
         * @param {ApiV1WorkspaceWorkspaceIdMembershipsDetailsPostRequest} apiV1WorkspaceWorkspaceIdMembershipsDetailsPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1WorkspaceWorkspaceIdMembershipsDetailsPost(workspaceId: string, apiV1WorkspaceWorkspaceIdMembershipsDetailsPostRequest: ApiV1WorkspaceWorkspaceIdMembershipsDetailsPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1WorkspaceWorkspaceIdMembershipsDetailsPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1WorkspaceWorkspaceIdMembershipsDetailsPost(workspaceId, apiV1WorkspaceWorkspaceIdMembershipsDetailsPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1WorkspaceWorkspaceIdMembershipsDetailsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Return project user memberships
         * @param {string} workspaceId The ID of the project to get memberships from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1WorkspaceWorkspaceIdMembershipsGet(workspaceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1WorkspaceWorkspaceIdMembershipsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1WorkspaceWorkspaceIdMembershipsGet(workspaceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1WorkspaceWorkspaceIdMembershipsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete project user membership
         * @param {string} workspaceId 
         * @param {string} membershipId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1WorkspaceWorkspaceIdMembershipsMembershipIdDelete(workspaceId: string, membershipId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1OrganizationAdminProjectsProjectIdGrantAdminAccessPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1WorkspaceWorkspaceIdMembershipsMembershipIdDelete(workspaceId, membershipId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1WorkspaceWorkspaceIdMembershipsMembershipIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update project user membership
         * @param {string} workspaceId The ID of the project to update the membership for.
         * @param {string} membershipId The ID of the membership to update.
         * @param {ApiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatchRequest} apiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatch(workspaceId: string, membershipId: string, apiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatchRequest: ApiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatch200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatch(workspaceId, membershipId, apiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {ApiV1WorkspaceWorkspaceIdMembershipsPostRequest} apiV1WorkspaceWorkspaceIdMembershipsPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1WorkspaceWorkspaceIdMembershipsPost(workspaceId: string, apiV1WorkspaceWorkspaceIdMembershipsPostRequest: ApiV1WorkspaceWorkspaceIdMembershipsPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1WorkspaceWorkspaceIdMembershipsPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1WorkspaceWorkspaceIdMembershipsPost(workspaceId, apiV1WorkspaceWorkspaceIdMembershipsPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1WorkspaceWorkspaceIdMembershipsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1WorkspaceWorkspaceIdMigrateV3Post(workspaceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1WorkspaceWorkspaceIdMigrateV3Post200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1WorkspaceWorkspaceIdMigrateV3Post(workspaceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1WorkspaceWorkspaceIdMigrateV3Post']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {ApiV1WorkspaceWorkspaceIdNamePostRequest} apiV1WorkspaceWorkspaceIdNamePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1WorkspaceWorkspaceIdNamePost(workspaceId: string, apiV1WorkspaceWorkspaceIdNamePostRequest: ApiV1WorkspaceWorkspaceIdNamePostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1WorkspaceWorkspaceIdNamePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1WorkspaceWorkspaceIdNamePost(workspaceId, apiV1WorkspaceWorkspaceIdNamePostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1WorkspaceWorkspaceIdNamePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update project
         * @param {string} workspaceId The ID of the project to update.
         * @param {ApiV1WorkspaceWorkspaceIdPatchRequest} [apiV1WorkspaceWorkspaceIdPatchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1WorkspaceWorkspaceIdPatch(workspaceId: string, apiV1WorkspaceWorkspaceIdPatchRequest?: ApiV1WorkspaceWorkspaceIdPatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1WorkspaceWorkspaceIdPatch200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1WorkspaceWorkspaceIdPatch(workspaceId, apiV1WorkspaceWorkspaceIdPatchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1WorkspaceWorkspaceIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} environment 
         * @param {string} workspaceId 
         * @param {string} [path] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1WorkspaceWorkspaceIdSecretSnapshotsCountGet(environment: string, workspaceId: string, path?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1WorkspaceWorkspaceIdSecretSnapshotsCountGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1WorkspaceWorkspaceIdSecretSnapshotsCountGet(environment, workspaceId, path, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1WorkspaceWorkspaceIdSecretSnapshotsCountGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Return project secret snapshots ids
         * @param {string} environment The environment to get snapshots from.
         * @param {string} workspaceId The ID of the project to get snapshots from.
         * @param {string} [path] The secret path to get snapshots from.
         * @param {number} [offset] The offset to start from. If you enter 10, it will start from the 10th snapshot.
         * @param {number} [limit] The number of snapshots to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1WorkspaceWorkspaceIdSecretSnapshotsGet(environment: string, workspaceId: string, path?: string, offset?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1WorkspaceWorkspaceIdSecretSnapshotsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1WorkspaceWorkspaceIdSecretSnapshotsGet(environment, workspaceId, path, offset, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1WorkspaceWorkspaceIdSecretSnapshotsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1WorkspaceWorkspaceIdServiceTokenDataGet(workspaceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1WorkspaceWorkspaceIdServiceTokenDataGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1WorkspaceWorkspaceIdServiceTokenDataGet(workspaceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1WorkspaceWorkspaceIdServiceTokenDataGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1WorkspaceWorkspaceIdTrustedIpsGet(workspaceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1WorkspaceWorkspaceIdTrustedIpsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1WorkspaceWorkspaceIdTrustedIpsGet(workspaceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1WorkspaceWorkspaceIdTrustedIpsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {ApiV1WorkspaceWorkspaceIdTrustedIpsPostRequest} apiV1WorkspaceWorkspaceIdTrustedIpsPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1WorkspaceWorkspaceIdTrustedIpsPost(workspaceId: string, apiV1WorkspaceWorkspaceIdTrustedIpsPostRequest: ApiV1WorkspaceWorkspaceIdTrustedIpsPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1WorkspaceWorkspaceIdTrustedIpsPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1WorkspaceWorkspaceIdTrustedIpsPost(workspaceId, apiV1WorkspaceWorkspaceIdTrustedIpsPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1WorkspaceWorkspaceIdTrustedIpsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {string} trustedIpId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1WorkspaceWorkspaceIdTrustedIpsTrustedIpIdDelete(workspaceId: string, trustedIpId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1WorkspaceWorkspaceIdTrustedIpsPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1WorkspaceWorkspaceIdTrustedIpsTrustedIpIdDelete(workspaceId, trustedIpId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1WorkspaceWorkspaceIdTrustedIpsTrustedIpIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {string} trustedIpId 
         * @param {ApiV1WorkspaceWorkspaceIdTrustedIpsTrustedIpIdPatchRequest} apiV1WorkspaceWorkspaceIdTrustedIpsTrustedIpIdPatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1WorkspaceWorkspaceIdTrustedIpsTrustedIpIdPatch(workspaceId: string, trustedIpId: string, apiV1WorkspaceWorkspaceIdTrustedIpsTrustedIpIdPatchRequest: ApiV1WorkspaceWorkspaceIdTrustedIpsTrustedIpIdPatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1WorkspaceWorkspaceIdTrustedIpsPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1WorkspaceWorkspaceIdTrustedIpsTrustedIpIdPatch(workspaceId, trustedIpId, apiV1WorkspaceWorkspaceIdTrustedIpsTrustedIpIdPatchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1WorkspaceWorkspaceIdTrustedIpsTrustedIpIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {ApiV1WorkspaceWorkspaceIdUsersGetIncludeGroupMembersEnum} [includeGroupMembers] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1WorkspaceWorkspaceIdUsersGet(workspaceId: string, includeGroupMembers?: ApiV1WorkspaceWorkspaceIdUsersGetIncludeGroupMembersEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1WorkspaceWorkspaceIdUsersGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1WorkspaceWorkspaceIdUsersGet(workspaceId, includeGroupMembers, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1WorkspaceWorkspaceIdUsersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} workspaceSlug 
         * @param {ApiV1WorkspaceWorkspaceSlugAuditLogsRetentionPutRequest} apiV1WorkspaceWorkspaceSlugAuditLogsRetentionPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1WorkspaceWorkspaceSlugAuditLogsRetentionPut(workspaceSlug: string, apiV1WorkspaceWorkspaceSlugAuditLogsRetentionPutRequest: ApiV1WorkspaceWorkspaceSlugAuditLogsRetentionPutRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1WorkspaceWorkspaceIdNamePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1WorkspaceWorkspaceSlugAuditLogsRetentionPut(workspaceSlug, apiV1WorkspaceWorkspaceSlugAuditLogsRetentionPutRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1WorkspaceWorkspaceSlugAuditLogsRetentionPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} workspaceSlug 
         * @param {ApiV1WorkspaceWorkspaceSlugVersionLimitPutRequest} apiV1WorkspaceWorkspaceSlugVersionLimitPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1WorkspaceWorkspaceSlugVersionLimitPut(workspaceSlug: string, apiV1WorkspaceWorkspaceSlugVersionLimitPutRequest: ApiV1WorkspaceWorkspaceSlugVersionLimitPutRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1WorkspaceWorkspaceIdNamePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1WorkspaceWorkspaceSlugVersionLimitPut(workspaceSlug, apiV1WorkspaceWorkspaceSlugVersionLimitPutRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV1WorkspaceWorkspaceSlugVersionLimitPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AuthMfaSendPost(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1WorkspaceWorkspaceIdMigrateV3Post200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AuthMfaSendPost(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV2AuthMfaSendPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV2AuthMfaVerifyPostRequest} apiV2AuthMfaVerifyPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2AuthMfaVerifyPost(apiV2AuthMfaVerifyPostRequest: ApiV2AuthMfaVerifyPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV2AuthMfaVerifyPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2AuthMfaVerifyPost(apiV2AuthMfaVerifyPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV2AuthMfaVerifyPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Return organization identity memberships
         * @param {string} orgId The ID of the organization to get identity memberships from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2OrganizationsOrgIdIdentityMembershipsGet(orgId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV2OrganizationsOrgIdIdentityMembershipsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2OrganizationsOrgIdIdentityMembershipsGet(orgId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV2OrganizationsOrgIdIdentityMembershipsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2OrganizationsOrganizationIdDelete(organizationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1OrganizationOrganizationIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2OrganizationsOrganizationIdDelete(organizationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV2OrganizationsOrganizationIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Return organization user memberships
         * @param {string} organizationId The ID of the organization to get memberships from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2OrganizationsOrganizationIdMembershipsGet(organizationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV2OrganizationsOrganizationIdMembershipsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2OrganizationsOrganizationIdMembershipsGet(organizationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV2OrganizationsOrganizationIdMembershipsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete organization user memberships
         * @param {string} organizationId The ID of the organization to delete the membership from.
         * @param {string} membershipId The ID of the membership to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2OrganizationsOrganizationIdMembershipsMembershipIdDelete(organizationId: string, membershipId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV2OrganizationsOrganizationIdMembershipsMembershipIdDelete200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2OrganizationsOrganizationIdMembershipsMembershipIdDelete(organizationId, membershipId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV2OrganizationsOrganizationIdMembershipsMembershipIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get organization user membership
         * @param {string} organizationId The ID of the organization to get the membership for.
         * @param {string} membershipId The ID of the membership to get.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2OrganizationsOrganizationIdMembershipsMembershipIdGet(organizationId: string, membershipId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV2OrganizationsOrganizationIdMembershipsMembershipIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2OrganizationsOrganizationIdMembershipsMembershipIdGet(organizationId, membershipId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV2OrganizationsOrganizationIdMembershipsMembershipIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update organization user memberships
         * @param {string} organizationId The ID of the organization to update the membership for.
         * @param {string} membershipId The ID of the membership to update.
         * @param {ApiV2OrganizationsOrganizationIdMembershipsMembershipIdPatchRequest} [apiV2OrganizationsOrganizationIdMembershipsMembershipIdPatchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2OrganizationsOrganizationIdMembershipsMembershipIdPatch(organizationId: string, membershipId: string, apiV2OrganizationsOrganizationIdMembershipsMembershipIdPatchRequest?: ApiV2OrganizationsOrganizationIdMembershipsMembershipIdPatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV2OrganizationsOrganizationIdMembershipsMembershipIdDelete200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2OrganizationsOrganizationIdMembershipsMembershipIdPatch(organizationId, membershipId, apiV2OrganizationsOrganizationIdMembershipsMembershipIdPatchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV2OrganizationsOrganizationIdMembershipsMembershipIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get project memberships given organization membership
         * @param {string} organizationId The ID of the organization to delete the membership from.
         * @param {string} membershipId The ID of the membership to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2OrganizationsOrganizationIdMembershipsMembershipIdProjectMembershipsGet(organizationId: string, membershipId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV2OrganizationsOrganizationIdMembershipsMembershipIdProjectMembershipsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2OrganizationsOrganizationIdMembershipsMembershipIdProjectMembershipsGet(organizationId, membershipId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV2OrganizationsOrganizationIdMembershipsMembershipIdProjectMembershipsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Return projects in organization that user is part of
         * @param {string} organizationId The ID of the organization to get projects from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2OrganizationsOrganizationIdWorkspacesGet(organizationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV2OrganizationsOrganizationIdWorkspacesGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2OrganizationsOrganizationIdWorkspacesGet(organizationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV2OrganizationsOrganizationIdWorkspacesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1WorkspaceWorkspaceIdNamePostRequest} apiV1WorkspaceWorkspaceIdNamePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2OrganizationsPost(apiV1WorkspaceWorkspaceIdNamePostRequest: ApiV1WorkspaceWorkspaceIdNamePostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1OrganizationOrganizationIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2OrganizationsPost(apiV1WorkspaceWorkspaceIdNamePostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV2OrganizationsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Return Infisical Token data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2ServiceTokenGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV2ServiceTokenGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2ServiceTokenGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV2ServiceTokenGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV2ServiceTokenPostRequest} apiV2ServiceTokenPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2ServiceTokenPost(apiV2ServiceTokenPostRequest: ApiV2ServiceTokenPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV2ServiceTokenPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2ServiceTokenPost(apiV2ServiceTokenPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV2ServiceTokenPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} serviceTokenId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2ServiceTokenServiceTokenIdDelete(serviceTokenId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV2ServiceTokenServiceTokenIdDelete200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2ServiceTokenServiceTokenIdDelete(serviceTokenId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV2ServiceTokenServiceTokenIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} apiKeyDataId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2UsersMeApiKeysApiKeyDataIdDelete(apiKeyDataId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV2UsersMeApiKeysApiKeyDataIdDelete200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2UsersMeApiKeysApiKeyDataIdDelete(apiKeyDataId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV2UsersMeApiKeysApiKeyDataIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2UsersMeApiKeysGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ApiV2UsersMeApiKeysGet200ResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2UsersMeApiKeysGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV2UsersMeApiKeysGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV2UsersMeApiKeysPostRequest} apiV2UsersMeApiKeysPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2UsersMeApiKeysPost(apiV2UsersMeApiKeysPostRequest: ApiV2UsersMeApiKeysPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV2UsersMeApiKeysPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2UsersMeApiKeysPost(apiV2UsersMeApiKeysPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV2UsersMeApiKeysPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV2UsersMeAuthMethodsPutRequest} apiV2UsersMeAuthMethodsPutRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2UsersMeAuthMethodsPut(apiV2UsersMeAuthMethodsPutRequest: ApiV2UsersMeAuthMethodsPutRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV2UsersMeMfaPatch200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2UsersMeAuthMethodsPut(apiV2UsersMeAuthMethodsPutRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV2UsersMeAuthMethodsPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2UsersMeDelete(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV2UsersMeMfaPatch200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2UsersMeDelete(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV2UsersMeDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV2UsersMeEmailsCodePostRequest} apiV2UsersMeEmailsCodePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2UsersMeEmailsCodePost(apiV2UsersMeEmailsCodePostRequest: ApiV2UsersMeEmailsCodePostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2UsersMeEmailsCodePost(apiV2UsersMeEmailsCodePostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV2UsersMeEmailsCodePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV2UsersMeEmailsVerifyPostRequest} apiV2UsersMeEmailsVerifyPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2UsersMeEmailsVerifyPost(apiV2UsersMeEmailsVerifyPostRequest: ApiV2UsersMeEmailsVerifyPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2UsersMeEmailsVerifyPost(apiV2UsersMeEmailsVerifyPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV2UsersMeEmailsVerifyPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve the current user on the request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2UsersMeGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1UserGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2UsersMeGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV2UsersMeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV2UsersMeMfaPatchRequest} apiV2UsersMeMfaPatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2UsersMeMfaPatch(apiV2UsersMeMfaPatchRequest: ApiV2UsersMeMfaPatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV2UsersMeMfaPatch200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2UsersMeMfaPatch(apiV2UsersMeMfaPatchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV2UsersMeMfaPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV2UsersMeNamePatchRequest} apiV2UsersMeNamePatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2UsersMeNamePatch(apiV2UsersMeNamePatchRequest: ApiV2UsersMeNamePatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV2UsersMeMfaPatch200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2UsersMeNamePatch(apiV2UsersMeNamePatchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV2UsersMeNamePatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Return organizations that current user is part of
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2UsersMeOrganizationsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1OrganizationGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2UsersMeOrganizationsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV2UsersMeOrganizationsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2UsersMeSessionsDelete(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1WorkspaceWorkspaceIdMigrateV3Post200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2UsersMeSessionsDelete(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV2UsersMeSessionsDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2UsersMeSessionsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ApiV2UsersMeSessionsGet200ResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2UsersMeSessionsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV2UsersMeSessionsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new project
         * @param {ApiV2WorkspacePostRequest} apiV2WorkspacePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2WorkspacePost(apiV2WorkspacePostRequest: ApiV2WorkspacePostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV2WorkspacePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2WorkspacePost(apiV2WorkspacePostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV2WorkspacePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2WorkspaceProjectIdCertificateTemplatesGet(projectId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV2WorkspaceProjectIdCertificateTemplatesGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2WorkspaceProjectIdCertificateTemplatesGet(projectId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV2WorkspaceProjectIdCertificateTemplatesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Return project identity memberships
         * @param {string} projectId The ID of the project to get identity memberships from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2WorkspaceProjectIdIdentityMembershipsGet(projectId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1IdentitiesIdentityIdIdentityMembershipsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2WorkspaceProjectIdIdentityMembershipsGet(projectId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV2WorkspaceProjectIdIdentityMembershipsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete project identity memberships
         * @param {string} projectId The ID of the project to delete the identity membership from.
         * @param {string} identityId The ID of the identity to delete the membership from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2WorkspaceProjectIdIdentityMembershipsIdentityIdDelete(projectId: string, identityId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2WorkspaceProjectIdIdentityMembershipsIdentityIdDelete(projectId, identityId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV2WorkspaceProjectIdIdentityMembershipsIdentityIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Return project identity membership
         * @param {string} projectId The ID of the project to get the identity membership for.
         * @param {string} identityId The ID of the identity to get the membership for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2WorkspaceProjectIdIdentityMembershipsIdentityIdGet(projectId: string, identityId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2WorkspaceProjectIdIdentityMembershipsIdentityIdGet(projectId, identityId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV2WorkspaceProjectIdIdentityMembershipsIdentityIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update project identity memberships
         * @param {string} projectId The ID of the project to update the identity membership for.
         * @param {string} identityId The ID of the identity to update the membership for.
         * @param {ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPatchRequest} apiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPatch(projectId: string, identityId: string, apiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPatchRequest: ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatch200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPatch(projectId, identityId, apiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPatchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create project identity membership
         * @param {string} projectId 
         * @param {string} identityId 
         * @param {ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPostRequest} [apiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPost(projectId: string, identityId: string, apiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPostRequest?: ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPost(projectId, identityId, apiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Remove members from project
         * @param {string} projectId The ID of the project to remove the member from.
         * @param {ApiV2WorkspaceProjectIdMembershipsDeleteRequest} [apiV2WorkspaceProjectIdMembershipsDeleteRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2WorkspaceProjectIdMembershipsDelete(projectId: string, apiV2WorkspaceProjectIdMembershipsDeleteRequest?: ApiV2WorkspaceProjectIdMembershipsDeleteRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV2WorkspaceProjectIdMembershipsPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2WorkspaceProjectIdMembershipsDelete(projectId, apiV2WorkspaceProjectIdMembershipsDeleteRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV2WorkspaceProjectIdMembershipsDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Invite members to project
         * @param {string} projectId The ID of the project to invite the member to.
         * @param {ApiV2WorkspaceProjectIdMembershipsPostRequest} [apiV2WorkspaceProjectIdMembershipsPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2WorkspaceProjectIdMembershipsPost(projectId: string, apiV2WorkspaceProjectIdMembershipsPostRequest?: ApiV2WorkspaceProjectIdMembershipsPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV2WorkspaceProjectIdMembershipsPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2WorkspaceProjectIdMembershipsPost(projectId, apiV2WorkspaceProjectIdMembershipsPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV2WorkspaceProjectIdMembershipsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2WorkspaceProjectIdPkiAlertsGet(projectId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV2WorkspaceProjectIdPkiAlertsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2WorkspaceProjectIdPkiAlertsGet(projectId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV2WorkspaceProjectIdPkiAlertsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2WorkspaceProjectIdPkiCollectionsGet(projectId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV2WorkspaceProjectIdPkiCollectionsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2WorkspaceProjectIdPkiCollectionsGet(projectId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV2WorkspaceProjectIdPkiCollectionsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} projectId 
         * @param {ApiV2WorkspaceProjectIdUpgradePostRequest} apiV2WorkspaceProjectIdUpgradePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2WorkspaceProjectIdUpgradePost(projectId: string, apiV2WorkspaceProjectIdUpgradePostRequest: ApiV2WorkspaceProjectIdUpgradePostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2WorkspaceProjectIdUpgradePost(projectId, apiV2WorkspaceProjectIdUpgradePostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV2WorkspaceProjectIdUpgradePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2WorkspaceProjectIdUpgradeStatusGet(projectId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV2WorkspaceProjectIdUpgradeStatusGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2WorkspaceProjectIdUpgradeStatusGet(projectId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV2WorkspaceProjectIdUpgradeStatusGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Return list of groups in project
         * @param {string} projectSlug The slug of the project to list groups for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2WorkspaceProjectSlugGroupsGet(projectSlug: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV2WorkspaceProjectSlugGroupsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2WorkspaceProjectSlugGroupsGet(projectSlug, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV2WorkspaceProjectSlugGroupsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Remove group from project
         * @param {string} projectSlug The slug of the project to delete the group from.
         * @param {string} groupSlug The slug of the group to delete from the project.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2WorkspaceProjectSlugGroupsGroupSlugDelete(projectSlug: string, groupSlug: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV2WorkspaceProjectSlugGroupsGroupSlugPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2WorkspaceProjectSlugGroupsGroupSlugDelete(projectSlug, groupSlug, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV2WorkspaceProjectSlugGroupsGroupSlugDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update group in project
         * @param {string} projectSlug The slug of the project to update the group in.
         * @param {string} groupSlug The slug of the group to update in the project.
         * @param {ApiV2WorkspaceProjectSlugGroupsGroupSlugPatchRequest} apiV2WorkspaceProjectSlugGroupsGroupSlugPatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2WorkspaceProjectSlugGroupsGroupSlugPatch(projectSlug: string, groupSlug: string, apiV2WorkspaceProjectSlugGroupsGroupSlugPatchRequest: ApiV2WorkspaceProjectSlugGroupsGroupSlugPatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatch200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2WorkspaceProjectSlugGroupsGroupSlugPatch(projectSlug, groupSlug, apiV2WorkspaceProjectSlugGroupsGroupSlugPatchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV2WorkspaceProjectSlugGroupsGroupSlugPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Add group to project
         * @param {string} projectSlug The slug of the project to add the group to.
         * @param {string} groupSlug The slug of the group to add to the project.
         * @param {ApiV2WorkspaceProjectSlugGroupsGroupSlugPostRequest} [apiV2WorkspaceProjectSlugGroupsGroupSlugPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2WorkspaceProjectSlugGroupsGroupSlugPost(projectSlug: string, groupSlug: string, apiV2WorkspaceProjectSlugGroupsGroupSlugPostRequest?: ApiV2WorkspaceProjectSlugGroupsGroupSlugPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV2WorkspaceProjectSlugGroupsGroupSlugPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2WorkspaceProjectSlugGroupsGroupSlugPost(projectSlug, groupSlug, apiV2WorkspaceProjectSlugGroupsGroupSlugPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV2WorkspaceProjectSlugGroupsGroupSlugPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} slug The slug of the project to list CAs for.
         * @param {ApiV2WorkspaceSlugCasGetStatusEnum} [status] The status of the CA to filter by.
         * @param {string} [friendlyName] The friendly name of the CA to filter by.
         * @param {string} [commonName] The common name of the CA to filter by.
         * @param {number} [offset] The offset to start from. If you enter 10, it will start from the 10th CA.
         * @param {number} [limit] The number of CAs to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2WorkspaceSlugCasGet(slug: string, status?: ApiV2WorkspaceSlugCasGetStatusEnum, friendlyName?: string, commonName?: string, offset?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV2WorkspaceSlugCasGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2WorkspaceSlugCasGet(slug, status, friendlyName, commonName, offset, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV2WorkspaceSlugCasGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} slug The slug of the project to list certificates for.
         * @param {string} [friendlyName] The friendly name of the certificate to filter by.
         * @param {string} [commonName] The common name of the certificate to filter by.
         * @param {number} [offset] The offset to start from. If you enter 10, it will start from the 10th certificate.
         * @param {number} [limit] The number of certificates to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2WorkspaceSlugCertificatesGet(slug: string, friendlyName?: string, commonName?: string, offset?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV2WorkspaceSlugCertificatesGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2WorkspaceSlugCertificatesGet(slug, friendlyName, commonName, offset, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV2WorkspaceSlugCertificatesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete project
         * @param {string} slug The slug of the project to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2WorkspaceSlugDelete(slug: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1OrganizationAdminProjectsGet200ResponseProjectsInner>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2WorkspaceSlugDelete(slug, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV2WorkspaceSlugDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} slug The slug of the project to get.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2WorkspaceSlugGet(slug: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1WorkspaceWorkspaceIdGet200ResponseWorkspace>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2WorkspaceSlugGet(slug, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV2WorkspaceSlugGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} slug The slug of the project to update.
         * @param {ApiV2WorkspaceSlugPatchRequest} [apiV2WorkspaceSlugPatchRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2WorkspaceSlugPatch(slug: string, apiV2WorkspaceSlugPatchRequest?: ApiV2WorkspaceSlugPatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1OrganizationAdminProjectsGet200ResponseProjectsInner>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2WorkspaceSlugPatch(slug, apiV2WorkspaceSlugPatchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV2WorkspaceSlugPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Return encrypted project key
         * @param {string} workspaceId The ID of the project to get the key from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2WorkspaceWorkspaceIdEncryptedKeyGet(workspaceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV2WorkspaceWorkspaceIdEncryptedKeyGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2WorkspaceWorkspaceIdEncryptedKeyGet(workspaceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV2WorkspaceWorkspaceIdEncryptedKeyGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV3AuthLogin1PostRequest} apiV3AuthLogin1PostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV3AuthLogin1Post(apiV3AuthLogin1PostRequest: ApiV3AuthLogin1PostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1PasswordSrp1Post200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV3AuthLogin1Post(apiV3AuthLogin1PostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV3AuthLogin1Post']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV3AuthLogin2PostRequest} apiV3AuthLogin2PostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV3AuthLogin2Post(apiV3AuthLogin2PostRequest: ApiV3AuthLogin2PostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV3AuthLogin2Post200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV3AuthLogin2Post(apiV3AuthLogin2PostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV3AuthLogin2Post']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1SecretScanningCreateInstallationSessionOrganizationPostRequest} apiV1SecretScanningCreateInstallationSessionOrganizationPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV3AuthSelectOrganizationPost(apiV1SecretScanningCreateInstallationSessionOrganizationPostRequest: ApiV1SecretScanningCreateInstallationSessionOrganizationPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1AuthTokenPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV3AuthSelectOrganizationPost(apiV1SecretScanningCreateInstallationSessionOrganizationPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV3AuthSelectOrganizationPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Backfill secret references
         * @param {ApiV3SecretsBackfillSecretReferencesPostRequest} apiV3SecretsBackfillSecretReferencesPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV3SecretsBackfillSecretReferencesPost(apiV3SecretsBackfillSecretReferencesPostRequest: ApiV3SecretsBackfillSecretReferencesPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1WorkspaceWorkspaceIdMigrateV3Post200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV3SecretsBackfillSecretReferencesPost(apiV3SecretsBackfillSecretReferencesPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV3SecretsBackfillSecretReferencesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV3SecretsBatchDeleteRequest} apiV3SecretsBatchDeleteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV3SecretsBatchDelete(apiV3SecretsBatchDeleteRequest: ApiV3SecretsBatchDeleteRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV3SecretsBatchPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV3SecretsBatchDelete(apiV3SecretsBatchDeleteRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV3SecretsBatchDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV3SecretsBatchPatchRequest} apiV3SecretsBatchPatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV3SecretsBatchPatch(apiV3SecretsBatchPatchRequest: ApiV3SecretsBatchPatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV3SecretsBatchPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV3SecretsBatchPatch(apiV3SecretsBatchPatchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV3SecretsBatchPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV3SecretsBatchPostRequest} apiV3SecretsBatchPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV3SecretsBatchPost(apiV3SecretsBatchPostRequest: ApiV3SecretsBatchPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV3SecretsBatchPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV3SecretsBatchPost(apiV3SecretsBatchPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV3SecretsBatchPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete many secrets
         * @param {ApiV3SecretsBatchRawDeleteRequest} apiV3SecretsBatchRawDeleteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV3SecretsBatchRawDelete(apiV3SecretsBatchRawDeleteRequest: ApiV3SecretsBatchRawDeleteRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV3SecretsBatchRawPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV3SecretsBatchRawDelete(apiV3SecretsBatchRawDeleteRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV3SecretsBatchRawDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update many secrets
         * @param {ApiV3SecretsBatchRawPatchRequest} apiV3SecretsBatchRawPatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV3SecretsBatchRawPatch(apiV3SecretsBatchRawPatchRequest: ApiV3SecretsBatchRawPatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV3SecretsBatchRawPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV3SecretsBatchRawPatch(apiV3SecretsBatchRawPatchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV3SecretsBatchRawPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create many secrets
         * @param {ApiV3SecretsBatchRawPostRequest} apiV3SecretsBatchRawPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV3SecretsBatchRawPost(apiV3SecretsBatchRawPostRequest: ApiV3SecretsBatchRawPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV3SecretsBatchRawPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV3SecretsBatchRawPost(apiV3SecretsBatchRawPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV3SecretsBatchRawPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {string} environment 
         * @param {string} [secretPath] 
         * @param {ApiV3SecretsGetRecursiveEnum} [recursive] 
         * @param {ApiV3SecretsGetIncludeImportsEnum} [includeImports] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV3SecretsGet(workspaceId: string, environment: string, secretPath?: string, recursive?: ApiV3SecretsGetRecursiveEnum, includeImports?: ApiV3SecretsGetIncludeImportsEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV3SecretsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV3SecretsGet(workspaceId, environment, secretPath, recursive, includeImports, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV3SecretsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV3SecretsMovePostRequest} apiV3SecretsMovePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV3SecretsMovePost(apiV3SecretsMovePostRequest: ApiV3SecretsMovePostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV3SecretsMovePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV3SecretsMovePost(apiV3SecretsMovePostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV3SecretsMovePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List secrets
         * @param {string} [workspaceId] The ID of the project to list secrets from.
         * @param {string} [workspaceSlug] The slug of the project to list secrets from. This parameter is only applicable by machine identities.
         * @param {string} [environment] The slug of the environment to list secrets from.
         * @param {string} [secretPath] The secret path to list secrets from.
         * @param {ApiV3SecretsRawGetExpandSecretReferencesEnum} [expandSecretReferences] Whether or not to expand secret references
         * @param {ApiV3SecretsRawGetRecursiveEnum} [recursive] Whether or not to fetch all secrets from the specified base path, and all of its subdirectories. Note, the max depth is 20 deep.
         * @param {ApiV3SecretsRawGetIncludeImportsEnum} [includeImports] Weather to include imported secrets or not.
         * @param {string} [tagSlugs] The comma separated tag slugs to filter secrets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV3SecretsRawGet(workspaceId?: string, workspaceSlug?: string, environment?: string, secretPath?: string, expandSecretReferences?: ApiV3SecretsRawGetExpandSecretReferencesEnum, recursive?: ApiV3SecretsRawGetRecursiveEnum, includeImports?: ApiV3SecretsRawGetIncludeImportsEnum, tagSlugs?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV3SecretsRawGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV3SecretsRawGet(workspaceId, workspaceSlug, environment, secretPath, expandSecretReferences, recursive, includeImports, tagSlugs, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV3SecretsRawGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete secret
         * @param {string} secretName The name of the secret to delete.
         * @param {ApiV3SecretsRawSecretNameDeleteRequest} apiV3SecretsRawSecretNameDeleteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV3SecretsRawSecretNameDelete(secretName: string, apiV3SecretsRawSecretNameDeleteRequest: ApiV3SecretsRawSecretNameDeleteRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV3SecretsRawSecretNamePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV3SecretsRawSecretNameDelete(secretName, apiV3SecretsRawSecretNameDeleteRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV3SecretsRawSecretNameDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a secret by name
         * @param {string} secretName The name of the secret to get.
         * @param {string} [workspaceId] The ID of the project to get the secret from.
         * @param {string} [workspaceSlug] The slug of the project to get the secret from.
         * @param {string} [environment] The slug of the environment to get the secret from.
         * @param {string} [secretPath] The path of the secret to get.
         * @param {number} [version] The version of the secret to get.
         * @param {ApiV3SecretsRawSecretNameGetTypeEnum} [type] The type of the secret to get.
         * @param {ApiV3SecretsRawSecretNameGetExpandSecretReferencesEnum} [expandSecretReferences] Whether or not to expand secret references
         * @param {ApiV3SecretsRawSecretNameGetIncludeImportsEnum} [includeImports] Weather to include imported secrets or not.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV3SecretsRawSecretNameGet(secretName: string, workspaceId?: string, workspaceSlug?: string, environment?: string, secretPath?: string, version?: number, type?: ApiV3SecretsRawSecretNameGetTypeEnum, expandSecretReferences?: ApiV3SecretsRawSecretNameGetExpandSecretReferencesEnum, includeImports?: ApiV3SecretsRawSecretNameGetIncludeImportsEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV3SecretsRawSecretNameGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV3SecretsRawSecretNameGet(secretName, workspaceId, workspaceSlug, environment, secretPath, version, type, expandSecretReferences, includeImports, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV3SecretsRawSecretNameGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update secret
         * @param {string} secretName The name of the secret to update.
         * @param {ApiV3SecretsRawSecretNamePatchRequest} apiV3SecretsRawSecretNamePatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV3SecretsRawSecretNamePatch(secretName: string, apiV3SecretsRawSecretNamePatchRequest: ApiV3SecretsRawSecretNamePatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV3SecretsRawSecretNamePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV3SecretsRawSecretNamePatch(secretName, apiV3SecretsRawSecretNamePatchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV3SecretsRawSecretNamePatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create secret
         * @param {string} secretName The name of the secret to create.
         * @param {ApiV3SecretsRawSecretNamePostRequest} apiV3SecretsRawSecretNamePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV3SecretsRawSecretNamePost(secretName: string, apiV3SecretsRawSecretNamePostRequest: ApiV3SecretsRawSecretNamePostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV3SecretsRawSecretNamePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV3SecretsRawSecretNamePost(secretName, apiV3SecretsRawSecretNamePostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV3SecretsRawSecretNamePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} secretName 
         * @param {ApiV3SecretsSecretNameDeleteRequest} apiV3SecretsSecretNameDeleteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV3SecretsSecretNameDelete(secretName: string, apiV3SecretsSecretNameDeleteRequest: ApiV3SecretsSecretNameDeleteRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV3SecretsSecretNamePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV3SecretsSecretNameDelete(secretName, apiV3SecretsSecretNameDeleteRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV3SecretsSecretNameDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} workspaceId 
         * @param {string} environment 
         * @param {string} secretName 
         * @param {string} [secretPath] 
         * @param {ApiV3SecretsSecretNameGetTypeEnum} [type] 
         * @param {number} [version] 
         * @param {ApiV3SecretsSecretNameGetIncludeImportsEnum} [includeImports] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV3SecretsSecretNameGet(workspaceId: string, environment: string, secretName: string, secretPath?: string, type?: ApiV3SecretsSecretNameGetTypeEnum, version?: number, includeImports?: ApiV3SecretsSecretNameGetIncludeImportsEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV3SecretsSecretNameGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV3SecretsSecretNameGet(workspaceId, environment, secretName, secretPath, type, version, includeImports, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV3SecretsSecretNameGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} secretName 
         * @param {ApiV3SecretsSecretNamePatchRequest} apiV3SecretsSecretNamePatchRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV3SecretsSecretNamePatch(secretName: string, apiV3SecretsSecretNamePatchRequest: ApiV3SecretsSecretNamePatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV3SecretsSecretNamePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV3SecretsSecretNamePatch(secretName, apiV3SecretsSecretNamePatchRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV3SecretsSecretNamePatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} secretName 
         * @param {ApiV3SecretsSecretNamePostRequest} apiV3SecretsSecretNamePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV3SecretsSecretNamePost(secretName: string, apiV3SecretsSecretNamePostRequest: ApiV3SecretsSecretNamePostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV3SecretsSecretNamePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV3SecretsSecretNamePost(secretName, apiV3SecretsSecretNamePostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV3SecretsSecretNamePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Detach tags from a secret
         * @param {string} secretName The name of the secret to detach tags from.
         * @param {ApiV3SecretsTagsSecretNameDeleteRequest} apiV3SecretsTagsSecretNameDeleteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV3SecretsTagsSecretNameDelete(secretName: string, apiV3SecretsTagsSecretNameDeleteRequest: ApiV3SecretsTagsSecretNameDeleteRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV3SecretsTagsSecretNamePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV3SecretsTagsSecretNameDelete(secretName, apiV3SecretsTagsSecretNameDeleteRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV3SecretsTagsSecretNameDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Attach tags to a secret
         * @param {string} secretName The name of the secret to attach tags to.
         * @param {ApiV3SecretsTagsSecretNamePostRequest} apiV3SecretsTagsSecretNamePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV3SecretsTagsSecretNamePost(secretName: string, apiV3SecretsTagsSecretNamePostRequest: ApiV3SecretsTagsSecretNamePostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV3SecretsTagsSecretNamePost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV3SecretsTagsSecretNamePost(secretName, apiV3SecretsTagsSecretNamePostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV3SecretsTagsSecretNamePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV3SignupCompleteAccountInvitePostRequest} apiV3SignupCompleteAccountInvitePostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV3SignupCompleteAccountInvitePost(apiV3SignupCompleteAccountInvitePostRequest: ApiV3SignupCompleteAccountInvitePostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1PasswordEmailPasswordResetVerifyPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV3SignupCompleteAccountInvitePost(apiV3SignupCompleteAccountInvitePostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV3SignupCompleteAccountInvitePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV3SignupCompleteAccountSignupPostRequest} apiV3SignupCompleteAccountSignupPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV3SignupCompleteAccountSignupPost(apiV3SignupCompleteAccountSignupPostRequest: ApiV3SignupCompleteAccountSignupPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV3SignupCompleteAccountSignupPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV3SignupCompleteAccountSignupPost(apiV3SignupCompleteAccountSignupPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV3SignupCompleteAccountSignupPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1PasswordEmailPasswordResetPostRequest} apiV1PasswordEmailPasswordResetPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV3SignupEmailSignupPost(apiV1PasswordEmailPasswordResetPostRequest: ApiV1PasswordEmailPasswordResetPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1WorkspaceWorkspaceIdMigrateV3Post200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV3SignupEmailSignupPost(apiV1PasswordEmailPasswordResetPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV3SignupEmailSignupPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ApiV1PasswordEmailPasswordResetVerifyPostRequest} apiV1PasswordEmailPasswordResetVerifyPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV3SignupEmailVerifyPost(apiV1PasswordEmailPasswordResetVerifyPostRequest: ApiV1PasswordEmailPasswordResetVerifyPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV3SignupEmailVerifyPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV3SignupEmailVerifyPost(apiV1PasswordEmailPasswordResetVerifyPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV3SignupEmailVerifyPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV3UsersMeApiKeysGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV3UsersMeApiKeysGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV3UsersMeApiKeysGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV3UsersMeApiKeysGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV3WorkspacesProjectIdSecretsBlindIndexStatusGet(projectId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV3WorkspacesProjectIdSecretsBlindIndexStatusGet(projectId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV3WorkspacesProjectIdSecretsBlindIndexStatusGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV3WorkspacesProjectIdSecretsGet(projectId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV3WorkspacesProjectIdSecretsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV3WorkspacesProjectIdSecretsGet(projectId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV3WorkspacesProjectIdSecretsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} projectId 
         * @param {ApiV3WorkspacesProjectIdSecretsNamesPostRequest} apiV3WorkspacesProjectIdSecretsNamesPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV3WorkspacesProjectIdSecretsNamesPost(projectId: string, apiV3WorkspacesProjectIdSecretsNamesPostRequest: ApiV3WorkspacesProjectIdSecretsNamesPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1WorkspaceWorkspaceIdMigrateV3Post200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV3WorkspacesProjectIdSecretsNamesPost(projectId, apiV3WorkspacesProjectIdSecretsNamesPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiV3WorkspacesProjectIdSecretsNamesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} certificateTemplateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async wellKnownEstCertificateTemplateIdCacertsGet(certificateTemplateId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.wellKnownEstCertificateTemplateIdCacertsGet(certificateTemplateId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.wellKnownEstCertificateTemplateIdCacertsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} certificateTemplateId 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async wellKnownEstCertificateTemplateIdSimpleenrollPost(certificateTemplateId: string, body?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.wellKnownEstCertificateTemplateIdSimpleenrollPost(certificateTemplateId, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.wellKnownEstCertificateTemplateIdSimpleenrollPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} certificateTemplateId 
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async wellKnownEstCertificateTemplateIdSimplereenrollPost(certificateTemplateId: string, body?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.wellKnownEstCertificateTemplateIdSimplereenrollPost(certificateTemplateId, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.wellKnownEstCertificateTemplateIdSimplereenrollPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStatusGet(options?: RawAxiosRequestConfig): AxiosPromise<ApiStatusGet200Response> {
            return localVarFp.apiStatusGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1AccessApprovalsPoliciesCountGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AccessApprovalsPoliciesCountGet(requestParameters: DefaultApiApiV1AccessApprovalsPoliciesCountGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1WorkspaceWorkspaceIdSecretSnapshotsCountGet200Response> {
            return localVarFp.apiV1AccessApprovalsPoliciesCountGet(requestParameters.projectSlug, requestParameters.envSlug, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1AccessApprovalsPoliciesGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AccessApprovalsPoliciesGet(requestParameters: DefaultApiApiV1AccessApprovalsPoliciesGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1SecretApprovalsGet200Response> {
            return localVarFp.apiV1AccessApprovalsPoliciesGet(requestParameters.projectSlug, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1AccessApprovalsPoliciesPolicyIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AccessApprovalsPoliciesPolicyIdDelete(requestParameters: DefaultApiApiV1AccessApprovalsPoliciesPolicyIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1SecretApprovalsPost200Response> {
            return localVarFp.apiV1AccessApprovalsPoliciesPolicyIdDelete(requestParameters.policyId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1AccessApprovalsPoliciesPolicyIdPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AccessApprovalsPoliciesPolicyIdPatch(requestParameters: DefaultApiApiV1AccessApprovalsPoliciesPolicyIdPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1SecretApprovalsPost200Response> {
            return localVarFp.apiV1AccessApprovalsPoliciesPolicyIdPatch(requestParameters.policyId, requestParameters.apiV1AccessApprovalsPoliciesPolicyIdPatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1AccessApprovalsPoliciesPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AccessApprovalsPoliciesPost(requestParameters: DefaultApiApiV1AccessApprovalsPoliciesPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1SecretApprovalsPost200Response> {
            return localVarFp.apiV1AccessApprovalsPoliciesPost(requestParameters.apiV1AccessApprovalsPoliciesPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1AccessApprovalsRequestsCountGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AccessApprovalsRequestsCountGet(requestParameters: DefaultApiApiV1AccessApprovalsRequestsCountGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AccessApprovalsRequestsCountGet200Response> {
            return localVarFp.apiV1AccessApprovalsRequestsCountGet(requestParameters.projectSlug, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1AccessApprovalsRequestsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AccessApprovalsRequestsGet(requestParameters: DefaultApiApiV1AccessApprovalsRequestsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AccessApprovalsRequestsGet200Response> {
            return localVarFp.apiV1AccessApprovalsRequestsGet(requestParameters.projectSlug, requestParameters.authorProjectMembershipId, requestParameters.envSlug, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1AccessApprovalsRequestsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AccessApprovalsRequestsPost(requestParameters: DefaultApiApiV1AccessApprovalsRequestsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AccessApprovalsRequestsPost200Response> {
            return localVarFp.apiV1AccessApprovalsRequestsPost(requestParameters.projectSlug, requestParameters.apiV1AccessApprovalsRequestsPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1AccessApprovalsRequestsRequestIdReviewPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AccessApprovalsRequestsRequestIdReviewPost(requestParameters: DefaultApiApiV1AccessApprovalsRequestsRequestIdReviewPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AccessApprovalsRequestsRequestIdReviewPost200Response> {
            return localVarFp.apiV1AccessApprovalsRequestsRequestIdReviewPost(requestParameters.requestId, requestParameters.apiV1SecretApprovalRequestsIdReviewPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a specific privilege of an identity.
         * @param {DefaultApiApiV1AdditionalPrivilegeIdentityDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdditionalPrivilegeIdentityDelete(requestParameters: DefaultApiApiV1AdditionalPrivilegeIdentityDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AdditionalPrivilegeIdentityPermanentPost200Response> {
            return localVarFp.apiV1AdditionalPrivilegeIdentityDelete(requestParameters.apiV1AdditionalPrivilegeIdentityDeleteRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * List of a specific privilege of an identity in a project.
         * @param {DefaultApiApiV1AdditionalPrivilegeIdentityGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdditionalPrivilegeIdentityGet(requestParameters: DefaultApiApiV1AdditionalPrivilegeIdentityGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AdditionalPrivilegeIdentityGet200Response> {
            return localVarFp.apiV1AdditionalPrivilegeIdentityGet(requestParameters.identityId, requestParameters.projectSlug, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a specific privilege of an identity.
         * @param {DefaultApiApiV1AdditionalPrivilegeIdentityPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdditionalPrivilegeIdentityPatch(requestParameters: DefaultApiApiV1AdditionalPrivilegeIdentityPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AdditionalPrivilegeIdentityPermanentPost200Response> {
            return localVarFp.apiV1AdditionalPrivilegeIdentityPatch(requestParameters.apiV1AdditionalPrivilegeIdentityPatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a permanent or a non expiry specific privilege for identity.
         * @param {DefaultApiApiV1AdditionalPrivilegeIdentityPermanentPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdditionalPrivilegeIdentityPermanentPost(requestParameters: DefaultApiApiV1AdditionalPrivilegeIdentityPermanentPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AdditionalPrivilegeIdentityPermanentPost200Response> {
            return localVarFp.apiV1AdditionalPrivilegeIdentityPermanentPost(requestParameters.apiV1AdditionalPrivilegeIdentityPermanentPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve details of a specific privilege by privilege slug.
         * @param {DefaultApiApiV1AdditionalPrivilegeIdentityPrivilegeSlugGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdditionalPrivilegeIdentityPrivilegeSlugGet(requestParameters: DefaultApiApiV1AdditionalPrivilegeIdentityPrivilegeSlugGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AdditionalPrivilegeIdentityPermanentPost200Response> {
            return localVarFp.apiV1AdditionalPrivilegeIdentityPrivilegeSlugGet(requestParameters.identityId, requestParameters.projectSlug, requestParameters.privilegeSlug, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a temporary or a expiring specific privilege for identity.
         * @param {DefaultApiApiV1AdditionalPrivilegeIdentityTemporaryPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdditionalPrivilegeIdentityTemporaryPost(requestParameters: DefaultApiApiV1AdditionalPrivilegeIdentityTemporaryPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AdditionalPrivilegeIdentityPermanentPost200Response> {
            return localVarFp.apiV1AdditionalPrivilegeIdentityTemporaryPost(requestParameters.apiV1AdditionalPrivilegeIdentityTemporaryPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1AdditionalPrivilegeUsersGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdditionalPrivilegeUsersGet(requestParameters: DefaultApiApiV1AdditionalPrivilegeUsersGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AdditionalPrivilegeUsersGet200Response> {
            return localVarFp.apiV1AdditionalPrivilegeUsersGet(requestParameters.projectMembershipId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1AdditionalPrivilegeUsersPermanentPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdditionalPrivilegeUsersPermanentPost(requestParameters: DefaultApiApiV1AdditionalPrivilegeUsersPermanentPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AdditionalPrivilegeUsersPermanentPost200Response> {
            return localVarFp.apiV1AdditionalPrivilegeUsersPermanentPost(requestParameters.apiV1AdditionalPrivilegeUsersPermanentPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1AdditionalPrivilegeUsersPrivilegeIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdditionalPrivilegeUsersPrivilegeIdDelete(requestParameters: DefaultApiApiV1AdditionalPrivilegeUsersPrivilegeIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AdditionalPrivilegeUsersPermanentPost200Response> {
            return localVarFp.apiV1AdditionalPrivilegeUsersPrivilegeIdDelete(requestParameters.privilegeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1AdditionalPrivilegeUsersPrivilegeIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdditionalPrivilegeUsersPrivilegeIdGet(requestParameters: DefaultApiApiV1AdditionalPrivilegeUsersPrivilegeIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AdditionalPrivilegeUsersPermanentPost200Response> {
            return localVarFp.apiV1AdditionalPrivilegeUsersPrivilegeIdGet(requestParameters.privilegeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1AdditionalPrivilegeUsersPrivilegeIdPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdditionalPrivilegeUsersPrivilegeIdPatch(requestParameters: DefaultApiApiV1AdditionalPrivilegeUsersPrivilegeIdPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AdditionalPrivilegeUsersPermanentPost200Response> {
            return localVarFp.apiV1AdditionalPrivilegeUsersPrivilegeIdPatch(requestParameters.privilegeId, requestParameters.apiV1AdditionalPrivilegeUsersPrivilegeIdPatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1AdditionalPrivilegeUsersTemporaryPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdditionalPrivilegeUsersTemporaryPost(requestParameters: DefaultApiApiV1AdditionalPrivilegeUsersTemporaryPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AdditionalPrivilegeUsersPermanentPost200Response> {
            return localVarFp.apiV1AdditionalPrivilegeUsersTemporaryPost(requestParameters.apiV1AdditionalPrivilegeUsersTemporaryPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdminConfigGet(options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AdminConfigGet200Response> {
            return localVarFp.apiV1AdminConfigGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1AdminConfigPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdminConfigPatch(requestParameters: DefaultApiApiV1AdminConfigPatchRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AdminConfigPatch200Response> {
            return localVarFp.apiV1AdminConfigPatch(requestParameters.apiV1AdminConfigPatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1AdminSignupPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdminSignupPost(requestParameters: DefaultApiApiV1AdminSignupPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AdminSignupPost200Response> {
            return localVarFp.apiV1AdminSignupPost(requestParameters.apiV1AdminSignupPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1AdminUserManagementUsersGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdminUserManagementUsersGet(requestParameters: DefaultApiApiV1AdminUserManagementUsersGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AdminUserManagementUsersGet200Response> {
            return localVarFp.apiV1AdminUserManagementUsersGet(requestParameters.searchTerm, requestParameters.offset, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1AdminUserManagementUsersUserIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AdminUserManagementUsersUserIdDelete(requestParameters: DefaultApiApiV1AdminUserManagementUsersUserIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AdminUserManagementUsersUserIdDelete200Response> {
            return localVarFp.apiV1AdminUserManagementUsersUserIdDelete(requestParameters.userId, options).then((request) => request(axios, basePath));
        },
        /**
         * List Audit Log Streams.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuditLogStreamsGet(options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AuditLogStreamsGet200Response> {
            return localVarFp.apiV1AuditLogStreamsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an Audit Log Stream by ID.
         * @param {DefaultApiApiV1AuditLogStreamsIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuditLogStreamsIdDelete(requestParameters: DefaultApiApiV1AuditLogStreamsIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AuditLogStreamsPost200Response> {
            return localVarFp.apiV1AuditLogStreamsIdDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an Audit Log Stream by ID.
         * @param {DefaultApiApiV1AuditLogStreamsIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuditLogStreamsIdGet(requestParameters: DefaultApiApiV1AuditLogStreamsIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AuditLogStreamsIdGet200Response> {
            return localVarFp.apiV1AuditLogStreamsIdGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an Audit Log Stream by ID.
         * @param {DefaultApiApiV1AuditLogStreamsIdPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuditLogStreamsIdPatch(requestParameters: DefaultApiApiV1AuditLogStreamsIdPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AuditLogStreamsPost200Response> {
            return localVarFp.apiV1AuditLogStreamsIdPatch(requestParameters.id, requestParameters.apiV1AuditLogStreamsIdPatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Create an Audit Log Stream.
         * @param {DefaultApiApiV1AuditLogStreamsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuditLogStreamsPost(requestParameters: DefaultApiApiV1AuditLogStreamsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AuditLogStreamsPost200Response> {
            return localVarFp.apiV1AuditLogStreamsPost(requestParameters.apiV1AuditLogStreamsPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete AWS Auth configuration on identity
         * @param {DefaultApiApiV1AuthAwsAuthIdentitiesIdentityIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthAwsAuthIdentitiesIdentityIdDelete(requestParameters: DefaultApiApiV1AuthAwsAuthIdentitiesIdentityIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AuthAwsAuthIdentitiesIdentityIdGet200Response> {
            return localVarFp.apiV1AuthAwsAuthIdentitiesIdentityIdDelete(requestParameters.identityId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve AWS Auth configuration on identity
         * @param {DefaultApiApiV1AuthAwsAuthIdentitiesIdentityIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthAwsAuthIdentitiesIdentityIdGet(requestParameters: DefaultApiApiV1AuthAwsAuthIdentitiesIdentityIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AuthAwsAuthIdentitiesIdentityIdGet200Response> {
            return localVarFp.apiV1AuthAwsAuthIdentitiesIdentityIdGet(requestParameters.identityId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update AWS Auth configuration on identity
         * @param {DefaultApiApiV1AuthAwsAuthIdentitiesIdentityIdPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthAwsAuthIdentitiesIdentityIdPatch(requestParameters: DefaultApiApiV1AuthAwsAuthIdentitiesIdentityIdPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AuthAwsAuthIdentitiesIdentityIdGet200Response> {
            return localVarFp.apiV1AuthAwsAuthIdentitiesIdentityIdPatch(requestParameters.identityId, requestParameters.apiV1AuthAwsAuthIdentitiesIdentityIdPatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Attach AWS Auth configuration onto identity
         * @param {DefaultApiApiV1AuthAwsAuthIdentitiesIdentityIdPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthAwsAuthIdentitiesIdentityIdPost(requestParameters: DefaultApiApiV1AuthAwsAuthIdentitiesIdentityIdPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AuthAwsAuthIdentitiesIdentityIdGet200Response> {
            return localVarFp.apiV1AuthAwsAuthIdentitiesIdentityIdPost(requestParameters.identityId, requestParameters.apiV1AuthAwsAuthIdentitiesIdentityIdPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Login with AWS Auth
         * @param {DefaultApiApiV1AuthAwsAuthLoginPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthAwsAuthLoginPost(requestParameters: DefaultApiApiV1AuthAwsAuthLoginPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AuthTokenAuthIdentitiesIdentityIdTokensPost200Response> {
            return localVarFp.apiV1AuthAwsAuthLoginPost(requestParameters.apiV1AuthAwsAuthLoginPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete Azure Auth configuration on identity
         * @param {DefaultApiApiV1AuthAzureAuthIdentitiesIdentityIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthAzureAuthIdentitiesIdentityIdDelete(requestParameters: DefaultApiApiV1AuthAzureAuthIdentitiesIdentityIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AuthAzureAuthIdentitiesIdentityIdGet200Response> {
            return localVarFp.apiV1AuthAzureAuthIdentitiesIdentityIdDelete(requestParameters.identityId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve Azure Auth configuration on identity
         * @param {DefaultApiApiV1AuthAzureAuthIdentitiesIdentityIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthAzureAuthIdentitiesIdentityIdGet(requestParameters: DefaultApiApiV1AuthAzureAuthIdentitiesIdentityIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AuthAzureAuthIdentitiesIdentityIdGet200Response> {
            return localVarFp.apiV1AuthAzureAuthIdentitiesIdentityIdGet(requestParameters.identityId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update Azure Auth configuration on identity
         * @param {DefaultApiApiV1AuthAzureAuthIdentitiesIdentityIdPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthAzureAuthIdentitiesIdentityIdPatch(requestParameters: DefaultApiApiV1AuthAzureAuthIdentitiesIdentityIdPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AuthAzureAuthIdentitiesIdentityIdGet200Response> {
            return localVarFp.apiV1AuthAzureAuthIdentitiesIdentityIdPatch(requestParameters.identityId, requestParameters.apiV1AuthAzureAuthIdentitiesIdentityIdPatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Attach Azure Auth configuration onto identity
         * @param {DefaultApiApiV1AuthAzureAuthIdentitiesIdentityIdPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthAzureAuthIdentitiesIdentityIdPost(requestParameters: DefaultApiApiV1AuthAzureAuthIdentitiesIdentityIdPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AuthAzureAuthIdentitiesIdentityIdGet200Response> {
            return localVarFp.apiV1AuthAzureAuthIdentitiesIdentityIdPost(requestParameters.identityId, requestParameters.apiV1AuthAzureAuthIdentitiesIdentityIdPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Login with Azure Auth
         * @param {DefaultApiApiV1AuthAzureAuthLoginPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthAzureAuthLoginPost(requestParameters: DefaultApiApiV1AuthAzureAuthLoginPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AuthTokenAuthIdentitiesIdentityIdTokensPost200Response> {
            return localVarFp.apiV1AuthAzureAuthLoginPost(requestParameters.apiV1AuthKubernetesAuthLoginPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthCheckAuthPost(options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AuthCheckAuthPost200Response> {
            return localVarFp.apiV1AuthCheckAuthPost(options).then((request) => request(axios, basePath));
        },
        /**
         * Delete GCP Auth configuration on identity
         * @param {DefaultApiApiV1AuthGcpAuthIdentitiesIdentityIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthGcpAuthIdentitiesIdentityIdDelete(requestParameters: DefaultApiApiV1AuthGcpAuthIdentitiesIdentityIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AuthGcpAuthIdentitiesIdentityIdGet200Response> {
            return localVarFp.apiV1AuthGcpAuthIdentitiesIdentityIdDelete(requestParameters.identityId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve GCP Auth configuration on identity
         * @param {DefaultApiApiV1AuthGcpAuthIdentitiesIdentityIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthGcpAuthIdentitiesIdentityIdGet(requestParameters: DefaultApiApiV1AuthGcpAuthIdentitiesIdentityIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AuthGcpAuthIdentitiesIdentityIdGet200Response> {
            return localVarFp.apiV1AuthGcpAuthIdentitiesIdentityIdGet(requestParameters.identityId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update GCP Auth configuration on identity
         * @param {DefaultApiApiV1AuthGcpAuthIdentitiesIdentityIdPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthGcpAuthIdentitiesIdentityIdPatch(requestParameters: DefaultApiApiV1AuthGcpAuthIdentitiesIdentityIdPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AuthGcpAuthIdentitiesIdentityIdGet200Response> {
            return localVarFp.apiV1AuthGcpAuthIdentitiesIdentityIdPatch(requestParameters.identityId, requestParameters.apiV1AuthGcpAuthIdentitiesIdentityIdPatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Attach GCP Auth configuration onto identity
         * @param {DefaultApiApiV1AuthGcpAuthIdentitiesIdentityIdPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthGcpAuthIdentitiesIdentityIdPost(requestParameters: DefaultApiApiV1AuthGcpAuthIdentitiesIdentityIdPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AuthGcpAuthIdentitiesIdentityIdGet200Response> {
            return localVarFp.apiV1AuthGcpAuthIdentitiesIdentityIdPost(requestParameters.identityId, requestParameters.apiV1AuthGcpAuthIdentitiesIdentityIdPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Login with GCP Auth
         * @param {DefaultApiApiV1AuthGcpAuthLoginPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthGcpAuthLoginPost(requestParameters: DefaultApiApiV1AuthGcpAuthLoginPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AuthTokenAuthIdentitiesIdentityIdTokensPost200Response> {
            return localVarFp.apiV1AuthGcpAuthLoginPost(requestParameters.apiV1AuthKubernetesAuthLoginPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete Kubernetes Auth configuration on identity
         * @param {DefaultApiApiV1AuthKubernetesAuthIdentitiesIdentityIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthKubernetesAuthIdentitiesIdentityIdDelete(requestParameters: DefaultApiApiV1AuthKubernetesAuthIdentitiesIdentityIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AuthKubernetesAuthIdentitiesIdentityIdDelete200Response> {
            return localVarFp.apiV1AuthKubernetesAuthIdentitiesIdentityIdDelete(requestParameters.identityId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve Kubernetes Auth configuration on identity
         * @param {DefaultApiApiV1AuthKubernetesAuthIdentitiesIdentityIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthKubernetesAuthIdentitiesIdentityIdGet(requestParameters: DefaultApiApiV1AuthKubernetesAuthIdentitiesIdentityIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AuthKubernetesAuthIdentitiesIdentityIdGet200Response> {
            return localVarFp.apiV1AuthKubernetesAuthIdentitiesIdentityIdGet(requestParameters.identityId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update Kubernetes Auth configuration on identity
         * @param {DefaultApiApiV1AuthKubernetesAuthIdentitiesIdentityIdPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthKubernetesAuthIdentitiesIdentityIdPatch(requestParameters: DefaultApiApiV1AuthKubernetesAuthIdentitiesIdentityIdPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AuthKubernetesAuthIdentitiesIdentityIdGet200Response> {
            return localVarFp.apiV1AuthKubernetesAuthIdentitiesIdentityIdPatch(requestParameters.identityId, requestParameters.apiV1AuthKubernetesAuthIdentitiesIdentityIdPatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Attach Kubernetes Auth configuration onto identity
         * @param {DefaultApiApiV1AuthKubernetesAuthIdentitiesIdentityIdPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthKubernetesAuthIdentitiesIdentityIdPost(requestParameters: DefaultApiApiV1AuthKubernetesAuthIdentitiesIdentityIdPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AuthKubernetesAuthIdentitiesIdentityIdGet200Response> {
            return localVarFp.apiV1AuthKubernetesAuthIdentitiesIdentityIdPost(requestParameters.identityId, requestParameters.apiV1AuthKubernetesAuthIdentitiesIdentityIdPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Login with Kubernetes Auth
         * @param {DefaultApiApiV1AuthKubernetesAuthLoginPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthKubernetesAuthLoginPost(requestParameters: DefaultApiApiV1AuthKubernetesAuthLoginPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AuthTokenAuthIdentitiesIdentityIdTokensPost200Response> {
            return localVarFp.apiV1AuthKubernetesAuthLoginPost(requestParameters.apiV1AuthKubernetesAuthLoginPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthLogoutPost(options?: RawAxiosRequestConfig): AxiosPromise<ApiV1WorkspaceWorkspaceIdMigrateV3Post200Response> {
            return localVarFp.apiV1AuthLogoutPost(options).then((request) => request(axios, basePath));
        },
        /**
         * Delete OIDC Auth configuration on identity
         * @param {DefaultApiApiV1AuthOidcAuthIdentitiesIdentityIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthOidcAuthIdentitiesIdentityIdDelete(requestParameters: DefaultApiApiV1AuthOidcAuthIdentitiesIdentityIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AuthOidcAuthIdentitiesIdentityIdDelete200Response> {
            return localVarFp.apiV1AuthOidcAuthIdentitiesIdentityIdDelete(requestParameters.identityId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve OIDC Auth configuration on identity
         * @param {DefaultApiApiV1AuthOidcAuthIdentitiesIdentityIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthOidcAuthIdentitiesIdentityIdGet(requestParameters: DefaultApiApiV1AuthOidcAuthIdentitiesIdentityIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AuthOidcAuthIdentitiesIdentityIdGet200Response> {
            return localVarFp.apiV1AuthOidcAuthIdentitiesIdentityIdGet(requestParameters.identityId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update OIDC Auth configuration on identity
         * @param {DefaultApiApiV1AuthOidcAuthIdentitiesIdentityIdPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthOidcAuthIdentitiesIdentityIdPatch(requestParameters: DefaultApiApiV1AuthOidcAuthIdentitiesIdentityIdPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AuthOidcAuthIdentitiesIdentityIdGet200Response> {
            return localVarFp.apiV1AuthOidcAuthIdentitiesIdentityIdPatch(requestParameters.identityId, requestParameters.apiV1AuthOidcAuthIdentitiesIdentityIdPatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Attach OIDC Auth configuration onto identity
         * @param {DefaultApiApiV1AuthOidcAuthIdentitiesIdentityIdPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthOidcAuthIdentitiesIdentityIdPost(requestParameters: DefaultApiApiV1AuthOidcAuthIdentitiesIdentityIdPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AuthOidcAuthIdentitiesIdentityIdGet200Response> {
            return localVarFp.apiV1AuthOidcAuthIdentitiesIdentityIdPost(requestParameters.identityId, requestParameters.apiV1AuthOidcAuthIdentitiesIdentityIdPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Login with OIDC Auth
         * @param {DefaultApiApiV1AuthOidcAuthLoginPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthOidcAuthLoginPost(requestParameters: DefaultApiApiV1AuthOidcAuthLoginPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AuthTokenAuthIdentitiesIdentityIdTokensPost200Response> {
            return localVarFp.apiV1AuthOidcAuthLoginPost(requestParameters.apiV1AuthKubernetesAuthLoginPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete Token Auth configuration on identity
         * @param {DefaultApiApiV1AuthTokenAuthIdentitiesIdentityIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthTokenAuthIdentitiesIdentityIdDelete(requestParameters: DefaultApiApiV1AuthTokenAuthIdentitiesIdentityIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AuthTokenAuthIdentitiesIdentityIdGet200Response> {
            return localVarFp.apiV1AuthTokenAuthIdentitiesIdentityIdDelete(requestParameters.identityId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve Token Auth configuration on identity
         * @param {DefaultApiApiV1AuthTokenAuthIdentitiesIdentityIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthTokenAuthIdentitiesIdentityIdGet(requestParameters: DefaultApiApiV1AuthTokenAuthIdentitiesIdentityIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AuthTokenAuthIdentitiesIdentityIdGet200Response> {
            return localVarFp.apiV1AuthTokenAuthIdentitiesIdentityIdGet(requestParameters.identityId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update Token Auth configuration on identity
         * @param {DefaultApiApiV1AuthTokenAuthIdentitiesIdentityIdPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthTokenAuthIdentitiesIdentityIdPatch(requestParameters: DefaultApiApiV1AuthTokenAuthIdentitiesIdentityIdPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AuthTokenAuthIdentitiesIdentityIdGet200Response> {
            return localVarFp.apiV1AuthTokenAuthIdentitiesIdentityIdPatch(requestParameters.identityId, requestParameters.apiV1AuthTokenAuthIdentitiesIdentityIdPatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Attach Token Auth configuration onto identity
         * @param {DefaultApiApiV1AuthTokenAuthIdentitiesIdentityIdPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthTokenAuthIdentitiesIdentityIdPost(requestParameters: DefaultApiApiV1AuthTokenAuthIdentitiesIdentityIdPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AuthTokenAuthIdentitiesIdentityIdGet200Response> {
            return localVarFp.apiV1AuthTokenAuthIdentitiesIdentityIdPost(requestParameters.identityId, requestParameters.apiV1AuthTokenAuthIdentitiesIdentityIdPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Get tokens for identity with Token Auth
         * @param {DefaultApiApiV1AuthTokenAuthIdentitiesIdentityIdTokensGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthTokenAuthIdentitiesIdentityIdTokensGet(requestParameters: DefaultApiApiV1AuthTokenAuthIdentitiesIdentityIdTokensGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AuthTokenAuthIdentitiesIdentityIdTokensGet200Response> {
            return localVarFp.apiV1AuthTokenAuthIdentitiesIdentityIdTokensGet(requestParameters.identityId, requestParameters.offset, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Create token for identity with Token Auth
         * @param {DefaultApiApiV1AuthTokenAuthIdentitiesIdentityIdTokensPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthTokenAuthIdentitiesIdentityIdTokensPost(requestParameters: DefaultApiApiV1AuthTokenAuthIdentitiesIdentityIdTokensPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AuthTokenAuthIdentitiesIdentityIdTokensPost200Response> {
            return localVarFp.apiV1AuthTokenAuthIdentitiesIdentityIdTokensPost(requestParameters.identityId, requestParameters.apiV1AuthTokenAuthIdentitiesIdentityIdTokensPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Update token for identity with Token Auth
         * @param {DefaultApiApiV1AuthTokenAuthTokensTokenIdPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthTokenAuthTokensTokenIdPatch(requestParameters: DefaultApiApiV1AuthTokenAuthTokensTokenIdPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AuthTokenAuthTokensTokenIdPatch200Response> {
            return localVarFp.apiV1AuthTokenAuthTokensTokenIdPatch(requestParameters.tokenId, requestParameters.apiV1AuthTokenAuthTokensTokenIdPatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Revoke token for identity with Token Auth
         * @param {DefaultApiApiV1AuthTokenAuthTokensTokenIdRevokePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthTokenAuthTokensTokenIdRevokePost(requestParameters: DefaultApiApiV1AuthTokenAuthTokensTokenIdRevokePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1WorkspaceWorkspaceIdMigrateV3Post200Response> {
            return localVarFp.apiV1AuthTokenAuthTokensTokenIdRevokePost(requestParameters.tokenId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthTokenPost(options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AuthTokenPost200Response> {
            return localVarFp.apiV1AuthTokenPost(options).then((request) => request(axios, basePath));
        },
        /**
         * Renew access token
         * @param {DefaultApiApiV1AuthTokenRenewPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthTokenRenewPost(requestParameters: DefaultApiApiV1AuthTokenRenewPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AuthTokenAuthIdentitiesIdentityIdTokensPost200Response> {
            return localVarFp.apiV1AuthTokenRenewPost(requestParameters.apiV1AuthTokenRenewPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Revoke access token
         * @param {DefaultApiApiV1AuthTokenRevokePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthTokenRevokePost(requestParameters: DefaultApiApiV1AuthTokenRevokePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1WorkspaceWorkspaceIdMigrateV3Post200Response> {
            return localVarFp.apiV1AuthTokenRevokePost(requestParameters.apiV1AuthTokenRevokePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Universal Auth Client Secret for identity
         * @param {DefaultApiApiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsClientSecretIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsClientSecretIdGet(requestParameters: DefaultApiApiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsClientSecretIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsClientSecretIdGet200Response> {
            return localVarFp.apiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsClientSecretIdGet(requestParameters.identityId, requestParameters.clientSecretId, options).then((request) => request(axios, basePath));
        },
        /**
         * Revoke Universal Auth Client Secrets for identity
         * @param {DefaultApiApiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsClientSecretIdRevokePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsClientSecretIdRevokePost(requestParameters: DefaultApiApiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsClientSecretIdRevokePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsClientSecretIdGet200Response> {
            return localVarFp.apiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsClientSecretIdRevokePost(requestParameters.identityId, requestParameters.clientSecretId, options).then((request) => request(axios, basePath));
        },
        /**
         * List Universal Auth Client Secrets for identity
         * @param {DefaultApiApiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsGet(requestParameters: DefaultApiApiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsGet200Response> {
            return localVarFp.apiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsGet(requestParameters.identityId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create Universal Auth Client Secret for identity
         * @param {DefaultApiApiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsPost(requestParameters: DefaultApiApiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsPost200Response> {
            return localVarFp.apiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsPost(requestParameters.identityId, requestParameters.apiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete Universal Auth configuration on identity
         * @param {DefaultApiApiV1AuthUniversalAuthIdentitiesIdentityIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthUniversalAuthIdentitiesIdentityIdDelete(requestParameters: DefaultApiApiV1AuthUniversalAuthIdentitiesIdentityIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AuthUniversalAuthIdentitiesIdentityIdGet200Response> {
            return localVarFp.apiV1AuthUniversalAuthIdentitiesIdentityIdDelete(requestParameters.identityId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve Universal Auth configuration on identity
         * @param {DefaultApiApiV1AuthUniversalAuthIdentitiesIdentityIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthUniversalAuthIdentitiesIdentityIdGet(requestParameters: DefaultApiApiV1AuthUniversalAuthIdentitiesIdentityIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AuthUniversalAuthIdentitiesIdentityIdGet200Response> {
            return localVarFp.apiV1AuthUniversalAuthIdentitiesIdentityIdGet(requestParameters.identityId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update Universal Auth configuration on identity
         * @param {DefaultApiApiV1AuthUniversalAuthIdentitiesIdentityIdPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthUniversalAuthIdentitiesIdentityIdPatch(requestParameters: DefaultApiApiV1AuthUniversalAuthIdentitiesIdentityIdPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AuthUniversalAuthIdentitiesIdentityIdGet200Response> {
            return localVarFp.apiV1AuthUniversalAuthIdentitiesIdentityIdPatch(requestParameters.identityId, requestParameters.apiV1AuthUniversalAuthIdentitiesIdentityIdPatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Attach Universal Auth configuration onto identity
         * @param {DefaultApiApiV1AuthUniversalAuthIdentitiesIdentityIdPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthUniversalAuthIdentitiesIdentityIdPost(requestParameters: DefaultApiApiV1AuthUniversalAuthIdentitiesIdentityIdPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AuthUniversalAuthIdentitiesIdentityIdGet200Response> {
            return localVarFp.apiV1AuthUniversalAuthIdentitiesIdentityIdPost(requestParameters.identityId, requestParameters.apiV1AuthUniversalAuthIdentitiesIdentityIdPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Login with Universal Auth
         * @param {DefaultApiApiV1AuthUniversalAuthLoginPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1AuthUniversalAuthLoginPost(requestParameters: DefaultApiApiV1AuthUniversalAuthLoginPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AuthTokenAuthIdentitiesIdentityIdTokensPost200Response> {
            return localVarFp.apiV1AuthUniversalAuthLoginPost(requestParameters.apiV1AuthUniversalAuthLoginPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1BotBotIdActivePatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1BotBotIdActivePatch(requestParameters: DefaultApiApiV1BotBotIdActivePatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1BotProjectIdGet200Response> {
            return localVarFp.apiV1BotBotIdActivePatch(requestParameters.botId, requestParameters.apiV1BotBotIdActivePatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1BotProjectIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1BotProjectIdGet(requestParameters: DefaultApiApiV1BotProjectIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1BotProjectIdGet200Response> {
            return localVarFp.apiV1BotProjectIdGet(requestParameters.projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1DynamicSecretsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DynamicSecretsGet(requestParameters: DefaultApiApiV1DynamicSecretsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1DynamicSecretsGet200Response> {
            return localVarFp.apiV1DynamicSecretsGet(requestParameters.projectSlug, requestParameters.environmentSlug, requestParameters.path, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1DynamicSecretsLeasesLeaseIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DynamicSecretsLeasesLeaseIdDelete(requestParameters: DefaultApiApiV1DynamicSecretsLeasesLeaseIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1DynamicSecretsLeasesLeaseIdDelete200Response> {
            return localVarFp.apiV1DynamicSecretsLeasesLeaseIdDelete(requestParameters.leaseId, requestParameters.apiV1DynamicSecretsLeasesLeaseIdDeleteRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1DynamicSecretsLeasesLeaseIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DynamicSecretsLeasesLeaseIdGet(requestParameters: DefaultApiApiV1DynamicSecretsLeasesLeaseIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1DynamicSecretsLeasesLeaseIdGet200Response> {
            return localVarFp.apiV1DynamicSecretsLeasesLeaseIdGet(requestParameters.projectSlug, requestParameters.environmentSlug, requestParameters.leaseId, requestParameters.path, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1DynamicSecretsLeasesLeaseIdRenewPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DynamicSecretsLeasesLeaseIdRenewPost(requestParameters: DefaultApiApiV1DynamicSecretsLeasesLeaseIdRenewPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1DynamicSecretsLeasesLeaseIdDelete200Response> {
            return localVarFp.apiV1DynamicSecretsLeasesLeaseIdRenewPost(requestParameters.leaseId, requestParameters.apiV1DynamicSecretsLeasesLeaseIdRenewPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1DynamicSecretsLeasesPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DynamicSecretsLeasesPost(requestParameters: DefaultApiApiV1DynamicSecretsLeasesPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1DynamicSecretsLeasesPost200Response> {
            return localVarFp.apiV1DynamicSecretsLeasesPost(requestParameters.apiV1DynamicSecretsLeasesPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1DynamicSecretsNameDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DynamicSecretsNameDelete(requestParameters: DefaultApiApiV1DynamicSecretsNameDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1DynamicSecretsPost200Response> {
            return localVarFp.apiV1DynamicSecretsNameDelete(requestParameters.name, requestParameters.apiV1DynamicSecretsNameDeleteRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1DynamicSecretsNameGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DynamicSecretsNameGet(requestParameters: DefaultApiApiV1DynamicSecretsNameGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1DynamicSecretsNameGet200Response> {
            return localVarFp.apiV1DynamicSecretsNameGet(requestParameters.projectSlug, requestParameters.environmentSlug, requestParameters.name, requestParameters.path, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1DynamicSecretsNameLeasesGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DynamicSecretsNameLeasesGet(requestParameters: DefaultApiApiV1DynamicSecretsNameLeasesGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1DynamicSecretsNameLeasesGet200Response> {
            return localVarFp.apiV1DynamicSecretsNameLeasesGet(requestParameters.projectSlug, requestParameters.environmentSlug, requestParameters.name, requestParameters.path, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1DynamicSecretsNamePatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DynamicSecretsNamePatch(requestParameters: DefaultApiApiV1DynamicSecretsNamePatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1DynamicSecretsPost200Response> {
            return localVarFp.apiV1DynamicSecretsNamePatch(requestParameters.name, requestParameters.apiV1DynamicSecretsNamePatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1DynamicSecretsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DynamicSecretsPost(requestParameters: DefaultApiApiV1DynamicSecretsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1DynamicSecretsPost200Response> {
            return localVarFp.apiV1DynamicSecretsPost(requestParameters.apiV1DynamicSecretsPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ExternalKmsGet(options?: RawAxiosRequestConfig): AxiosPromise<ApiV1ExternalKmsGet200Response> {
            return localVarFp.apiV1ExternalKmsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1ExternalKmsIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ExternalKmsIdDelete(requestParameters: DefaultApiApiV1ExternalKmsIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1ExternalKmsPost200Response> {
            return localVarFp.apiV1ExternalKmsIdDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1ExternalKmsIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ExternalKmsIdGet(requestParameters: DefaultApiApiV1ExternalKmsIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1ExternalKmsIdGet200Response> {
            return localVarFp.apiV1ExternalKmsIdGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1ExternalKmsIdPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ExternalKmsIdPatch(requestParameters: DefaultApiApiV1ExternalKmsIdPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1ExternalKmsPost200Response> {
            return localVarFp.apiV1ExternalKmsIdPatch(requestParameters.id, requestParameters.apiV1ExternalKmsIdPatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1ExternalKmsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ExternalKmsPost(requestParameters: DefaultApiApiV1ExternalKmsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1ExternalKmsPost200Response> {
            return localVarFp.apiV1ExternalKmsPost(requestParameters.apiV1ExternalKmsPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1ExternalKmsSlugSlugGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ExternalKmsSlugSlugGet(requestParameters: DefaultApiApiV1ExternalKmsSlugSlugGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1ExternalKmsIdGet200Response> {
            return localVarFp.apiV1ExternalKmsSlugSlugGet(requestParameters.slug, options).then((request) => request(axios, basePath));
        },
        /**
         * Update folders by batch
         * @param {DefaultApiApiV1FoldersBatchPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1FoldersBatchPatch(requestParameters: DefaultApiApiV1FoldersBatchPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1FoldersGet200Response> {
            return localVarFp.apiV1FoldersBatchPatch(requestParameters.apiV1FoldersBatchPatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a folder
         * @param {DefaultApiApiV1FoldersFolderIdOrNameDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1FoldersFolderIdOrNameDelete(requestParameters: DefaultApiApiV1FoldersFolderIdOrNameDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1FoldersPost200Response> {
            return localVarFp.apiV1FoldersFolderIdOrNameDelete(requestParameters.folderIdOrName, requestParameters.apiV1FoldersFolderIdOrNameDeleteRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Update folder
         * @param {DefaultApiApiV1FoldersFolderIdPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1FoldersFolderIdPatch(requestParameters: DefaultApiApiV1FoldersFolderIdPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1FoldersPost200Response> {
            return localVarFp.apiV1FoldersFolderIdPatch(requestParameters.folderId, requestParameters.apiV1FoldersFolderIdPatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Get folders
         * @param {DefaultApiApiV1FoldersGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1FoldersGet(requestParameters: DefaultApiApiV1FoldersGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1FoldersGet200Response> {
            return localVarFp.apiV1FoldersGet(requestParameters.workspaceId, requestParameters.environment, requestParameters.path, requestParameters.directory, options).then((request) => request(axios, basePath));
        },
        /**
         * Get folder by id
         * @param {DefaultApiApiV1FoldersIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1FoldersIdGet(requestParameters: DefaultApiApiV1FoldersIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1FoldersPost200Response> {
            return localVarFp.apiV1FoldersIdGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Create folders
         * @param {DefaultApiApiV1FoldersPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1FoldersPost(requestParameters: DefaultApiApiV1FoldersPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1FoldersPost200Response> {
            return localVarFp.apiV1FoldersPost(requestParameters.apiV1FoldersPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1GroupsCurrentSlugPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1GroupsCurrentSlugPatch(requestParameters: DefaultApiApiV1GroupsCurrentSlugPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1GroupsPost200Response> {
            return localVarFp.apiV1GroupsCurrentSlugPatch(requestParameters.currentSlug, requestParameters.apiV1GroupsCurrentSlugPatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1GroupsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1GroupsPost(requestParameters: DefaultApiApiV1GroupsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1GroupsPost200Response> {
            return localVarFp.apiV1GroupsPost(requestParameters.apiV1GroupsPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1GroupsSlugDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1GroupsSlugDelete(requestParameters: DefaultApiApiV1GroupsSlugDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1GroupsPost200Response> {
            return localVarFp.apiV1GroupsSlugDelete(requestParameters.slug, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1GroupsSlugUsersGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1GroupsSlugUsersGet(requestParameters: DefaultApiApiV1GroupsSlugUsersGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1GroupsSlugUsersGet200Response> {
            return localVarFp.apiV1GroupsSlugUsersGet(requestParameters.slug, requestParameters.offset, requestParameters.limit, requestParameters.username, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1GroupsSlugUsersUsernameDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1GroupsSlugUsersUsernameDelete(requestParameters: DefaultApiApiV1GroupsSlugUsersUsernameDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1GroupsSlugUsersUsernamePost200Response> {
            return localVarFp.apiV1GroupsSlugUsersUsernameDelete(requestParameters.slug, requestParameters.username, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1GroupsSlugUsersUsernamePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1GroupsSlugUsersUsernamePost(requestParameters: DefaultApiApiV1GroupsSlugUsersUsernamePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1GroupsSlugUsersUsernamePost200Response> {
            return localVarFp.apiV1GroupsSlugUsersUsernamePost(requestParameters.slug, requestParameters.username, options).then((request) => request(axios, basePath));
        },
        /**
         * List identities
         * @param {DefaultApiApiV1IdentitiesGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdentitiesGet(requestParameters: DefaultApiApiV1IdentitiesGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1IdentitiesGet200Response> {
            return localVarFp.apiV1IdentitiesGet(requestParameters.orgId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete identity
         * @param {DefaultApiApiV1IdentitiesIdentityIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdentitiesIdentityIdDelete(requestParameters: DefaultApiApiV1IdentitiesIdentityIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1IdentitiesPost200Response> {
            return localVarFp.apiV1IdentitiesIdentityIdDelete(requestParameters.identityId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an identity by id
         * @param {DefaultApiApiV1IdentitiesIdentityIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdentitiesIdentityIdGet(requestParameters: DefaultApiApiV1IdentitiesIdentityIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1IdentitiesIdentityIdGet200Response> {
            return localVarFp.apiV1IdentitiesIdentityIdGet(requestParameters.identityId, options).then((request) => request(axios, basePath));
        },
        /**
         * List project memberships that identity with id is part of
         * @param {DefaultApiApiV1IdentitiesIdentityIdIdentityMembershipsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdentitiesIdentityIdIdentityMembershipsGet(requestParameters: DefaultApiApiV1IdentitiesIdentityIdIdentityMembershipsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1IdentitiesIdentityIdIdentityMembershipsGet200Response> {
            return localVarFp.apiV1IdentitiesIdentityIdIdentityMembershipsGet(requestParameters.identityId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update identity
         * @param {DefaultApiApiV1IdentitiesIdentityIdPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdentitiesIdentityIdPatch(requestParameters: DefaultApiApiV1IdentitiesIdentityIdPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1IdentitiesPost200Response> {
            return localVarFp.apiV1IdentitiesIdentityIdPatch(requestParameters.identityId, requestParameters.apiV1IdentitiesIdentityIdPatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Create identity
         * @param {DefaultApiApiV1IdentitiesPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IdentitiesPost(requestParameters: DefaultApiApiV1IdentitiesPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1IdentitiesPost200Response> {
            return localVarFp.apiV1IdentitiesPost(requestParameters.apiV1IdentitiesPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Create the integration authentication object required for syncing secrets.
         * @param {DefaultApiApiV1IntegrationAuthAccessTokenPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IntegrationAuthAccessTokenPost(requestParameters: DefaultApiApiV1IntegrationAuthAccessTokenPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1IntegrationAuthIntegrationAuthIdGet200Response> {
            return localVarFp.apiV1IntegrationAuthAccessTokenPost(requestParameters.apiV1IntegrationAuthAccessTokenPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove all integration\'s auth object from the project.
         * @param {DefaultApiApiV1IntegrationAuthDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IntegrationAuthDelete(requestParameters: DefaultApiApiV1IntegrationAuthDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1IntegrationAuthDelete200Response> {
            return localVarFp.apiV1IntegrationAuthDelete(requestParameters.integration, requestParameters.projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1IntegrationAuthIntegrationAuthIdAppsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IntegrationAuthIntegrationAuthIdAppsGet(requestParameters: DefaultApiApiV1IntegrationAuthIntegrationAuthIdAppsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1IntegrationAuthIntegrationAuthIdAppsGet200Response> {
            return localVarFp.apiV1IntegrationAuthIntegrationAuthIdAppsGet(requestParameters.integrationAuthId, requestParameters.teamId, requestParameters.azureDevOpsOrgName, requestParameters.workspaceSlug, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1IntegrationAuthIntegrationAuthIdAwsSecretsManagerKmsKeysGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IntegrationAuthIntegrationAuthIdAwsSecretsManagerKmsKeysGet(requestParameters: DefaultApiApiV1IntegrationAuthIntegrationAuthIdAwsSecretsManagerKmsKeysGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1IntegrationAuthIntegrationAuthIdAwsSecretsManagerKmsKeysGet200Response> {
            return localVarFp.apiV1IntegrationAuthIntegrationAuthIdAwsSecretsManagerKmsKeysGet(requestParameters.region, requestParameters.integrationAuthId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1IntegrationAuthIntegrationAuthIdBitbucketWorkspacesGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IntegrationAuthIntegrationAuthIdBitbucketWorkspacesGet(requestParameters: DefaultApiApiV1IntegrationAuthIntegrationAuthIdBitbucketWorkspacesGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1IntegrationAuthIntegrationAuthIdBitbucketWorkspacesGet200Response> {
            return localVarFp.apiV1IntegrationAuthIntegrationAuthIdBitbucketWorkspacesGet(requestParameters.integrationAuthId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1IntegrationAuthIntegrationAuthIdChecklyGroupsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IntegrationAuthIntegrationAuthIdChecklyGroupsGet(requestParameters: DefaultApiApiV1IntegrationAuthIntegrationAuthIdChecklyGroupsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1IntegrationAuthIntegrationAuthIdChecklyGroupsGet200Response> {
            return localVarFp.apiV1IntegrationAuthIntegrationAuthIdChecklyGroupsGet(requestParameters.accountId, requestParameters.integrationAuthId, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove an integration auth object by object id.
         * @param {DefaultApiApiV1IntegrationAuthIntegrationAuthIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IntegrationAuthIntegrationAuthIdDelete(requestParameters: DefaultApiApiV1IntegrationAuthIntegrationAuthIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1IntegrationAuthIntegrationAuthIdGet200Response> {
            return localVarFp.apiV1IntegrationAuthIntegrationAuthIdDelete(requestParameters.integrationAuthId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get details of an integration authorization by auth object id.
         * @param {DefaultApiApiV1IntegrationAuthIntegrationAuthIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IntegrationAuthIntegrationAuthIdGet(requestParameters: DefaultApiApiV1IntegrationAuthIntegrationAuthIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1IntegrationAuthIntegrationAuthIdGet200Response> {
            return localVarFp.apiV1IntegrationAuthIntegrationAuthIdGet(requestParameters.integrationAuthId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1IntegrationAuthIntegrationAuthIdGithubEnvsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IntegrationAuthIntegrationAuthIdGithubEnvsGet(requestParameters: DefaultApiApiV1IntegrationAuthIntegrationAuthIdGithubEnvsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1IntegrationAuthIntegrationAuthIdGithubEnvsGet200Response> {
            return localVarFp.apiV1IntegrationAuthIntegrationAuthIdGithubEnvsGet(requestParameters.repoOwner, requestParameters.repoName, requestParameters.integrationAuthId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1IntegrationAuthIntegrationAuthIdGithubOrgsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IntegrationAuthIntegrationAuthIdGithubOrgsGet(requestParameters: DefaultApiApiV1IntegrationAuthIntegrationAuthIdGithubOrgsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1IntegrationAuthIntegrationAuthIdGithubOrgsGet200Response> {
            return localVarFp.apiV1IntegrationAuthIntegrationAuthIdGithubOrgsGet(requestParameters.integrationAuthId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1IntegrationAuthIntegrationAuthIdHerokuPipelinesGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IntegrationAuthIntegrationAuthIdHerokuPipelinesGet(requestParameters: DefaultApiApiV1IntegrationAuthIntegrationAuthIdHerokuPipelinesGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1IntegrationAuthIntegrationAuthIdHerokuPipelinesGet200Response> {
            return localVarFp.apiV1IntegrationAuthIntegrationAuthIdHerokuPipelinesGet(requestParameters.integrationAuthId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1IntegrationAuthIntegrationAuthIdNorthflankSecretGroupsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IntegrationAuthIntegrationAuthIdNorthflankSecretGroupsGet(requestParameters: DefaultApiApiV1IntegrationAuthIntegrationAuthIdNorthflankSecretGroupsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1IntegrationAuthIntegrationAuthIdNorthflankSecretGroupsGet200Response> {
            return localVarFp.apiV1IntegrationAuthIntegrationAuthIdNorthflankSecretGroupsGet(requestParameters.appId, requestParameters.integrationAuthId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1IntegrationAuthIntegrationAuthIdQoveryAppsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IntegrationAuthIntegrationAuthIdQoveryAppsGet(requestParameters: DefaultApiApiV1IntegrationAuthIntegrationAuthIdQoveryAppsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1IntegrationAuthIntegrationAuthIdQoveryAppsGet200Response> {
            return localVarFp.apiV1IntegrationAuthIntegrationAuthIdQoveryAppsGet(requestParameters.environmentId, requestParameters.integrationAuthId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1IntegrationAuthIntegrationAuthIdQoveryContainersGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IntegrationAuthIntegrationAuthIdQoveryContainersGet(requestParameters: DefaultApiApiV1IntegrationAuthIntegrationAuthIdQoveryContainersGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1IntegrationAuthIntegrationAuthIdQoveryContainersGet200Response> {
            return localVarFp.apiV1IntegrationAuthIntegrationAuthIdQoveryContainersGet(requestParameters.environmentId, requestParameters.integrationAuthId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1IntegrationAuthIntegrationAuthIdQoveryEnvironmentsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IntegrationAuthIntegrationAuthIdQoveryEnvironmentsGet(requestParameters: DefaultApiApiV1IntegrationAuthIntegrationAuthIdQoveryEnvironmentsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1IntegrationAuthIntegrationAuthIdQoveryEnvironmentsGet200Response> {
            return localVarFp.apiV1IntegrationAuthIntegrationAuthIdQoveryEnvironmentsGet(requestParameters.projectId, requestParameters.integrationAuthId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1IntegrationAuthIntegrationAuthIdQoveryJobsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IntegrationAuthIntegrationAuthIdQoveryJobsGet(requestParameters: DefaultApiApiV1IntegrationAuthIntegrationAuthIdQoveryJobsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1IntegrationAuthIntegrationAuthIdQoveryJobsGet200Response> {
            return localVarFp.apiV1IntegrationAuthIntegrationAuthIdQoveryJobsGet(requestParameters.environmentId, requestParameters.integrationAuthId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1IntegrationAuthIntegrationAuthIdQoveryOrgsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IntegrationAuthIntegrationAuthIdQoveryOrgsGet(requestParameters: DefaultApiApiV1IntegrationAuthIntegrationAuthIdQoveryOrgsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1IntegrationAuthIntegrationAuthIdGithubOrgsGet200Response> {
            return localVarFp.apiV1IntegrationAuthIntegrationAuthIdQoveryOrgsGet(requestParameters.integrationAuthId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1IntegrationAuthIntegrationAuthIdQoveryProjectsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IntegrationAuthIntegrationAuthIdQoveryProjectsGet(requestParameters: DefaultApiApiV1IntegrationAuthIntegrationAuthIdQoveryProjectsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1IntegrationAuthIntegrationAuthIdQoveryProjectsGet200Response> {
            return localVarFp.apiV1IntegrationAuthIntegrationAuthIdQoveryProjectsGet(requestParameters.orgId, requestParameters.integrationAuthId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1IntegrationAuthIntegrationAuthIdRailwayEnvironmentsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IntegrationAuthIntegrationAuthIdRailwayEnvironmentsGet(requestParameters: DefaultApiApiV1IntegrationAuthIntegrationAuthIdRailwayEnvironmentsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1IntegrationAuthIntegrationAuthIdQoveryEnvironmentsGet200Response> {
            return localVarFp.apiV1IntegrationAuthIntegrationAuthIdRailwayEnvironmentsGet(requestParameters.appId, requestParameters.integrationAuthId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1IntegrationAuthIntegrationAuthIdRailwayServicesGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IntegrationAuthIntegrationAuthIdRailwayServicesGet(requestParameters: DefaultApiApiV1IntegrationAuthIntegrationAuthIdRailwayServicesGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1IntegrationAuthIntegrationAuthIdRailwayServicesGet200Response> {
            return localVarFp.apiV1IntegrationAuthIntegrationAuthIdRailwayServicesGet(requestParameters.appId, requestParameters.integrationAuthId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1IntegrationAuthIntegrationAuthIdTeamcityBuildConfigsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IntegrationAuthIntegrationAuthIdTeamcityBuildConfigsGet(requestParameters: DefaultApiApiV1IntegrationAuthIntegrationAuthIdTeamcityBuildConfigsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1IntegrationAuthIntegrationAuthIdTeamcityBuildConfigsGet200Response> {
            return localVarFp.apiV1IntegrationAuthIntegrationAuthIdTeamcityBuildConfigsGet(requestParameters.appId, requestParameters.integrationAuthId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1IntegrationAuthIntegrationAuthIdTeamsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IntegrationAuthIntegrationAuthIdTeamsGet(requestParameters: DefaultApiApiV1IntegrationAuthIntegrationAuthIdTeamsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1IntegrationAuthIntegrationAuthIdTeamsGet200Response> {
            return localVarFp.apiV1IntegrationAuthIntegrationAuthIdTeamsGet(requestParameters.integrationAuthId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1IntegrationAuthIntegrationAuthIdVercelBranchesGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IntegrationAuthIntegrationAuthIdVercelBranchesGet(requestParameters: DefaultApiApiV1IntegrationAuthIntegrationAuthIdVercelBranchesGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1IntegrationAuthIntegrationAuthIdVercelBranchesGet200Response> {
            return localVarFp.apiV1IntegrationAuthIntegrationAuthIdVercelBranchesGet(requestParameters.appId, requestParameters.integrationAuthId, options).then((request) => request(axios, basePath));
        },
        /**
         * List of integrations available.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IntegrationAuthIntegrationOptionsGet(options?: RawAxiosRequestConfig): AxiosPromise<ApiV1IntegrationAuthIntegrationOptionsGet200Response> {
            return localVarFp.apiV1IntegrationAuthIntegrationOptionsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1IntegrationAuthOauthTokenPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IntegrationAuthOauthTokenPost(requestParameters: DefaultApiApiV1IntegrationAuthOauthTokenPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1IntegrationAuthIntegrationAuthIdGet200Response> {
            return localVarFp.apiV1IntegrationAuthOauthTokenPost(requestParameters.apiV1IntegrationAuthOauthTokenPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove an integration using the integration object ID
         * @param {DefaultApiApiV1IntegrationIntegrationIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IntegrationIntegrationIdDelete(requestParameters: DefaultApiApiV1IntegrationIntegrationIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1IntegrationPost200Response> {
            return localVarFp.apiV1IntegrationIntegrationIdDelete(requestParameters.integrationId, requestParameters.shouldDeleteIntegrationSecrets, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an integration by integration id
         * @param {DefaultApiApiV1IntegrationIntegrationIdPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IntegrationIntegrationIdPatch(requestParameters: DefaultApiApiV1IntegrationIntegrationIdPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1IntegrationPost200Response> {
            return localVarFp.apiV1IntegrationIntegrationIdPatch(requestParameters.integrationId, requestParameters.apiV1IntegrationIntegrationIdPatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Manually trigger sync of an integration by integration id
         * @param {DefaultApiApiV1IntegrationIntegrationIdSyncPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IntegrationIntegrationIdSyncPost(requestParameters: DefaultApiApiV1IntegrationIntegrationIdSyncPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1IntegrationPost200Response> {
            return localVarFp.apiV1IntegrationIntegrationIdSyncPost(requestParameters.integrationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create an integration to sync secrets.
         * @param {DefaultApiApiV1IntegrationPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1IntegrationPost(requestParameters: DefaultApiApiV1IntegrationPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1IntegrationPost200Response> {
            return localVarFp.apiV1IntegrationPost(requestParameters.apiV1IntegrationPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1InviteOrgSignupPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1InviteOrgSignupPost(requestParameters: DefaultApiApiV1InviteOrgSignupPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1InviteOrgSignupPost200Response> {
            return localVarFp.apiV1InviteOrgSignupPost(requestParameters.apiV1InviteOrgSignupPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1InviteOrgVerifyPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1InviteOrgVerifyPost(requestParameters: DefaultApiApiV1InviteOrgVerifyPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1InviteOrgVerifyPost200Response> {
            return localVarFp.apiV1InviteOrgVerifyPost(requestParameters.apiV1InviteOrgVerifyPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1LdapConfigConfigIdGroupMapsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LdapConfigConfigIdGroupMapsGet(requestParameters: DefaultApiApiV1LdapConfigConfigIdGroupMapsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<ApiV1LdapConfigConfigIdGroupMapsGet200ResponseInner>> {
            return localVarFp.apiV1LdapConfigConfigIdGroupMapsGet(requestParameters.configId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1LdapConfigConfigIdGroupMapsGroupMapIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LdapConfigConfigIdGroupMapsGroupMapIdDelete(requestParameters: DefaultApiApiV1LdapConfigConfigIdGroupMapsGroupMapIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1LdapConfigConfigIdGroupMapsPost200Response> {
            return localVarFp.apiV1LdapConfigConfigIdGroupMapsGroupMapIdDelete(requestParameters.configId, requestParameters.groupMapId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1LdapConfigConfigIdGroupMapsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LdapConfigConfigIdGroupMapsPost(requestParameters: DefaultApiApiV1LdapConfigConfigIdGroupMapsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1LdapConfigConfigIdGroupMapsPost200Response> {
            return localVarFp.apiV1LdapConfigConfigIdGroupMapsPost(requestParameters.configId, requestParameters.apiV1LdapConfigConfigIdGroupMapsPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1LdapConfigConfigIdTestConnectionPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LdapConfigConfigIdTestConnectionPost(requestParameters: DefaultApiApiV1LdapConfigConfigIdTestConnectionPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<boolean> {
            return localVarFp.apiV1LdapConfigConfigIdTestConnectionPost(requestParameters.configId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1LdapConfigGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LdapConfigGet(requestParameters: DefaultApiApiV1LdapConfigGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1LdapConfigGet200Response> {
            return localVarFp.apiV1LdapConfigGet(requestParameters.organizationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1LdapConfigPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LdapConfigPatch(requestParameters: DefaultApiApiV1LdapConfigPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1LdapConfigPost200Response> {
            return localVarFp.apiV1LdapConfigPatch(requestParameters.apiV1LdapConfigPatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1LdapConfigPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LdapConfigPost(requestParameters: DefaultApiApiV1LdapConfigPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1LdapConfigPost200Response> {
            return localVarFp.apiV1LdapConfigPost(requestParameters.apiV1LdapConfigPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1LdapLoginPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1LdapLoginPost(requestParameters: DefaultApiApiV1LdapLoginPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiV1LdapLoginPost(requestParameters.apiV1LdapLoginPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1OrganizationAdminProjectsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrganizationAdminProjectsGet(requestParameters: DefaultApiApiV1OrganizationAdminProjectsGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1OrganizationAdminProjectsGet200Response> {
            return localVarFp.apiV1OrganizationAdminProjectsGet(requestParameters.search, requestParameters.offset, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1OrganizationAdminProjectsProjectIdGrantAdminAccessPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrganizationAdminProjectsProjectIdGrantAdminAccessPost(requestParameters: DefaultApiApiV1OrganizationAdminProjectsProjectIdGrantAdminAccessPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1OrganizationAdminProjectsProjectIdGrantAdminAccessPost200Response> {
            return localVarFp.apiV1OrganizationAdminProjectsProjectIdGrantAdminAccessPost(requestParameters.projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrganizationGet(options?: RawAxiosRequestConfig): AxiosPromise<ApiV1OrganizationGet200Response> {
            return localVarFp.apiV1OrganizationGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1OrganizationOrganizationIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrganizationOrganizationIdGet(requestParameters: DefaultApiApiV1OrganizationOrganizationIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1OrganizationOrganizationIdGet200Response> {
            return localVarFp.apiV1OrganizationOrganizationIdGet(requestParameters.organizationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1OrganizationOrganizationIdGroupsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrganizationOrganizationIdGroupsGet(requestParameters: DefaultApiApiV1OrganizationOrganizationIdGroupsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1OrganizationOrganizationIdGroupsGet200Response> {
            return localVarFp.apiV1OrganizationOrganizationIdGroupsGet(requestParameters.organizationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1OrganizationOrganizationIdIncidentContactOrgGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrganizationOrganizationIdIncidentContactOrgGet(requestParameters: DefaultApiApiV1OrganizationOrganizationIdIncidentContactOrgGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1OrganizationOrganizationIdIncidentContactOrgGet200Response> {
            return localVarFp.apiV1OrganizationOrganizationIdIncidentContactOrgGet(requestParameters.organizationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1OrganizationOrganizationIdIncidentContactOrgIncidentContactIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrganizationOrganizationIdIncidentContactOrgIncidentContactIdDelete(requestParameters: DefaultApiApiV1OrganizationOrganizationIdIncidentContactOrgIncidentContactIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1OrganizationOrganizationIdIncidentContactOrgPost200Response> {
            return localVarFp.apiV1OrganizationOrganizationIdIncidentContactOrgIncidentContactIdDelete(requestParameters.organizationId, requestParameters.incidentContactId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1OrganizationOrganizationIdIncidentContactOrgPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrganizationOrganizationIdIncidentContactOrgPost(requestParameters: DefaultApiApiV1OrganizationOrganizationIdIncidentContactOrgPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1OrganizationOrganizationIdIncidentContactOrgPost200Response> {
            return localVarFp.apiV1OrganizationOrganizationIdIncidentContactOrgPost(requestParameters.organizationId, requestParameters.apiV1PasswordEmailPasswordResetPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1OrganizationOrganizationIdPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrganizationOrganizationIdPatch(requestParameters: DefaultApiApiV1OrganizationOrganizationIdPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1OrganizationOrganizationIdPatch200Response> {
            return localVarFp.apiV1OrganizationOrganizationIdPatch(requestParameters.organizationId, requestParameters.apiV1OrganizationOrganizationIdPatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1OrganizationOrganizationIdPermissionsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrganizationOrganizationIdPermissionsGet(requestParameters: DefaultApiApiV1OrganizationOrganizationIdPermissionsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1OrganizationOrganizationIdPermissionsGet200Response> {
            return localVarFp.apiV1OrganizationOrganizationIdPermissionsGet(requestParameters.organizationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1OrganizationOrganizationIdRolesGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrganizationOrganizationIdRolesGet(requestParameters: DefaultApiApiV1OrganizationOrganizationIdRolesGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1OrganizationOrganizationIdRolesGet200Response> {
            return localVarFp.apiV1OrganizationOrganizationIdRolesGet(requestParameters.organizationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1OrganizationOrganizationIdRolesPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrganizationOrganizationIdRolesPost(requestParameters: DefaultApiApiV1OrganizationOrganizationIdRolesPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1OrganizationOrganizationIdRolesPost200Response> {
            return localVarFp.apiV1OrganizationOrganizationIdRolesPost(requestParameters.organizationId, requestParameters.apiV1OrganizationOrganizationIdRolesPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1OrganizationOrganizationIdRolesRoleIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrganizationOrganizationIdRolesRoleIdDelete(requestParameters: DefaultApiApiV1OrganizationOrganizationIdRolesRoleIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1OrganizationOrganizationIdRolesPost200Response> {
            return localVarFp.apiV1OrganizationOrganizationIdRolesRoleIdDelete(requestParameters.organizationId, requestParameters.roleId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1OrganizationOrganizationIdRolesRoleIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrganizationOrganizationIdRolesRoleIdGet(requestParameters: DefaultApiApiV1OrganizationOrganizationIdRolesRoleIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1OrganizationOrganizationIdRolesPost200Response> {
            return localVarFp.apiV1OrganizationOrganizationIdRolesRoleIdGet(requestParameters.organizationId, requestParameters.roleId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1OrganizationOrganizationIdRolesRoleIdPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrganizationOrganizationIdRolesRoleIdPatch(requestParameters: DefaultApiApiV1OrganizationOrganizationIdRolesRoleIdPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1OrganizationOrganizationIdRolesPost200Response> {
            return localVarFp.apiV1OrganizationOrganizationIdRolesRoleIdPatch(requestParameters.organizationId, requestParameters.roleId, requestParameters.apiV1OrganizationOrganizationIdRolesRoleIdPatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1OrganizationOrganizationIdUsersGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrganizationOrganizationIdUsersGet(requestParameters: DefaultApiApiV1OrganizationOrganizationIdUsersGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1OrganizationOrganizationIdUsersGet200Response> {
            return localVarFp.apiV1OrganizationOrganizationIdUsersGet(requestParameters.organizationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1OrganizationsOrganizationIdBillingDetailsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrganizationsOrganizationIdBillingDetailsGet(requestParameters: DefaultApiApiV1OrganizationsOrganizationIdBillingDetailsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.apiV1OrganizationsOrganizationIdBillingDetailsGet(requestParameters.organizationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1OrganizationsOrganizationIdBillingDetailsPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrganizationsOrganizationIdBillingDetailsPatch(requestParameters: DefaultApiApiV1OrganizationsOrganizationIdBillingDetailsPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.apiV1OrganizationsOrganizationIdBillingDetailsPatch(requestParameters.organizationId, requestParameters.apiV1OrganizationsOrganizationIdBillingDetailsPatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1OrganizationsOrganizationIdBillingDetailsPaymentMethodsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrganizationsOrganizationIdBillingDetailsPaymentMethodsGet(requestParameters: DefaultApiApiV1OrganizationsOrganizationIdBillingDetailsPaymentMethodsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.apiV1OrganizationsOrganizationIdBillingDetailsPaymentMethodsGet(requestParameters.organizationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1OrganizationsOrganizationIdBillingDetailsPaymentMethodsPmtMethodIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrganizationsOrganizationIdBillingDetailsPaymentMethodsPmtMethodIdDelete(requestParameters: DefaultApiApiV1OrganizationsOrganizationIdBillingDetailsPaymentMethodsPmtMethodIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.apiV1OrganizationsOrganizationIdBillingDetailsPaymentMethodsPmtMethodIdDelete(requestParameters.organizationId, requestParameters.pmtMethodId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1OrganizationsOrganizationIdBillingDetailsPaymentMethodsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrganizationsOrganizationIdBillingDetailsPaymentMethodsPost(requestParameters: DefaultApiApiV1OrganizationsOrganizationIdBillingDetailsPaymentMethodsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.apiV1OrganizationsOrganizationIdBillingDetailsPaymentMethodsPost(requestParameters.organizationId, requestParameters.apiV1OrganizationsOrganizationIdBillingDetailsPaymentMethodsPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1OrganizationsOrganizationIdBillingDetailsTaxIdsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrganizationsOrganizationIdBillingDetailsTaxIdsGet(requestParameters: DefaultApiApiV1OrganizationsOrganizationIdBillingDetailsTaxIdsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.apiV1OrganizationsOrganizationIdBillingDetailsTaxIdsGet(requestParameters.organizationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1OrganizationsOrganizationIdBillingDetailsTaxIdsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrganizationsOrganizationIdBillingDetailsTaxIdsPost(requestParameters: DefaultApiApiV1OrganizationsOrganizationIdBillingDetailsTaxIdsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.apiV1OrganizationsOrganizationIdBillingDetailsTaxIdsPost(requestParameters.organizationId, requestParameters.apiV1OrganizationsOrganizationIdBillingDetailsTaxIdsPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1OrganizationsOrganizationIdBillingDetailsTaxIdsTaxIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrganizationsOrganizationIdBillingDetailsTaxIdsTaxIdDelete(requestParameters: DefaultApiApiV1OrganizationsOrganizationIdBillingDetailsTaxIdsTaxIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.apiV1OrganizationsOrganizationIdBillingDetailsTaxIdsTaxIdDelete(requestParameters.organizationId, requestParameters.taxId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1OrganizationsOrganizationIdCustomerPortalSessionPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrganizationsOrganizationIdCustomerPortalSessionPost(requestParameters: DefaultApiApiV1OrganizationsOrganizationIdCustomerPortalSessionPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.apiV1OrganizationsOrganizationIdCustomerPortalSessionPost(requestParameters.organizationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1OrganizationsOrganizationIdInvoicesGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrganizationsOrganizationIdInvoicesGet(requestParameters: DefaultApiApiV1OrganizationsOrganizationIdInvoicesGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.apiV1OrganizationsOrganizationIdInvoicesGet(requestParameters.organizationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1OrganizationsOrganizationIdLicensesGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrganizationsOrganizationIdLicensesGet(requestParameters: DefaultApiApiV1OrganizationsOrganizationIdLicensesGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.apiV1OrganizationsOrganizationIdLicensesGet(requestParameters.organizationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1OrganizationsOrganizationIdPlanBillingGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrganizationsOrganizationIdPlanBillingGet(requestParameters: DefaultApiApiV1OrganizationsOrganizationIdPlanBillingGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.apiV1OrganizationsOrganizationIdPlanBillingGet(requestParameters.organizationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1OrganizationsOrganizationIdPlanGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrganizationsOrganizationIdPlanGet(requestParameters: DefaultApiApiV1OrganizationsOrganizationIdPlanGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1OrganizationsOrganizationIdPlanGet200Response> {
            return localVarFp.apiV1OrganizationsOrganizationIdPlanGet(requestParameters.organizationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1OrganizationsOrganizationIdPlanTableGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrganizationsOrganizationIdPlanTableGet(requestParameters: DefaultApiApiV1OrganizationsOrganizationIdPlanTableGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.apiV1OrganizationsOrganizationIdPlanTableGet(requestParameters.organizationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1OrganizationsOrganizationIdPlansGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrganizationsOrganizationIdPlansGet(requestParameters: DefaultApiApiV1OrganizationsOrganizationIdPlansGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.apiV1OrganizationsOrganizationIdPlansGet(requestParameters.organizationId, requestParameters.workspaceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1OrganizationsOrganizationIdPlansTableGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrganizationsOrganizationIdPlansTableGet(requestParameters: DefaultApiApiV1OrganizationsOrganizationIdPlansTableGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.apiV1OrganizationsOrganizationIdPlansTableGet(requestParameters.billingCycle, requestParameters.organizationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1OrganizationsOrganizationIdSessionTrialPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1OrganizationsOrganizationIdSessionTrialPost(requestParameters: DefaultApiApiV1OrganizationsOrganizationIdSessionTrialPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.apiV1OrganizationsOrganizationIdSessionTrialPost(requestParameters.organizationId, requestParameters.apiV1OrganizationsOrganizationIdSessionTrialPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PasswordBackupPrivateKeyGet(options?: RawAxiosRequestConfig): AxiosPromise<ApiV1PasswordBackupPrivateKeyGet200Response> {
            return localVarFp.apiV1PasswordBackupPrivateKeyGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1PasswordBackupPrivateKeyPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PasswordBackupPrivateKeyPost(requestParameters: DefaultApiApiV1PasswordBackupPrivateKeyPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1PasswordBackupPrivateKeyGet200Response> {
            return localVarFp.apiV1PasswordBackupPrivateKeyPost(requestParameters.apiV1PasswordBackupPrivateKeyPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1PasswordChangePasswordPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PasswordChangePasswordPost(requestParameters: DefaultApiApiV1PasswordChangePasswordPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1WorkspaceWorkspaceIdMigrateV3Post200Response> {
            return localVarFp.apiV1PasswordChangePasswordPost(requestParameters.apiV1PasswordChangePasswordPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1PasswordEmailPasswordResetPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PasswordEmailPasswordResetPost(requestParameters: DefaultApiApiV1PasswordEmailPasswordResetPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1WorkspaceWorkspaceIdMigrateV3Post200Response> {
            return localVarFp.apiV1PasswordEmailPasswordResetPost(requestParameters.apiV1PasswordEmailPasswordResetPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1PasswordEmailPasswordResetVerifyPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PasswordEmailPasswordResetVerifyPost(requestParameters: DefaultApiApiV1PasswordEmailPasswordResetVerifyPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1PasswordEmailPasswordResetVerifyPost200Response> {
            return localVarFp.apiV1PasswordEmailPasswordResetVerifyPost(requestParameters.apiV1PasswordEmailPasswordResetVerifyPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1PasswordPasswordResetPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PasswordPasswordResetPost(requestParameters: DefaultApiApiV1PasswordPasswordResetPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1WorkspaceWorkspaceIdMigrateV3Post200Response> {
            return localVarFp.apiV1PasswordPasswordResetPost(requestParameters.apiV1PasswordPasswordResetPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1PasswordSrp1PostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PasswordSrp1Post(requestParameters: DefaultApiApiV1PasswordSrp1PostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1PasswordSrp1Post200Response> {
            return localVarFp.apiV1PasswordSrp1Post(requestParameters.apiV1PasswordSrp1PostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete PKI alert
         * @param {DefaultApiApiV1PkiAlertsAlertIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PkiAlertsAlertIdDelete(requestParameters: DefaultApiApiV1PkiAlertsAlertIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1PkiAlertsPost200Response> {
            return localVarFp.apiV1PkiAlertsAlertIdDelete(requestParameters.alertId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get PKI alert
         * @param {DefaultApiApiV1PkiAlertsAlertIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PkiAlertsAlertIdGet(requestParameters: DefaultApiApiV1PkiAlertsAlertIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1PkiAlertsPost200Response> {
            return localVarFp.apiV1PkiAlertsAlertIdGet(requestParameters.alertId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update PKI alert
         * @param {DefaultApiApiV1PkiAlertsAlertIdPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PkiAlertsAlertIdPatch(requestParameters: DefaultApiApiV1PkiAlertsAlertIdPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1PkiAlertsPost200Response> {
            return localVarFp.apiV1PkiAlertsAlertIdPatch(requestParameters.alertId, requestParameters.apiV1PkiAlertsAlertIdPatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Create PKI alert
         * @param {DefaultApiApiV1PkiAlertsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PkiAlertsPost(requestParameters: DefaultApiApiV1PkiAlertsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1PkiAlertsPost200Response> {
            return localVarFp.apiV1PkiAlertsPost(requestParameters.apiV1PkiAlertsPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Get list of past and current CA certificates for a CA
         * @param {DefaultApiApiV1PkiCaCaIdCaCertificatesGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PkiCaCaIdCaCertificatesGet(requestParameters: DefaultApiApiV1PkiCaCaIdCaCertificatesGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<ApiV1PkiCaCaIdCaCertificatesGet200ResponseInner>> {
            return localVarFp.apiV1PkiCaCaIdCaCertificatesGet(requestParameters.caId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get current CA cert and cert chain of a CA
         * @param {DefaultApiApiV1PkiCaCaIdCertificateGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PkiCaCaIdCertificateGet(requestParameters: DefaultApiApiV1PkiCaCaIdCertificateGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1PkiCaCaIdCertificateGet200Response> {
            return localVarFp.apiV1PkiCaCaIdCertificateGet(requestParameters.caId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get list of CRLs of the CA
         * @param {DefaultApiApiV1PkiCaCaIdCrlsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PkiCaCaIdCrlsGet(requestParameters: DefaultApiApiV1PkiCaCaIdCrlsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<ApiV1PkiCaCaIdCrlsGet200ResponseInner>> {
            return localVarFp.apiV1PkiCaCaIdCrlsGet(requestParameters.caId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get CA CSR
         * @param {DefaultApiApiV1PkiCaCaIdCsrGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PkiCaCaIdCsrGet(requestParameters: DefaultApiApiV1PkiCaCaIdCsrGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1PkiCaCaIdCsrGet200Response> {
            return localVarFp.apiV1PkiCaCaIdCsrGet(requestParameters.caId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete CA
         * @param {DefaultApiApiV1PkiCaCaIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PkiCaCaIdDelete(requestParameters: DefaultApiApiV1PkiCaCaIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1PkiCaPost200Response> {
            return localVarFp.apiV1PkiCaCaIdDelete(requestParameters.caId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get CA
         * @param {DefaultApiApiV1PkiCaCaIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PkiCaCaIdGet(requestParameters: DefaultApiApiV1PkiCaCaIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1PkiCaPost200Response> {
            return localVarFp.apiV1PkiCaCaIdGet(requestParameters.caId, options).then((request) => request(axios, basePath));
        },
        /**
         * Import certificate and chain to CA
         * @param {DefaultApiApiV1PkiCaCaIdImportCertificatePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PkiCaCaIdImportCertificatePost(requestParameters: DefaultApiApiV1PkiCaCaIdImportCertificatePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1PkiCaCaIdImportCertificatePost200Response> {
            return localVarFp.apiV1PkiCaCaIdImportCertificatePost(requestParameters.caId, requestParameters.apiV1PkiCaCaIdImportCertificatePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Issue certificate from CA
         * @param {DefaultApiApiV1PkiCaCaIdIssueCertificatePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PkiCaCaIdIssueCertificatePost(requestParameters: DefaultApiApiV1PkiCaCaIdIssueCertificatePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1PkiCaCaIdIssueCertificatePost200Response> {
            return localVarFp.apiV1PkiCaCaIdIssueCertificatePost(requestParameters.caId, requestParameters.apiV1PkiCaCaIdIssueCertificatePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Update CA
         * @param {DefaultApiApiV1PkiCaCaIdPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PkiCaCaIdPatch(requestParameters: DefaultApiApiV1PkiCaCaIdPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1PkiCaPost200Response> {
            return localVarFp.apiV1PkiCaCaIdPatch(requestParameters.caId, requestParameters.apiV1PkiCaCaIdPatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Perform CA certificate renewal
         * @param {DefaultApiApiV1PkiCaCaIdRenewPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PkiCaCaIdRenewPost(requestParameters: DefaultApiApiV1PkiCaCaIdRenewPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1PkiCaCaIdRenewPost200Response> {
            return localVarFp.apiV1PkiCaCaIdRenewPost(requestParameters.caId, requestParameters.apiV1PkiCaCaIdRenewPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Sign certificate from CA
         * @param {DefaultApiApiV1PkiCaCaIdSignCertificatePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PkiCaCaIdSignCertificatePost(requestParameters: DefaultApiApiV1PkiCaCaIdSignCertificatePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1PkiCaCaIdSignCertificatePost200Response> {
            return localVarFp.apiV1PkiCaCaIdSignCertificatePost(requestParameters.caId, requestParameters.apiV1PkiCaCaIdSignCertificatePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Create intermediate CA certificate from parent CA
         * @param {DefaultApiApiV1PkiCaCaIdSignIntermediatePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PkiCaCaIdSignIntermediatePost(requestParameters: DefaultApiApiV1PkiCaCaIdSignIntermediatePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1PkiCaCaIdSignIntermediatePost200Response> {
            return localVarFp.apiV1PkiCaCaIdSignIntermediatePost(requestParameters.caId, requestParameters.apiV1PkiCaCaIdSignIntermediatePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Create CA
         * @param {DefaultApiApiV1PkiCaPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PkiCaPost(requestParameters: DefaultApiApiV1PkiCaPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1PkiCaPost200Response> {
            return localVarFp.apiV1PkiCaPost(requestParameters.apiV1PkiCaPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1PkiCertificateTemplatesCertificateTemplateIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PkiCertificateTemplatesCertificateTemplateIdDelete(requestParameters: DefaultApiApiV1PkiCertificateTemplatesCertificateTemplateIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1PkiCertificateTemplatesCertificateTemplateIdGet200Response> {
            return localVarFp.apiV1PkiCertificateTemplatesCertificateTemplateIdDelete(requestParameters.certificateTemplateId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Certificate Template EST configuration
         * @param {DefaultApiApiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigGet(requestParameters: DefaultApiApiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigGet200Response> {
            return localVarFp.apiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigGet(requestParameters.certificateTemplateId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update Certificate Template EST configuration
         * @param {DefaultApiApiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPatch(requestParameters: DefaultApiApiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPost200Response> {
            return localVarFp.apiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPatch(requestParameters.certificateTemplateId, requestParameters.apiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Create Certificate Template EST configuration
         * @param {DefaultApiApiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPost(requestParameters: DefaultApiApiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPost200Response> {
            return localVarFp.apiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPost(requestParameters.certificateTemplateId, requestParameters.apiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1PkiCertificateTemplatesCertificateTemplateIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PkiCertificateTemplatesCertificateTemplateIdGet(requestParameters: DefaultApiApiV1PkiCertificateTemplatesCertificateTemplateIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1PkiCertificateTemplatesCertificateTemplateIdGet200Response> {
            return localVarFp.apiV1PkiCertificateTemplatesCertificateTemplateIdGet(requestParameters.certificateTemplateId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1PkiCertificateTemplatesCertificateTemplateIdPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PkiCertificateTemplatesCertificateTemplateIdPatch(requestParameters: DefaultApiApiV1PkiCertificateTemplatesCertificateTemplateIdPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1PkiCertificateTemplatesCertificateTemplateIdGet200Response> {
            return localVarFp.apiV1PkiCertificateTemplatesCertificateTemplateIdPatch(requestParameters.certificateTemplateId, requestParameters.apiV1PkiCertificateTemplatesCertificateTemplateIdPatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1PkiCertificateTemplatesPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PkiCertificateTemplatesPost(requestParameters: DefaultApiApiV1PkiCertificateTemplatesPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1PkiCertificateTemplatesCertificateTemplateIdGet200Response> {
            return localVarFp.apiV1PkiCertificateTemplatesPost(requestParameters.apiV1PkiCertificateTemplatesPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Issue certificate
         * @param {DefaultApiApiV1PkiCertificatesIssueCertificatePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PkiCertificatesIssueCertificatePost(requestParameters: DefaultApiApiV1PkiCertificatesIssueCertificatePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1PkiCaCaIdIssueCertificatePost200Response> {
            return localVarFp.apiV1PkiCertificatesIssueCertificatePost(requestParameters.apiV1PkiCertificatesIssueCertificatePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Get certificate body of certificate
         * @param {DefaultApiApiV1PkiCertificatesSerialNumberCertificateGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PkiCertificatesSerialNumberCertificateGet(requestParameters: DefaultApiApiV1PkiCertificatesSerialNumberCertificateGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1PkiCertificatesSerialNumberCertificateGet200Response> {
            return localVarFp.apiV1PkiCertificatesSerialNumberCertificateGet(requestParameters.serialNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete certificate
         * @param {DefaultApiApiV1PkiCertificatesSerialNumberDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PkiCertificatesSerialNumberDelete(requestParameters: DefaultApiApiV1PkiCertificatesSerialNumberDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1PkiCertificatesSerialNumberGet200Response> {
            return localVarFp.apiV1PkiCertificatesSerialNumberDelete(requestParameters.serialNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Get certificate
         * @param {DefaultApiApiV1PkiCertificatesSerialNumberGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PkiCertificatesSerialNumberGet(requestParameters: DefaultApiApiV1PkiCertificatesSerialNumberGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1PkiCertificatesSerialNumberGet200Response> {
            return localVarFp.apiV1PkiCertificatesSerialNumberGet(requestParameters.serialNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Revoke
         * @param {DefaultApiApiV1PkiCertificatesSerialNumberRevokePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PkiCertificatesSerialNumberRevokePost(requestParameters: DefaultApiApiV1PkiCertificatesSerialNumberRevokePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1PkiCertificatesSerialNumberRevokePost200Response> {
            return localVarFp.apiV1PkiCertificatesSerialNumberRevokePost(requestParameters.serialNumber, requestParameters.apiV1PkiCertificatesSerialNumberRevokePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Sign certificate
         * @param {DefaultApiApiV1PkiCertificatesSignCertificatePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PkiCertificatesSignCertificatePost(requestParameters: DefaultApiApiV1PkiCertificatesSignCertificatePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1PkiCaCaIdSignCertificatePost200Response> {
            return localVarFp.apiV1PkiCertificatesSignCertificatePost(requestParameters.apiV1PkiCertificatesSignCertificatePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete PKI collection
         * @param {DefaultApiApiV1PkiCollectionsCollectionIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PkiCollectionsCollectionIdDelete(requestParameters: DefaultApiApiV1PkiCollectionsCollectionIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1PkiCollectionsPost200Response> {
            return localVarFp.apiV1PkiCollectionsCollectionIdDelete(requestParameters.collectionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get PKI collection
         * @param {DefaultApiApiV1PkiCollectionsCollectionIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PkiCollectionsCollectionIdGet(requestParameters: DefaultApiApiV1PkiCollectionsCollectionIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1PkiCollectionsPost200Response> {
            return localVarFp.apiV1PkiCollectionsCollectionIdGet(requestParameters.collectionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove item from PKI collection
         * @param {DefaultApiApiV1PkiCollectionsCollectionIdItemsCollectionItemIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PkiCollectionsCollectionIdItemsCollectionItemIdDelete(requestParameters: DefaultApiApiV1PkiCollectionsCollectionIdItemsCollectionItemIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1PkiCollectionsCollectionIdItemsCollectionItemIdDelete200Response> {
            return localVarFp.apiV1PkiCollectionsCollectionIdItemsCollectionItemIdDelete(requestParameters.collectionId, requestParameters.collectionItemId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get items in PKI collection
         * @param {DefaultApiApiV1PkiCollectionsCollectionIdItemsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PkiCollectionsCollectionIdItemsGet(requestParameters: DefaultApiApiV1PkiCollectionsCollectionIdItemsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1PkiCollectionsCollectionIdItemsGet200Response> {
            return localVarFp.apiV1PkiCollectionsCollectionIdItemsGet(requestParameters.collectionId, requestParameters.type, requestParameters.offset, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Add item to PKI collection
         * @param {DefaultApiApiV1PkiCollectionsCollectionIdItemsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PkiCollectionsCollectionIdItemsPost(requestParameters: DefaultApiApiV1PkiCollectionsCollectionIdItemsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1PkiCollectionsCollectionIdItemsPost200Response> {
            return localVarFp.apiV1PkiCollectionsCollectionIdItemsPost(requestParameters.collectionId, requestParameters.apiV1PkiCollectionsCollectionIdItemsPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Update PKI collection
         * @param {DefaultApiApiV1PkiCollectionsCollectionIdPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PkiCollectionsCollectionIdPatch(requestParameters: DefaultApiApiV1PkiCollectionsCollectionIdPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1PkiCollectionsPost200Response> {
            return localVarFp.apiV1PkiCollectionsCollectionIdPatch(requestParameters.collectionId, requestParameters.apiV1PkiCollectionsCollectionIdPatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Create PKI collection
         * @param {DefaultApiApiV1PkiCollectionsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PkiCollectionsPost(requestParameters: DefaultApiApiV1PkiCollectionsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1PkiCollectionsPost200Response> {
            return localVarFp.apiV1PkiCollectionsPost(requestParameters.apiV1PkiCollectionsPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Get CRL in DER format
         * @param {DefaultApiApiV1PkiCrlCrlIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PkiCrlCrlIdGet(requestParameters: DefaultApiApiV1PkiCrlCrlIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.apiV1PkiCrlCrlIdGet(requestParameters.crlId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1RateLimitGet(options?: RawAxiosRequestConfig): AxiosPromise<ApiV1RateLimitGet200Response> {
            return localVarFp.apiV1RateLimitGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1RateLimitPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1RateLimitPut(requestParameters: DefaultApiApiV1RateLimitPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1RateLimitGet200Response> {
            return localVarFp.apiV1RateLimitPut(requestParameters.apiV1RateLimitPutRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1ScimGroupsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ScimGroupsGet(requestParameters: DefaultApiApiV1ScimGroupsGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1ScimGroupsGet200Response> {
            return localVarFp.apiV1ScimGroupsGet(requestParameters.startIndex, requestParameters.count, requestParameters.filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1ScimGroupsGroupIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ScimGroupsGroupIdDelete(requestParameters: DefaultApiApiV1ScimGroupsGroupIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.apiV1ScimGroupsGroupIdDelete(requestParameters.groupId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1ScimGroupsGroupIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ScimGroupsGroupIdGet(requestParameters: DefaultApiApiV1ScimGroupsGroupIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1ScimGroupsGet200ResponseResourcesInner> {
            return localVarFp.apiV1ScimGroupsGroupIdGet(requestParameters.groupId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1ScimGroupsGroupIdPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ScimGroupsGroupIdPatch(requestParameters: DefaultApiApiV1ScimGroupsGroupIdPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1ScimGroupsGet200ResponseResourcesInner> {
            return localVarFp.apiV1ScimGroupsGroupIdPatch(requestParameters.groupId, requestParameters.apiV1ScimGroupsGroupIdPatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1ScimGroupsGroupIdPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ScimGroupsGroupIdPut(requestParameters: DefaultApiApiV1ScimGroupsGroupIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1ScimGroupsGet200ResponseResourcesInner> {
            return localVarFp.apiV1ScimGroupsGroupIdPut(requestParameters.groupId, requestParameters.apiV1ScimGroupsGroupIdPutRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1ScimGroupsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ScimGroupsPost(requestParameters: DefaultApiApiV1ScimGroupsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1ScimGroupsPost200Response> {
            return localVarFp.apiV1ScimGroupsPost(requestParameters.apiV1ScimGroupsPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1ScimScimTokensGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ScimScimTokensGet(requestParameters: DefaultApiApiV1ScimScimTokensGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1ScimScimTokensGet200Response> {
            return localVarFp.apiV1ScimScimTokensGet(requestParameters.organizationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1ScimScimTokensPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ScimScimTokensPost(requestParameters: DefaultApiApiV1ScimScimTokensPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1ScimScimTokensPost200Response> {
            return localVarFp.apiV1ScimScimTokensPost(requestParameters.apiV1ScimScimTokensPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1ScimScimTokensScimTokenIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ScimScimTokensScimTokenIdDelete(requestParameters: DefaultApiApiV1ScimScimTokensScimTokenIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1ScimScimTokensScimTokenIdDelete200Response> {
            return localVarFp.apiV1ScimScimTokensScimTokenIdDelete(requestParameters.scimTokenId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1ScimUsersGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ScimUsersGet(requestParameters: DefaultApiApiV1ScimUsersGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1ScimUsersGet200Response> {
            return localVarFp.apiV1ScimUsersGet(requestParameters.startIndex, requestParameters.count, requestParameters.filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1ScimUsersOrgMembershipIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ScimUsersOrgMembershipIdDelete(requestParameters: DefaultApiApiV1ScimUsersOrgMembershipIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.apiV1ScimUsersOrgMembershipIdDelete(requestParameters.orgMembershipId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1ScimUsersOrgMembershipIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ScimUsersOrgMembershipIdGet(requestParameters: DefaultApiApiV1ScimUsersOrgMembershipIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1ScimUsersOrgMembershipIdGet201Response> {
            return localVarFp.apiV1ScimUsersOrgMembershipIdGet(requestParameters.orgMembershipId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1ScimUsersOrgMembershipIdPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ScimUsersOrgMembershipIdPut(requestParameters: DefaultApiApiV1ScimUsersOrgMembershipIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1ScimUsersOrgMembershipIdPut200Response> {
            return localVarFp.apiV1ScimUsersOrgMembershipIdPut(requestParameters.orgMembershipId, requestParameters.apiV1ScimUsersOrgMembershipIdPutRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1ScimUsersPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ScimUsersPost(requestParameters: DefaultApiApiV1ScimUsersPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1ScimUsersPost200Response> {
            return localVarFp.apiV1ScimUsersPost(requestParameters.apiV1ScimUsersPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1SecretApprovalRequestsCountGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SecretApprovalRequestsCountGet(requestParameters: DefaultApiApiV1SecretApprovalRequestsCountGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1SecretApprovalRequestsCountGet200Response> {
            return localVarFp.apiV1SecretApprovalRequestsCountGet(requestParameters.workspaceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1SecretApprovalRequestsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SecretApprovalRequestsGet(requestParameters: DefaultApiApiV1SecretApprovalRequestsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1SecretApprovalRequestsGet200Response> {
            return localVarFp.apiV1SecretApprovalRequestsGet(requestParameters.workspaceId, requestParameters.environment, requestParameters.committer, requestParameters.status, requestParameters.limit, requestParameters.offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1SecretApprovalRequestsIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SecretApprovalRequestsIdGet(requestParameters: DefaultApiApiV1SecretApprovalRequestsIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1SecretApprovalRequestsIdGet200Response> {
            return localVarFp.apiV1SecretApprovalRequestsIdGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1SecretApprovalRequestsIdMergePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SecretApprovalRequestsIdMergePost(requestParameters: DefaultApiApiV1SecretApprovalRequestsIdMergePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1SecretApprovalRequestsIdMergePost200Response> {
            return localVarFp.apiV1SecretApprovalRequestsIdMergePost(requestParameters.id, requestParameters.apiV1SecretApprovalRequestsIdMergePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1SecretApprovalRequestsIdReviewPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SecretApprovalRequestsIdReviewPost(requestParameters: DefaultApiApiV1SecretApprovalRequestsIdReviewPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1SecretApprovalRequestsIdReviewPost200Response> {
            return localVarFp.apiV1SecretApprovalRequestsIdReviewPost(requestParameters.id, requestParameters.apiV1SecretApprovalRequestsIdReviewPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1SecretApprovalRequestsIdStatusPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SecretApprovalRequestsIdStatusPost(requestParameters: DefaultApiApiV1SecretApprovalRequestsIdStatusPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1SecretApprovalRequestsIdMergePost200Response> {
            return localVarFp.apiV1SecretApprovalRequestsIdStatusPost(requestParameters.id, requestParameters.apiV1SecretApprovalRequestsIdStatusPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1SecretApprovalsBoardGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SecretApprovalsBoardGet(requestParameters: DefaultApiApiV1SecretApprovalsBoardGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1SecretApprovalsBoardGet200Response> {
            return localVarFp.apiV1SecretApprovalsBoardGet(requestParameters.workspaceId, requestParameters.environment, requestParameters.secretPath, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1SecretApprovalsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SecretApprovalsGet(requestParameters: DefaultApiApiV1SecretApprovalsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1SecretApprovalsGet200Response> {
            return localVarFp.apiV1SecretApprovalsGet(requestParameters.workspaceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1SecretApprovalsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SecretApprovalsPost(requestParameters: DefaultApiApiV1SecretApprovalsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1SecretApprovalsPost200Response> {
            return localVarFp.apiV1SecretApprovalsPost(requestParameters.apiV1SecretApprovalsPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1SecretApprovalsSapIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SecretApprovalsSapIdDelete(requestParameters: DefaultApiApiV1SecretApprovalsSapIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1SecretApprovalsPost200Response> {
            return localVarFp.apiV1SecretApprovalsSapIdDelete(requestParameters.sapId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1SecretApprovalsSapIdPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SecretApprovalsSapIdPatch(requestParameters: DefaultApiApiV1SecretApprovalsSapIdPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1SecretApprovalsPost200Response> {
            return localVarFp.apiV1SecretApprovalsSapIdPatch(requestParameters.sapId, requestParameters.apiV1SecretApprovalsSapIdPatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Get secret imports
         * @param {DefaultApiApiV1SecretImportsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SecretImportsGet(requestParameters: DefaultApiApiV1SecretImportsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1SecretImportsGet200Response> {
            return localVarFp.apiV1SecretImportsGet(requestParameters.workspaceId, requestParameters.environment, requestParameters.path, options).then((request) => request(axios, basePath));
        },
        /**
         * Create secret imports
         * @param {DefaultApiApiV1SecretImportsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SecretImportsPost(requestParameters: DefaultApiApiV1SecretImportsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1SecretImportsPost200Response> {
            return localVarFp.apiV1SecretImportsPost(requestParameters.apiV1SecretImportsPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete secret imports
         * @param {DefaultApiApiV1SecretImportsSecretImportIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SecretImportsSecretImportIdDelete(requestParameters: DefaultApiApiV1SecretImportsSecretImportIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1SecretImportsPost200Response> {
            return localVarFp.apiV1SecretImportsSecretImportIdDelete(requestParameters.secretImportId, requestParameters.apiV1SecretImportsSecretImportIdDeleteRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Update secret imports
         * @param {DefaultApiApiV1SecretImportsSecretImportIdPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SecretImportsSecretImportIdPatch(requestParameters: DefaultApiApiV1SecretImportsSecretImportIdPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1SecretImportsPost200Response> {
            return localVarFp.apiV1SecretImportsSecretImportIdPatch(requestParameters.secretImportId, requestParameters.apiV1SecretImportsSecretImportIdPatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Resync secret replication of secret imports
         * @param {DefaultApiApiV1SecretImportsSecretImportIdReplicationResyncPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SecretImportsSecretImportIdReplicationResyncPost(requestParameters: DefaultApiApiV1SecretImportsSecretImportIdReplicationResyncPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1WorkspaceWorkspaceIdMigrateV3Post200Response> {
            return localVarFp.apiV1SecretImportsSecretImportIdReplicationResyncPost(requestParameters.secretImportId, requestParameters.apiV1SecretImportsSecretImportIdReplicationResyncPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1SecretImportsSecretsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SecretImportsSecretsGet(requestParameters: DefaultApiApiV1SecretImportsSecretsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1SecretImportsSecretsGet200Response> {
            return localVarFp.apiV1SecretImportsSecretsGet(requestParameters.workspaceId, requestParameters.environment, requestParameters.path, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1SecretImportsSecretsRawGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SecretImportsSecretsRawGet(requestParameters: DefaultApiApiV1SecretImportsSecretsRawGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1SecretImportsSecretsRawGet200Response> {
            return localVarFp.apiV1SecretImportsSecretsRawGet(requestParameters.workspaceId, requestParameters.environment, requestParameters.path, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1SecretRotationProvidersWorkspaceIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SecretRotationProvidersWorkspaceIdGet(requestParameters: DefaultApiApiV1SecretRotationProvidersWorkspaceIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1SecretRotationProvidersWorkspaceIdGet200Response> {
            return localVarFp.apiV1SecretRotationProvidersWorkspaceIdGet(requestParameters.workspaceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1SecretRotationsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SecretRotationsGet(requestParameters: DefaultApiApiV1SecretRotationsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1SecretRotationsGet200Response> {
            return localVarFp.apiV1SecretRotationsGet(requestParameters.workspaceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1SecretRotationsIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SecretRotationsIdDelete(requestParameters: DefaultApiApiV1SecretRotationsIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1SecretRotationsRestartPost200Response> {
            return localVarFp.apiV1SecretRotationsIdDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1SecretRotationsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SecretRotationsPost(requestParameters: DefaultApiApiV1SecretRotationsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1SecretRotationsPost200Response> {
            return localVarFp.apiV1SecretRotationsPost(requestParameters.apiV1SecretRotationsPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1SecretRotationsRestartPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SecretRotationsRestartPost(requestParameters: DefaultApiApiV1SecretRotationsRestartPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1SecretRotationsRestartPost200Response> {
            return localVarFp.apiV1SecretRotationsRestartPost(requestParameters.apiV1SecretRotationsRestartPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1SecretScanningCreateInstallationSessionOrganizationPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SecretScanningCreateInstallationSessionOrganizationPost(requestParameters: DefaultApiApiV1SecretScanningCreateInstallationSessionOrganizationPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1SecretScanningCreateInstallationSessionOrganizationPost200Response> {
            return localVarFp.apiV1SecretScanningCreateInstallationSessionOrganizationPost(requestParameters.apiV1SecretScanningCreateInstallationSessionOrganizationPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1SecretScanningInstallationStatusOrganizationOrganizationIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SecretScanningInstallationStatusOrganizationOrganizationIdGet(requestParameters: DefaultApiApiV1SecretScanningInstallationStatusOrganizationOrganizationIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1SecretScanningInstallationStatusOrganizationOrganizationIdGet200Response> {
            return localVarFp.apiV1SecretScanningInstallationStatusOrganizationOrganizationIdGet(requestParameters.organizationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1SecretScanningLinkInstallationPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SecretScanningLinkInstallationPost(requestParameters: DefaultApiApiV1SecretScanningLinkInstallationPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1SecretScanningLinkInstallationPost200Response> {
            return localVarFp.apiV1SecretScanningLinkInstallationPost(requestParameters.apiV1SecretScanningLinkInstallationPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1SecretScanningOrganizationOrganizationIdRisksGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SecretScanningOrganizationOrganizationIdRisksGet(requestParameters: DefaultApiApiV1SecretScanningOrganizationOrganizationIdRisksGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1SecretScanningOrganizationOrganizationIdRisksGet200Response> {
            return localVarFp.apiV1SecretScanningOrganizationOrganizationIdRisksGet(requestParameters.organizationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1SecretScanningOrganizationOrganizationIdRisksRiskIdStatusPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SecretScanningOrganizationOrganizationIdRisksRiskIdStatusPost(requestParameters: DefaultApiApiV1SecretScanningOrganizationOrganizationIdRisksRiskIdStatusPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1SecretScanningOrganizationOrganizationIdRisksGet200ResponseRisksInner> {
            return localVarFp.apiV1SecretScanningOrganizationOrganizationIdRisksRiskIdStatusPost(requestParameters.organizationId, requestParameters.riskId, requestParameters.apiV1SecretScanningOrganizationOrganizationIdRisksRiskIdStatusPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1SecretSecretIdSecretVersionsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SecretSecretIdSecretVersionsGet(requestParameters: DefaultApiApiV1SecretSecretIdSecretVersionsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1SecretSecretIdSecretVersionsGet200Response> {
            return localVarFp.apiV1SecretSecretIdSecretVersionsGet(requestParameters.offset, requestParameters.limit, requestParameters.secretId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1SecretSharingGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SecretSharingGet(requestParameters: DefaultApiApiV1SecretSharingGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1SecretSharingGet200Response> {
            return localVarFp.apiV1SecretSharingGet(requestParameters.offset, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1SecretSharingPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SecretSharingPost(requestParameters: DefaultApiApiV1SecretSharingPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1SecretSharingPost200Response> {
            return localVarFp.apiV1SecretSharingPost(requestParameters.apiV1SecretSharingPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1SecretSharingPublicIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SecretSharingPublicIdGet(requestParameters: DefaultApiApiV1SecretSharingPublicIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1SecretSharingPublicIdGet200Response> {
            return localVarFp.apiV1SecretSharingPublicIdGet(requestParameters.hashedHex, requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1SecretSharingPublicPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SecretSharingPublicPost(requestParameters: DefaultApiApiV1SecretSharingPublicPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1SecretSharingPost200Response> {
            return localVarFp.apiV1SecretSharingPublicPost(requestParameters.apiV1SecretSharingPublicPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1SecretSharingSharedSecretIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SecretSharingSharedSecretIdDelete(requestParameters: DefaultApiApiV1SecretSharingSharedSecretIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1SecretSharingGet200ResponseSecretsInner> {
            return localVarFp.apiV1SecretSharingSharedSecretIdDelete(requestParameters.sharedSecretId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1SecretSnapshotSecretSnapshotIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SecretSnapshotSecretSnapshotIdGet(requestParameters: DefaultApiApiV1SecretSnapshotSecretSnapshotIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1SecretSnapshotSecretSnapshotIdGet200Response> {
            return localVarFp.apiV1SecretSnapshotSecretSnapshotIdGet(requestParameters.secretSnapshotId, options).then((request) => request(axios, basePath));
        },
        /**
         * Roll back project secrets to those captured in a secret snapshot version.
         * @param {DefaultApiApiV1SecretSnapshotSecretSnapshotIdRollbackPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SecretSnapshotSecretSnapshotIdRollbackPost(requestParameters: DefaultApiApiV1SecretSnapshotSecretSnapshotIdRollbackPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1SecretSnapshotSecretSnapshotIdRollbackPost200Response> {
            return localVarFp.apiV1SecretSnapshotSecretSnapshotIdRollbackPost(requestParameters.secretSnapshotId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1SsoConfigGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SsoConfigGet(requestParameters: DefaultApiApiV1SsoConfigGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1SsoConfigGet200Response> {
            return localVarFp.apiV1SsoConfigGet(requestParameters.organizationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1SsoConfigPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SsoConfigPatch(requestParameters: DefaultApiApiV1SsoConfigPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1SsoConfigPost200Response> {
            return localVarFp.apiV1SsoConfigPatch(requestParameters.apiV1SsoConfigPatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1SsoConfigPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SsoConfigPost(requestParameters: DefaultApiApiV1SsoConfigPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1SsoConfigPost200Response> {
            return localVarFp.apiV1SsoConfigPost(requestParameters.apiV1SsoConfigPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SsoGithubGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiV1SsoGithubGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SsoGitlabGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiV1SsoGitlabGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SsoGoogleGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiV1SsoGoogleGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SsoOidcCallbackGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiV1SsoOidcCallbackGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1SsoOidcConfigGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SsoOidcConfigGet(requestParameters: DefaultApiApiV1SsoOidcConfigGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1SsoOidcConfigGet200Response> {
            return localVarFp.apiV1SsoOidcConfigGet(requestParameters.orgSlug, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1SsoOidcConfigPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SsoOidcConfigPatch(requestParameters: DefaultApiApiV1SsoOidcConfigPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1SsoOidcConfigPatch200Response> {
            return localVarFp.apiV1SsoOidcConfigPatch(requestParameters.apiV1SsoOidcConfigPatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1SsoOidcConfigPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SsoOidcConfigPost(requestParameters: DefaultApiApiV1SsoOidcConfigPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1SsoOidcConfigPost200Response> {
            return localVarFp.apiV1SsoOidcConfigPost(requestParameters.apiV1SsoOidcConfigPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SsoOidcLoginErrorGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiV1SsoOidcLoginErrorGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1SsoOidcLoginGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SsoOidcLoginGet(requestParameters: DefaultApiApiV1SsoOidcLoginGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiV1SsoOidcLoginGet(requestParameters.orgSlug, requestParameters.callbackPort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1SsoRedirectGithubGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SsoRedirectGithubGet(requestParameters: DefaultApiApiV1SsoRedirectGithubGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiV1SsoRedirectGithubGet(requestParameters.callbackPort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1SsoRedirectGitlabGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SsoRedirectGitlabGet(requestParameters: DefaultApiApiV1SsoRedirectGitlabGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiV1SsoRedirectGitlabGet(requestParameters.callbackPort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1SsoRedirectGoogleGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SsoRedirectGoogleGet(requestParameters: DefaultApiApiV1SsoRedirectGoogleGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiV1SsoRedirectGoogleGet(requestParameters.callbackPort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1SsoRedirectSaml2OrganizationsOrgSlugGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SsoRedirectSaml2OrganizationsOrgSlugGet(requestParameters: DefaultApiApiV1SsoRedirectSaml2OrganizationsOrgSlugGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiV1SsoRedirectSaml2OrganizationsOrgSlugGet(requestParameters.orgSlug, requestParameters.callbackPort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1SsoRedirectSaml2SamlConfigIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SsoRedirectSaml2SamlConfigIdGet(requestParameters: DefaultApiApiV1SsoRedirectSaml2SamlConfigIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiV1SsoRedirectSaml2SamlConfigIdGet(requestParameters.samlConfigId, requestParameters.callbackPort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1SsoSaml2SamlConfigIdPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SsoSaml2SamlConfigIdPost(requestParameters: DefaultApiApiV1SsoSaml2SamlConfigIdPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiV1SsoSaml2SamlConfigIdPost(requestParameters.samlConfigId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1SsoTokenExchangePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SsoTokenExchangePost(requestParameters: DefaultApiApiV1SsoTokenExchangePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiV1SsoTokenExchangePost(requestParameters.apiV1SsoTokenExchangePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1UserActionGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserActionGet(requestParameters: DefaultApiApiV1UserActionGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1UserActionGet200Response> {
            return localVarFp.apiV1UserActionGet(requestParameters.action, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1UserActionPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserActionPost(requestParameters: DefaultApiApiV1UserActionPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1UserActionPost200Response> {
            return localVarFp.apiV1UserActionPost(requestParameters.apiV1UserActionPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1UserEngagementMeWishPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserEngagementMeWishPost(requestParameters: DefaultApiApiV1UserEngagementMeWishPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.apiV1UserEngagementMeWishPost(requestParameters.apiV1UserEngagementMeWishPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserGet(options?: RawAxiosRequestConfig): AxiosPromise<ApiV1UserGet200Response> {
            return localVarFp.apiV1UserGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1UserMeProjectFavoritesGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserMeProjectFavoritesGet(requestParameters: DefaultApiApiV1UserMeProjectFavoritesGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1UserMeProjectFavoritesGet200Response> {
            return localVarFp.apiV1UserMeProjectFavoritesGet(requestParameters.orgId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1UserMeProjectFavoritesPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserMeProjectFavoritesPut(requestParameters: DefaultApiApiV1UserMeProjectFavoritesPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiV1UserMeProjectFavoritesPut(requestParameters.apiV1UserMeProjectFavoritesPutRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserPrivateKeyGet(options?: RawAxiosRequestConfig): AxiosPromise<ApiV1UserPrivateKeyGet200Response> {
            return localVarFp.apiV1UserPrivateKeyGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1UserUserIdUnlockGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1UserUserIdUnlockGet(requestParameters: DefaultApiApiV1UserUserIdUnlockGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiV1UserUserIdUnlockGet(requestParameters.token, requestParameters.userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1WebhooksGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WebhooksGet(requestParameters: DefaultApiApiV1WebhooksGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1WebhooksGet200Response> {
            return localVarFp.apiV1WebhooksGet(requestParameters.workspaceId, requestParameters.environment, requestParameters.secretPath, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1WebhooksPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WebhooksPost(requestParameters: DefaultApiApiV1WebhooksPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1WebhooksPost200Response> {
            return localVarFp.apiV1WebhooksPost(requestParameters.apiV1WebhooksPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1WebhooksWebhookIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WebhooksWebhookIdDelete(requestParameters: DefaultApiApiV1WebhooksWebhookIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiV1WebhooksWebhookIdDelete(requestParameters.webhookId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1WebhooksWebhookIdPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WebhooksWebhookIdPatch(requestParameters: DefaultApiApiV1WebhooksWebhookIdPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1WebhooksPost200Response> {
            return localVarFp.apiV1WebhooksWebhookIdPatch(requestParameters.webhookId, requestParameters.apiV1WebhooksWebhookIdPatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1WebhooksWebhookIdTestPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WebhooksWebhookIdTestPost(requestParameters: DefaultApiApiV1WebhooksWebhookIdTestPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1WebhooksPost200Response> {
            return localVarFp.apiV1WebhooksWebhookIdTestPost(requestParameters.webhookId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1WorkspaceGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceGet(requestParameters: DefaultApiApiV1WorkspaceGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1WorkspaceGet200Response> {
            return localVarFp.apiV1WorkspaceGet(requestParameters.includeRoles, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1WorkspaceProjectIdPermissionsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceProjectIdPermissionsGet(requestParameters: DefaultApiApiV1WorkspaceProjectIdPermissionsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1WorkspaceProjectIdPermissionsGet200Response> {
            return localVarFp.apiV1WorkspaceProjectIdPermissionsGet(requestParameters.projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1WorkspaceProjectIdTagsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceProjectIdTagsGet(requestParameters: DefaultApiApiV1WorkspaceProjectIdTagsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1WorkspaceProjectIdTagsGet200Response> {
            return localVarFp.apiV1WorkspaceProjectIdTagsGet(requestParameters.projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1WorkspaceProjectIdTagsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceProjectIdTagsPost(requestParameters: DefaultApiApiV1WorkspaceProjectIdTagsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1WorkspaceProjectIdTagsPost200Response> {
            return localVarFp.apiV1WorkspaceProjectIdTagsPost(requestParameters.projectId, requestParameters.apiV1WorkspaceProjectIdTagsPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1WorkspaceProjectIdTagsSlugTagSlugGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceProjectIdTagsSlugTagSlugGet(requestParameters: DefaultApiApiV1WorkspaceProjectIdTagsSlugTagSlugGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1WorkspaceProjectIdTagsTagIdGet200Response> {
            return localVarFp.apiV1WorkspaceProjectIdTagsSlugTagSlugGet(requestParameters.projectId, requestParameters.tagSlug, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1WorkspaceProjectIdTagsTagIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceProjectIdTagsTagIdDelete(requestParameters: DefaultApiApiV1WorkspaceProjectIdTagsTagIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1WorkspaceProjectIdTagsPost200Response> {
            return localVarFp.apiV1WorkspaceProjectIdTagsTagIdDelete(requestParameters.projectId, requestParameters.tagId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1WorkspaceProjectIdTagsTagIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceProjectIdTagsTagIdGet(requestParameters: DefaultApiApiV1WorkspaceProjectIdTagsTagIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1WorkspaceProjectIdTagsTagIdGet200Response> {
            return localVarFp.apiV1WorkspaceProjectIdTagsTagIdGet(requestParameters.projectId, requestParameters.tagId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1WorkspaceProjectIdTagsTagIdPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceProjectIdTagsTagIdPatch(requestParameters: DefaultApiApiV1WorkspaceProjectIdTagsTagIdPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1WorkspaceProjectIdTagsPost200Response> {
            return localVarFp.apiV1WorkspaceProjectIdTagsTagIdPatch(requestParameters.projectId, requestParameters.tagId, requestParameters.apiV1WorkspaceProjectIdTagsTagIdPatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * List project role
         * @param {DefaultApiApiV1WorkspaceProjectSlugRolesGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceProjectSlugRolesGet(requestParameters: DefaultApiApiV1WorkspaceProjectSlugRolesGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1WorkspaceProjectSlugRolesGet200Response> {
            return localVarFp.apiV1WorkspaceProjectSlugRolesGet(requestParameters.projectSlug, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a project role
         * @param {DefaultApiApiV1WorkspaceProjectSlugRolesPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceProjectSlugRolesPost(requestParameters: DefaultApiApiV1WorkspaceProjectSlugRolesPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1WorkspaceProjectSlugRolesPost200Response> {
            return localVarFp.apiV1WorkspaceProjectSlugRolesPost(requestParameters.projectSlug, requestParameters.apiV1WorkspaceProjectSlugRolesPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a project role
         * @param {DefaultApiApiV1WorkspaceProjectSlugRolesRoleIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceProjectSlugRolesRoleIdDelete(requestParameters: DefaultApiApiV1WorkspaceProjectSlugRolesRoleIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1WorkspaceProjectSlugRolesPost200Response> {
            return localVarFp.apiV1WorkspaceProjectSlugRolesRoleIdDelete(requestParameters.projectSlug, requestParameters.roleId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a project role
         * @param {DefaultApiApiV1WorkspaceProjectSlugRolesRoleIdPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceProjectSlugRolesRoleIdPatch(requestParameters: DefaultApiApiV1WorkspaceProjectSlugRolesRoleIdPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1WorkspaceProjectSlugRolesPost200Response> {
            return localVarFp.apiV1WorkspaceProjectSlugRolesRoleIdPatch(requestParameters.projectSlug, requestParameters.roleId, requestParameters.apiV1WorkspaceProjectSlugRolesRoleIdPatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1WorkspaceProjectSlugRolesSlugSlugGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceProjectSlugRolesSlugSlugGet(requestParameters: DefaultApiApiV1WorkspaceProjectSlugRolesSlugSlugGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1WorkspaceProjectSlugRolesPost200Response> {
            return localVarFp.apiV1WorkspaceProjectSlugRolesSlugSlugGet(requestParameters.projectSlug, requestParameters.slug, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1WorkspaceWorkspaceIdAuditLogsFiltersActorsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceWorkspaceIdAuditLogsFiltersActorsGet(requestParameters: DefaultApiApiV1WorkspaceWorkspaceIdAuditLogsFiltersActorsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1WorkspaceWorkspaceIdAuditLogsFiltersActorsGet200Response> {
            return localVarFp.apiV1WorkspaceWorkspaceIdAuditLogsFiltersActorsGet(requestParameters.workspaceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Return audit logs
         * @param {DefaultApiApiV1WorkspaceWorkspaceIdAuditLogsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceWorkspaceIdAuditLogsGet(requestParameters: DefaultApiApiV1WorkspaceWorkspaceIdAuditLogsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1WorkspaceWorkspaceIdAuditLogsGet200Response> {
            return localVarFp.apiV1WorkspaceWorkspaceIdAuditLogsGet(requestParameters.workspaceId, requestParameters.eventType, requestParameters.userAgentType, requestParameters.startDate, requestParameters.endDate, requestParameters.offset, requestParameters.limit, requestParameters.actor, options).then((request) => request(axios, basePath));
        },
        /**
         * List integration auth objects for a workspace.
         * @param {DefaultApiApiV1WorkspaceWorkspaceIdAuthorizationsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceWorkspaceIdAuthorizationsGet(requestParameters: DefaultApiApiV1WorkspaceWorkspaceIdAuthorizationsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1WorkspaceWorkspaceIdAuthorizationsGet200Response> {
            return localVarFp.apiV1WorkspaceWorkspaceIdAuthorizationsGet(requestParameters.workspaceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1WorkspaceWorkspaceIdAutoCapitalizationPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceWorkspaceIdAutoCapitalizationPost(requestParameters: DefaultApiApiV1WorkspaceWorkspaceIdAutoCapitalizationPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1WorkspaceWorkspaceIdNamePost200Response> {
            return localVarFp.apiV1WorkspaceWorkspaceIdAutoCapitalizationPost(requestParameters.workspaceId, requestParameters.apiV1WorkspaceWorkspaceIdAutoCapitalizationPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete project
         * @param {DefaultApiApiV1WorkspaceWorkspaceIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceWorkspaceIdDelete(requestParameters: DefaultApiApiV1WorkspaceWorkspaceIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1WorkspaceWorkspaceIdDelete200Response> {
            return localVarFp.apiV1WorkspaceWorkspaceIdDelete(requestParameters.workspaceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Environment
         * @param {DefaultApiApiV1WorkspaceWorkspaceIdEnvironmentsEnvIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceWorkspaceIdEnvironmentsEnvIdGet(requestParameters: DefaultApiApiV1WorkspaceWorkspaceIdEnvironmentsEnvIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1WorkspaceWorkspaceIdEnvironmentsEnvIdGet200Response> {
            return localVarFp.apiV1WorkspaceWorkspaceIdEnvironmentsEnvIdGet(requestParameters.workspaceId, requestParameters.envId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete environment
         * @param {DefaultApiApiV1WorkspaceWorkspaceIdEnvironmentsIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceWorkspaceIdEnvironmentsIdDelete(requestParameters: DefaultApiApiV1WorkspaceWorkspaceIdEnvironmentsIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1WorkspaceWorkspaceIdEnvironmentsPost200Response> {
            return localVarFp.apiV1WorkspaceWorkspaceIdEnvironmentsIdDelete(requestParameters.workspaceId, requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Update environment
         * @param {DefaultApiApiV1WorkspaceWorkspaceIdEnvironmentsIdPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceWorkspaceIdEnvironmentsIdPatch(requestParameters: DefaultApiApiV1WorkspaceWorkspaceIdEnvironmentsIdPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1WorkspaceWorkspaceIdEnvironmentsPost200Response> {
            return localVarFp.apiV1WorkspaceWorkspaceIdEnvironmentsIdPatch(requestParameters.workspaceId, requestParameters.id, requestParameters.apiV1WorkspaceWorkspaceIdEnvironmentsIdPatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Create environment
         * @param {DefaultApiApiV1WorkspaceWorkspaceIdEnvironmentsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceWorkspaceIdEnvironmentsPost(requestParameters: DefaultApiApiV1WorkspaceWorkspaceIdEnvironmentsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1WorkspaceWorkspaceIdEnvironmentsPost200Response> {
            return localVarFp.apiV1WorkspaceWorkspaceIdEnvironmentsPost(requestParameters.workspaceId, requestParameters.apiV1WorkspaceWorkspaceIdEnvironmentsPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Get project
         * @param {DefaultApiApiV1WorkspaceWorkspaceIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceWorkspaceIdGet(requestParameters: DefaultApiApiV1WorkspaceWorkspaceIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1WorkspaceWorkspaceIdGet200Response> {
            return localVarFp.apiV1WorkspaceWorkspaceIdGet(requestParameters.workspaceId, options).then((request) => request(axios, basePath));
        },
        /**
         * List integrations for a project.
         * @param {DefaultApiApiV1WorkspaceWorkspaceIdIntegrationsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceWorkspaceIdIntegrationsGet(requestParameters: DefaultApiApiV1WorkspaceWorkspaceIdIntegrationsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1WorkspaceWorkspaceIdIntegrationsGet200Response> {
            return localVarFp.apiV1WorkspaceWorkspaceIdIntegrationsGet(requestParameters.workspaceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1WorkspaceWorkspaceIdKeyPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceWorkspaceIdKeyPost(requestParameters: DefaultApiApiV1WorkspaceWorkspaceIdKeyPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1WorkspaceWorkspaceIdMigrateV3Post200Response> {
            return localVarFp.apiV1WorkspaceWorkspaceIdKeyPost(requestParameters.workspaceId, requestParameters.apiV1WorkspaceWorkspaceIdKeyPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1WorkspaceWorkspaceIdKeysGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceWorkspaceIdKeysGet(requestParameters: DefaultApiApiV1WorkspaceWorkspaceIdKeysGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1WorkspaceWorkspaceIdKeysGet200Response> {
            return localVarFp.apiV1WorkspaceWorkspaceIdKeysGet(requestParameters.workspaceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1WorkspaceWorkspaceIdKmsBackupGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceWorkspaceIdKmsBackupGet(requestParameters: DefaultApiApiV1WorkspaceWorkspaceIdKmsBackupGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1WorkspaceWorkspaceIdKmsBackupGet200Response> {
            return localVarFp.apiV1WorkspaceWorkspaceIdKmsBackupGet(requestParameters.workspaceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1WorkspaceWorkspaceIdKmsBackupPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceWorkspaceIdKmsBackupPost(requestParameters: DefaultApiApiV1WorkspaceWorkspaceIdKmsBackupPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1WorkspaceWorkspaceIdKmsGet200Response> {
            return localVarFp.apiV1WorkspaceWorkspaceIdKmsBackupPost(requestParameters.workspaceId, requestParameters.apiV1WorkspaceWorkspaceIdKmsBackupPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1WorkspaceWorkspaceIdKmsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceWorkspaceIdKmsGet(requestParameters: DefaultApiApiV1WorkspaceWorkspaceIdKmsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1WorkspaceWorkspaceIdKmsGet200Response> {
            return localVarFp.apiV1WorkspaceWorkspaceIdKmsGet(requestParameters.workspaceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1WorkspaceWorkspaceIdKmsPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceWorkspaceIdKmsPatch(requestParameters: DefaultApiApiV1WorkspaceWorkspaceIdKmsPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1WorkspaceWorkspaceIdKmsGet200Response> {
            return localVarFp.apiV1WorkspaceWorkspaceIdKmsPatch(requestParameters.workspaceId, requestParameters.apiV1WorkspaceWorkspaceIdKmsPatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1WorkspaceWorkspaceIdLeaveDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceWorkspaceIdLeaveDelete(requestParameters: DefaultApiApiV1WorkspaceWorkspaceIdLeaveDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1OrganizationAdminProjectsProjectIdGrantAdminAccessPost200Response> {
            return localVarFp.apiV1WorkspaceWorkspaceIdLeaveDelete(requestParameters.workspaceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Return project user memberships
         * @param {DefaultApiApiV1WorkspaceWorkspaceIdMembershipsDetailsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceWorkspaceIdMembershipsDetailsPost(requestParameters: DefaultApiApiV1WorkspaceWorkspaceIdMembershipsDetailsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1WorkspaceWorkspaceIdMembershipsDetailsPost200Response> {
            return localVarFp.apiV1WorkspaceWorkspaceIdMembershipsDetailsPost(requestParameters.workspaceId, requestParameters.apiV1WorkspaceWorkspaceIdMembershipsDetailsPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Return project user memberships
         * @param {DefaultApiApiV1WorkspaceWorkspaceIdMembershipsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceWorkspaceIdMembershipsGet(requestParameters: DefaultApiApiV1WorkspaceWorkspaceIdMembershipsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1WorkspaceWorkspaceIdMembershipsGet200Response> {
            return localVarFp.apiV1WorkspaceWorkspaceIdMembershipsGet(requestParameters.workspaceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete project user membership
         * @param {DefaultApiApiV1WorkspaceWorkspaceIdMembershipsMembershipIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceWorkspaceIdMembershipsMembershipIdDelete(requestParameters: DefaultApiApiV1WorkspaceWorkspaceIdMembershipsMembershipIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1OrganizationAdminProjectsProjectIdGrantAdminAccessPost200Response> {
            return localVarFp.apiV1WorkspaceWorkspaceIdMembershipsMembershipIdDelete(requestParameters.workspaceId, requestParameters.membershipId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update project user membership
         * @param {DefaultApiApiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatch(requestParameters: DefaultApiApiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatch200Response> {
            return localVarFp.apiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatch(requestParameters.workspaceId, requestParameters.membershipId, requestParameters.apiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1WorkspaceWorkspaceIdMembershipsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceWorkspaceIdMembershipsPost(requestParameters: DefaultApiApiV1WorkspaceWorkspaceIdMembershipsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1WorkspaceWorkspaceIdMembershipsPost200Response> {
            return localVarFp.apiV1WorkspaceWorkspaceIdMembershipsPost(requestParameters.workspaceId, requestParameters.apiV1WorkspaceWorkspaceIdMembershipsPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1WorkspaceWorkspaceIdMigrateV3PostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceWorkspaceIdMigrateV3Post(requestParameters: DefaultApiApiV1WorkspaceWorkspaceIdMigrateV3PostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1WorkspaceWorkspaceIdMigrateV3Post200Response> {
            return localVarFp.apiV1WorkspaceWorkspaceIdMigrateV3Post(requestParameters.workspaceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1WorkspaceWorkspaceIdNamePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceWorkspaceIdNamePost(requestParameters: DefaultApiApiV1WorkspaceWorkspaceIdNamePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1WorkspaceWorkspaceIdNamePost200Response> {
            return localVarFp.apiV1WorkspaceWorkspaceIdNamePost(requestParameters.workspaceId, requestParameters.apiV1WorkspaceWorkspaceIdNamePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Update project
         * @param {DefaultApiApiV1WorkspaceWorkspaceIdPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceWorkspaceIdPatch(requestParameters: DefaultApiApiV1WorkspaceWorkspaceIdPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1WorkspaceWorkspaceIdPatch200Response> {
            return localVarFp.apiV1WorkspaceWorkspaceIdPatch(requestParameters.workspaceId, requestParameters.apiV1WorkspaceWorkspaceIdPatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1WorkspaceWorkspaceIdSecretSnapshotsCountGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceWorkspaceIdSecretSnapshotsCountGet(requestParameters: DefaultApiApiV1WorkspaceWorkspaceIdSecretSnapshotsCountGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1WorkspaceWorkspaceIdSecretSnapshotsCountGet200Response> {
            return localVarFp.apiV1WorkspaceWorkspaceIdSecretSnapshotsCountGet(requestParameters.environment, requestParameters.workspaceId, requestParameters.path, options).then((request) => request(axios, basePath));
        },
        /**
         * Return project secret snapshots ids
         * @param {DefaultApiApiV1WorkspaceWorkspaceIdSecretSnapshotsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceWorkspaceIdSecretSnapshotsGet(requestParameters: DefaultApiApiV1WorkspaceWorkspaceIdSecretSnapshotsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1WorkspaceWorkspaceIdSecretSnapshotsGet200Response> {
            return localVarFp.apiV1WorkspaceWorkspaceIdSecretSnapshotsGet(requestParameters.environment, requestParameters.workspaceId, requestParameters.path, requestParameters.offset, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1WorkspaceWorkspaceIdServiceTokenDataGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceWorkspaceIdServiceTokenDataGet(requestParameters: DefaultApiApiV1WorkspaceWorkspaceIdServiceTokenDataGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1WorkspaceWorkspaceIdServiceTokenDataGet200Response> {
            return localVarFp.apiV1WorkspaceWorkspaceIdServiceTokenDataGet(requestParameters.workspaceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1WorkspaceWorkspaceIdTrustedIpsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceWorkspaceIdTrustedIpsGet(requestParameters: DefaultApiApiV1WorkspaceWorkspaceIdTrustedIpsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1WorkspaceWorkspaceIdTrustedIpsGet200Response> {
            return localVarFp.apiV1WorkspaceWorkspaceIdTrustedIpsGet(requestParameters.workspaceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1WorkspaceWorkspaceIdTrustedIpsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceWorkspaceIdTrustedIpsPost(requestParameters: DefaultApiApiV1WorkspaceWorkspaceIdTrustedIpsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1WorkspaceWorkspaceIdTrustedIpsPost200Response> {
            return localVarFp.apiV1WorkspaceWorkspaceIdTrustedIpsPost(requestParameters.workspaceId, requestParameters.apiV1WorkspaceWorkspaceIdTrustedIpsPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1WorkspaceWorkspaceIdTrustedIpsTrustedIpIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceWorkspaceIdTrustedIpsTrustedIpIdDelete(requestParameters: DefaultApiApiV1WorkspaceWorkspaceIdTrustedIpsTrustedIpIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1WorkspaceWorkspaceIdTrustedIpsPost200Response> {
            return localVarFp.apiV1WorkspaceWorkspaceIdTrustedIpsTrustedIpIdDelete(requestParameters.workspaceId, requestParameters.trustedIpId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1WorkspaceWorkspaceIdTrustedIpsTrustedIpIdPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceWorkspaceIdTrustedIpsTrustedIpIdPatch(requestParameters: DefaultApiApiV1WorkspaceWorkspaceIdTrustedIpsTrustedIpIdPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1WorkspaceWorkspaceIdTrustedIpsPost200Response> {
            return localVarFp.apiV1WorkspaceWorkspaceIdTrustedIpsTrustedIpIdPatch(requestParameters.workspaceId, requestParameters.trustedIpId, requestParameters.apiV1WorkspaceWorkspaceIdTrustedIpsTrustedIpIdPatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1WorkspaceWorkspaceIdUsersGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceWorkspaceIdUsersGet(requestParameters: DefaultApiApiV1WorkspaceWorkspaceIdUsersGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1WorkspaceWorkspaceIdUsersGet200Response> {
            return localVarFp.apiV1WorkspaceWorkspaceIdUsersGet(requestParameters.workspaceId, requestParameters.includeGroupMembers, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1WorkspaceWorkspaceSlugAuditLogsRetentionPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceWorkspaceSlugAuditLogsRetentionPut(requestParameters: DefaultApiApiV1WorkspaceWorkspaceSlugAuditLogsRetentionPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1WorkspaceWorkspaceIdNamePost200Response> {
            return localVarFp.apiV1WorkspaceWorkspaceSlugAuditLogsRetentionPut(requestParameters.workspaceSlug, requestParameters.apiV1WorkspaceWorkspaceSlugAuditLogsRetentionPutRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV1WorkspaceWorkspaceSlugVersionLimitPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1WorkspaceWorkspaceSlugVersionLimitPut(requestParameters: DefaultApiApiV1WorkspaceWorkspaceSlugVersionLimitPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1WorkspaceWorkspaceIdNamePost200Response> {
            return localVarFp.apiV1WorkspaceWorkspaceSlugVersionLimitPut(requestParameters.workspaceSlug, requestParameters.apiV1WorkspaceWorkspaceSlugVersionLimitPutRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AuthMfaSendPost(options?: RawAxiosRequestConfig): AxiosPromise<ApiV1WorkspaceWorkspaceIdMigrateV3Post200Response> {
            return localVarFp.apiV2AuthMfaSendPost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV2AuthMfaVerifyPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2AuthMfaVerifyPost(requestParameters: DefaultApiApiV2AuthMfaVerifyPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV2AuthMfaVerifyPost200Response> {
            return localVarFp.apiV2AuthMfaVerifyPost(requestParameters.apiV2AuthMfaVerifyPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Return organization identity memberships
         * @param {DefaultApiApiV2OrganizationsOrgIdIdentityMembershipsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2OrganizationsOrgIdIdentityMembershipsGet(requestParameters: DefaultApiApiV2OrganizationsOrgIdIdentityMembershipsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV2OrganizationsOrgIdIdentityMembershipsGet200Response> {
            return localVarFp.apiV2OrganizationsOrgIdIdentityMembershipsGet(requestParameters.orgId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV2OrganizationsOrganizationIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2OrganizationsOrganizationIdDelete(requestParameters: DefaultApiApiV2OrganizationsOrganizationIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1OrganizationOrganizationIdGet200Response> {
            return localVarFp.apiV2OrganizationsOrganizationIdDelete(requestParameters.organizationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Return organization user memberships
         * @param {DefaultApiApiV2OrganizationsOrganizationIdMembershipsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2OrganizationsOrganizationIdMembershipsGet(requestParameters: DefaultApiApiV2OrganizationsOrganizationIdMembershipsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV2OrganizationsOrganizationIdMembershipsGet200Response> {
            return localVarFp.apiV2OrganizationsOrganizationIdMembershipsGet(requestParameters.organizationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete organization user memberships
         * @param {DefaultApiApiV2OrganizationsOrganizationIdMembershipsMembershipIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2OrganizationsOrganizationIdMembershipsMembershipIdDelete(requestParameters: DefaultApiApiV2OrganizationsOrganizationIdMembershipsMembershipIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV2OrganizationsOrganizationIdMembershipsMembershipIdDelete200Response> {
            return localVarFp.apiV2OrganizationsOrganizationIdMembershipsMembershipIdDelete(requestParameters.organizationId, requestParameters.membershipId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get organization user membership
         * @param {DefaultApiApiV2OrganizationsOrganizationIdMembershipsMembershipIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2OrganizationsOrganizationIdMembershipsMembershipIdGet(requestParameters: DefaultApiApiV2OrganizationsOrganizationIdMembershipsMembershipIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV2OrganizationsOrganizationIdMembershipsMembershipIdGet200Response> {
            return localVarFp.apiV2OrganizationsOrganizationIdMembershipsMembershipIdGet(requestParameters.organizationId, requestParameters.membershipId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update organization user memberships
         * @param {DefaultApiApiV2OrganizationsOrganizationIdMembershipsMembershipIdPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2OrganizationsOrganizationIdMembershipsMembershipIdPatch(requestParameters: DefaultApiApiV2OrganizationsOrganizationIdMembershipsMembershipIdPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV2OrganizationsOrganizationIdMembershipsMembershipIdDelete200Response> {
            return localVarFp.apiV2OrganizationsOrganizationIdMembershipsMembershipIdPatch(requestParameters.organizationId, requestParameters.membershipId, requestParameters.apiV2OrganizationsOrganizationIdMembershipsMembershipIdPatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Get project memberships given organization membership
         * @param {DefaultApiApiV2OrganizationsOrganizationIdMembershipsMembershipIdProjectMembershipsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2OrganizationsOrganizationIdMembershipsMembershipIdProjectMembershipsGet(requestParameters: DefaultApiApiV2OrganizationsOrganizationIdMembershipsMembershipIdProjectMembershipsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV2OrganizationsOrganizationIdMembershipsMembershipIdProjectMembershipsGet200Response> {
            return localVarFp.apiV2OrganizationsOrganizationIdMembershipsMembershipIdProjectMembershipsGet(requestParameters.organizationId, requestParameters.membershipId, options).then((request) => request(axios, basePath));
        },
        /**
         * Return projects in organization that user is part of
         * @param {DefaultApiApiV2OrganizationsOrganizationIdWorkspacesGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2OrganizationsOrganizationIdWorkspacesGet(requestParameters: DefaultApiApiV2OrganizationsOrganizationIdWorkspacesGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV2OrganizationsOrganizationIdWorkspacesGet200Response> {
            return localVarFp.apiV2OrganizationsOrganizationIdWorkspacesGet(requestParameters.organizationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV2OrganizationsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2OrganizationsPost(requestParameters: DefaultApiApiV2OrganizationsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1OrganizationOrganizationIdGet200Response> {
            return localVarFp.apiV2OrganizationsPost(requestParameters.apiV1WorkspaceWorkspaceIdNamePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Return Infisical Token data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2ServiceTokenGet(options?: RawAxiosRequestConfig): AxiosPromise<ApiV2ServiceTokenGet200Response> {
            return localVarFp.apiV2ServiceTokenGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV2ServiceTokenPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2ServiceTokenPost(requestParameters: DefaultApiApiV2ServiceTokenPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV2ServiceTokenPost200Response> {
            return localVarFp.apiV2ServiceTokenPost(requestParameters.apiV2ServiceTokenPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV2ServiceTokenServiceTokenIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2ServiceTokenServiceTokenIdDelete(requestParameters: DefaultApiApiV2ServiceTokenServiceTokenIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV2ServiceTokenServiceTokenIdDelete200Response> {
            return localVarFp.apiV2ServiceTokenServiceTokenIdDelete(requestParameters.serviceTokenId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV2UsersMeApiKeysApiKeyDataIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2UsersMeApiKeysApiKeyDataIdDelete(requestParameters: DefaultApiApiV2UsersMeApiKeysApiKeyDataIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV2UsersMeApiKeysApiKeyDataIdDelete200Response> {
            return localVarFp.apiV2UsersMeApiKeysApiKeyDataIdDelete(requestParameters.apiKeyDataId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2UsersMeApiKeysGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<ApiV2UsersMeApiKeysGet200ResponseInner>> {
            return localVarFp.apiV2UsersMeApiKeysGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV2UsersMeApiKeysPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2UsersMeApiKeysPost(requestParameters: DefaultApiApiV2UsersMeApiKeysPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV2UsersMeApiKeysPost200Response> {
            return localVarFp.apiV2UsersMeApiKeysPost(requestParameters.apiV2UsersMeApiKeysPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV2UsersMeAuthMethodsPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2UsersMeAuthMethodsPut(requestParameters: DefaultApiApiV2UsersMeAuthMethodsPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV2UsersMeMfaPatch200Response> {
            return localVarFp.apiV2UsersMeAuthMethodsPut(requestParameters.apiV2UsersMeAuthMethodsPutRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2UsersMeDelete(options?: RawAxiosRequestConfig): AxiosPromise<ApiV2UsersMeMfaPatch200Response> {
            return localVarFp.apiV2UsersMeDelete(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV2UsersMeEmailsCodePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2UsersMeEmailsCodePost(requestParameters: DefaultApiApiV2UsersMeEmailsCodePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.apiV2UsersMeEmailsCodePost(requestParameters.apiV2UsersMeEmailsCodePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV2UsersMeEmailsVerifyPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2UsersMeEmailsVerifyPost(requestParameters: DefaultApiApiV2UsersMeEmailsVerifyPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.apiV2UsersMeEmailsVerifyPost(requestParameters.apiV2UsersMeEmailsVerifyPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the current user on the request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2UsersMeGet(options?: RawAxiosRequestConfig): AxiosPromise<ApiV1UserGet200Response> {
            return localVarFp.apiV2UsersMeGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV2UsersMeMfaPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2UsersMeMfaPatch(requestParameters: DefaultApiApiV2UsersMeMfaPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV2UsersMeMfaPatch200Response> {
            return localVarFp.apiV2UsersMeMfaPatch(requestParameters.apiV2UsersMeMfaPatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV2UsersMeNamePatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2UsersMeNamePatch(requestParameters: DefaultApiApiV2UsersMeNamePatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV2UsersMeMfaPatch200Response> {
            return localVarFp.apiV2UsersMeNamePatch(requestParameters.apiV2UsersMeNamePatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Return organizations that current user is part of
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2UsersMeOrganizationsGet(options?: RawAxiosRequestConfig): AxiosPromise<ApiV1OrganizationGet200Response> {
            return localVarFp.apiV2UsersMeOrganizationsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2UsersMeSessionsDelete(options?: RawAxiosRequestConfig): AxiosPromise<ApiV1WorkspaceWorkspaceIdMigrateV3Post200Response> {
            return localVarFp.apiV2UsersMeSessionsDelete(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2UsersMeSessionsGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<ApiV2UsersMeSessionsGet200ResponseInner>> {
            return localVarFp.apiV2UsersMeSessionsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new project
         * @param {DefaultApiApiV2WorkspacePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2WorkspacePost(requestParameters: DefaultApiApiV2WorkspacePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV2WorkspacePost200Response> {
            return localVarFp.apiV2WorkspacePost(requestParameters.apiV2WorkspacePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV2WorkspaceProjectIdCertificateTemplatesGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2WorkspaceProjectIdCertificateTemplatesGet(requestParameters: DefaultApiApiV2WorkspaceProjectIdCertificateTemplatesGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV2WorkspaceProjectIdCertificateTemplatesGet200Response> {
            return localVarFp.apiV2WorkspaceProjectIdCertificateTemplatesGet(requestParameters.projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * Return project identity memberships
         * @param {DefaultApiApiV2WorkspaceProjectIdIdentityMembershipsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2WorkspaceProjectIdIdentityMembershipsGet(requestParameters: DefaultApiApiV2WorkspaceProjectIdIdentityMembershipsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1IdentitiesIdentityIdIdentityMembershipsGet200Response> {
            return localVarFp.apiV2WorkspaceProjectIdIdentityMembershipsGet(requestParameters.projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete project identity memberships
         * @param {DefaultApiApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2WorkspaceProjectIdIdentityMembershipsIdentityIdDelete(requestParameters: DefaultApiApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPost200Response> {
            return localVarFp.apiV2WorkspaceProjectIdIdentityMembershipsIdentityIdDelete(requestParameters.projectId, requestParameters.identityId, options).then((request) => request(axios, basePath));
        },
        /**
         * Return project identity membership
         * @param {DefaultApiApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2WorkspaceProjectIdIdentityMembershipsIdentityIdGet(requestParameters: DefaultApiApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdGet200Response> {
            return localVarFp.apiV2WorkspaceProjectIdIdentityMembershipsIdentityIdGet(requestParameters.projectId, requestParameters.identityId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update project identity memberships
         * @param {DefaultApiApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPatch(requestParameters: DefaultApiApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatch200Response> {
            return localVarFp.apiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPatch(requestParameters.projectId, requestParameters.identityId, requestParameters.apiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Create project identity membership
         * @param {DefaultApiApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPost(requestParameters: DefaultApiApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPost200Response> {
            return localVarFp.apiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPost(requestParameters.projectId, requestParameters.identityId, requestParameters.apiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove members from project
         * @param {DefaultApiApiV2WorkspaceProjectIdMembershipsDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2WorkspaceProjectIdMembershipsDelete(requestParameters: DefaultApiApiV2WorkspaceProjectIdMembershipsDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV2WorkspaceProjectIdMembershipsPost200Response> {
            return localVarFp.apiV2WorkspaceProjectIdMembershipsDelete(requestParameters.projectId, requestParameters.apiV2WorkspaceProjectIdMembershipsDeleteRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Invite members to project
         * @param {DefaultApiApiV2WorkspaceProjectIdMembershipsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2WorkspaceProjectIdMembershipsPost(requestParameters: DefaultApiApiV2WorkspaceProjectIdMembershipsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV2WorkspaceProjectIdMembershipsPost200Response> {
            return localVarFp.apiV2WorkspaceProjectIdMembershipsPost(requestParameters.projectId, requestParameters.apiV2WorkspaceProjectIdMembershipsPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV2WorkspaceProjectIdPkiAlertsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2WorkspaceProjectIdPkiAlertsGet(requestParameters: DefaultApiApiV2WorkspaceProjectIdPkiAlertsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV2WorkspaceProjectIdPkiAlertsGet200Response> {
            return localVarFp.apiV2WorkspaceProjectIdPkiAlertsGet(requestParameters.projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV2WorkspaceProjectIdPkiCollectionsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2WorkspaceProjectIdPkiCollectionsGet(requestParameters: DefaultApiApiV2WorkspaceProjectIdPkiCollectionsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV2WorkspaceProjectIdPkiCollectionsGet200Response> {
            return localVarFp.apiV2WorkspaceProjectIdPkiCollectionsGet(requestParameters.projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV2WorkspaceProjectIdUpgradePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2WorkspaceProjectIdUpgradePost(requestParameters: DefaultApiApiV2WorkspaceProjectIdUpgradePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.apiV2WorkspaceProjectIdUpgradePost(requestParameters.projectId, requestParameters.apiV2WorkspaceProjectIdUpgradePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV2WorkspaceProjectIdUpgradeStatusGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2WorkspaceProjectIdUpgradeStatusGet(requestParameters: DefaultApiApiV2WorkspaceProjectIdUpgradeStatusGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV2WorkspaceProjectIdUpgradeStatusGet200Response> {
            return localVarFp.apiV2WorkspaceProjectIdUpgradeStatusGet(requestParameters.projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * Return list of groups in project
         * @param {DefaultApiApiV2WorkspaceProjectSlugGroupsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2WorkspaceProjectSlugGroupsGet(requestParameters: DefaultApiApiV2WorkspaceProjectSlugGroupsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV2WorkspaceProjectSlugGroupsGet200Response> {
            return localVarFp.apiV2WorkspaceProjectSlugGroupsGet(requestParameters.projectSlug, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove group from project
         * @param {DefaultApiApiV2WorkspaceProjectSlugGroupsGroupSlugDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2WorkspaceProjectSlugGroupsGroupSlugDelete(requestParameters: DefaultApiApiV2WorkspaceProjectSlugGroupsGroupSlugDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV2WorkspaceProjectSlugGroupsGroupSlugPost200Response> {
            return localVarFp.apiV2WorkspaceProjectSlugGroupsGroupSlugDelete(requestParameters.projectSlug, requestParameters.groupSlug, options).then((request) => request(axios, basePath));
        },
        /**
         * Update group in project
         * @param {DefaultApiApiV2WorkspaceProjectSlugGroupsGroupSlugPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2WorkspaceProjectSlugGroupsGroupSlugPatch(requestParameters: DefaultApiApiV2WorkspaceProjectSlugGroupsGroupSlugPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatch200Response> {
            return localVarFp.apiV2WorkspaceProjectSlugGroupsGroupSlugPatch(requestParameters.projectSlug, requestParameters.groupSlug, requestParameters.apiV2WorkspaceProjectSlugGroupsGroupSlugPatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Add group to project
         * @param {DefaultApiApiV2WorkspaceProjectSlugGroupsGroupSlugPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2WorkspaceProjectSlugGroupsGroupSlugPost(requestParameters: DefaultApiApiV2WorkspaceProjectSlugGroupsGroupSlugPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV2WorkspaceProjectSlugGroupsGroupSlugPost200Response> {
            return localVarFp.apiV2WorkspaceProjectSlugGroupsGroupSlugPost(requestParameters.projectSlug, requestParameters.groupSlug, requestParameters.apiV2WorkspaceProjectSlugGroupsGroupSlugPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV2WorkspaceSlugCasGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2WorkspaceSlugCasGet(requestParameters: DefaultApiApiV2WorkspaceSlugCasGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV2WorkspaceSlugCasGet200Response> {
            return localVarFp.apiV2WorkspaceSlugCasGet(requestParameters.slug, requestParameters.status, requestParameters.friendlyName, requestParameters.commonName, requestParameters.offset, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV2WorkspaceSlugCertificatesGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2WorkspaceSlugCertificatesGet(requestParameters: DefaultApiApiV2WorkspaceSlugCertificatesGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV2WorkspaceSlugCertificatesGet200Response> {
            return localVarFp.apiV2WorkspaceSlugCertificatesGet(requestParameters.slug, requestParameters.friendlyName, requestParameters.commonName, requestParameters.offset, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete project
         * @param {DefaultApiApiV2WorkspaceSlugDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2WorkspaceSlugDelete(requestParameters: DefaultApiApiV2WorkspaceSlugDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1OrganizationAdminProjectsGet200ResponseProjectsInner> {
            return localVarFp.apiV2WorkspaceSlugDelete(requestParameters.slug, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV2WorkspaceSlugGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2WorkspaceSlugGet(requestParameters: DefaultApiApiV2WorkspaceSlugGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1WorkspaceWorkspaceIdGet200ResponseWorkspace> {
            return localVarFp.apiV2WorkspaceSlugGet(requestParameters.slug, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV2WorkspaceSlugPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2WorkspaceSlugPatch(requestParameters: DefaultApiApiV2WorkspaceSlugPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1OrganizationAdminProjectsGet200ResponseProjectsInner> {
            return localVarFp.apiV2WorkspaceSlugPatch(requestParameters.slug, requestParameters.apiV2WorkspaceSlugPatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Return encrypted project key
         * @param {DefaultApiApiV2WorkspaceWorkspaceIdEncryptedKeyGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2WorkspaceWorkspaceIdEncryptedKeyGet(requestParameters: DefaultApiApiV2WorkspaceWorkspaceIdEncryptedKeyGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV2WorkspaceWorkspaceIdEncryptedKeyGet200Response> {
            return localVarFp.apiV2WorkspaceWorkspaceIdEncryptedKeyGet(requestParameters.workspaceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV3AuthLogin1PostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV3AuthLogin1Post(requestParameters: DefaultApiApiV3AuthLogin1PostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1PasswordSrp1Post200Response> {
            return localVarFp.apiV3AuthLogin1Post(requestParameters.apiV3AuthLogin1PostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV3AuthLogin2PostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV3AuthLogin2Post(requestParameters: DefaultApiApiV3AuthLogin2PostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV3AuthLogin2Post200Response> {
            return localVarFp.apiV3AuthLogin2Post(requestParameters.apiV3AuthLogin2PostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV3AuthSelectOrganizationPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV3AuthSelectOrganizationPost(requestParameters: DefaultApiApiV3AuthSelectOrganizationPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1AuthTokenPost200Response> {
            return localVarFp.apiV3AuthSelectOrganizationPost(requestParameters.apiV1SecretScanningCreateInstallationSessionOrganizationPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Backfill secret references
         * @param {DefaultApiApiV3SecretsBackfillSecretReferencesPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV3SecretsBackfillSecretReferencesPost(requestParameters: DefaultApiApiV3SecretsBackfillSecretReferencesPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1WorkspaceWorkspaceIdMigrateV3Post200Response> {
            return localVarFp.apiV3SecretsBackfillSecretReferencesPost(requestParameters.apiV3SecretsBackfillSecretReferencesPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV3SecretsBatchDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV3SecretsBatchDelete(requestParameters: DefaultApiApiV3SecretsBatchDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV3SecretsBatchPost200Response> {
            return localVarFp.apiV3SecretsBatchDelete(requestParameters.apiV3SecretsBatchDeleteRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV3SecretsBatchPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV3SecretsBatchPatch(requestParameters: DefaultApiApiV3SecretsBatchPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV3SecretsBatchPost200Response> {
            return localVarFp.apiV3SecretsBatchPatch(requestParameters.apiV3SecretsBatchPatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV3SecretsBatchPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV3SecretsBatchPost(requestParameters: DefaultApiApiV3SecretsBatchPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV3SecretsBatchPost200Response> {
            return localVarFp.apiV3SecretsBatchPost(requestParameters.apiV3SecretsBatchPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete many secrets
         * @param {DefaultApiApiV3SecretsBatchRawDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV3SecretsBatchRawDelete(requestParameters: DefaultApiApiV3SecretsBatchRawDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV3SecretsBatchRawPost200Response> {
            return localVarFp.apiV3SecretsBatchRawDelete(requestParameters.apiV3SecretsBatchRawDeleteRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Update many secrets
         * @param {DefaultApiApiV3SecretsBatchRawPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV3SecretsBatchRawPatch(requestParameters: DefaultApiApiV3SecretsBatchRawPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV3SecretsBatchRawPost200Response> {
            return localVarFp.apiV3SecretsBatchRawPatch(requestParameters.apiV3SecretsBatchRawPatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Create many secrets
         * @param {DefaultApiApiV3SecretsBatchRawPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV3SecretsBatchRawPost(requestParameters: DefaultApiApiV3SecretsBatchRawPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV3SecretsBatchRawPost200Response> {
            return localVarFp.apiV3SecretsBatchRawPost(requestParameters.apiV3SecretsBatchRawPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV3SecretsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV3SecretsGet(requestParameters: DefaultApiApiV3SecretsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV3SecretsGet200Response> {
            return localVarFp.apiV3SecretsGet(requestParameters.workspaceId, requestParameters.environment, requestParameters.secretPath, requestParameters.recursive, requestParameters.includeImports, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV3SecretsMovePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV3SecretsMovePost(requestParameters: DefaultApiApiV3SecretsMovePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV3SecretsMovePost200Response> {
            return localVarFp.apiV3SecretsMovePost(requestParameters.apiV3SecretsMovePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * List secrets
         * @param {DefaultApiApiV3SecretsRawGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV3SecretsRawGet(requestParameters: DefaultApiApiV3SecretsRawGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<ApiV3SecretsRawGet200Response> {
            return localVarFp.apiV3SecretsRawGet(requestParameters.workspaceId, requestParameters.workspaceSlug, requestParameters.environment, requestParameters.secretPath, requestParameters.expandSecretReferences, requestParameters.recursive, requestParameters.includeImports, requestParameters.tagSlugs, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete secret
         * @param {DefaultApiApiV3SecretsRawSecretNameDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV3SecretsRawSecretNameDelete(requestParameters: DefaultApiApiV3SecretsRawSecretNameDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV3SecretsRawSecretNamePost200Response> {
            return localVarFp.apiV3SecretsRawSecretNameDelete(requestParameters.secretName, requestParameters.apiV3SecretsRawSecretNameDeleteRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a secret by name
         * @param {DefaultApiApiV3SecretsRawSecretNameGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV3SecretsRawSecretNameGet(requestParameters: DefaultApiApiV3SecretsRawSecretNameGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV3SecretsRawSecretNameGet200Response> {
            return localVarFp.apiV3SecretsRawSecretNameGet(requestParameters.secretName, requestParameters.workspaceId, requestParameters.workspaceSlug, requestParameters.environment, requestParameters.secretPath, requestParameters.version, requestParameters.type, requestParameters.expandSecretReferences, requestParameters.includeImports, options).then((request) => request(axios, basePath));
        },
        /**
         * Update secret
         * @param {DefaultApiApiV3SecretsRawSecretNamePatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV3SecretsRawSecretNamePatch(requestParameters: DefaultApiApiV3SecretsRawSecretNamePatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV3SecretsRawSecretNamePost200Response> {
            return localVarFp.apiV3SecretsRawSecretNamePatch(requestParameters.secretName, requestParameters.apiV3SecretsRawSecretNamePatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Create secret
         * @param {DefaultApiApiV3SecretsRawSecretNamePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV3SecretsRawSecretNamePost(requestParameters: DefaultApiApiV3SecretsRawSecretNamePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV3SecretsRawSecretNamePost200Response> {
            return localVarFp.apiV3SecretsRawSecretNamePost(requestParameters.secretName, requestParameters.apiV3SecretsRawSecretNamePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV3SecretsSecretNameDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV3SecretsSecretNameDelete(requestParameters: DefaultApiApiV3SecretsSecretNameDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV3SecretsSecretNamePost200Response> {
            return localVarFp.apiV3SecretsSecretNameDelete(requestParameters.secretName, requestParameters.apiV3SecretsSecretNameDeleteRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV3SecretsSecretNameGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV3SecretsSecretNameGet(requestParameters: DefaultApiApiV3SecretsSecretNameGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV3SecretsSecretNameGet200Response> {
            return localVarFp.apiV3SecretsSecretNameGet(requestParameters.workspaceId, requestParameters.environment, requestParameters.secretName, requestParameters.secretPath, requestParameters.type, requestParameters.version, requestParameters.includeImports, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV3SecretsSecretNamePatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV3SecretsSecretNamePatch(requestParameters: DefaultApiApiV3SecretsSecretNamePatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV3SecretsSecretNamePost200Response> {
            return localVarFp.apiV3SecretsSecretNamePatch(requestParameters.secretName, requestParameters.apiV3SecretsSecretNamePatchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV3SecretsSecretNamePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV3SecretsSecretNamePost(requestParameters: DefaultApiApiV3SecretsSecretNamePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV3SecretsSecretNamePost200Response> {
            return localVarFp.apiV3SecretsSecretNamePost(requestParameters.secretName, requestParameters.apiV3SecretsSecretNamePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Detach tags from a secret
         * @param {DefaultApiApiV3SecretsTagsSecretNameDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV3SecretsTagsSecretNameDelete(requestParameters: DefaultApiApiV3SecretsTagsSecretNameDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV3SecretsTagsSecretNamePost200Response> {
            return localVarFp.apiV3SecretsTagsSecretNameDelete(requestParameters.secretName, requestParameters.apiV3SecretsTagsSecretNameDeleteRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Attach tags to a secret
         * @param {DefaultApiApiV3SecretsTagsSecretNamePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV3SecretsTagsSecretNamePost(requestParameters: DefaultApiApiV3SecretsTagsSecretNamePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV3SecretsTagsSecretNamePost200Response> {
            return localVarFp.apiV3SecretsTagsSecretNamePost(requestParameters.secretName, requestParameters.apiV3SecretsTagsSecretNamePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV3SignupCompleteAccountInvitePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV3SignupCompleteAccountInvitePost(requestParameters: DefaultApiApiV3SignupCompleteAccountInvitePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1PasswordEmailPasswordResetVerifyPost200Response> {
            return localVarFp.apiV3SignupCompleteAccountInvitePost(requestParameters.apiV3SignupCompleteAccountInvitePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV3SignupCompleteAccountSignupPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV3SignupCompleteAccountSignupPost(requestParameters: DefaultApiApiV3SignupCompleteAccountSignupPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV3SignupCompleteAccountSignupPost200Response> {
            return localVarFp.apiV3SignupCompleteAccountSignupPost(requestParameters.apiV3SignupCompleteAccountSignupPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV3SignupEmailSignupPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV3SignupEmailSignupPost(requestParameters: DefaultApiApiV3SignupEmailSignupPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1WorkspaceWorkspaceIdMigrateV3Post200Response> {
            return localVarFp.apiV3SignupEmailSignupPost(requestParameters.apiV1PasswordEmailPasswordResetPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV3SignupEmailVerifyPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV3SignupEmailVerifyPost(requestParameters: DefaultApiApiV3SignupEmailVerifyPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV3SignupEmailVerifyPost200Response> {
            return localVarFp.apiV3SignupEmailVerifyPost(requestParameters.apiV1PasswordEmailPasswordResetVerifyPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV3UsersMeApiKeysGet(options?: RawAxiosRequestConfig): AxiosPromise<ApiV3UsersMeApiKeysGet200Response> {
            return localVarFp.apiV3UsersMeApiKeysGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV3WorkspacesProjectIdSecretsBlindIndexStatusGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV3WorkspacesProjectIdSecretsBlindIndexStatusGet(requestParameters: DefaultApiApiV3WorkspacesProjectIdSecretsBlindIndexStatusGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<boolean> {
            return localVarFp.apiV3WorkspacesProjectIdSecretsBlindIndexStatusGet(requestParameters.projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV3WorkspacesProjectIdSecretsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV3WorkspacesProjectIdSecretsGet(requestParameters: DefaultApiApiV3WorkspacesProjectIdSecretsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV3WorkspacesProjectIdSecretsGet200Response> {
            return localVarFp.apiV3WorkspacesProjectIdSecretsGet(requestParameters.projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiApiV3WorkspacesProjectIdSecretsNamesPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV3WorkspacesProjectIdSecretsNamesPost(requestParameters: DefaultApiApiV3WorkspacesProjectIdSecretsNamesPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1WorkspaceWorkspaceIdMigrateV3Post200Response> {
            return localVarFp.apiV3WorkspacesProjectIdSecretsNamesPost(requestParameters.projectId, requestParameters.apiV3WorkspacesProjectIdSecretsNamesPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiWellKnownEstCertificateTemplateIdCacertsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wellKnownEstCertificateTemplateIdCacertsGet(requestParameters: DefaultApiWellKnownEstCertificateTemplateIdCacertsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.wellKnownEstCertificateTemplateIdCacertsGet(requestParameters.certificateTemplateId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiWellKnownEstCertificateTemplateIdSimpleenrollPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wellKnownEstCertificateTemplateIdSimpleenrollPost(requestParameters: DefaultApiWellKnownEstCertificateTemplateIdSimpleenrollPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.wellKnownEstCertificateTemplateIdSimpleenrollPost(requestParameters.certificateTemplateId, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DefaultApiWellKnownEstCertificateTemplateIdSimplereenrollPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wellKnownEstCertificateTemplateIdSimplereenrollPost(requestParameters: DefaultApiWellKnownEstCertificateTemplateIdSimplereenrollPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.wellKnownEstCertificateTemplateIdSimplereenrollPost(requestParameters.certificateTemplateId, requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiV1AccessApprovalsPoliciesCountGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1AccessApprovalsPoliciesCountGetRequest
 */
export interface DefaultApiApiV1AccessApprovalsPoliciesCountGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1AccessApprovalsPoliciesCountGet
     */
    readonly projectSlug: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1AccessApprovalsPoliciesCountGet
     */
    readonly envSlug: string
}

/**
 * Request parameters for apiV1AccessApprovalsPoliciesGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1AccessApprovalsPoliciesGetRequest
 */
export interface DefaultApiApiV1AccessApprovalsPoliciesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1AccessApprovalsPoliciesGet
     */
    readonly projectSlug: string
}

/**
 * Request parameters for apiV1AccessApprovalsPoliciesPolicyIdDelete operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1AccessApprovalsPoliciesPolicyIdDeleteRequest
 */
export interface DefaultApiApiV1AccessApprovalsPoliciesPolicyIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1AccessApprovalsPoliciesPolicyIdDelete
     */
    readonly policyId: string
}

/**
 * Request parameters for apiV1AccessApprovalsPoliciesPolicyIdPatch operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1AccessApprovalsPoliciesPolicyIdPatchRequest
 */
export interface DefaultApiApiV1AccessApprovalsPoliciesPolicyIdPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1AccessApprovalsPoliciesPolicyIdPatch
     */
    readonly policyId: string

    /**
     * 
     * @type {ApiV1AccessApprovalsPoliciesPolicyIdPatchRequest}
     * @memberof DefaultApiApiV1AccessApprovalsPoliciesPolicyIdPatch
     */
    readonly apiV1AccessApprovalsPoliciesPolicyIdPatchRequest: ApiV1AccessApprovalsPoliciesPolicyIdPatchRequest
}

/**
 * Request parameters for apiV1AccessApprovalsPoliciesPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1AccessApprovalsPoliciesPostRequest
 */
export interface DefaultApiApiV1AccessApprovalsPoliciesPostRequest {
    /**
     * 
     * @type {ApiV1AccessApprovalsPoliciesPostRequest}
     * @memberof DefaultApiApiV1AccessApprovalsPoliciesPost
     */
    readonly apiV1AccessApprovalsPoliciesPostRequest: ApiV1AccessApprovalsPoliciesPostRequest
}

/**
 * Request parameters for apiV1AccessApprovalsRequestsCountGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1AccessApprovalsRequestsCountGetRequest
 */
export interface DefaultApiApiV1AccessApprovalsRequestsCountGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1AccessApprovalsRequestsCountGet
     */
    readonly projectSlug: string
}

/**
 * Request parameters for apiV1AccessApprovalsRequestsGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1AccessApprovalsRequestsGetRequest
 */
export interface DefaultApiApiV1AccessApprovalsRequestsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1AccessApprovalsRequestsGet
     */
    readonly projectSlug: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1AccessApprovalsRequestsGet
     */
    readonly authorProjectMembershipId?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1AccessApprovalsRequestsGet
     */
    readonly envSlug?: string
}

/**
 * Request parameters for apiV1AccessApprovalsRequestsPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1AccessApprovalsRequestsPostRequest
 */
export interface DefaultApiApiV1AccessApprovalsRequestsPostRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1AccessApprovalsRequestsPost
     */
    readonly projectSlug: string

    /**
     * 
     * @type {ApiV1AccessApprovalsRequestsPostRequest}
     * @memberof DefaultApiApiV1AccessApprovalsRequestsPost
     */
    readonly apiV1AccessApprovalsRequestsPostRequest: ApiV1AccessApprovalsRequestsPostRequest
}

/**
 * Request parameters for apiV1AccessApprovalsRequestsRequestIdReviewPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1AccessApprovalsRequestsRequestIdReviewPostRequest
 */
export interface DefaultApiApiV1AccessApprovalsRequestsRequestIdReviewPostRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1AccessApprovalsRequestsRequestIdReviewPost
     */
    readonly requestId: string

    /**
     * 
     * @type {ApiV1SecretApprovalRequestsIdReviewPostRequest}
     * @memberof DefaultApiApiV1AccessApprovalsRequestsRequestIdReviewPost
     */
    readonly apiV1SecretApprovalRequestsIdReviewPostRequest: ApiV1SecretApprovalRequestsIdReviewPostRequest
}

/**
 * Request parameters for apiV1AdditionalPrivilegeIdentityDelete operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1AdditionalPrivilegeIdentityDeleteRequest
 */
export interface DefaultApiApiV1AdditionalPrivilegeIdentityDeleteRequest {
    /**
     * 
     * @type {ApiV1AdditionalPrivilegeIdentityDeleteRequest}
     * @memberof DefaultApiApiV1AdditionalPrivilegeIdentityDelete
     */
    readonly apiV1AdditionalPrivilegeIdentityDeleteRequest: ApiV1AdditionalPrivilegeIdentityDeleteRequest
}

/**
 * Request parameters for apiV1AdditionalPrivilegeIdentityGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1AdditionalPrivilegeIdentityGetRequest
 */
export interface DefaultApiApiV1AdditionalPrivilegeIdentityGetRequest {
    /**
     * The ID of the identity to list.
     * @type {string}
     * @memberof DefaultApiApiV1AdditionalPrivilegeIdentityGet
     */
    readonly identityId: string

    /**
     * The slug of the project of the identity in.
     * @type {string}
     * @memberof DefaultApiApiV1AdditionalPrivilegeIdentityGet
     */
    readonly projectSlug: string
}

/**
 * Request parameters for apiV1AdditionalPrivilegeIdentityPatch operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1AdditionalPrivilegeIdentityPatchRequest
 */
export interface DefaultApiApiV1AdditionalPrivilegeIdentityPatchRequest {
    /**
     * 
     * @type {ApiV1AdditionalPrivilegeIdentityPatchRequest}
     * @memberof DefaultApiApiV1AdditionalPrivilegeIdentityPatch
     */
    readonly apiV1AdditionalPrivilegeIdentityPatchRequest: ApiV1AdditionalPrivilegeIdentityPatchRequest
}

/**
 * Request parameters for apiV1AdditionalPrivilegeIdentityPermanentPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1AdditionalPrivilegeIdentityPermanentPostRequest
 */
export interface DefaultApiApiV1AdditionalPrivilegeIdentityPermanentPostRequest {
    /**
     * 
     * @type {ApiV1AdditionalPrivilegeIdentityPermanentPostRequest}
     * @memberof DefaultApiApiV1AdditionalPrivilegeIdentityPermanentPost
     */
    readonly apiV1AdditionalPrivilegeIdentityPermanentPostRequest: ApiV1AdditionalPrivilegeIdentityPermanentPostRequest
}

/**
 * Request parameters for apiV1AdditionalPrivilegeIdentityPrivilegeSlugGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1AdditionalPrivilegeIdentityPrivilegeSlugGetRequest
 */
export interface DefaultApiApiV1AdditionalPrivilegeIdentityPrivilegeSlugGetRequest {
    /**
     * The ID of the identity to list.
     * @type {string}
     * @memberof DefaultApiApiV1AdditionalPrivilegeIdentityPrivilegeSlugGet
     */
    readonly identityId: string

    /**
     * The slug of the project of the identity in.
     * @type {string}
     * @memberof DefaultApiApiV1AdditionalPrivilegeIdentityPrivilegeSlugGet
     */
    readonly projectSlug: string

    /**
     * The slug of the privilege.
     * @type {string}
     * @memberof DefaultApiApiV1AdditionalPrivilegeIdentityPrivilegeSlugGet
     */
    readonly privilegeSlug: string
}

/**
 * Request parameters for apiV1AdditionalPrivilegeIdentityTemporaryPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1AdditionalPrivilegeIdentityTemporaryPostRequest
 */
export interface DefaultApiApiV1AdditionalPrivilegeIdentityTemporaryPostRequest {
    /**
     * 
     * @type {ApiV1AdditionalPrivilegeIdentityTemporaryPostRequest}
     * @memberof DefaultApiApiV1AdditionalPrivilegeIdentityTemporaryPost
     */
    readonly apiV1AdditionalPrivilegeIdentityTemporaryPostRequest: ApiV1AdditionalPrivilegeIdentityTemporaryPostRequest
}

/**
 * Request parameters for apiV1AdditionalPrivilegeUsersGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1AdditionalPrivilegeUsersGetRequest
 */
export interface DefaultApiApiV1AdditionalPrivilegeUsersGetRequest {
    /**
     * Project membership id of user
     * @type {string}
     * @memberof DefaultApiApiV1AdditionalPrivilegeUsersGet
     */
    readonly projectMembershipId: string
}

/**
 * Request parameters for apiV1AdditionalPrivilegeUsersPermanentPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1AdditionalPrivilegeUsersPermanentPostRequest
 */
export interface DefaultApiApiV1AdditionalPrivilegeUsersPermanentPostRequest {
    /**
     * 
     * @type {ApiV1AdditionalPrivilegeUsersPermanentPostRequest}
     * @memberof DefaultApiApiV1AdditionalPrivilegeUsersPermanentPost
     */
    readonly apiV1AdditionalPrivilegeUsersPermanentPostRequest: ApiV1AdditionalPrivilegeUsersPermanentPostRequest
}

/**
 * Request parameters for apiV1AdditionalPrivilegeUsersPrivilegeIdDelete operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1AdditionalPrivilegeUsersPrivilegeIdDeleteRequest
 */
export interface DefaultApiApiV1AdditionalPrivilegeUsersPrivilegeIdDeleteRequest {
    /**
     * The id of privilege object
     * @type {string}
     * @memberof DefaultApiApiV1AdditionalPrivilegeUsersPrivilegeIdDelete
     */
    readonly privilegeId: string
}

/**
 * Request parameters for apiV1AdditionalPrivilegeUsersPrivilegeIdGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1AdditionalPrivilegeUsersPrivilegeIdGetRequest
 */
export interface DefaultApiApiV1AdditionalPrivilegeUsersPrivilegeIdGetRequest {
    /**
     * The id of privilege object
     * @type {string}
     * @memberof DefaultApiApiV1AdditionalPrivilegeUsersPrivilegeIdGet
     */
    readonly privilegeId: string
}

/**
 * Request parameters for apiV1AdditionalPrivilegeUsersPrivilegeIdPatch operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1AdditionalPrivilegeUsersPrivilegeIdPatchRequest
 */
export interface DefaultApiApiV1AdditionalPrivilegeUsersPrivilegeIdPatchRequest {
    /**
     * The id of privilege object
     * @type {string}
     * @memberof DefaultApiApiV1AdditionalPrivilegeUsersPrivilegeIdPatch
     */
    readonly privilegeId: string

    /**
     * 
     * @type {ApiV1AdditionalPrivilegeUsersPrivilegeIdPatchRequest}
     * @memberof DefaultApiApiV1AdditionalPrivilegeUsersPrivilegeIdPatch
     */
    readonly apiV1AdditionalPrivilegeUsersPrivilegeIdPatchRequest?: ApiV1AdditionalPrivilegeUsersPrivilegeIdPatchRequest
}

/**
 * Request parameters for apiV1AdditionalPrivilegeUsersTemporaryPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1AdditionalPrivilegeUsersTemporaryPostRequest
 */
export interface DefaultApiApiV1AdditionalPrivilegeUsersTemporaryPostRequest {
    /**
     * 
     * @type {ApiV1AdditionalPrivilegeUsersTemporaryPostRequest}
     * @memberof DefaultApiApiV1AdditionalPrivilegeUsersTemporaryPost
     */
    readonly apiV1AdditionalPrivilegeUsersTemporaryPostRequest: ApiV1AdditionalPrivilegeUsersTemporaryPostRequest
}

/**
 * Request parameters for apiV1AdminConfigPatch operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1AdminConfigPatchRequest
 */
export interface DefaultApiApiV1AdminConfigPatchRequest {
    /**
     * 
     * @type {ApiV1AdminConfigPatchRequest}
     * @memberof DefaultApiApiV1AdminConfigPatch
     */
    readonly apiV1AdminConfigPatchRequest?: ApiV1AdminConfigPatchRequest
}

/**
 * Request parameters for apiV1AdminSignupPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1AdminSignupPostRequest
 */
export interface DefaultApiApiV1AdminSignupPostRequest {
    /**
     * 
     * @type {ApiV1AdminSignupPostRequest}
     * @memberof DefaultApiApiV1AdminSignupPost
     */
    readonly apiV1AdminSignupPostRequest: ApiV1AdminSignupPostRequest
}

/**
 * Request parameters for apiV1AdminUserManagementUsersGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1AdminUserManagementUsersGetRequest
 */
export interface DefaultApiApiV1AdminUserManagementUsersGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1AdminUserManagementUsersGet
     */
    readonly searchTerm?: string

    /**
     * 
     * @type {number}
     * @memberof DefaultApiApiV1AdminUserManagementUsersGet
     */
    readonly offset?: number

    /**
     * 
     * @type {number}
     * @memberof DefaultApiApiV1AdminUserManagementUsersGet
     */
    readonly limit?: number
}

/**
 * Request parameters for apiV1AdminUserManagementUsersUserIdDelete operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1AdminUserManagementUsersUserIdDeleteRequest
 */
export interface DefaultApiApiV1AdminUserManagementUsersUserIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1AdminUserManagementUsersUserIdDelete
     */
    readonly userId: string
}

/**
 * Request parameters for apiV1AuditLogStreamsIdDelete operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1AuditLogStreamsIdDeleteRequest
 */
export interface DefaultApiApiV1AuditLogStreamsIdDeleteRequest {
    /**
     * The ID of the audit log stream to delete.
     * @type {string}
     * @memberof DefaultApiApiV1AuditLogStreamsIdDelete
     */
    readonly id: string
}

/**
 * Request parameters for apiV1AuditLogStreamsIdGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1AuditLogStreamsIdGetRequest
 */
export interface DefaultApiApiV1AuditLogStreamsIdGetRequest {
    /**
     * The ID of the audit log stream to get details.
     * @type {string}
     * @memberof DefaultApiApiV1AuditLogStreamsIdGet
     */
    readonly id: string
}

/**
 * Request parameters for apiV1AuditLogStreamsIdPatch operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1AuditLogStreamsIdPatchRequest
 */
export interface DefaultApiApiV1AuditLogStreamsIdPatchRequest {
    /**
     * The ID of the audit log stream to update.
     * @type {string}
     * @memberof DefaultApiApiV1AuditLogStreamsIdPatch
     */
    readonly id: string

    /**
     * 
     * @type {ApiV1AuditLogStreamsIdPatchRequest}
     * @memberof DefaultApiApiV1AuditLogStreamsIdPatch
     */
    readonly apiV1AuditLogStreamsIdPatchRequest?: ApiV1AuditLogStreamsIdPatchRequest
}

/**
 * Request parameters for apiV1AuditLogStreamsPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1AuditLogStreamsPostRequest
 */
export interface DefaultApiApiV1AuditLogStreamsPostRequest {
    /**
     * 
     * @type {ApiV1AuditLogStreamsPostRequest}
     * @memberof DefaultApiApiV1AuditLogStreamsPost
     */
    readonly apiV1AuditLogStreamsPostRequest: ApiV1AuditLogStreamsPostRequest
}

/**
 * Request parameters for apiV1AuthAwsAuthIdentitiesIdentityIdDelete operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1AuthAwsAuthIdentitiesIdentityIdDeleteRequest
 */
export interface DefaultApiApiV1AuthAwsAuthIdentitiesIdentityIdDeleteRequest {
    /**
     * The ID of the identity to revoke the auth method for.
     * @type {string}
     * @memberof DefaultApiApiV1AuthAwsAuthIdentitiesIdentityIdDelete
     */
    readonly identityId: string
}

/**
 * Request parameters for apiV1AuthAwsAuthIdentitiesIdentityIdGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1AuthAwsAuthIdentitiesIdentityIdGetRequest
 */
export interface DefaultApiApiV1AuthAwsAuthIdentitiesIdentityIdGetRequest {
    /**
     * The ID of the identity to retrieve the auth method for.
     * @type {string}
     * @memberof DefaultApiApiV1AuthAwsAuthIdentitiesIdentityIdGet
     */
    readonly identityId: string
}

/**
 * Request parameters for apiV1AuthAwsAuthIdentitiesIdentityIdPatch operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1AuthAwsAuthIdentitiesIdentityIdPatchRequest
 */
export interface DefaultApiApiV1AuthAwsAuthIdentitiesIdentityIdPatchRequest {
    /**
     * The ID of the identity to update the auth method for.
     * @type {string}
     * @memberof DefaultApiApiV1AuthAwsAuthIdentitiesIdentityIdPatch
     */
    readonly identityId: string

    /**
     * 
     * @type {ApiV1AuthAwsAuthIdentitiesIdentityIdPatchRequest}
     * @memberof DefaultApiApiV1AuthAwsAuthIdentitiesIdentityIdPatch
     */
    readonly apiV1AuthAwsAuthIdentitiesIdentityIdPatchRequest?: ApiV1AuthAwsAuthIdentitiesIdentityIdPatchRequest
}

/**
 * Request parameters for apiV1AuthAwsAuthIdentitiesIdentityIdPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1AuthAwsAuthIdentitiesIdentityIdPostRequest
 */
export interface DefaultApiApiV1AuthAwsAuthIdentitiesIdentityIdPostRequest {
    /**
     * The ID of the identity to attach the configuration onto.
     * @type {string}
     * @memberof DefaultApiApiV1AuthAwsAuthIdentitiesIdentityIdPost
     */
    readonly identityId: string

    /**
     * 
     * @type {ApiV1AuthAwsAuthIdentitiesIdentityIdPostRequest}
     * @memberof DefaultApiApiV1AuthAwsAuthIdentitiesIdentityIdPost
     */
    readonly apiV1AuthAwsAuthIdentitiesIdentityIdPostRequest?: ApiV1AuthAwsAuthIdentitiesIdentityIdPostRequest
}

/**
 * Request parameters for apiV1AuthAwsAuthLoginPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1AuthAwsAuthLoginPostRequest
 */
export interface DefaultApiApiV1AuthAwsAuthLoginPostRequest {
    /**
     * 
     * @type {ApiV1AuthAwsAuthLoginPostRequest}
     * @memberof DefaultApiApiV1AuthAwsAuthLoginPost
     */
    readonly apiV1AuthAwsAuthLoginPostRequest: ApiV1AuthAwsAuthLoginPostRequest
}

/**
 * Request parameters for apiV1AuthAzureAuthIdentitiesIdentityIdDelete operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1AuthAzureAuthIdentitiesIdentityIdDeleteRequest
 */
export interface DefaultApiApiV1AuthAzureAuthIdentitiesIdentityIdDeleteRequest {
    /**
     * The ID of the identity to revoke the auth method for.
     * @type {string}
     * @memberof DefaultApiApiV1AuthAzureAuthIdentitiesIdentityIdDelete
     */
    readonly identityId: string
}

/**
 * Request parameters for apiV1AuthAzureAuthIdentitiesIdentityIdGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1AuthAzureAuthIdentitiesIdentityIdGetRequest
 */
export interface DefaultApiApiV1AuthAzureAuthIdentitiesIdentityIdGetRequest {
    /**
     * The ID of the identity to retrieve the auth method for.
     * @type {string}
     * @memberof DefaultApiApiV1AuthAzureAuthIdentitiesIdentityIdGet
     */
    readonly identityId: string
}

/**
 * Request parameters for apiV1AuthAzureAuthIdentitiesIdentityIdPatch operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1AuthAzureAuthIdentitiesIdentityIdPatchRequest
 */
export interface DefaultApiApiV1AuthAzureAuthIdentitiesIdentityIdPatchRequest {
    /**
     * The ID of the identity to update the auth method for.
     * @type {string}
     * @memberof DefaultApiApiV1AuthAzureAuthIdentitiesIdentityIdPatch
     */
    readonly identityId: string

    /**
     * 
     * @type {ApiV1AuthAzureAuthIdentitiesIdentityIdPatchRequest}
     * @memberof DefaultApiApiV1AuthAzureAuthIdentitiesIdentityIdPatch
     */
    readonly apiV1AuthAzureAuthIdentitiesIdentityIdPatchRequest?: ApiV1AuthAzureAuthIdentitiesIdentityIdPatchRequest
}

/**
 * Request parameters for apiV1AuthAzureAuthIdentitiesIdentityIdPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1AuthAzureAuthIdentitiesIdentityIdPostRequest
 */
export interface DefaultApiApiV1AuthAzureAuthIdentitiesIdentityIdPostRequest {
    /**
     * The ID of the identity to login.
     * @type {string}
     * @memberof DefaultApiApiV1AuthAzureAuthIdentitiesIdentityIdPost
     */
    readonly identityId: string

    /**
     * 
     * @type {ApiV1AuthAzureAuthIdentitiesIdentityIdPostRequest}
     * @memberof DefaultApiApiV1AuthAzureAuthIdentitiesIdentityIdPost
     */
    readonly apiV1AuthAzureAuthIdentitiesIdentityIdPostRequest: ApiV1AuthAzureAuthIdentitiesIdentityIdPostRequest
}

/**
 * Request parameters for apiV1AuthAzureAuthLoginPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1AuthAzureAuthLoginPostRequest
 */
export interface DefaultApiApiV1AuthAzureAuthLoginPostRequest {
    /**
     * 
     * @type {ApiV1AuthKubernetesAuthLoginPostRequest}
     * @memberof DefaultApiApiV1AuthAzureAuthLoginPost
     */
    readonly apiV1AuthKubernetesAuthLoginPostRequest: ApiV1AuthKubernetesAuthLoginPostRequest
}

/**
 * Request parameters for apiV1AuthGcpAuthIdentitiesIdentityIdDelete operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1AuthGcpAuthIdentitiesIdentityIdDeleteRequest
 */
export interface DefaultApiApiV1AuthGcpAuthIdentitiesIdentityIdDeleteRequest {
    /**
     * The ID of the identity to revoke the auth method for.
     * @type {string}
     * @memberof DefaultApiApiV1AuthGcpAuthIdentitiesIdentityIdDelete
     */
    readonly identityId: string
}

/**
 * Request parameters for apiV1AuthGcpAuthIdentitiesIdentityIdGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1AuthGcpAuthIdentitiesIdentityIdGetRequest
 */
export interface DefaultApiApiV1AuthGcpAuthIdentitiesIdentityIdGetRequest {
    /**
     * The ID of the identity to retrieve the auth method for.
     * @type {string}
     * @memberof DefaultApiApiV1AuthGcpAuthIdentitiesIdentityIdGet
     */
    readonly identityId: string
}

/**
 * Request parameters for apiV1AuthGcpAuthIdentitiesIdentityIdPatch operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1AuthGcpAuthIdentitiesIdentityIdPatchRequest
 */
export interface DefaultApiApiV1AuthGcpAuthIdentitiesIdentityIdPatchRequest {
    /**
     * The ID of the identity to update the auth method for.
     * @type {string}
     * @memberof DefaultApiApiV1AuthGcpAuthIdentitiesIdentityIdPatch
     */
    readonly identityId: string

    /**
     * 
     * @type {ApiV1AuthGcpAuthIdentitiesIdentityIdPatchRequest}
     * @memberof DefaultApiApiV1AuthGcpAuthIdentitiesIdentityIdPatch
     */
    readonly apiV1AuthGcpAuthIdentitiesIdentityIdPatchRequest?: ApiV1AuthGcpAuthIdentitiesIdentityIdPatchRequest
}

/**
 * Request parameters for apiV1AuthGcpAuthIdentitiesIdentityIdPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1AuthGcpAuthIdentitiesIdentityIdPostRequest
 */
export interface DefaultApiApiV1AuthGcpAuthIdentitiesIdentityIdPostRequest {
    /**
     * The ID of the identity to attach the configuration onto.
     * @type {string}
     * @memberof DefaultApiApiV1AuthGcpAuthIdentitiesIdentityIdPost
     */
    readonly identityId: string

    /**
     * 
     * @type {ApiV1AuthGcpAuthIdentitiesIdentityIdPostRequest}
     * @memberof DefaultApiApiV1AuthGcpAuthIdentitiesIdentityIdPost
     */
    readonly apiV1AuthGcpAuthIdentitiesIdentityIdPostRequest: ApiV1AuthGcpAuthIdentitiesIdentityIdPostRequest
}

/**
 * Request parameters for apiV1AuthGcpAuthLoginPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1AuthGcpAuthLoginPostRequest
 */
export interface DefaultApiApiV1AuthGcpAuthLoginPostRequest {
    /**
     * 
     * @type {ApiV1AuthKubernetesAuthLoginPostRequest}
     * @memberof DefaultApiApiV1AuthGcpAuthLoginPost
     */
    readonly apiV1AuthKubernetesAuthLoginPostRequest: ApiV1AuthKubernetesAuthLoginPostRequest
}

/**
 * Request parameters for apiV1AuthKubernetesAuthIdentitiesIdentityIdDelete operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1AuthKubernetesAuthIdentitiesIdentityIdDeleteRequest
 */
export interface DefaultApiApiV1AuthKubernetesAuthIdentitiesIdentityIdDeleteRequest {
    /**
     * The ID of the identity to revoke the auth method for.
     * @type {string}
     * @memberof DefaultApiApiV1AuthKubernetesAuthIdentitiesIdentityIdDelete
     */
    readonly identityId: string
}

/**
 * Request parameters for apiV1AuthKubernetesAuthIdentitiesIdentityIdGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1AuthKubernetesAuthIdentitiesIdentityIdGetRequest
 */
export interface DefaultApiApiV1AuthKubernetesAuthIdentitiesIdentityIdGetRequest {
    /**
     * The ID of the identity to retrieve the auth method for.
     * @type {string}
     * @memberof DefaultApiApiV1AuthKubernetesAuthIdentitiesIdentityIdGet
     */
    readonly identityId: string
}

/**
 * Request parameters for apiV1AuthKubernetesAuthIdentitiesIdentityIdPatch operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1AuthKubernetesAuthIdentitiesIdentityIdPatchRequest
 */
export interface DefaultApiApiV1AuthKubernetesAuthIdentitiesIdentityIdPatchRequest {
    /**
     * The ID of the identity to update the auth method for.
     * @type {string}
     * @memberof DefaultApiApiV1AuthKubernetesAuthIdentitiesIdentityIdPatch
     */
    readonly identityId: string

    /**
     * 
     * @type {ApiV1AuthKubernetesAuthIdentitiesIdentityIdPatchRequest}
     * @memberof DefaultApiApiV1AuthKubernetesAuthIdentitiesIdentityIdPatch
     */
    readonly apiV1AuthKubernetesAuthIdentitiesIdentityIdPatchRequest?: ApiV1AuthKubernetesAuthIdentitiesIdentityIdPatchRequest
}

/**
 * Request parameters for apiV1AuthKubernetesAuthIdentitiesIdentityIdPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1AuthKubernetesAuthIdentitiesIdentityIdPostRequest
 */
export interface DefaultApiApiV1AuthKubernetesAuthIdentitiesIdentityIdPostRequest {
    /**
     * The ID of the identity to attach the configuration onto.
     * @type {string}
     * @memberof DefaultApiApiV1AuthKubernetesAuthIdentitiesIdentityIdPost
     */
    readonly identityId: string

    /**
     * 
     * @type {ApiV1AuthKubernetesAuthIdentitiesIdentityIdPostRequest}
     * @memberof DefaultApiApiV1AuthKubernetesAuthIdentitiesIdentityIdPost
     */
    readonly apiV1AuthKubernetesAuthIdentitiesIdentityIdPostRequest: ApiV1AuthKubernetesAuthIdentitiesIdentityIdPostRequest
}

/**
 * Request parameters for apiV1AuthKubernetesAuthLoginPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1AuthKubernetesAuthLoginPostRequest
 */
export interface DefaultApiApiV1AuthKubernetesAuthLoginPostRequest {
    /**
     * 
     * @type {ApiV1AuthKubernetesAuthLoginPostRequest}
     * @memberof DefaultApiApiV1AuthKubernetesAuthLoginPost
     */
    readonly apiV1AuthKubernetesAuthLoginPostRequest: ApiV1AuthKubernetesAuthLoginPostRequest
}

/**
 * Request parameters for apiV1AuthOidcAuthIdentitiesIdentityIdDelete operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1AuthOidcAuthIdentitiesIdentityIdDeleteRequest
 */
export interface DefaultApiApiV1AuthOidcAuthIdentitiesIdentityIdDeleteRequest {
    /**
     * The ID of the identity to revoke the auth method for.
     * @type {string}
     * @memberof DefaultApiApiV1AuthOidcAuthIdentitiesIdentityIdDelete
     */
    readonly identityId: string
}

/**
 * Request parameters for apiV1AuthOidcAuthIdentitiesIdentityIdGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1AuthOidcAuthIdentitiesIdentityIdGetRequest
 */
export interface DefaultApiApiV1AuthOidcAuthIdentitiesIdentityIdGetRequest {
    /**
     * The ID of the identity to retrieve the auth method for.
     * @type {string}
     * @memberof DefaultApiApiV1AuthOidcAuthIdentitiesIdentityIdGet
     */
    readonly identityId: string
}

/**
 * Request parameters for apiV1AuthOidcAuthIdentitiesIdentityIdPatch operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1AuthOidcAuthIdentitiesIdentityIdPatchRequest
 */
export interface DefaultApiApiV1AuthOidcAuthIdentitiesIdentityIdPatchRequest {
    /**
     * The ID of the identity to update the auth method for.
     * @type {string}
     * @memberof DefaultApiApiV1AuthOidcAuthIdentitiesIdentityIdPatch
     */
    readonly identityId: string

    /**
     * 
     * @type {ApiV1AuthOidcAuthIdentitiesIdentityIdPatchRequest}
     * @memberof DefaultApiApiV1AuthOidcAuthIdentitiesIdentityIdPatch
     */
    readonly apiV1AuthOidcAuthIdentitiesIdentityIdPatchRequest?: ApiV1AuthOidcAuthIdentitiesIdentityIdPatchRequest
}

/**
 * Request parameters for apiV1AuthOidcAuthIdentitiesIdentityIdPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1AuthOidcAuthIdentitiesIdentityIdPostRequest
 */
export interface DefaultApiApiV1AuthOidcAuthIdentitiesIdentityIdPostRequest {
    /**
     * The ID of the identity to attach the configuration onto.
     * @type {string}
     * @memberof DefaultApiApiV1AuthOidcAuthIdentitiesIdentityIdPost
     */
    readonly identityId: string

    /**
     * 
     * @type {ApiV1AuthOidcAuthIdentitiesIdentityIdPostRequest}
     * @memberof DefaultApiApiV1AuthOidcAuthIdentitiesIdentityIdPost
     */
    readonly apiV1AuthOidcAuthIdentitiesIdentityIdPostRequest: ApiV1AuthOidcAuthIdentitiesIdentityIdPostRequest
}

/**
 * Request parameters for apiV1AuthOidcAuthLoginPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1AuthOidcAuthLoginPostRequest
 */
export interface DefaultApiApiV1AuthOidcAuthLoginPostRequest {
    /**
     * 
     * @type {ApiV1AuthKubernetesAuthLoginPostRequest}
     * @memberof DefaultApiApiV1AuthOidcAuthLoginPost
     */
    readonly apiV1AuthKubernetesAuthLoginPostRequest: ApiV1AuthKubernetesAuthLoginPostRequest
}

/**
 * Request parameters for apiV1AuthTokenAuthIdentitiesIdentityIdDelete operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1AuthTokenAuthIdentitiesIdentityIdDeleteRequest
 */
export interface DefaultApiApiV1AuthTokenAuthIdentitiesIdentityIdDeleteRequest {
    /**
     * The ID of the identity to revoke the auth method for.
     * @type {string}
     * @memberof DefaultApiApiV1AuthTokenAuthIdentitiesIdentityIdDelete
     */
    readonly identityId: string
}

/**
 * Request parameters for apiV1AuthTokenAuthIdentitiesIdentityIdGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1AuthTokenAuthIdentitiesIdentityIdGetRequest
 */
export interface DefaultApiApiV1AuthTokenAuthIdentitiesIdentityIdGetRequest {
    /**
     * The ID of the identity to retrieve the auth method for.
     * @type {string}
     * @memberof DefaultApiApiV1AuthTokenAuthIdentitiesIdentityIdGet
     */
    readonly identityId: string
}

/**
 * Request parameters for apiV1AuthTokenAuthIdentitiesIdentityIdPatch operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1AuthTokenAuthIdentitiesIdentityIdPatchRequest
 */
export interface DefaultApiApiV1AuthTokenAuthIdentitiesIdentityIdPatchRequest {
    /**
     * The ID of the identity to update the auth method for.
     * @type {string}
     * @memberof DefaultApiApiV1AuthTokenAuthIdentitiesIdentityIdPatch
     */
    readonly identityId: string

    /**
     * 
     * @type {ApiV1AuthTokenAuthIdentitiesIdentityIdPatchRequest}
     * @memberof DefaultApiApiV1AuthTokenAuthIdentitiesIdentityIdPatch
     */
    readonly apiV1AuthTokenAuthIdentitiesIdentityIdPatchRequest?: ApiV1AuthTokenAuthIdentitiesIdentityIdPatchRequest
}

/**
 * Request parameters for apiV1AuthTokenAuthIdentitiesIdentityIdPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1AuthTokenAuthIdentitiesIdentityIdPostRequest
 */
export interface DefaultApiApiV1AuthTokenAuthIdentitiesIdentityIdPostRequest {
    /**
     * The ID of the identity to attach the configuration onto.
     * @type {string}
     * @memberof DefaultApiApiV1AuthTokenAuthIdentitiesIdentityIdPost
     */
    readonly identityId: string

    /**
     * 
     * @type {ApiV1AuthTokenAuthIdentitiesIdentityIdPostRequest}
     * @memberof DefaultApiApiV1AuthTokenAuthIdentitiesIdentityIdPost
     */
    readonly apiV1AuthTokenAuthIdentitiesIdentityIdPostRequest?: ApiV1AuthTokenAuthIdentitiesIdentityIdPostRequest
}

/**
 * Request parameters for apiV1AuthTokenAuthIdentitiesIdentityIdTokensGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1AuthTokenAuthIdentitiesIdentityIdTokensGetRequest
 */
export interface DefaultApiApiV1AuthTokenAuthIdentitiesIdentityIdTokensGetRequest {
    /**
     * The ID of the identity to list token metadata for.
     * @type {string}
     * @memberof DefaultApiApiV1AuthTokenAuthIdentitiesIdentityIdTokensGet
     */
    readonly identityId: string

    /**
     * The offset to start from. If you enter 10, it will start from the 10th token.
     * @type {number}
     * @memberof DefaultApiApiV1AuthTokenAuthIdentitiesIdentityIdTokensGet
     */
    readonly offset?: number

    /**
     * The number of tokens to return
     * @type {number}
     * @memberof DefaultApiApiV1AuthTokenAuthIdentitiesIdentityIdTokensGet
     */
    readonly limit?: number
}

/**
 * Request parameters for apiV1AuthTokenAuthIdentitiesIdentityIdTokensPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1AuthTokenAuthIdentitiesIdentityIdTokensPostRequest
 */
export interface DefaultApiApiV1AuthTokenAuthIdentitiesIdentityIdTokensPostRequest {
    /**
     * The ID of the identity to create the token for.
     * @type {string}
     * @memberof DefaultApiApiV1AuthTokenAuthIdentitiesIdentityIdTokensPost
     */
    readonly identityId: string

    /**
     * 
     * @type {ApiV1AuthTokenAuthIdentitiesIdentityIdTokensPostRequest}
     * @memberof DefaultApiApiV1AuthTokenAuthIdentitiesIdentityIdTokensPost
     */
    readonly apiV1AuthTokenAuthIdentitiesIdentityIdTokensPostRequest?: ApiV1AuthTokenAuthIdentitiesIdentityIdTokensPostRequest
}

/**
 * Request parameters for apiV1AuthTokenAuthTokensTokenIdPatch operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1AuthTokenAuthTokensTokenIdPatchRequest
 */
export interface DefaultApiApiV1AuthTokenAuthTokensTokenIdPatchRequest {
    /**
     * The ID of the token to update metadata for
     * @type {string}
     * @memberof DefaultApiApiV1AuthTokenAuthTokensTokenIdPatch
     */
    readonly tokenId: string

    /**
     * 
     * @type {ApiV1AuthTokenAuthTokensTokenIdPatchRequest}
     * @memberof DefaultApiApiV1AuthTokenAuthTokensTokenIdPatch
     */
    readonly apiV1AuthTokenAuthTokensTokenIdPatchRequest?: ApiV1AuthTokenAuthTokensTokenIdPatchRequest
}

/**
 * Request parameters for apiV1AuthTokenAuthTokensTokenIdRevokePost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1AuthTokenAuthTokensTokenIdRevokePostRequest
 */
export interface DefaultApiApiV1AuthTokenAuthTokensTokenIdRevokePostRequest {
    /**
     * The ID of the token to revoke
     * @type {string}
     * @memberof DefaultApiApiV1AuthTokenAuthTokensTokenIdRevokePost
     */
    readonly tokenId: string
}

/**
 * Request parameters for apiV1AuthTokenRenewPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1AuthTokenRenewPostRequest
 */
export interface DefaultApiApiV1AuthTokenRenewPostRequest {
    /**
     * 
     * @type {ApiV1AuthTokenRenewPostRequest}
     * @memberof DefaultApiApiV1AuthTokenRenewPost
     */
    readonly apiV1AuthTokenRenewPostRequest: ApiV1AuthTokenRenewPostRequest
}

/**
 * Request parameters for apiV1AuthTokenRevokePost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1AuthTokenRevokePostRequest
 */
export interface DefaultApiApiV1AuthTokenRevokePostRequest {
    /**
     * 
     * @type {ApiV1AuthTokenRevokePostRequest}
     * @memberof DefaultApiApiV1AuthTokenRevokePost
     */
    readonly apiV1AuthTokenRevokePostRequest: ApiV1AuthTokenRevokePostRequest
}

/**
 * Request parameters for apiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsClientSecretIdGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsClientSecretIdGetRequest
 */
export interface DefaultApiApiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsClientSecretIdGetRequest {
    /**
     * The ID of the identity to get the client secret from.
     * @type {string}
     * @memberof DefaultApiApiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsClientSecretIdGet
     */
    readonly identityId: string

    /**
     * The ID of the client secret to get details.
     * @type {string}
     * @memberof DefaultApiApiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsClientSecretIdGet
     */
    readonly clientSecretId: string
}

/**
 * Request parameters for apiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsClientSecretIdRevokePost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsClientSecretIdRevokePostRequest
 */
export interface DefaultApiApiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsClientSecretIdRevokePostRequest {
    /**
     * The ID of the identity to revoke the client secret from.
     * @type {string}
     * @memberof DefaultApiApiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsClientSecretIdRevokePost
     */
    readonly identityId: string

    /**
     * The ID of the client secret to revoke.
     * @type {string}
     * @memberof DefaultApiApiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsClientSecretIdRevokePost
     */
    readonly clientSecretId: string
}

/**
 * Request parameters for apiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsGetRequest
 */
export interface DefaultApiApiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsGetRequest {
    /**
     * The ID of the identity to list client secrets for.
     * @type {string}
     * @memberof DefaultApiApiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsGet
     */
    readonly identityId: string
}

/**
 * Request parameters for apiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsPostRequest
 */
export interface DefaultApiApiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsPostRequest {
    /**
     * The ID of the identity to create a client secret for.
     * @type {string}
     * @memberof DefaultApiApiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsPost
     */
    readonly identityId: string

    /**
     * 
     * @type {ApiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsPostRequest}
     * @memberof DefaultApiApiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsPost
     */
    readonly apiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsPostRequest?: ApiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsPostRequest
}

/**
 * Request parameters for apiV1AuthUniversalAuthIdentitiesIdentityIdDelete operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1AuthUniversalAuthIdentitiesIdentityIdDeleteRequest
 */
export interface DefaultApiApiV1AuthUniversalAuthIdentitiesIdentityIdDeleteRequest {
    /**
     * The ID of the identity to revoke the auth method for.
     * @type {string}
     * @memberof DefaultApiApiV1AuthUniversalAuthIdentitiesIdentityIdDelete
     */
    readonly identityId: string
}

/**
 * Request parameters for apiV1AuthUniversalAuthIdentitiesIdentityIdGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1AuthUniversalAuthIdentitiesIdentityIdGetRequest
 */
export interface DefaultApiApiV1AuthUniversalAuthIdentitiesIdentityIdGetRequest {
    /**
     * The ID of the identity to retrieve the auth method for.
     * @type {string}
     * @memberof DefaultApiApiV1AuthUniversalAuthIdentitiesIdentityIdGet
     */
    readonly identityId: string
}

/**
 * Request parameters for apiV1AuthUniversalAuthIdentitiesIdentityIdPatch operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1AuthUniversalAuthIdentitiesIdentityIdPatchRequest
 */
export interface DefaultApiApiV1AuthUniversalAuthIdentitiesIdentityIdPatchRequest {
    /**
     * The ID of the identity to update the auth method for.
     * @type {string}
     * @memberof DefaultApiApiV1AuthUniversalAuthIdentitiesIdentityIdPatch
     */
    readonly identityId: string

    /**
     * 
     * @type {ApiV1AuthUniversalAuthIdentitiesIdentityIdPatchRequest}
     * @memberof DefaultApiApiV1AuthUniversalAuthIdentitiesIdentityIdPatch
     */
    readonly apiV1AuthUniversalAuthIdentitiesIdentityIdPatchRequest?: ApiV1AuthUniversalAuthIdentitiesIdentityIdPatchRequest
}

/**
 * Request parameters for apiV1AuthUniversalAuthIdentitiesIdentityIdPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1AuthUniversalAuthIdentitiesIdentityIdPostRequest
 */
export interface DefaultApiApiV1AuthUniversalAuthIdentitiesIdentityIdPostRequest {
    /**
     * The ID of the identity to attach the configuration onto.
     * @type {string}
     * @memberof DefaultApiApiV1AuthUniversalAuthIdentitiesIdentityIdPost
     */
    readonly identityId: string

    /**
     * 
     * @type {ApiV1AuthUniversalAuthIdentitiesIdentityIdPostRequest}
     * @memberof DefaultApiApiV1AuthUniversalAuthIdentitiesIdentityIdPost
     */
    readonly apiV1AuthUniversalAuthIdentitiesIdentityIdPostRequest?: ApiV1AuthUniversalAuthIdentitiesIdentityIdPostRequest
}

/**
 * Request parameters for apiV1AuthUniversalAuthLoginPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1AuthUniversalAuthLoginPostRequest
 */
export interface DefaultApiApiV1AuthUniversalAuthLoginPostRequest {
    /**
     * 
     * @type {ApiV1AuthUniversalAuthLoginPostRequest}
     * @memberof DefaultApiApiV1AuthUniversalAuthLoginPost
     */
    readonly apiV1AuthUniversalAuthLoginPostRequest: ApiV1AuthUniversalAuthLoginPostRequest
}

/**
 * Request parameters for apiV1BotBotIdActivePatch operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1BotBotIdActivePatchRequest
 */
export interface DefaultApiApiV1BotBotIdActivePatchRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1BotBotIdActivePatch
     */
    readonly botId: string

    /**
     * 
     * @type {ApiV1BotBotIdActivePatchRequest}
     * @memberof DefaultApiApiV1BotBotIdActivePatch
     */
    readonly apiV1BotBotIdActivePatchRequest: ApiV1BotBotIdActivePatchRequest
}

/**
 * Request parameters for apiV1BotProjectIdGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1BotProjectIdGetRequest
 */
export interface DefaultApiApiV1BotProjectIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1BotProjectIdGet
     */
    readonly projectId: string
}

/**
 * Request parameters for apiV1DynamicSecretsGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1DynamicSecretsGetRequest
 */
export interface DefaultApiApiV1DynamicSecretsGetRequest {
    /**
     * The slug of the project to create dynamic secret in.
     * @type {string}
     * @memberof DefaultApiApiV1DynamicSecretsGet
     */
    readonly projectSlug: string

    /**
     * The slug of the environment to list folders from.
     * @type {string}
     * @memberof DefaultApiApiV1DynamicSecretsGet
     */
    readonly environmentSlug: string

    /**
     * The path to list folders from.
     * @type {string}
     * @memberof DefaultApiApiV1DynamicSecretsGet
     */
    readonly path?: string
}

/**
 * Request parameters for apiV1DynamicSecretsLeasesLeaseIdDelete operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1DynamicSecretsLeasesLeaseIdDeleteRequest
 */
export interface DefaultApiApiV1DynamicSecretsLeasesLeaseIdDeleteRequest {
    /**
     * The ID of the dynamic secret lease.
     * @type {string}
     * @memberof DefaultApiApiV1DynamicSecretsLeasesLeaseIdDelete
     */
    readonly leaseId: string

    /**
     * 
     * @type {ApiV1DynamicSecretsLeasesLeaseIdDeleteRequest}
     * @memberof DefaultApiApiV1DynamicSecretsLeasesLeaseIdDelete
     */
    readonly apiV1DynamicSecretsLeasesLeaseIdDeleteRequest: ApiV1DynamicSecretsLeasesLeaseIdDeleteRequest
}

/**
 * Request parameters for apiV1DynamicSecretsLeasesLeaseIdGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1DynamicSecretsLeasesLeaseIdGetRequest
 */
export interface DefaultApiApiV1DynamicSecretsLeasesLeaseIdGetRequest {
    /**
     * The slug of the project to create dynamic secret in.
     * @type {string}
     * @memberof DefaultApiApiV1DynamicSecretsLeasesLeaseIdGet
     */
    readonly projectSlug: string

    /**
     * The slug of the environment to list folders from.
     * @type {string}
     * @memberof DefaultApiApiV1DynamicSecretsLeasesLeaseIdGet
     */
    readonly environmentSlug: string

    /**
     * The ID of the dynamic secret lease.
     * @type {string}
     * @memberof DefaultApiApiV1DynamicSecretsLeasesLeaseIdGet
     */
    readonly leaseId: string

    /**
     * The path to list folders from.
     * @type {string}
     * @memberof DefaultApiApiV1DynamicSecretsLeasesLeaseIdGet
     */
    readonly path?: string
}

/**
 * Request parameters for apiV1DynamicSecretsLeasesLeaseIdRenewPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1DynamicSecretsLeasesLeaseIdRenewPostRequest
 */
export interface DefaultApiApiV1DynamicSecretsLeasesLeaseIdRenewPostRequest {
    /**
     * The ID of the dynamic secret lease.
     * @type {string}
     * @memberof DefaultApiApiV1DynamicSecretsLeasesLeaseIdRenewPost
     */
    readonly leaseId: string

    /**
     * 
     * @type {ApiV1DynamicSecretsLeasesLeaseIdRenewPostRequest}
     * @memberof DefaultApiApiV1DynamicSecretsLeasesLeaseIdRenewPost
     */
    readonly apiV1DynamicSecretsLeasesLeaseIdRenewPostRequest: ApiV1DynamicSecretsLeasesLeaseIdRenewPostRequest
}

/**
 * Request parameters for apiV1DynamicSecretsLeasesPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1DynamicSecretsLeasesPostRequest
 */
export interface DefaultApiApiV1DynamicSecretsLeasesPostRequest {
    /**
     * 
     * @type {ApiV1DynamicSecretsLeasesPostRequest}
     * @memberof DefaultApiApiV1DynamicSecretsLeasesPost
     */
    readonly apiV1DynamicSecretsLeasesPostRequest: ApiV1DynamicSecretsLeasesPostRequest
}

/**
 * Request parameters for apiV1DynamicSecretsNameDelete operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1DynamicSecretsNameDeleteRequest
 */
export interface DefaultApiApiV1DynamicSecretsNameDeleteRequest {
    /**
     * The name of the dynamic secret.
     * @type {string}
     * @memberof DefaultApiApiV1DynamicSecretsNameDelete
     */
    readonly name: string

    /**
     * 
     * @type {ApiV1DynamicSecretsNameDeleteRequest}
     * @memberof DefaultApiApiV1DynamicSecretsNameDelete
     */
    readonly apiV1DynamicSecretsNameDeleteRequest: ApiV1DynamicSecretsNameDeleteRequest
}

/**
 * Request parameters for apiV1DynamicSecretsNameGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1DynamicSecretsNameGetRequest
 */
export interface DefaultApiApiV1DynamicSecretsNameGetRequest {
    /**
     * The slug of the project to create dynamic secret in.
     * @type {string}
     * @memberof DefaultApiApiV1DynamicSecretsNameGet
     */
    readonly projectSlug: string

    /**
     * The slug of the environment to list folders from.
     * @type {string}
     * @memberof DefaultApiApiV1DynamicSecretsNameGet
     */
    readonly environmentSlug: string

    /**
     * The name of the dynamic secret.
     * @type {string}
     * @memberof DefaultApiApiV1DynamicSecretsNameGet
     */
    readonly name: string

    /**
     * The path to list folders from.
     * @type {string}
     * @memberof DefaultApiApiV1DynamicSecretsNameGet
     */
    readonly path?: string
}

/**
 * Request parameters for apiV1DynamicSecretsNameLeasesGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1DynamicSecretsNameLeasesGetRequest
 */
export interface DefaultApiApiV1DynamicSecretsNameLeasesGetRequest {
    /**
     * The slug of the project to create dynamic secret in.
     * @type {string}
     * @memberof DefaultApiApiV1DynamicSecretsNameLeasesGet
     */
    readonly projectSlug: string

    /**
     * The slug of the environment to list folders from.
     * @type {string}
     * @memberof DefaultApiApiV1DynamicSecretsNameLeasesGet
     */
    readonly environmentSlug: string

    /**
     * The name of the dynamic secret.
     * @type {string}
     * @memberof DefaultApiApiV1DynamicSecretsNameLeasesGet
     */
    readonly name: string

    /**
     * The path to list folders from.
     * @type {string}
     * @memberof DefaultApiApiV1DynamicSecretsNameLeasesGet
     */
    readonly path?: string
}

/**
 * Request parameters for apiV1DynamicSecretsNamePatch operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1DynamicSecretsNamePatchRequest
 */
export interface DefaultApiApiV1DynamicSecretsNamePatchRequest {
    /**
     * The name of the dynamic secret.
     * @type {string}
     * @memberof DefaultApiApiV1DynamicSecretsNamePatch
     */
    readonly name: string

    /**
     * 
     * @type {ApiV1DynamicSecretsNamePatchRequest}
     * @memberof DefaultApiApiV1DynamicSecretsNamePatch
     */
    readonly apiV1DynamicSecretsNamePatchRequest: ApiV1DynamicSecretsNamePatchRequest
}

/**
 * Request parameters for apiV1DynamicSecretsPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1DynamicSecretsPostRequest
 */
export interface DefaultApiApiV1DynamicSecretsPostRequest {
    /**
     * 
     * @type {ApiV1DynamicSecretsPostRequest}
     * @memberof DefaultApiApiV1DynamicSecretsPost
     */
    readonly apiV1DynamicSecretsPostRequest: ApiV1DynamicSecretsPostRequest
}

/**
 * Request parameters for apiV1ExternalKmsIdDelete operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1ExternalKmsIdDeleteRequest
 */
export interface DefaultApiApiV1ExternalKmsIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1ExternalKmsIdDelete
     */
    readonly id: string
}

/**
 * Request parameters for apiV1ExternalKmsIdGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1ExternalKmsIdGetRequest
 */
export interface DefaultApiApiV1ExternalKmsIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1ExternalKmsIdGet
     */
    readonly id: string
}

/**
 * Request parameters for apiV1ExternalKmsIdPatch operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1ExternalKmsIdPatchRequest
 */
export interface DefaultApiApiV1ExternalKmsIdPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1ExternalKmsIdPatch
     */
    readonly id: string

    /**
     * 
     * @type {ApiV1ExternalKmsIdPatchRequest}
     * @memberof DefaultApiApiV1ExternalKmsIdPatch
     */
    readonly apiV1ExternalKmsIdPatchRequest: ApiV1ExternalKmsIdPatchRequest
}

/**
 * Request parameters for apiV1ExternalKmsPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1ExternalKmsPostRequest
 */
export interface DefaultApiApiV1ExternalKmsPostRequest {
    /**
     * 
     * @type {ApiV1ExternalKmsPostRequest}
     * @memberof DefaultApiApiV1ExternalKmsPost
     */
    readonly apiV1ExternalKmsPostRequest: ApiV1ExternalKmsPostRequest
}

/**
 * Request parameters for apiV1ExternalKmsSlugSlugGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1ExternalKmsSlugSlugGetRequest
 */
export interface DefaultApiApiV1ExternalKmsSlugSlugGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1ExternalKmsSlugSlugGet
     */
    readonly slug: string
}

/**
 * Request parameters for apiV1FoldersBatchPatch operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1FoldersBatchPatchRequest
 */
export interface DefaultApiApiV1FoldersBatchPatchRequest {
    /**
     * 
     * @type {ApiV1FoldersBatchPatchRequest}
     * @memberof DefaultApiApiV1FoldersBatchPatch
     */
    readonly apiV1FoldersBatchPatchRequest: ApiV1FoldersBatchPatchRequest
}

/**
 * Request parameters for apiV1FoldersFolderIdOrNameDelete operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1FoldersFolderIdOrNameDeleteRequest
 */
export interface DefaultApiApiV1FoldersFolderIdOrNameDeleteRequest {
    /**
     * The ID or name of the folder to delete.
     * @type {string}
     * @memberof DefaultApiApiV1FoldersFolderIdOrNameDelete
     */
    readonly folderIdOrName: string

    /**
     * 
     * @type {ApiV1FoldersFolderIdOrNameDeleteRequest}
     * @memberof DefaultApiApiV1FoldersFolderIdOrNameDelete
     */
    readonly apiV1FoldersFolderIdOrNameDeleteRequest: ApiV1FoldersFolderIdOrNameDeleteRequest
}

/**
 * Request parameters for apiV1FoldersFolderIdPatch operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1FoldersFolderIdPatchRequest
 */
export interface DefaultApiApiV1FoldersFolderIdPatchRequest {
    /**
     * The ID of the folder to update.
     * @type {string}
     * @memberof DefaultApiApiV1FoldersFolderIdPatch
     */
    readonly folderId: string

    /**
     * 
     * @type {ApiV1FoldersFolderIdPatchRequest}
     * @memberof DefaultApiApiV1FoldersFolderIdPatch
     */
    readonly apiV1FoldersFolderIdPatchRequest: ApiV1FoldersFolderIdPatchRequest
}

/**
 * Request parameters for apiV1FoldersGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1FoldersGetRequest
 */
export interface DefaultApiApiV1FoldersGetRequest {
    /**
     * The ID of the project to list folders from.
     * @type {string}
     * @memberof DefaultApiApiV1FoldersGet
     */
    readonly workspaceId: string

    /**
     * The slug of the environment to list folders from.
     * @type {string}
     * @memberof DefaultApiApiV1FoldersGet
     */
    readonly environment: string

    /**
     * The path to list folders from.
     * @type {string}
     * @memberof DefaultApiApiV1FoldersGet
     */
    readonly path?: string

    /**
     * The directory to list folders from. (Deprecated in favor of path)
     * @type {string}
     * @memberof DefaultApiApiV1FoldersGet
     */
    readonly directory?: string
}

/**
 * Request parameters for apiV1FoldersIdGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1FoldersIdGetRequest
 */
export interface DefaultApiApiV1FoldersIdGetRequest {
    /**
     * The id of the folder to get details.
     * @type {string}
     * @memberof DefaultApiApiV1FoldersIdGet
     */
    readonly id: string
}

/**
 * Request parameters for apiV1FoldersPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1FoldersPostRequest
 */
export interface DefaultApiApiV1FoldersPostRequest {
    /**
     * 
     * @type {ApiV1FoldersPostRequest}
     * @memberof DefaultApiApiV1FoldersPost
     */
    readonly apiV1FoldersPostRequest: ApiV1FoldersPostRequest
}

/**
 * Request parameters for apiV1GroupsCurrentSlugPatch operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1GroupsCurrentSlugPatchRequest
 */
export interface DefaultApiApiV1GroupsCurrentSlugPatchRequest {
    /**
     * The current slug of the group to update.
     * @type {string}
     * @memberof DefaultApiApiV1GroupsCurrentSlugPatch
     */
    readonly currentSlug: string

    /**
     * 
     * @type {ApiV1GroupsCurrentSlugPatchRequest}
     * @memberof DefaultApiApiV1GroupsCurrentSlugPatch
     */
    readonly apiV1GroupsCurrentSlugPatchRequest?: ApiV1GroupsCurrentSlugPatchRequest
}

/**
 * Request parameters for apiV1GroupsPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1GroupsPostRequest
 */
export interface DefaultApiApiV1GroupsPostRequest {
    /**
     * 
     * @type {ApiV1GroupsPostRequest}
     * @memberof DefaultApiApiV1GroupsPost
     */
    readonly apiV1GroupsPostRequest: ApiV1GroupsPostRequest
}

/**
 * Request parameters for apiV1GroupsSlugDelete operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1GroupsSlugDeleteRequest
 */
export interface DefaultApiApiV1GroupsSlugDeleteRequest {
    /**
     * The slug of the group to delete
     * @type {string}
     * @memberof DefaultApiApiV1GroupsSlugDelete
     */
    readonly slug: string
}

/**
 * Request parameters for apiV1GroupsSlugUsersGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1GroupsSlugUsersGetRequest
 */
export interface DefaultApiApiV1GroupsSlugUsersGetRequest {
    /**
     * The slug of the group to list users for
     * @type {string}
     * @memberof DefaultApiApiV1GroupsSlugUsersGet
     */
    readonly slug: string

    /**
     * The offset to start from. If you enter 10, it will start from the 10th user.
     * @type {number}
     * @memberof DefaultApiApiV1GroupsSlugUsersGet
     */
    readonly offset?: number

    /**
     * The number of users to return.
     * @type {number}
     * @memberof DefaultApiApiV1GroupsSlugUsersGet
     */
    readonly limit?: number

    /**
     * The username to search for.
     * @type {string}
     * @memberof DefaultApiApiV1GroupsSlugUsersGet
     */
    readonly username?: string
}

/**
 * Request parameters for apiV1GroupsSlugUsersUsernameDelete operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1GroupsSlugUsersUsernameDeleteRequest
 */
export interface DefaultApiApiV1GroupsSlugUsersUsernameDeleteRequest {
    /**
     * The slug of the group to remove the user from.
     * @type {string}
     * @memberof DefaultApiApiV1GroupsSlugUsersUsernameDelete
     */
    readonly slug: string

    /**
     * The username of the user to remove from the group.
     * @type {string}
     * @memberof DefaultApiApiV1GroupsSlugUsersUsernameDelete
     */
    readonly username: string
}

/**
 * Request parameters for apiV1GroupsSlugUsersUsernamePost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1GroupsSlugUsersUsernamePostRequest
 */
export interface DefaultApiApiV1GroupsSlugUsersUsernamePostRequest {
    /**
     * The slug of the group to add the user to.
     * @type {string}
     * @memberof DefaultApiApiV1GroupsSlugUsersUsernamePost
     */
    readonly slug: string

    /**
     * The username of the user to add to the group.
     * @type {string}
     * @memberof DefaultApiApiV1GroupsSlugUsersUsernamePost
     */
    readonly username: string
}

/**
 * Request parameters for apiV1IdentitiesGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1IdentitiesGetRequest
 */
export interface DefaultApiApiV1IdentitiesGetRequest {
    /**
     * The ID of the organization to list identities.
     * @type {string}
     * @memberof DefaultApiApiV1IdentitiesGet
     */
    readonly orgId: string
}

/**
 * Request parameters for apiV1IdentitiesIdentityIdDelete operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1IdentitiesIdentityIdDeleteRequest
 */
export interface DefaultApiApiV1IdentitiesIdentityIdDeleteRequest {
    /**
     * The ID of the identity to delete.
     * @type {string}
     * @memberof DefaultApiApiV1IdentitiesIdentityIdDelete
     */
    readonly identityId: string
}

/**
 * Request parameters for apiV1IdentitiesIdentityIdGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1IdentitiesIdentityIdGetRequest
 */
export interface DefaultApiApiV1IdentitiesIdentityIdGetRequest {
    /**
     * The ID of the identity to get details.
     * @type {string}
     * @memberof DefaultApiApiV1IdentitiesIdentityIdGet
     */
    readonly identityId: string
}

/**
 * Request parameters for apiV1IdentitiesIdentityIdIdentityMembershipsGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1IdentitiesIdentityIdIdentityMembershipsGetRequest
 */
export interface DefaultApiApiV1IdentitiesIdentityIdIdentityMembershipsGetRequest {
    /**
     * The ID of the identity to get details.
     * @type {string}
     * @memberof DefaultApiApiV1IdentitiesIdentityIdIdentityMembershipsGet
     */
    readonly identityId: string
}

/**
 * Request parameters for apiV1IdentitiesIdentityIdPatch operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1IdentitiesIdentityIdPatchRequest
 */
export interface DefaultApiApiV1IdentitiesIdentityIdPatchRequest {
    /**
     * The ID of the identity to update.
     * @type {string}
     * @memberof DefaultApiApiV1IdentitiesIdentityIdPatch
     */
    readonly identityId: string

    /**
     * 
     * @type {ApiV1IdentitiesIdentityIdPatchRequest}
     * @memberof DefaultApiApiV1IdentitiesIdentityIdPatch
     */
    readonly apiV1IdentitiesIdentityIdPatchRequest?: ApiV1IdentitiesIdentityIdPatchRequest
}

/**
 * Request parameters for apiV1IdentitiesPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1IdentitiesPostRequest
 */
export interface DefaultApiApiV1IdentitiesPostRequest {
    /**
     * 
     * @type {ApiV1IdentitiesPostRequest}
     * @memberof DefaultApiApiV1IdentitiesPost
     */
    readonly apiV1IdentitiesPostRequest: ApiV1IdentitiesPostRequest
}

/**
 * Request parameters for apiV1IntegrationAuthAccessTokenPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1IntegrationAuthAccessTokenPostRequest
 */
export interface DefaultApiApiV1IntegrationAuthAccessTokenPostRequest {
    /**
     * 
     * @type {ApiV1IntegrationAuthAccessTokenPostRequest}
     * @memberof DefaultApiApiV1IntegrationAuthAccessTokenPost
     */
    readonly apiV1IntegrationAuthAccessTokenPostRequest: ApiV1IntegrationAuthAccessTokenPostRequest
}

/**
 * Request parameters for apiV1IntegrationAuthDelete operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1IntegrationAuthDeleteRequest
 */
export interface DefaultApiApiV1IntegrationAuthDeleteRequest {
    /**
     * The slug of the integration to be unauthorized.
     * @type {string}
     * @memberof DefaultApiApiV1IntegrationAuthDelete
     */
    readonly integration: string

    /**
     * The ID of the project to delete the integration auth from.
     * @type {string}
     * @memberof DefaultApiApiV1IntegrationAuthDelete
     */
    readonly projectId: string
}

/**
 * Request parameters for apiV1IntegrationAuthIntegrationAuthIdAppsGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1IntegrationAuthIntegrationAuthIdAppsGetRequest
 */
export interface DefaultApiApiV1IntegrationAuthIntegrationAuthIdAppsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1IntegrationAuthIntegrationAuthIdAppsGet
     */
    readonly integrationAuthId: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1IntegrationAuthIntegrationAuthIdAppsGet
     */
    readonly teamId?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1IntegrationAuthIntegrationAuthIdAppsGet
     */
    readonly azureDevOpsOrgName?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1IntegrationAuthIntegrationAuthIdAppsGet
     */
    readonly workspaceSlug?: string
}

/**
 * Request parameters for apiV1IntegrationAuthIntegrationAuthIdAwsSecretsManagerKmsKeysGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1IntegrationAuthIntegrationAuthIdAwsSecretsManagerKmsKeysGetRequest
 */
export interface DefaultApiApiV1IntegrationAuthIntegrationAuthIdAwsSecretsManagerKmsKeysGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1IntegrationAuthIntegrationAuthIdAwsSecretsManagerKmsKeysGet
     */
    readonly region: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1IntegrationAuthIntegrationAuthIdAwsSecretsManagerKmsKeysGet
     */
    readonly integrationAuthId: string
}

/**
 * Request parameters for apiV1IntegrationAuthIntegrationAuthIdBitbucketWorkspacesGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1IntegrationAuthIntegrationAuthIdBitbucketWorkspacesGetRequest
 */
export interface DefaultApiApiV1IntegrationAuthIntegrationAuthIdBitbucketWorkspacesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1IntegrationAuthIntegrationAuthIdBitbucketWorkspacesGet
     */
    readonly integrationAuthId: string
}

/**
 * Request parameters for apiV1IntegrationAuthIntegrationAuthIdChecklyGroupsGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1IntegrationAuthIntegrationAuthIdChecklyGroupsGetRequest
 */
export interface DefaultApiApiV1IntegrationAuthIntegrationAuthIdChecklyGroupsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1IntegrationAuthIntegrationAuthIdChecklyGroupsGet
     */
    readonly accountId: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1IntegrationAuthIntegrationAuthIdChecklyGroupsGet
     */
    readonly integrationAuthId: string
}

/**
 * Request parameters for apiV1IntegrationAuthIntegrationAuthIdDelete operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1IntegrationAuthIntegrationAuthIdDeleteRequest
 */
export interface DefaultApiApiV1IntegrationAuthIntegrationAuthIdDeleteRequest {
    /**
     * The id of integration authentication object to delete.
     * @type {string}
     * @memberof DefaultApiApiV1IntegrationAuthIntegrationAuthIdDelete
     */
    readonly integrationAuthId: string
}

/**
 * Request parameters for apiV1IntegrationAuthIntegrationAuthIdGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1IntegrationAuthIntegrationAuthIdGetRequest
 */
export interface DefaultApiApiV1IntegrationAuthIntegrationAuthIdGetRequest {
    /**
     * The id of integration authentication object.
     * @type {string}
     * @memberof DefaultApiApiV1IntegrationAuthIntegrationAuthIdGet
     */
    readonly integrationAuthId: string
}

/**
 * Request parameters for apiV1IntegrationAuthIntegrationAuthIdGithubEnvsGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1IntegrationAuthIntegrationAuthIdGithubEnvsGetRequest
 */
export interface DefaultApiApiV1IntegrationAuthIntegrationAuthIdGithubEnvsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1IntegrationAuthIntegrationAuthIdGithubEnvsGet
     */
    readonly repoOwner: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1IntegrationAuthIntegrationAuthIdGithubEnvsGet
     */
    readonly repoName: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1IntegrationAuthIntegrationAuthIdGithubEnvsGet
     */
    readonly integrationAuthId: string
}

/**
 * Request parameters for apiV1IntegrationAuthIntegrationAuthIdGithubOrgsGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1IntegrationAuthIntegrationAuthIdGithubOrgsGetRequest
 */
export interface DefaultApiApiV1IntegrationAuthIntegrationAuthIdGithubOrgsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1IntegrationAuthIntegrationAuthIdGithubOrgsGet
     */
    readonly integrationAuthId: string
}

/**
 * Request parameters for apiV1IntegrationAuthIntegrationAuthIdHerokuPipelinesGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1IntegrationAuthIntegrationAuthIdHerokuPipelinesGetRequest
 */
export interface DefaultApiApiV1IntegrationAuthIntegrationAuthIdHerokuPipelinesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1IntegrationAuthIntegrationAuthIdHerokuPipelinesGet
     */
    readonly integrationAuthId: string
}

/**
 * Request parameters for apiV1IntegrationAuthIntegrationAuthIdNorthflankSecretGroupsGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1IntegrationAuthIntegrationAuthIdNorthflankSecretGroupsGetRequest
 */
export interface DefaultApiApiV1IntegrationAuthIntegrationAuthIdNorthflankSecretGroupsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1IntegrationAuthIntegrationAuthIdNorthflankSecretGroupsGet
     */
    readonly appId: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1IntegrationAuthIntegrationAuthIdNorthflankSecretGroupsGet
     */
    readonly integrationAuthId: string
}

/**
 * Request parameters for apiV1IntegrationAuthIntegrationAuthIdQoveryAppsGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1IntegrationAuthIntegrationAuthIdQoveryAppsGetRequest
 */
export interface DefaultApiApiV1IntegrationAuthIntegrationAuthIdQoveryAppsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1IntegrationAuthIntegrationAuthIdQoveryAppsGet
     */
    readonly environmentId: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1IntegrationAuthIntegrationAuthIdQoveryAppsGet
     */
    readonly integrationAuthId: string
}

/**
 * Request parameters for apiV1IntegrationAuthIntegrationAuthIdQoveryContainersGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1IntegrationAuthIntegrationAuthIdQoveryContainersGetRequest
 */
export interface DefaultApiApiV1IntegrationAuthIntegrationAuthIdQoveryContainersGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1IntegrationAuthIntegrationAuthIdQoveryContainersGet
     */
    readonly environmentId: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1IntegrationAuthIntegrationAuthIdQoveryContainersGet
     */
    readonly integrationAuthId: string
}

/**
 * Request parameters for apiV1IntegrationAuthIntegrationAuthIdQoveryEnvironmentsGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1IntegrationAuthIntegrationAuthIdQoveryEnvironmentsGetRequest
 */
export interface DefaultApiApiV1IntegrationAuthIntegrationAuthIdQoveryEnvironmentsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1IntegrationAuthIntegrationAuthIdQoveryEnvironmentsGet
     */
    readonly projectId: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1IntegrationAuthIntegrationAuthIdQoveryEnvironmentsGet
     */
    readonly integrationAuthId: string
}

/**
 * Request parameters for apiV1IntegrationAuthIntegrationAuthIdQoveryJobsGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1IntegrationAuthIntegrationAuthIdQoveryJobsGetRequest
 */
export interface DefaultApiApiV1IntegrationAuthIntegrationAuthIdQoveryJobsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1IntegrationAuthIntegrationAuthIdQoveryJobsGet
     */
    readonly environmentId: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1IntegrationAuthIntegrationAuthIdQoveryJobsGet
     */
    readonly integrationAuthId: string
}

/**
 * Request parameters for apiV1IntegrationAuthIntegrationAuthIdQoveryOrgsGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1IntegrationAuthIntegrationAuthIdQoveryOrgsGetRequest
 */
export interface DefaultApiApiV1IntegrationAuthIntegrationAuthIdQoveryOrgsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1IntegrationAuthIntegrationAuthIdQoveryOrgsGet
     */
    readonly integrationAuthId: string
}

/**
 * Request parameters for apiV1IntegrationAuthIntegrationAuthIdQoveryProjectsGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1IntegrationAuthIntegrationAuthIdQoveryProjectsGetRequest
 */
export interface DefaultApiApiV1IntegrationAuthIntegrationAuthIdQoveryProjectsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1IntegrationAuthIntegrationAuthIdQoveryProjectsGet
     */
    readonly orgId: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1IntegrationAuthIntegrationAuthIdQoveryProjectsGet
     */
    readonly integrationAuthId: string
}

/**
 * Request parameters for apiV1IntegrationAuthIntegrationAuthIdRailwayEnvironmentsGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1IntegrationAuthIntegrationAuthIdRailwayEnvironmentsGetRequest
 */
export interface DefaultApiApiV1IntegrationAuthIntegrationAuthIdRailwayEnvironmentsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1IntegrationAuthIntegrationAuthIdRailwayEnvironmentsGet
     */
    readonly appId: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1IntegrationAuthIntegrationAuthIdRailwayEnvironmentsGet
     */
    readonly integrationAuthId: string
}

/**
 * Request parameters for apiV1IntegrationAuthIntegrationAuthIdRailwayServicesGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1IntegrationAuthIntegrationAuthIdRailwayServicesGetRequest
 */
export interface DefaultApiApiV1IntegrationAuthIntegrationAuthIdRailwayServicesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1IntegrationAuthIntegrationAuthIdRailwayServicesGet
     */
    readonly appId: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1IntegrationAuthIntegrationAuthIdRailwayServicesGet
     */
    readonly integrationAuthId: string
}

/**
 * Request parameters for apiV1IntegrationAuthIntegrationAuthIdTeamcityBuildConfigsGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1IntegrationAuthIntegrationAuthIdTeamcityBuildConfigsGetRequest
 */
export interface DefaultApiApiV1IntegrationAuthIntegrationAuthIdTeamcityBuildConfigsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1IntegrationAuthIntegrationAuthIdTeamcityBuildConfigsGet
     */
    readonly appId: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1IntegrationAuthIntegrationAuthIdTeamcityBuildConfigsGet
     */
    readonly integrationAuthId: string
}

/**
 * Request parameters for apiV1IntegrationAuthIntegrationAuthIdTeamsGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1IntegrationAuthIntegrationAuthIdTeamsGetRequest
 */
export interface DefaultApiApiV1IntegrationAuthIntegrationAuthIdTeamsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1IntegrationAuthIntegrationAuthIdTeamsGet
     */
    readonly integrationAuthId: string
}

/**
 * Request parameters for apiV1IntegrationAuthIntegrationAuthIdVercelBranchesGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1IntegrationAuthIntegrationAuthIdVercelBranchesGetRequest
 */
export interface DefaultApiApiV1IntegrationAuthIntegrationAuthIdVercelBranchesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1IntegrationAuthIntegrationAuthIdVercelBranchesGet
     */
    readonly appId: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1IntegrationAuthIntegrationAuthIdVercelBranchesGet
     */
    readonly integrationAuthId: string
}

/**
 * Request parameters for apiV1IntegrationAuthOauthTokenPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1IntegrationAuthOauthTokenPostRequest
 */
export interface DefaultApiApiV1IntegrationAuthOauthTokenPostRequest {
    /**
     * 
     * @type {ApiV1IntegrationAuthOauthTokenPostRequest}
     * @memberof DefaultApiApiV1IntegrationAuthOauthTokenPost
     */
    readonly apiV1IntegrationAuthOauthTokenPostRequest: ApiV1IntegrationAuthOauthTokenPostRequest
}

/**
 * Request parameters for apiV1IntegrationIntegrationIdDelete operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1IntegrationIntegrationIdDeleteRequest
 */
export interface DefaultApiApiV1IntegrationIntegrationIdDeleteRequest {
    /**
     * The ID of the integration object.
     * @type {string}
     * @memberof DefaultApiApiV1IntegrationIntegrationIdDelete
     */
    readonly integrationId: string

    /**
     * 
     * @type {'true' | 'false'}
     * @memberof DefaultApiApiV1IntegrationIntegrationIdDelete
     */
    readonly shouldDeleteIntegrationSecrets?: ApiV1IntegrationIntegrationIdDeleteShouldDeleteIntegrationSecretsEnum
}

/**
 * Request parameters for apiV1IntegrationIntegrationIdPatch operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1IntegrationIntegrationIdPatchRequest
 */
export interface DefaultApiApiV1IntegrationIntegrationIdPatchRequest {
    /**
     * The ID of the integration object.
     * @type {string}
     * @memberof DefaultApiApiV1IntegrationIntegrationIdPatch
     */
    readonly integrationId: string

    /**
     * 
     * @type {ApiV1IntegrationIntegrationIdPatchRequest}
     * @memberof DefaultApiApiV1IntegrationIntegrationIdPatch
     */
    readonly apiV1IntegrationIntegrationIdPatchRequest: ApiV1IntegrationIntegrationIdPatchRequest
}

/**
 * Request parameters for apiV1IntegrationIntegrationIdSyncPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1IntegrationIntegrationIdSyncPostRequest
 */
export interface DefaultApiApiV1IntegrationIntegrationIdSyncPostRequest {
    /**
     * The ID of the integration object to manually sync
     * @type {string}
     * @memberof DefaultApiApiV1IntegrationIntegrationIdSyncPost
     */
    readonly integrationId: string
}

/**
 * Request parameters for apiV1IntegrationPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1IntegrationPostRequest
 */
export interface DefaultApiApiV1IntegrationPostRequest {
    /**
     * 
     * @type {ApiV1IntegrationPostRequest}
     * @memberof DefaultApiApiV1IntegrationPost
     */
    readonly apiV1IntegrationPostRequest: ApiV1IntegrationPostRequest
}

/**
 * Request parameters for apiV1InviteOrgSignupPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1InviteOrgSignupPostRequest
 */
export interface DefaultApiApiV1InviteOrgSignupPostRequest {
    /**
     * 
     * @type {ApiV1InviteOrgSignupPostRequest}
     * @memberof DefaultApiApiV1InviteOrgSignupPost
     */
    readonly apiV1InviteOrgSignupPostRequest: ApiV1InviteOrgSignupPostRequest
}

/**
 * Request parameters for apiV1InviteOrgVerifyPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1InviteOrgVerifyPostRequest
 */
export interface DefaultApiApiV1InviteOrgVerifyPostRequest {
    /**
     * 
     * @type {ApiV1InviteOrgVerifyPostRequest}
     * @memberof DefaultApiApiV1InviteOrgVerifyPost
     */
    readonly apiV1InviteOrgVerifyPostRequest: ApiV1InviteOrgVerifyPostRequest
}

/**
 * Request parameters for apiV1LdapConfigConfigIdGroupMapsGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1LdapConfigConfigIdGroupMapsGetRequest
 */
export interface DefaultApiApiV1LdapConfigConfigIdGroupMapsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1LdapConfigConfigIdGroupMapsGet
     */
    readonly configId: string
}

/**
 * Request parameters for apiV1LdapConfigConfigIdGroupMapsGroupMapIdDelete operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1LdapConfigConfigIdGroupMapsGroupMapIdDeleteRequest
 */
export interface DefaultApiApiV1LdapConfigConfigIdGroupMapsGroupMapIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1LdapConfigConfigIdGroupMapsGroupMapIdDelete
     */
    readonly configId: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1LdapConfigConfigIdGroupMapsGroupMapIdDelete
     */
    readonly groupMapId: string
}

/**
 * Request parameters for apiV1LdapConfigConfigIdGroupMapsPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1LdapConfigConfigIdGroupMapsPostRequest
 */
export interface DefaultApiApiV1LdapConfigConfigIdGroupMapsPostRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1LdapConfigConfigIdGroupMapsPost
     */
    readonly configId: string

    /**
     * 
     * @type {ApiV1LdapConfigConfigIdGroupMapsPostRequest}
     * @memberof DefaultApiApiV1LdapConfigConfigIdGroupMapsPost
     */
    readonly apiV1LdapConfigConfigIdGroupMapsPostRequest: ApiV1LdapConfigConfigIdGroupMapsPostRequest
}

/**
 * Request parameters for apiV1LdapConfigConfigIdTestConnectionPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1LdapConfigConfigIdTestConnectionPostRequest
 */
export interface DefaultApiApiV1LdapConfigConfigIdTestConnectionPostRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1LdapConfigConfigIdTestConnectionPost
     */
    readonly configId: string
}

/**
 * Request parameters for apiV1LdapConfigGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1LdapConfigGetRequest
 */
export interface DefaultApiApiV1LdapConfigGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1LdapConfigGet
     */
    readonly organizationId: string
}

/**
 * Request parameters for apiV1LdapConfigPatch operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1LdapConfigPatchRequest
 */
export interface DefaultApiApiV1LdapConfigPatchRequest {
    /**
     * 
     * @type {ApiV1LdapConfigPatchRequest}
     * @memberof DefaultApiApiV1LdapConfigPatch
     */
    readonly apiV1LdapConfigPatchRequest: ApiV1LdapConfigPatchRequest
}

/**
 * Request parameters for apiV1LdapConfigPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1LdapConfigPostRequest
 */
export interface DefaultApiApiV1LdapConfigPostRequest {
    /**
     * 
     * @type {ApiV1LdapConfigPostRequest}
     * @memberof DefaultApiApiV1LdapConfigPost
     */
    readonly apiV1LdapConfigPostRequest: ApiV1LdapConfigPostRequest
}

/**
 * Request parameters for apiV1LdapLoginPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1LdapLoginPostRequest
 */
export interface DefaultApiApiV1LdapLoginPostRequest {
    /**
     * 
     * @type {ApiV1LdapLoginPostRequest}
     * @memberof DefaultApiApiV1LdapLoginPost
     */
    readonly apiV1LdapLoginPostRequest: ApiV1LdapLoginPostRequest
}

/**
 * Request parameters for apiV1OrganizationAdminProjectsGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1OrganizationAdminProjectsGetRequest
 */
export interface DefaultApiApiV1OrganizationAdminProjectsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1OrganizationAdminProjectsGet
     */
    readonly search?: string

    /**
     * 
     * @type {number}
     * @memberof DefaultApiApiV1OrganizationAdminProjectsGet
     */
    readonly offset?: number

    /**
     * 
     * @type {number}
     * @memberof DefaultApiApiV1OrganizationAdminProjectsGet
     */
    readonly limit?: number
}

/**
 * Request parameters for apiV1OrganizationAdminProjectsProjectIdGrantAdminAccessPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1OrganizationAdminProjectsProjectIdGrantAdminAccessPostRequest
 */
export interface DefaultApiApiV1OrganizationAdminProjectsProjectIdGrantAdminAccessPostRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1OrganizationAdminProjectsProjectIdGrantAdminAccessPost
     */
    readonly projectId: string
}

/**
 * Request parameters for apiV1OrganizationOrganizationIdGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1OrganizationOrganizationIdGetRequest
 */
export interface DefaultApiApiV1OrganizationOrganizationIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1OrganizationOrganizationIdGet
     */
    readonly organizationId: string
}

/**
 * Request parameters for apiV1OrganizationOrganizationIdGroupsGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1OrganizationOrganizationIdGroupsGetRequest
 */
export interface DefaultApiApiV1OrganizationOrganizationIdGroupsGetRequest {
    /**
     * The ID of the organization to list groups for.
     * @type {string}
     * @memberof DefaultApiApiV1OrganizationOrganizationIdGroupsGet
     */
    readonly organizationId: string
}

/**
 * Request parameters for apiV1OrganizationOrganizationIdIncidentContactOrgGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1OrganizationOrganizationIdIncidentContactOrgGetRequest
 */
export interface DefaultApiApiV1OrganizationOrganizationIdIncidentContactOrgGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1OrganizationOrganizationIdIncidentContactOrgGet
     */
    readonly organizationId: string
}

/**
 * Request parameters for apiV1OrganizationOrganizationIdIncidentContactOrgIncidentContactIdDelete operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1OrganizationOrganizationIdIncidentContactOrgIncidentContactIdDeleteRequest
 */
export interface DefaultApiApiV1OrganizationOrganizationIdIncidentContactOrgIncidentContactIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1OrganizationOrganizationIdIncidentContactOrgIncidentContactIdDelete
     */
    readonly organizationId: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1OrganizationOrganizationIdIncidentContactOrgIncidentContactIdDelete
     */
    readonly incidentContactId: string
}

/**
 * Request parameters for apiV1OrganizationOrganizationIdIncidentContactOrgPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1OrganizationOrganizationIdIncidentContactOrgPostRequest
 */
export interface DefaultApiApiV1OrganizationOrganizationIdIncidentContactOrgPostRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1OrganizationOrganizationIdIncidentContactOrgPost
     */
    readonly organizationId: string

    /**
     * 
     * @type {ApiV1PasswordEmailPasswordResetPostRequest}
     * @memberof DefaultApiApiV1OrganizationOrganizationIdIncidentContactOrgPost
     */
    readonly apiV1PasswordEmailPasswordResetPostRequest: ApiV1PasswordEmailPasswordResetPostRequest
}

/**
 * Request parameters for apiV1OrganizationOrganizationIdPatch operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1OrganizationOrganizationIdPatchRequest
 */
export interface DefaultApiApiV1OrganizationOrganizationIdPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1OrganizationOrganizationIdPatch
     */
    readonly organizationId: string

    /**
     * 
     * @type {ApiV1OrganizationOrganizationIdPatchRequest}
     * @memberof DefaultApiApiV1OrganizationOrganizationIdPatch
     */
    readonly apiV1OrganizationOrganizationIdPatchRequest?: ApiV1OrganizationOrganizationIdPatchRequest
}

/**
 * Request parameters for apiV1OrganizationOrganizationIdPermissionsGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1OrganizationOrganizationIdPermissionsGetRequest
 */
export interface DefaultApiApiV1OrganizationOrganizationIdPermissionsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1OrganizationOrganizationIdPermissionsGet
     */
    readonly organizationId: string
}

/**
 * Request parameters for apiV1OrganizationOrganizationIdRolesGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1OrganizationOrganizationIdRolesGetRequest
 */
export interface DefaultApiApiV1OrganizationOrganizationIdRolesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1OrganizationOrganizationIdRolesGet
     */
    readonly organizationId: string
}

/**
 * Request parameters for apiV1OrganizationOrganizationIdRolesPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1OrganizationOrganizationIdRolesPostRequest
 */
export interface DefaultApiApiV1OrganizationOrganizationIdRolesPostRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1OrganizationOrganizationIdRolesPost
     */
    readonly organizationId: string

    /**
     * 
     * @type {ApiV1OrganizationOrganizationIdRolesPostRequest}
     * @memberof DefaultApiApiV1OrganizationOrganizationIdRolesPost
     */
    readonly apiV1OrganizationOrganizationIdRolesPostRequest: ApiV1OrganizationOrganizationIdRolesPostRequest
}

/**
 * Request parameters for apiV1OrganizationOrganizationIdRolesRoleIdDelete operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1OrganizationOrganizationIdRolesRoleIdDeleteRequest
 */
export interface DefaultApiApiV1OrganizationOrganizationIdRolesRoleIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1OrganizationOrganizationIdRolesRoleIdDelete
     */
    readonly organizationId: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1OrganizationOrganizationIdRolesRoleIdDelete
     */
    readonly roleId: string
}

/**
 * Request parameters for apiV1OrganizationOrganizationIdRolesRoleIdGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1OrganizationOrganizationIdRolesRoleIdGetRequest
 */
export interface DefaultApiApiV1OrganizationOrganizationIdRolesRoleIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1OrganizationOrganizationIdRolesRoleIdGet
     */
    readonly organizationId: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1OrganizationOrganizationIdRolesRoleIdGet
     */
    readonly roleId: string
}

/**
 * Request parameters for apiV1OrganizationOrganizationIdRolesRoleIdPatch operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1OrganizationOrganizationIdRolesRoleIdPatchRequest
 */
export interface DefaultApiApiV1OrganizationOrganizationIdRolesRoleIdPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1OrganizationOrganizationIdRolesRoleIdPatch
     */
    readonly organizationId: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1OrganizationOrganizationIdRolesRoleIdPatch
     */
    readonly roleId: string

    /**
     * 
     * @type {ApiV1OrganizationOrganizationIdRolesRoleIdPatchRequest}
     * @memberof DefaultApiApiV1OrganizationOrganizationIdRolesRoleIdPatch
     */
    readonly apiV1OrganizationOrganizationIdRolesRoleIdPatchRequest: ApiV1OrganizationOrganizationIdRolesRoleIdPatchRequest
}

/**
 * Request parameters for apiV1OrganizationOrganizationIdUsersGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1OrganizationOrganizationIdUsersGetRequest
 */
export interface DefaultApiApiV1OrganizationOrganizationIdUsersGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1OrganizationOrganizationIdUsersGet
     */
    readonly organizationId: string
}

/**
 * Request parameters for apiV1OrganizationsOrganizationIdBillingDetailsGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1OrganizationsOrganizationIdBillingDetailsGetRequest
 */
export interface DefaultApiApiV1OrganizationsOrganizationIdBillingDetailsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1OrganizationsOrganizationIdBillingDetailsGet
     */
    readonly organizationId: string
}

/**
 * Request parameters for apiV1OrganizationsOrganizationIdBillingDetailsPatch operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1OrganizationsOrganizationIdBillingDetailsPatchRequest
 */
export interface DefaultApiApiV1OrganizationsOrganizationIdBillingDetailsPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1OrganizationsOrganizationIdBillingDetailsPatch
     */
    readonly organizationId: string

    /**
     * 
     * @type {ApiV1OrganizationsOrganizationIdBillingDetailsPatchRequest}
     * @memberof DefaultApiApiV1OrganizationsOrganizationIdBillingDetailsPatch
     */
    readonly apiV1OrganizationsOrganizationIdBillingDetailsPatchRequest?: ApiV1OrganizationsOrganizationIdBillingDetailsPatchRequest
}

/**
 * Request parameters for apiV1OrganizationsOrganizationIdBillingDetailsPaymentMethodsGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1OrganizationsOrganizationIdBillingDetailsPaymentMethodsGetRequest
 */
export interface DefaultApiApiV1OrganizationsOrganizationIdBillingDetailsPaymentMethodsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1OrganizationsOrganizationIdBillingDetailsPaymentMethodsGet
     */
    readonly organizationId: string
}

/**
 * Request parameters for apiV1OrganizationsOrganizationIdBillingDetailsPaymentMethodsPmtMethodIdDelete operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1OrganizationsOrganizationIdBillingDetailsPaymentMethodsPmtMethodIdDeleteRequest
 */
export interface DefaultApiApiV1OrganizationsOrganizationIdBillingDetailsPaymentMethodsPmtMethodIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1OrganizationsOrganizationIdBillingDetailsPaymentMethodsPmtMethodIdDelete
     */
    readonly organizationId: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1OrganizationsOrganizationIdBillingDetailsPaymentMethodsPmtMethodIdDelete
     */
    readonly pmtMethodId: string
}

/**
 * Request parameters for apiV1OrganizationsOrganizationIdBillingDetailsPaymentMethodsPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1OrganizationsOrganizationIdBillingDetailsPaymentMethodsPostRequest
 */
export interface DefaultApiApiV1OrganizationsOrganizationIdBillingDetailsPaymentMethodsPostRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1OrganizationsOrganizationIdBillingDetailsPaymentMethodsPost
     */
    readonly organizationId: string

    /**
     * 
     * @type {ApiV1OrganizationsOrganizationIdBillingDetailsPaymentMethodsPostRequest}
     * @memberof DefaultApiApiV1OrganizationsOrganizationIdBillingDetailsPaymentMethodsPost
     */
    readonly apiV1OrganizationsOrganizationIdBillingDetailsPaymentMethodsPostRequest: ApiV1OrganizationsOrganizationIdBillingDetailsPaymentMethodsPostRequest
}

/**
 * Request parameters for apiV1OrganizationsOrganizationIdBillingDetailsTaxIdsGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1OrganizationsOrganizationIdBillingDetailsTaxIdsGetRequest
 */
export interface DefaultApiApiV1OrganizationsOrganizationIdBillingDetailsTaxIdsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1OrganizationsOrganizationIdBillingDetailsTaxIdsGet
     */
    readonly organizationId: string
}

/**
 * Request parameters for apiV1OrganizationsOrganizationIdBillingDetailsTaxIdsPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1OrganizationsOrganizationIdBillingDetailsTaxIdsPostRequest
 */
export interface DefaultApiApiV1OrganizationsOrganizationIdBillingDetailsTaxIdsPostRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1OrganizationsOrganizationIdBillingDetailsTaxIdsPost
     */
    readonly organizationId: string

    /**
     * 
     * @type {ApiV1OrganizationsOrganizationIdBillingDetailsTaxIdsPostRequest}
     * @memberof DefaultApiApiV1OrganizationsOrganizationIdBillingDetailsTaxIdsPost
     */
    readonly apiV1OrganizationsOrganizationIdBillingDetailsTaxIdsPostRequest: ApiV1OrganizationsOrganizationIdBillingDetailsTaxIdsPostRequest
}

/**
 * Request parameters for apiV1OrganizationsOrganizationIdBillingDetailsTaxIdsTaxIdDelete operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1OrganizationsOrganizationIdBillingDetailsTaxIdsTaxIdDeleteRequest
 */
export interface DefaultApiApiV1OrganizationsOrganizationIdBillingDetailsTaxIdsTaxIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1OrganizationsOrganizationIdBillingDetailsTaxIdsTaxIdDelete
     */
    readonly organizationId: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1OrganizationsOrganizationIdBillingDetailsTaxIdsTaxIdDelete
     */
    readonly taxId: string
}

/**
 * Request parameters for apiV1OrganizationsOrganizationIdCustomerPortalSessionPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1OrganizationsOrganizationIdCustomerPortalSessionPostRequest
 */
export interface DefaultApiApiV1OrganizationsOrganizationIdCustomerPortalSessionPostRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1OrganizationsOrganizationIdCustomerPortalSessionPost
     */
    readonly organizationId: string
}

/**
 * Request parameters for apiV1OrganizationsOrganizationIdInvoicesGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1OrganizationsOrganizationIdInvoicesGetRequest
 */
export interface DefaultApiApiV1OrganizationsOrganizationIdInvoicesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1OrganizationsOrganizationIdInvoicesGet
     */
    readonly organizationId: string
}

/**
 * Request parameters for apiV1OrganizationsOrganizationIdLicensesGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1OrganizationsOrganizationIdLicensesGetRequest
 */
export interface DefaultApiApiV1OrganizationsOrganizationIdLicensesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1OrganizationsOrganizationIdLicensesGet
     */
    readonly organizationId: string
}

/**
 * Request parameters for apiV1OrganizationsOrganizationIdPlanBillingGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1OrganizationsOrganizationIdPlanBillingGetRequest
 */
export interface DefaultApiApiV1OrganizationsOrganizationIdPlanBillingGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1OrganizationsOrganizationIdPlanBillingGet
     */
    readonly organizationId: string
}

/**
 * Request parameters for apiV1OrganizationsOrganizationIdPlanGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1OrganizationsOrganizationIdPlanGetRequest
 */
export interface DefaultApiApiV1OrganizationsOrganizationIdPlanGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1OrganizationsOrganizationIdPlanGet
     */
    readonly organizationId: string
}

/**
 * Request parameters for apiV1OrganizationsOrganizationIdPlanTableGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1OrganizationsOrganizationIdPlanTableGetRequest
 */
export interface DefaultApiApiV1OrganizationsOrganizationIdPlanTableGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1OrganizationsOrganizationIdPlanTableGet
     */
    readonly organizationId: string
}

/**
 * Request parameters for apiV1OrganizationsOrganizationIdPlansGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1OrganizationsOrganizationIdPlansGetRequest
 */
export interface DefaultApiApiV1OrganizationsOrganizationIdPlansGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1OrganizationsOrganizationIdPlansGet
     */
    readonly organizationId: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1OrganizationsOrganizationIdPlansGet
     */
    readonly workspaceId?: string
}

/**
 * Request parameters for apiV1OrganizationsOrganizationIdPlansTableGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1OrganizationsOrganizationIdPlansTableGetRequest
 */
export interface DefaultApiApiV1OrganizationsOrganizationIdPlansTableGetRequest {
    /**
     * 
     * @type {'monthly' | 'yearly'}
     * @memberof DefaultApiApiV1OrganizationsOrganizationIdPlansTableGet
     */
    readonly billingCycle: ApiV1OrganizationsOrganizationIdPlansTableGetBillingCycleEnum

    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1OrganizationsOrganizationIdPlansTableGet
     */
    readonly organizationId: string
}

/**
 * Request parameters for apiV1OrganizationsOrganizationIdSessionTrialPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1OrganizationsOrganizationIdSessionTrialPostRequest
 */
export interface DefaultApiApiV1OrganizationsOrganizationIdSessionTrialPostRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1OrganizationsOrganizationIdSessionTrialPost
     */
    readonly organizationId: string

    /**
     * 
     * @type {ApiV1OrganizationsOrganizationIdSessionTrialPostRequest}
     * @memberof DefaultApiApiV1OrganizationsOrganizationIdSessionTrialPost
     */
    readonly apiV1OrganizationsOrganizationIdSessionTrialPostRequest: ApiV1OrganizationsOrganizationIdSessionTrialPostRequest
}

/**
 * Request parameters for apiV1PasswordBackupPrivateKeyPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1PasswordBackupPrivateKeyPostRequest
 */
export interface DefaultApiApiV1PasswordBackupPrivateKeyPostRequest {
    /**
     * 
     * @type {ApiV1PasswordBackupPrivateKeyPostRequest}
     * @memberof DefaultApiApiV1PasswordBackupPrivateKeyPost
     */
    readonly apiV1PasswordBackupPrivateKeyPostRequest: ApiV1PasswordBackupPrivateKeyPostRequest
}

/**
 * Request parameters for apiV1PasswordChangePasswordPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1PasswordChangePasswordPostRequest
 */
export interface DefaultApiApiV1PasswordChangePasswordPostRequest {
    /**
     * 
     * @type {ApiV1PasswordChangePasswordPostRequest}
     * @memberof DefaultApiApiV1PasswordChangePasswordPost
     */
    readonly apiV1PasswordChangePasswordPostRequest: ApiV1PasswordChangePasswordPostRequest
}

/**
 * Request parameters for apiV1PasswordEmailPasswordResetPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1PasswordEmailPasswordResetPostRequest
 */
export interface DefaultApiApiV1PasswordEmailPasswordResetPostRequest {
    /**
     * 
     * @type {ApiV1PasswordEmailPasswordResetPostRequest}
     * @memberof DefaultApiApiV1PasswordEmailPasswordResetPost
     */
    readonly apiV1PasswordEmailPasswordResetPostRequest: ApiV1PasswordEmailPasswordResetPostRequest
}

/**
 * Request parameters for apiV1PasswordEmailPasswordResetVerifyPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1PasswordEmailPasswordResetVerifyPostRequest
 */
export interface DefaultApiApiV1PasswordEmailPasswordResetVerifyPostRequest {
    /**
     * 
     * @type {ApiV1PasswordEmailPasswordResetVerifyPostRequest}
     * @memberof DefaultApiApiV1PasswordEmailPasswordResetVerifyPost
     */
    readonly apiV1PasswordEmailPasswordResetVerifyPostRequest: ApiV1PasswordEmailPasswordResetVerifyPostRequest
}

/**
 * Request parameters for apiV1PasswordPasswordResetPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1PasswordPasswordResetPostRequest
 */
export interface DefaultApiApiV1PasswordPasswordResetPostRequest {
    /**
     * 
     * @type {ApiV1PasswordPasswordResetPostRequest}
     * @memberof DefaultApiApiV1PasswordPasswordResetPost
     */
    readonly apiV1PasswordPasswordResetPostRequest: ApiV1PasswordPasswordResetPostRequest
}

/**
 * Request parameters for apiV1PasswordSrp1Post operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1PasswordSrp1PostRequest
 */
export interface DefaultApiApiV1PasswordSrp1PostRequest {
    /**
     * 
     * @type {ApiV1PasswordSrp1PostRequest}
     * @memberof DefaultApiApiV1PasswordSrp1Post
     */
    readonly apiV1PasswordSrp1PostRequest: ApiV1PasswordSrp1PostRequest
}

/**
 * Request parameters for apiV1PkiAlertsAlertIdDelete operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1PkiAlertsAlertIdDeleteRequest
 */
export interface DefaultApiApiV1PkiAlertsAlertIdDeleteRequest {
    /**
     * The ID of the alert to delete
     * @type {string}
     * @memberof DefaultApiApiV1PkiAlertsAlertIdDelete
     */
    readonly alertId: string
}

/**
 * Request parameters for apiV1PkiAlertsAlertIdGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1PkiAlertsAlertIdGetRequest
 */
export interface DefaultApiApiV1PkiAlertsAlertIdGetRequest {
    /**
     * The ID of the alert to get
     * @type {string}
     * @memberof DefaultApiApiV1PkiAlertsAlertIdGet
     */
    readonly alertId: string
}

/**
 * Request parameters for apiV1PkiAlertsAlertIdPatch operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1PkiAlertsAlertIdPatchRequest
 */
export interface DefaultApiApiV1PkiAlertsAlertIdPatchRequest {
    /**
     * The ID of the alert to update
     * @type {string}
     * @memberof DefaultApiApiV1PkiAlertsAlertIdPatch
     */
    readonly alertId: string

    /**
     * 
     * @type {ApiV1PkiAlertsAlertIdPatchRequest}
     * @memberof DefaultApiApiV1PkiAlertsAlertIdPatch
     */
    readonly apiV1PkiAlertsAlertIdPatchRequest?: ApiV1PkiAlertsAlertIdPatchRequest
}

/**
 * Request parameters for apiV1PkiAlertsPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1PkiAlertsPostRequest
 */
export interface DefaultApiApiV1PkiAlertsPostRequest {
    /**
     * 
     * @type {ApiV1PkiAlertsPostRequest}
     * @memberof DefaultApiApiV1PkiAlertsPost
     */
    readonly apiV1PkiAlertsPostRequest: ApiV1PkiAlertsPostRequest
}

/**
 * Request parameters for apiV1PkiCaCaIdCaCertificatesGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1PkiCaCaIdCaCertificatesGetRequest
 */
export interface DefaultApiApiV1PkiCaCaIdCaCertificatesGetRequest {
    /**
     * The ID of the CA to get the CA certificates for
     * @type {string}
     * @memberof DefaultApiApiV1PkiCaCaIdCaCertificatesGet
     */
    readonly caId: string
}

/**
 * Request parameters for apiV1PkiCaCaIdCertificateGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1PkiCaCaIdCertificateGetRequest
 */
export interface DefaultApiApiV1PkiCaCaIdCertificateGetRequest {
    /**
     * The ID of the CA to get the certificate body and certificate chain from
     * @type {string}
     * @memberof DefaultApiApiV1PkiCaCaIdCertificateGet
     */
    readonly caId: string
}

/**
 * Request parameters for apiV1PkiCaCaIdCrlsGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1PkiCaCaIdCrlsGetRequest
 */
export interface DefaultApiApiV1PkiCaCaIdCrlsGetRequest {
    /**
     * The ID of the CA to get the certificate revocation lists (CRLs) for
     * @type {string}
     * @memberof DefaultApiApiV1PkiCaCaIdCrlsGet
     */
    readonly caId: string
}

/**
 * Request parameters for apiV1PkiCaCaIdCsrGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1PkiCaCaIdCsrGetRequest
 */
export interface DefaultApiApiV1PkiCaCaIdCsrGetRequest {
    /**
     * The ID of the CA to generate CSR from
     * @type {string}
     * @memberof DefaultApiApiV1PkiCaCaIdCsrGet
     */
    readonly caId: string
}

/**
 * Request parameters for apiV1PkiCaCaIdDelete operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1PkiCaCaIdDeleteRequest
 */
export interface DefaultApiApiV1PkiCaCaIdDeleteRequest {
    /**
     * The ID of the CA to delete
     * @type {string}
     * @memberof DefaultApiApiV1PkiCaCaIdDelete
     */
    readonly caId: string
}

/**
 * Request parameters for apiV1PkiCaCaIdGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1PkiCaCaIdGetRequest
 */
export interface DefaultApiApiV1PkiCaCaIdGetRequest {
    /**
     * The ID of the CA to get
     * @type {string}
     * @memberof DefaultApiApiV1PkiCaCaIdGet
     */
    readonly caId: string
}

/**
 * Request parameters for apiV1PkiCaCaIdImportCertificatePost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1PkiCaCaIdImportCertificatePostRequest
 */
export interface DefaultApiApiV1PkiCaCaIdImportCertificatePostRequest {
    /**
     * The ID of the CA to import the certificate for
     * @type {string}
     * @memberof DefaultApiApiV1PkiCaCaIdImportCertificatePost
     */
    readonly caId: string

    /**
     * 
     * @type {ApiV1PkiCaCaIdImportCertificatePostRequest}
     * @memberof DefaultApiApiV1PkiCaCaIdImportCertificatePost
     */
    readonly apiV1PkiCaCaIdImportCertificatePostRequest: ApiV1PkiCaCaIdImportCertificatePostRequest
}

/**
 * Request parameters for apiV1PkiCaCaIdIssueCertificatePost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1PkiCaCaIdIssueCertificatePostRequest
 */
export interface DefaultApiApiV1PkiCaCaIdIssueCertificatePostRequest {
    /**
     * The ID of the CA to issue the certificate from
     * @type {string}
     * @memberof DefaultApiApiV1PkiCaCaIdIssueCertificatePost
     */
    readonly caId: string

    /**
     * 
     * @type {ApiV1PkiCaCaIdIssueCertificatePostRequest}
     * @memberof DefaultApiApiV1PkiCaCaIdIssueCertificatePost
     */
    readonly apiV1PkiCaCaIdIssueCertificatePostRequest: ApiV1PkiCaCaIdIssueCertificatePostRequest
}

/**
 * Request parameters for apiV1PkiCaCaIdPatch operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1PkiCaCaIdPatchRequest
 */
export interface DefaultApiApiV1PkiCaCaIdPatchRequest {
    /**
     * The ID of the CA to update
     * @type {string}
     * @memberof DefaultApiApiV1PkiCaCaIdPatch
     */
    readonly caId: string

    /**
     * 
     * @type {ApiV1PkiCaCaIdPatchRequest}
     * @memberof DefaultApiApiV1PkiCaCaIdPatch
     */
    readonly apiV1PkiCaCaIdPatchRequest?: ApiV1PkiCaCaIdPatchRequest
}

/**
 * Request parameters for apiV1PkiCaCaIdRenewPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1PkiCaCaIdRenewPostRequest
 */
export interface DefaultApiApiV1PkiCaCaIdRenewPostRequest {
    /**
     * The ID of the CA to renew the CA certificate for
     * @type {string}
     * @memberof DefaultApiApiV1PkiCaCaIdRenewPost
     */
    readonly caId: string

    /**
     * 
     * @type {ApiV1PkiCaCaIdRenewPostRequest}
     * @memberof DefaultApiApiV1PkiCaCaIdRenewPost
     */
    readonly apiV1PkiCaCaIdRenewPostRequest: ApiV1PkiCaCaIdRenewPostRequest
}

/**
 * Request parameters for apiV1PkiCaCaIdSignCertificatePost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1PkiCaCaIdSignCertificatePostRequest
 */
export interface DefaultApiApiV1PkiCaCaIdSignCertificatePostRequest {
    /**
     * The ID of the CA to issue the certificate from
     * @type {string}
     * @memberof DefaultApiApiV1PkiCaCaIdSignCertificatePost
     */
    readonly caId: string

    /**
     * 
     * @type {ApiV1PkiCaCaIdSignCertificatePostRequest}
     * @memberof DefaultApiApiV1PkiCaCaIdSignCertificatePost
     */
    readonly apiV1PkiCaCaIdSignCertificatePostRequest: ApiV1PkiCaCaIdSignCertificatePostRequest
}

/**
 * Request parameters for apiV1PkiCaCaIdSignIntermediatePost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1PkiCaCaIdSignIntermediatePostRequest
 */
export interface DefaultApiApiV1PkiCaCaIdSignIntermediatePostRequest {
    /**
     * The ID of the CA to sign the intermediate certificate with
     * @type {string}
     * @memberof DefaultApiApiV1PkiCaCaIdSignIntermediatePost
     */
    readonly caId: string

    /**
     * 
     * @type {ApiV1PkiCaCaIdSignIntermediatePostRequest}
     * @memberof DefaultApiApiV1PkiCaCaIdSignIntermediatePost
     */
    readonly apiV1PkiCaCaIdSignIntermediatePostRequest: ApiV1PkiCaCaIdSignIntermediatePostRequest
}

/**
 * Request parameters for apiV1PkiCaPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1PkiCaPostRequest
 */
export interface DefaultApiApiV1PkiCaPostRequest {
    /**
     * 
     * @type {ApiV1PkiCaPostRequest}
     * @memberof DefaultApiApiV1PkiCaPost
     */
    readonly apiV1PkiCaPostRequest: ApiV1PkiCaPostRequest
}

/**
 * Request parameters for apiV1PkiCertificateTemplatesCertificateTemplateIdDelete operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1PkiCertificateTemplatesCertificateTemplateIdDeleteRequest
 */
export interface DefaultApiApiV1PkiCertificateTemplatesCertificateTemplateIdDeleteRequest {
    /**
     * The ID of the certificate template to delete
     * @type {string}
     * @memberof DefaultApiApiV1PkiCertificateTemplatesCertificateTemplateIdDelete
     */
    readonly certificateTemplateId: string
}

/**
 * Request parameters for apiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigGetRequest
 */
export interface DefaultApiApiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigGet
     */
    readonly certificateTemplateId: string
}

/**
 * Request parameters for apiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPatch operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPatchRequest
 */
export interface DefaultApiApiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPatch
     */
    readonly certificateTemplateId: string

    /**
     * 
     * @type {ApiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPatchRequest}
     * @memberof DefaultApiApiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPatch
     */
    readonly apiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPatchRequest?: ApiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPatchRequest
}

/**
 * Request parameters for apiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPostRequest
 */
export interface DefaultApiApiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPostRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPost
     */
    readonly certificateTemplateId: string

    /**
     * 
     * @type {ApiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPostRequest}
     * @memberof DefaultApiApiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPost
     */
    readonly apiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPostRequest: ApiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPostRequest
}

/**
 * Request parameters for apiV1PkiCertificateTemplatesCertificateTemplateIdGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1PkiCertificateTemplatesCertificateTemplateIdGetRequest
 */
export interface DefaultApiApiV1PkiCertificateTemplatesCertificateTemplateIdGetRequest {
    /**
     * The ID of the certificate template to get
     * @type {string}
     * @memberof DefaultApiApiV1PkiCertificateTemplatesCertificateTemplateIdGet
     */
    readonly certificateTemplateId: string
}

/**
 * Request parameters for apiV1PkiCertificateTemplatesCertificateTemplateIdPatch operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1PkiCertificateTemplatesCertificateTemplateIdPatchRequest
 */
export interface DefaultApiApiV1PkiCertificateTemplatesCertificateTemplateIdPatchRequest {
    /**
     * The ID of the certificate template to update
     * @type {string}
     * @memberof DefaultApiApiV1PkiCertificateTemplatesCertificateTemplateIdPatch
     */
    readonly certificateTemplateId: string

    /**
     * 
     * @type {ApiV1PkiCertificateTemplatesCertificateTemplateIdPatchRequest}
     * @memberof DefaultApiApiV1PkiCertificateTemplatesCertificateTemplateIdPatch
     */
    readonly apiV1PkiCertificateTemplatesCertificateTemplateIdPatchRequest?: ApiV1PkiCertificateTemplatesCertificateTemplateIdPatchRequest
}

/**
 * Request parameters for apiV1PkiCertificateTemplatesPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1PkiCertificateTemplatesPostRequest
 */
export interface DefaultApiApiV1PkiCertificateTemplatesPostRequest {
    /**
     * 
     * @type {ApiV1PkiCertificateTemplatesPostRequest}
     * @memberof DefaultApiApiV1PkiCertificateTemplatesPost
     */
    readonly apiV1PkiCertificateTemplatesPostRequest: ApiV1PkiCertificateTemplatesPostRequest
}

/**
 * Request parameters for apiV1PkiCertificatesIssueCertificatePost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1PkiCertificatesIssueCertificatePostRequest
 */
export interface DefaultApiApiV1PkiCertificatesIssueCertificatePostRequest {
    /**
     * 
     * @type {ApiV1PkiCertificatesIssueCertificatePostRequest}
     * @memberof DefaultApiApiV1PkiCertificatesIssueCertificatePost
     */
    readonly apiV1PkiCertificatesIssueCertificatePostRequest: ApiV1PkiCertificatesIssueCertificatePostRequest
}

/**
 * Request parameters for apiV1PkiCertificatesSerialNumberCertificateGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1PkiCertificatesSerialNumberCertificateGetRequest
 */
export interface DefaultApiApiV1PkiCertificatesSerialNumberCertificateGetRequest {
    /**
     * The serial number of the certificate to get the certificate body and certificate chain for
     * @type {string}
     * @memberof DefaultApiApiV1PkiCertificatesSerialNumberCertificateGet
     */
    readonly serialNumber: string
}

/**
 * Request parameters for apiV1PkiCertificatesSerialNumberDelete operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1PkiCertificatesSerialNumberDeleteRequest
 */
export interface DefaultApiApiV1PkiCertificatesSerialNumberDeleteRequest {
    /**
     * The serial number of the certificate to delete
     * @type {string}
     * @memberof DefaultApiApiV1PkiCertificatesSerialNumberDelete
     */
    readonly serialNumber: string
}

/**
 * Request parameters for apiV1PkiCertificatesSerialNumberGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1PkiCertificatesSerialNumberGetRequest
 */
export interface DefaultApiApiV1PkiCertificatesSerialNumberGetRequest {
    /**
     * The serial number of the certificate to get
     * @type {string}
     * @memberof DefaultApiApiV1PkiCertificatesSerialNumberGet
     */
    readonly serialNumber: string
}

/**
 * Request parameters for apiV1PkiCertificatesSerialNumberRevokePost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1PkiCertificatesSerialNumberRevokePostRequest
 */
export interface DefaultApiApiV1PkiCertificatesSerialNumberRevokePostRequest {
    /**
     * The serial number of the certificate to revoke. The revoked certificate will be added to the certificate revocation list (CRL) of the CA.
     * @type {string}
     * @memberof DefaultApiApiV1PkiCertificatesSerialNumberRevokePost
     */
    readonly serialNumber: string

    /**
     * 
     * @type {ApiV1PkiCertificatesSerialNumberRevokePostRequest}
     * @memberof DefaultApiApiV1PkiCertificatesSerialNumberRevokePost
     */
    readonly apiV1PkiCertificatesSerialNumberRevokePostRequest: ApiV1PkiCertificatesSerialNumberRevokePostRequest
}

/**
 * Request parameters for apiV1PkiCertificatesSignCertificatePost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1PkiCertificatesSignCertificatePostRequest
 */
export interface DefaultApiApiV1PkiCertificatesSignCertificatePostRequest {
    /**
     * 
     * @type {ApiV1PkiCertificatesSignCertificatePostRequest}
     * @memberof DefaultApiApiV1PkiCertificatesSignCertificatePost
     */
    readonly apiV1PkiCertificatesSignCertificatePostRequest: ApiV1PkiCertificatesSignCertificatePostRequest
}

/**
 * Request parameters for apiV1PkiCollectionsCollectionIdDelete operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1PkiCollectionsCollectionIdDeleteRequest
 */
export interface DefaultApiApiV1PkiCollectionsCollectionIdDeleteRequest {
    /**
     * The ID of the PKI collection to delete
     * @type {string}
     * @memberof DefaultApiApiV1PkiCollectionsCollectionIdDelete
     */
    readonly collectionId: string
}

/**
 * Request parameters for apiV1PkiCollectionsCollectionIdGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1PkiCollectionsCollectionIdGetRequest
 */
export interface DefaultApiApiV1PkiCollectionsCollectionIdGetRequest {
    /**
     * The ID of the PKI collection to get
     * @type {string}
     * @memberof DefaultApiApiV1PkiCollectionsCollectionIdGet
     */
    readonly collectionId: string
}

/**
 * Request parameters for apiV1PkiCollectionsCollectionIdItemsCollectionItemIdDelete operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1PkiCollectionsCollectionIdItemsCollectionItemIdDeleteRequest
 */
export interface DefaultApiApiV1PkiCollectionsCollectionIdItemsCollectionItemIdDeleteRequest {
    /**
     * The ID of the PKI collection to delete the item from
     * @type {string}
     * @memberof DefaultApiApiV1PkiCollectionsCollectionIdItemsCollectionItemIdDelete
     */
    readonly collectionId: string

    /**
     * The ID of the PKI collection item to delete
     * @type {string}
     * @memberof DefaultApiApiV1PkiCollectionsCollectionIdItemsCollectionItemIdDelete
     */
    readonly collectionItemId: string
}

/**
 * Request parameters for apiV1PkiCollectionsCollectionIdItemsGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1PkiCollectionsCollectionIdItemsGetRequest
 */
export interface DefaultApiApiV1PkiCollectionsCollectionIdItemsGetRequest {
    /**
     * The ID of the PKI collection to list items from
     * @type {string}
     * @memberof DefaultApiApiV1PkiCollectionsCollectionIdItemsGet
     */
    readonly collectionId: string

    /**
     * The type of the PKI collection item to list
     * @type {'certificate' | 'ca'}
     * @memberof DefaultApiApiV1PkiCollectionsCollectionIdItemsGet
     */
    readonly type?: ApiV1PkiCollectionsCollectionIdItemsGetTypeEnum

    /**
     * The offset to start from
     * @type {number}
     * @memberof DefaultApiApiV1PkiCollectionsCollectionIdItemsGet
     */
    readonly offset?: number

    /**
     * The number of items to return
     * @type {number}
     * @memberof DefaultApiApiV1PkiCollectionsCollectionIdItemsGet
     */
    readonly limit?: number
}

/**
 * Request parameters for apiV1PkiCollectionsCollectionIdItemsPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1PkiCollectionsCollectionIdItemsPostRequest
 */
export interface DefaultApiApiV1PkiCollectionsCollectionIdItemsPostRequest {
    /**
     * The ID of the PKI collection to add the item to
     * @type {string}
     * @memberof DefaultApiApiV1PkiCollectionsCollectionIdItemsPost
     */
    readonly collectionId: string

    /**
     * 
     * @type {ApiV1PkiCollectionsCollectionIdItemsPostRequest}
     * @memberof DefaultApiApiV1PkiCollectionsCollectionIdItemsPost
     */
    readonly apiV1PkiCollectionsCollectionIdItemsPostRequest: ApiV1PkiCollectionsCollectionIdItemsPostRequest
}

/**
 * Request parameters for apiV1PkiCollectionsCollectionIdPatch operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1PkiCollectionsCollectionIdPatchRequest
 */
export interface DefaultApiApiV1PkiCollectionsCollectionIdPatchRequest {
    /**
     * The ID of the PKI collection to update
     * @type {string}
     * @memberof DefaultApiApiV1PkiCollectionsCollectionIdPatch
     */
    readonly collectionId: string

    /**
     * 
     * @type {ApiV1PkiCollectionsCollectionIdPatchRequest}
     * @memberof DefaultApiApiV1PkiCollectionsCollectionIdPatch
     */
    readonly apiV1PkiCollectionsCollectionIdPatchRequest?: ApiV1PkiCollectionsCollectionIdPatchRequest
}

/**
 * Request parameters for apiV1PkiCollectionsPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1PkiCollectionsPostRequest
 */
export interface DefaultApiApiV1PkiCollectionsPostRequest {
    /**
     * 
     * @type {ApiV1PkiCollectionsPostRequest}
     * @memberof DefaultApiApiV1PkiCollectionsPost
     */
    readonly apiV1PkiCollectionsPostRequest: ApiV1PkiCollectionsPostRequest
}

/**
 * Request parameters for apiV1PkiCrlCrlIdGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1PkiCrlCrlIdGetRequest
 */
export interface DefaultApiApiV1PkiCrlCrlIdGetRequest {
    /**
     * The ID of the certificate revocation list (CRL) to get
     * @type {string}
     * @memberof DefaultApiApiV1PkiCrlCrlIdGet
     */
    readonly crlId: string
}

/**
 * Request parameters for apiV1RateLimitPut operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1RateLimitPutRequest
 */
export interface DefaultApiApiV1RateLimitPutRequest {
    /**
     * 
     * @type {ApiV1RateLimitPutRequest}
     * @memberof DefaultApiApiV1RateLimitPut
     */
    readonly apiV1RateLimitPutRequest: ApiV1RateLimitPutRequest
}

/**
 * Request parameters for apiV1ScimGroupsGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1ScimGroupsGetRequest
 */
export interface DefaultApiApiV1ScimGroupsGetRequest {
    /**
     * 
     * @type {number}
     * @memberof DefaultApiApiV1ScimGroupsGet
     */
    readonly startIndex?: number

    /**
     * 
     * @type {number}
     * @memberof DefaultApiApiV1ScimGroupsGet
     */
    readonly count?: number

    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1ScimGroupsGet
     */
    readonly filter?: string
}

/**
 * Request parameters for apiV1ScimGroupsGroupIdDelete operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1ScimGroupsGroupIdDeleteRequest
 */
export interface DefaultApiApiV1ScimGroupsGroupIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1ScimGroupsGroupIdDelete
     */
    readonly groupId: string
}

/**
 * Request parameters for apiV1ScimGroupsGroupIdGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1ScimGroupsGroupIdGetRequest
 */
export interface DefaultApiApiV1ScimGroupsGroupIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1ScimGroupsGroupIdGet
     */
    readonly groupId: string
}

/**
 * Request parameters for apiV1ScimGroupsGroupIdPatch operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1ScimGroupsGroupIdPatchRequest
 */
export interface DefaultApiApiV1ScimGroupsGroupIdPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1ScimGroupsGroupIdPatch
     */
    readonly groupId: string

    /**
     * 
     * @type {ApiV1ScimGroupsGroupIdPatchRequest}
     * @memberof DefaultApiApiV1ScimGroupsGroupIdPatch
     */
    readonly apiV1ScimGroupsGroupIdPatchRequest: ApiV1ScimGroupsGroupIdPatchRequest
}

/**
 * Request parameters for apiV1ScimGroupsGroupIdPut operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1ScimGroupsGroupIdPutRequest
 */
export interface DefaultApiApiV1ScimGroupsGroupIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1ScimGroupsGroupIdPut
     */
    readonly groupId: string

    /**
     * 
     * @type {ApiV1ScimGroupsGroupIdPutRequest}
     * @memberof DefaultApiApiV1ScimGroupsGroupIdPut
     */
    readonly apiV1ScimGroupsGroupIdPutRequest: ApiV1ScimGroupsGroupIdPutRequest
}

/**
 * Request parameters for apiV1ScimGroupsPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1ScimGroupsPostRequest
 */
export interface DefaultApiApiV1ScimGroupsPostRequest {
    /**
     * 
     * @type {ApiV1ScimGroupsPostRequest}
     * @memberof DefaultApiApiV1ScimGroupsPost
     */
    readonly apiV1ScimGroupsPostRequest: ApiV1ScimGroupsPostRequest
}

/**
 * Request parameters for apiV1ScimScimTokensGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1ScimScimTokensGetRequest
 */
export interface DefaultApiApiV1ScimScimTokensGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1ScimScimTokensGet
     */
    readonly organizationId: string
}

/**
 * Request parameters for apiV1ScimScimTokensPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1ScimScimTokensPostRequest
 */
export interface DefaultApiApiV1ScimScimTokensPostRequest {
    /**
     * 
     * @type {ApiV1ScimScimTokensPostRequest}
     * @memberof DefaultApiApiV1ScimScimTokensPost
     */
    readonly apiV1ScimScimTokensPostRequest: ApiV1ScimScimTokensPostRequest
}

/**
 * Request parameters for apiV1ScimScimTokensScimTokenIdDelete operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1ScimScimTokensScimTokenIdDeleteRequest
 */
export interface DefaultApiApiV1ScimScimTokensScimTokenIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1ScimScimTokensScimTokenIdDelete
     */
    readonly scimTokenId: string
}

/**
 * Request parameters for apiV1ScimUsersGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1ScimUsersGetRequest
 */
export interface DefaultApiApiV1ScimUsersGetRequest {
    /**
     * 
     * @type {number}
     * @memberof DefaultApiApiV1ScimUsersGet
     */
    readonly startIndex?: number

    /**
     * 
     * @type {number}
     * @memberof DefaultApiApiV1ScimUsersGet
     */
    readonly count?: number

    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1ScimUsersGet
     */
    readonly filter?: string
}

/**
 * Request parameters for apiV1ScimUsersOrgMembershipIdDelete operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1ScimUsersOrgMembershipIdDeleteRequest
 */
export interface DefaultApiApiV1ScimUsersOrgMembershipIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1ScimUsersOrgMembershipIdDelete
     */
    readonly orgMembershipId: string
}

/**
 * Request parameters for apiV1ScimUsersOrgMembershipIdGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1ScimUsersOrgMembershipIdGetRequest
 */
export interface DefaultApiApiV1ScimUsersOrgMembershipIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1ScimUsersOrgMembershipIdGet
     */
    readonly orgMembershipId: string
}

/**
 * Request parameters for apiV1ScimUsersOrgMembershipIdPut operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1ScimUsersOrgMembershipIdPutRequest
 */
export interface DefaultApiApiV1ScimUsersOrgMembershipIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1ScimUsersOrgMembershipIdPut
     */
    readonly orgMembershipId: string

    /**
     * 
     * @type {ApiV1ScimUsersOrgMembershipIdPutRequest}
     * @memberof DefaultApiApiV1ScimUsersOrgMembershipIdPut
     */
    readonly apiV1ScimUsersOrgMembershipIdPutRequest: ApiV1ScimUsersOrgMembershipIdPutRequest
}

/**
 * Request parameters for apiV1ScimUsersPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1ScimUsersPostRequest
 */
export interface DefaultApiApiV1ScimUsersPostRequest {
    /**
     * 
     * @type {ApiV1ScimUsersPostRequest}
     * @memberof DefaultApiApiV1ScimUsersPost
     */
    readonly apiV1ScimUsersPostRequest: ApiV1ScimUsersPostRequest
}

/**
 * Request parameters for apiV1SecretApprovalRequestsCountGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1SecretApprovalRequestsCountGetRequest
 */
export interface DefaultApiApiV1SecretApprovalRequestsCountGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1SecretApprovalRequestsCountGet
     */
    readonly workspaceId: string
}

/**
 * Request parameters for apiV1SecretApprovalRequestsGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1SecretApprovalRequestsGetRequest
 */
export interface DefaultApiApiV1SecretApprovalRequestsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1SecretApprovalRequestsGet
     */
    readonly workspaceId: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1SecretApprovalRequestsGet
     */
    readonly environment?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1SecretApprovalRequestsGet
     */
    readonly committer?: string

    /**
     * 
     * @type {'open' | 'close'}
     * @memberof DefaultApiApiV1SecretApprovalRequestsGet
     */
    readonly status?: ApiV1SecretApprovalRequestsGetStatusEnum

    /**
     * 
     * @type {number}
     * @memberof DefaultApiApiV1SecretApprovalRequestsGet
     */
    readonly limit?: number

    /**
     * 
     * @type {number}
     * @memberof DefaultApiApiV1SecretApprovalRequestsGet
     */
    readonly offset?: number
}

/**
 * Request parameters for apiV1SecretApprovalRequestsIdGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1SecretApprovalRequestsIdGetRequest
 */
export interface DefaultApiApiV1SecretApprovalRequestsIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1SecretApprovalRequestsIdGet
     */
    readonly id: string
}

/**
 * Request parameters for apiV1SecretApprovalRequestsIdMergePost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1SecretApprovalRequestsIdMergePostRequest
 */
export interface DefaultApiApiV1SecretApprovalRequestsIdMergePostRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1SecretApprovalRequestsIdMergePost
     */
    readonly id: string

    /**
     * 
     * @type {ApiV1SecretApprovalRequestsIdMergePostRequest}
     * @memberof DefaultApiApiV1SecretApprovalRequestsIdMergePost
     */
    readonly apiV1SecretApprovalRequestsIdMergePostRequest?: ApiV1SecretApprovalRequestsIdMergePostRequest
}

/**
 * Request parameters for apiV1SecretApprovalRequestsIdReviewPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1SecretApprovalRequestsIdReviewPostRequest
 */
export interface DefaultApiApiV1SecretApprovalRequestsIdReviewPostRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1SecretApprovalRequestsIdReviewPost
     */
    readonly id: string

    /**
     * 
     * @type {ApiV1SecretApprovalRequestsIdReviewPostRequest}
     * @memberof DefaultApiApiV1SecretApprovalRequestsIdReviewPost
     */
    readonly apiV1SecretApprovalRequestsIdReviewPostRequest: ApiV1SecretApprovalRequestsIdReviewPostRequest
}

/**
 * Request parameters for apiV1SecretApprovalRequestsIdStatusPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1SecretApprovalRequestsIdStatusPostRequest
 */
export interface DefaultApiApiV1SecretApprovalRequestsIdStatusPostRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1SecretApprovalRequestsIdStatusPost
     */
    readonly id: string

    /**
     * 
     * @type {ApiV1SecretApprovalRequestsIdStatusPostRequest}
     * @memberof DefaultApiApiV1SecretApprovalRequestsIdStatusPost
     */
    readonly apiV1SecretApprovalRequestsIdStatusPostRequest: ApiV1SecretApprovalRequestsIdStatusPostRequest
}

/**
 * Request parameters for apiV1SecretApprovalsBoardGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1SecretApprovalsBoardGetRequest
 */
export interface DefaultApiApiV1SecretApprovalsBoardGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1SecretApprovalsBoardGet
     */
    readonly workspaceId: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1SecretApprovalsBoardGet
     */
    readonly environment: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1SecretApprovalsBoardGet
     */
    readonly secretPath: string
}

/**
 * Request parameters for apiV1SecretApprovalsGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1SecretApprovalsGetRequest
 */
export interface DefaultApiApiV1SecretApprovalsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1SecretApprovalsGet
     */
    readonly workspaceId: string
}

/**
 * Request parameters for apiV1SecretApprovalsPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1SecretApprovalsPostRequest
 */
export interface DefaultApiApiV1SecretApprovalsPostRequest {
    /**
     * 
     * @type {ApiV1SecretApprovalsPostRequest}
     * @memberof DefaultApiApiV1SecretApprovalsPost
     */
    readonly apiV1SecretApprovalsPostRequest: ApiV1SecretApprovalsPostRequest
}

/**
 * Request parameters for apiV1SecretApprovalsSapIdDelete operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1SecretApprovalsSapIdDeleteRequest
 */
export interface DefaultApiApiV1SecretApprovalsSapIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1SecretApprovalsSapIdDelete
     */
    readonly sapId: string
}

/**
 * Request parameters for apiV1SecretApprovalsSapIdPatch operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1SecretApprovalsSapIdPatchRequest
 */
export interface DefaultApiApiV1SecretApprovalsSapIdPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1SecretApprovalsSapIdPatch
     */
    readonly sapId: string

    /**
     * 
     * @type {ApiV1SecretApprovalsSapIdPatchRequest}
     * @memberof DefaultApiApiV1SecretApprovalsSapIdPatch
     */
    readonly apiV1SecretApprovalsSapIdPatchRequest: ApiV1SecretApprovalsSapIdPatchRequest
}

/**
 * Request parameters for apiV1SecretImportsGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1SecretImportsGetRequest
 */
export interface DefaultApiApiV1SecretImportsGetRequest {
    /**
     * The ID of the project to list secret imports from.
     * @type {string}
     * @memberof DefaultApiApiV1SecretImportsGet
     */
    readonly workspaceId: string

    /**
     * The slug of the environment to list secret imports from.
     * @type {string}
     * @memberof DefaultApiApiV1SecretImportsGet
     */
    readonly environment: string

    /**
     * The path to list secret imports from.
     * @type {string}
     * @memberof DefaultApiApiV1SecretImportsGet
     */
    readonly path?: string
}

/**
 * Request parameters for apiV1SecretImportsPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1SecretImportsPostRequest
 */
export interface DefaultApiApiV1SecretImportsPostRequest {
    /**
     * 
     * @type {ApiV1SecretImportsPostRequest}
     * @memberof DefaultApiApiV1SecretImportsPost
     */
    readonly apiV1SecretImportsPostRequest: ApiV1SecretImportsPostRequest
}

/**
 * Request parameters for apiV1SecretImportsSecretImportIdDelete operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1SecretImportsSecretImportIdDeleteRequest
 */
export interface DefaultApiApiV1SecretImportsSecretImportIdDeleteRequest {
    /**
     * The ID of the secret import to delete.
     * @type {string}
     * @memberof DefaultApiApiV1SecretImportsSecretImportIdDelete
     */
    readonly secretImportId: string

    /**
     * 
     * @type {ApiV1SecretImportsSecretImportIdDeleteRequest}
     * @memberof DefaultApiApiV1SecretImportsSecretImportIdDelete
     */
    readonly apiV1SecretImportsSecretImportIdDeleteRequest: ApiV1SecretImportsSecretImportIdDeleteRequest
}

/**
 * Request parameters for apiV1SecretImportsSecretImportIdPatch operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1SecretImportsSecretImportIdPatchRequest
 */
export interface DefaultApiApiV1SecretImportsSecretImportIdPatchRequest {
    /**
     * The ID of the secret import to update.
     * @type {string}
     * @memberof DefaultApiApiV1SecretImportsSecretImportIdPatch
     */
    readonly secretImportId: string

    /**
     * 
     * @type {ApiV1SecretImportsSecretImportIdPatchRequest}
     * @memberof DefaultApiApiV1SecretImportsSecretImportIdPatch
     */
    readonly apiV1SecretImportsSecretImportIdPatchRequest: ApiV1SecretImportsSecretImportIdPatchRequest
}

/**
 * Request parameters for apiV1SecretImportsSecretImportIdReplicationResyncPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1SecretImportsSecretImportIdReplicationResyncPostRequest
 */
export interface DefaultApiApiV1SecretImportsSecretImportIdReplicationResyncPostRequest {
    /**
     * The ID of the secret import to update.
     * @type {string}
     * @memberof DefaultApiApiV1SecretImportsSecretImportIdReplicationResyncPost
     */
    readonly secretImportId: string

    /**
     * 
     * @type {ApiV1SecretImportsSecretImportIdReplicationResyncPostRequest}
     * @memberof DefaultApiApiV1SecretImportsSecretImportIdReplicationResyncPost
     */
    readonly apiV1SecretImportsSecretImportIdReplicationResyncPostRequest: ApiV1SecretImportsSecretImportIdReplicationResyncPostRequest
}

/**
 * Request parameters for apiV1SecretImportsSecretsGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1SecretImportsSecretsGetRequest
 */
export interface DefaultApiApiV1SecretImportsSecretsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1SecretImportsSecretsGet
     */
    readonly workspaceId: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1SecretImportsSecretsGet
     */
    readonly environment: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1SecretImportsSecretsGet
     */
    readonly path?: string
}

/**
 * Request parameters for apiV1SecretImportsSecretsRawGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1SecretImportsSecretsRawGetRequest
 */
export interface DefaultApiApiV1SecretImportsSecretsRawGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1SecretImportsSecretsRawGet
     */
    readonly workspaceId: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1SecretImportsSecretsRawGet
     */
    readonly environment: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1SecretImportsSecretsRawGet
     */
    readonly path?: string
}

/**
 * Request parameters for apiV1SecretRotationProvidersWorkspaceIdGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1SecretRotationProvidersWorkspaceIdGetRequest
 */
export interface DefaultApiApiV1SecretRotationProvidersWorkspaceIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1SecretRotationProvidersWorkspaceIdGet
     */
    readonly workspaceId: string
}

/**
 * Request parameters for apiV1SecretRotationsGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1SecretRotationsGetRequest
 */
export interface DefaultApiApiV1SecretRotationsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1SecretRotationsGet
     */
    readonly workspaceId: string
}

/**
 * Request parameters for apiV1SecretRotationsIdDelete operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1SecretRotationsIdDeleteRequest
 */
export interface DefaultApiApiV1SecretRotationsIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1SecretRotationsIdDelete
     */
    readonly id: string
}

/**
 * Request parameters for apiV1SecretRotationsPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1SecretRotationsPostRequest
 */
export interface DefaultApiApiV1SecretRotationsPostRequest {
    /**
     * 
     * @type {ApiV1SecretRotationsPostRequest}
     * @memberof DefaultApiApiV1SecretRotationsPost
     */
    readonly apiV1SecretRotationsPostRequest: ApiV1SecretRotationsPostRequest
}

/**
 * Request parameters for apiV1SecretRotationsRestartPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1SecretRotationsRestartPostRequest
 */
export interface DefaultApiApiV1SecretRotationsRestartPostRequest {
    /**
     * 
     * @type {ApiV1SecretRotationsRestartPostRequest}
     * @memberof DefaultApiApiV1SecretRotationsRestartPost
     */
    readonly apiV1SecretRotationsRestartPostRequest: ApiV1SecretRotationsRestartPostRequest
}

/**
 * Request parameters for apiV1SecretScanningCreateInstallationSessionOrganizationPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1SecretScanningCreateInstallationSessionOrganizationPostRequest
 */
export interface DefaultApiApiV1SecretScanningCreateInstallationSessionOrganizationPostRequest {
    /**
     * 
     * @type {ApiV1SecretScanningCreateInstallationSessionOrganizationPostRequest}
     * @memberof DefaultApiApiV1SecretScanningCreateInstallationSessionOrganizationPost
     */
    readonly apiV1SecretScanningCreateInstallationSessionOrganizationPostRequest: ApiV1SecretScanningCreateInstallationSessionOrganizationPostRequest
}

/**
 * Request parameters for apiV1SecretScanningInstallationStatusOrganizationOrganizationIdGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1SecretScanningInstallationStatusOrganizationOrganizationIdGetRequest
 */
export interface DefaultApiApiV1SecretScanningInstallationStatusOrganizationOrganizationIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1SecretScanningInstallationStatusOrganizationOrganizationIdGet
     */
    readonly organizationId: string
}

/**
 * Request parameters for apiV1SecretScanningLinkInstallationPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1SecretScanningLinkInstallationPostRequest
 */
export interface DefaultApiApiV1SecretScanningLinkInstallationPostRequest {
    /**
     * 
     * @type {ApiV1SecretScanningLinkInstallationPostRequest}
     * @memberof DefaultApiApiV1SecretScanningLinkInstallationPost
     */
    readonly apiV1SecretScanningLinkInstallationPostRequest: ApiV1SecretScanningLinkInstallationPostRequest
}

/**
 * Request parameters for apiV1SecretScanningOrganizationOrganizationIdRisksGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1SecretScanningOrganizationOrganizationIdRisksGetRequest
 */
export interface DefaultApiApiV1SecretScanningOrganizationOrganizationIdRisksGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1SecretScanningOrganizationOrganizationIdRisksGet
     */
    readonly organizationId: string
}

/**
 * Request parameters for apiV1SecretScanningOrganizationOrganizationIdRisksRiskIdStatusPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1SecretScanningOrganizationOrganizationIdRisksRiskIdStatusPostRequest
 */
export interface DefaultApiApiV1SecretScanningOrganizationOrganizationIdRisksRiskIdStatusPostRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1SecretScanningOrganizationOrganizationIdRisksRiskIdStatusPost
     */
    readonly organizationId: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1SecretScanningOrganizationOrganizationIdRisksRiskIdStatusPost
     */
    readonly riskId: string

    /**
     * 
     * @type {ApiV1SecretScanningOrganizationOrganizationIdRisksRiskIdStatusPostRequest}
     * @memberof DefaultApiApiV1SecretScanningOrganizationOrganizationIdRisksRiskIdStatusPost
     */
    readonly apiV1SecretScanningOrganizationOrganizationIdRisksRiskIdStatusPostRequest: ApiV1SecretScanningOrganizationOrganizationIdRisksRiskIdStatusPostRequest
}

/**
 * Request parameters for apiV1SecretSecretIdSecretVersionsGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1SecretSecretIdSecretVersionsGetRequest
 */
export interface DefaultApiApiV1SecretSecretIdSecretVersionsGetRequest {
    /**
     * 
     * @type {number}
     * @memberof DefaultApiApiV1SecretSecretIdSecretVersionsGet
     */
    readonly offset: number

    /**
     * 
     * @type {number}
     * @memberof DefaultApiApiV1SecretSecretIdSecretVersionsGet
     */
    readonly limit: number

    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1SecretSecretIdSecretVersionsGet
     */
    readonly secretId: string
}

/**
 * Request parameters for apiV1SecretSharingGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1SecretSharingGetRequest
 */
export interface DefaultApiApiV1SecretSharingGetRequest {
    /**
     * 
     * @type {number}
     * @memberof DefaultApiApiV1SecretSharingGet
     */
    readonly offset?: number

    /**
     * 
     * @type {number}
     * @memberof DefaultApiApiV1SecretSharingGet
     */
    readonly limit?: number
}

/**
 * Request parameters for apiV1SecretSharingPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1SecretSharingPostRequest
 */
export interface DefaultApiApiV1SecretSharingPostRequest {
    /**
     * 
     * @type {ApiV1SecretSharingPostRequest}
     * @memberof DefaultApiApiV1SecretSharingPost
     */
    readonly apiV1SecretSharingPostRequest: ApiV1SecretSharingPostRequest
}

/**
 * Request parameters for apiV1SecretSharingPublicIdGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1SecretSharingPublicIdGetRequest
 */
export interface DefaultApiApiV1SecretSharingPublicIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1SecretSharingPublicIdGet
     */
    readonly hashedHex: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1SecretSharingPublicIdGet
     */
    readonly id: string
}

/**
 * Request parameters for apiV1SecretSharingPublicPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1SecretSharingPublicPostRequest
 */
export interface DefaultApiApiV1SecretSharingPublicPostRequest {
    /**
     * 
     * @type {ApiV1SecretSharingPublicPostRequest}
     * @memberof DefaultApiApiV1SecretSharingPublicPost
     */
    readonly apiV1SecretSharingPublicPostRequest: ApiV1SecretSharingPublicPostRequest
}

/**
 * Request parameters for apiV1SecretSharingSharedSecretIdDelete operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1SecretSharingSharedSecretIdDeleteRequest
 */
export interface DefaultApiApiV1SecretSharingSharedSecretIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1SecretSharingSharedSecretIdDelete
     */
    readonly sharedSecretId: string
}

/**
 * Request parameters for apiV1SecretSnapshotSecretSnapshotIdGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1SecretSnapshotSecretSnapshotIdGetRequest
 */
export interface DefaultApiApiV1SecretSnapshotSecretSnapshotIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1SecretSnapshotSecretSnapshotIdGet
     */
    readonly secretSnapshotId: string
}

/**
 * Request parameters for apiV1SecretSnapshotSecretSnapshotIdRollbackPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1SecretSnapshotSecretSnapshotIdRollbackPostRequest
 */
export interface DefaultApiApiV1SecretSnapshotSecretSnapshotIdRollbackPostRequest {
    /**
     * The ID of the snapshot to rollback to.
     * @type {string}
     * @memberof DefaultApiApiV1SecretSnapshotSecretSnapshotIdRollbackPost
     */
    readonly secretSnapshotId: string
}

/**
 * Request parameters for apiV1SsoConfigGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1SsoConfigGetRequest
 */
export interface DefaultApiApiV1SsoConfigGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1SsoConfigGet
     */
    readonly organizationId: string
}

/**
 * Request parameters for apiV1SsoConfigPatch operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1SsoConfigPatchRequest
 */
export interface DefaultApiApiV1SsoConfigPatchRequest {
    /**
     * 
     * @type {ApiV1SsoConfigPatchRequest}
     * @memberof DefaultApiApiV1SsoConfigPatch
     */
    readonly apiV1SsoConfigPatchRequest: ApiV1SsoConfigPatchRequest
}

/**
 * Request parameters for apiV1SsoConfigPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1SsoConfigPostRequest
 */
export interface DefaultApiApiV1SsoConfigPostRequest {
    /**
     * 
     * @type {ApiV1SsoConfigPostRequest}
     * @memberof DefaultApiApiV1SsoConfigPost
     */
    readonly apiV1SsoConfigPostRequest: ApiV1SsoConfigPostRequest
}

/**
 * Request parameters for apiV1SsoOidcConfigGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1SsoOidcConfigGetRequest
 */
export interface DefaultApiApiV1SsoOidcConfigGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1SsoOidcConfigGet
     */
    readonly orgSlug: string
}

/**
 * Request parameters for apiV1SsoOidcConfigPatch operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1SsoOidcConfigPatchRequest
 */
export interface DefaultApiApiV1SsoOidcConfigPatchRequest {
    /**
     * 
     * @type {ApiV1SsoOidcConfigPatchRequest}
     * @memberof DefaultApiApiV1SsoOidcConfigPatch
     */
    readonly apiV1SsoOidcConfigPatchRequest: ApiV1SsoOidcConfigPatchRequest
}

/**
 * Request parameters for apiV1SsoOidcConfigPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1SsoOidcConfigPostRequest
 */
export interface DefaultApiApiV1SsoOidcConfigPostRequest {
    /**
     * 
     * @type {ApiV1SsoOidcConfigPostRequest}
     * @memberof DefaultApiApiV1SsoOidcConfigPost
     */
    readonly apiV1SsoOidcConfigPostRequest: ApiV1SsoOidcConfigPostRequest
}

/**
 * Request parameters for apiV1SsoOidcLoginGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1SsoOidcLoginGetRequest
 */
export interface DefaultApiApiV1SsoOidcLoginGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1SsoOidcLoginGet
     */
    readonly orgSlug: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1SsoOidcLoginGet
     */
    readonly callbackPort?: string
}

/**
 * Request parameters for apiV1SsoRedirectGithubGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1SsoRedirectGithubGetRequest
 */
export interface DefaultApiApiV1SsoRedirectGithubGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1SsoRedirectGithubGet
     */
    readonly callbackPort?: string
}

/**
 * Request parameters for apiV1SsoRedirectGitlabGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1SsoRedirectGitlabGetRequest
 */
export interface DefaultApiApiV1SsoRedirectGitlabGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1SsoRedirectGitlabGet
     */
    readonly callbackPort?: string
}

/**
 * Request parameters for apiV1SsoRedirectGoogleGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1SsoRedirectGoogleGetRequest
 */
export interface DefaultApiApiV1SsoRedirectGoogleGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1SsoRedirectGoogleGet
     */
    readonly callbackPort?: string
}

/**
 * Request parameters for apiV1SsoRedirectSaml2OrganizationsOrgSlugGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1SsoRedirectSaml2OrganizationsOrgSlugGetRequest
 */
export interface DefaultApiApiV1SsoRedirectSaml2OrganizationsOrgSlugGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1SsoRedirectSaml2OrganizationsOrgSlugGet
     */
    readonly orgSlug: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1SsoRedirectSaml2OrganizationsOrgSlugGet
     */
    readonly callbackPort?: string
}

/**
 * Request parameters for apiV1SsoRedirectSaml2SamlConfigIdGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1SsoRedirectSaml2SamlConfigIdGetRequest
 */
export interface DefaultApiApiV1SsoRedirectSaml2SamlConfigIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1SsoRedirectSaml2SamlConfigIdGet
     */
    readonly samlConfigId: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1SsoRedirectSaml2SamlConfigIdGet
     */
    readonly callbackPort?: string
}

/**
 * Request parameters for apiV1SsoSaml2SamlConfigIdPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1SsoSaml2SamlConfigIdPostRequest
 */
export interface DefaultApiApiV1SsoSaml2SamlConfigIdPostRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1SsoSaml2SamlConfigIdPost
     */
    readonly samlConfigId: string
}

/**
 * Request parameters for apiV1SsoTokenExchangePost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1SsoTokenExchangePostRequest
 */
export interface DefaultApiApiV1SsoTokenExchangePostRequest {
    /**
     * 
     * @type {ApiV1SsoTokenExchangePostRequest}
     * @memberof DefaultApiApiV1SsoTokenExchangePost
     */
    readonly apiV1SsoTokenExchangePostRequest: ApiV1SsoTokenExchangePostRequest
}

/**
 * Request parameters for apiV1UserActionGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1UserActionGetRequest
 */
export interface DefaultApiApiV1UserActionGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1UserActionGet
     */
    readonly action: string
}

/**
 * Request parameters for apiV1UserActionPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1UserActionPostRequest
 */
export interface DefaultApiApiV1UserActionPostRequest {
    /**
     * 
     * @type {ApiV1UserActionPostRequest}
     * @memberof DefaultApiApiV1UserActionPost
     */
    readonly apiV1UserActionPostRequest: ApiV1UserActionPostRequest
}

/**
 * Request parameters for apiV1UserEngagementMeWishPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1UserEngagementMeWishPostRequest
 */
export interface DefaultApiApiV1UserEngagementMeWishPostRequest {
    /**
     * 
     * @type {ApiV1UserEngagementMeWishPostRequest}
     * @memberof DefaultApiApiV1UserEngagementMeWishPost
     */
    readonly apiV1UserEngagementMeWishPostRequest: ApiV1UserEngagementMeWishPostRequest
}

/**
 * Request parameters for apiV1UserMeProjectFavoritesGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1UserMeProjectFavoritesGetRequest
 */
export interface DefaultApiApiV1UserMeProjectFavoritesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1UserMeProjectFavoritesGet
     */
    readonly orgId: string
}

/**
 * Request parameters for apiV1UserMeProjectFavoritesPut operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1UserMeProjectFavoritesPutRequest
 */
export interface DefaultApiApiV1UserMeProjectFavoritesPutRequest {
    /**
     * 
     * @type {ApiV1UserMeProjectFavoritesPutRequest}
     * @memberof DefaultApiApiV1UserMeProjectFavoritesPut
     */
    readonly apiV1UserMeProjectFavoritesPutRequest: ApiV1UserMeProjectFavoritesPutRequest
}

/**
 * Request parameters for apiV1UserUserIdUnlockGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1UserUserIdUnlockGetRequest
 */
export interface DefaultApiApiV1UserUserIdUnlockGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1UserUserIdUnlockGet
     */
    readonly token: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1UserUserIdUnlockGet
     */
    readonly userId: string
}

/**
 * Request parameters for apiV1WebhooksGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1WebhooksGetRequest
 */
export interface DefaultApiApiV1WebhooksGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1WebhooksGet
     */
    readonly workspaceId: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1WebhooksGet
     */
    readonly environment?: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1WebhooksGet
     */
    readonly secretPath?: string
}

/**
 * Request parameters for apiV1WebhooksPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1WebhooksPostRequest
 */
export interface DefaultApiApiV1WebhooksPostRequest {
    /**
     * 
     * @type {ApiV1WebhooksPostRequest}
     * @memberof DefaultApiApiV1WebhooksPost
     */
    readonly apiV1WebhooksPostRequest: ApiV1WebhooksPostRequest
}

/**
 * Request parameters for apiV1WebhooksWebhookIdDelete operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1WebhooksWebhookIdDeleteRequest
 */
export interface DefaultApiApiV1WebhooksWebhookIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1WebhooksWebhookIdDelete
     */
    readonly webhookId: string
}

/**
 * Request parameters for apiV1WebhooksWebhookIdPatch operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1WebhooksWebhookIdPatchRequest
 */
export interface DefaultApiApiV1WebhooksWebhookIdPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1WebhooksWebhookIdPatch
     */
    readonly webhookId: string

    /**
     * 
     * @type {ApiV1WebhooksWebhookIdPatchRequest}
     * @memberof DefaultApiApiV1WebhooksWebhookIdPatch
     */
    readonly apiV1WebhooksWebhookIdPatchRequest?: ApiV1WebhooksWebhookIdPatchRequest
}

/**
 * Request parameters for apiV1WebhooksWebhookIdTestPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1WebhooksWebhookIdTestPostRequest
 */
export interface DefaultApiApiV1WebhooksWebhookIdTestPostRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1WebhooksWebhookIdTestPost
     */
    readonly webhookId: string
}

/**
 * Request parameters for apiV1WorkspaceGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1WorkspaceGetRequest
 */
export interface DefaultApiApiV1WorkspaceGetRequest {
    /**
     * 
     * @type {'true' | 'false'}
     * @memberof DefaultApiApiV1WorkspaceGet
     */
    readonly includeRoles?: ApiV1WorkspaceGetIncludeRolesEnum
}

/**
 * Request parameters for apiV1WorkspaceProjectIdPermissionsGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1WorkspaceProjectIdPermissionsGetRequest
 */
export interface DefaultApiApiV1WorkspaceProjectIdPermissionsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1WorkspaceProjectIdPermissionsGet
     */
    readonly projectId: string
}

/**
 * Request parameters for apiV1WorkspaceProjectIdTagsGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1WorkspaceProjectIdTagsGetRequest
 */
export interface DefaultApiApiV1WorkspaceProjectIdTagsGetRequest {
    /**
     * The ID of the project to list tags from.
     * @type {string}
     * @memberof DefaultApiApiV1WorkspaceProjectIdTagsGet
     */
    readonly projectId: string
}

/**
 * Request parameters for apiV1WorkspaceProjectIdTagsPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1WorkspaceProjectIdTagsPostRequest
 */
export interface DefaultApiApiV1WorkspaceProjectIdTagsPostRequest {
    /**
     * The ID of the project to create the tag in.
     * @type {string}
     * @memberof DefaultApiApiV1WorkspaceProjectIdTagsPost
     */
    readonly projectId: string

    /**
     * 
     * @type {ApiV1WorkspaceProjectIdTagsPostRequest}
     * @memberof DefaultApiApiV1WorkspaceProjectIdTagsPost
     */
    readonly apiV1WorkspaceProjectIdTagsPostRequest: ApiV1WorkspaceProjectIdTagsPostRequest
}

/**
 * Request parameters for apiV1WorkspaceProjectIdTagsSlugTagSlugGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1WorkspaceProjectIdTagsSlugTagSlugGetRequest
 */
export interface DefaultApiApiV1WorkspaceProjectIdTagsSlugTagSlugGetRequest {
    /**
     * The ID of the project to get tags from.
     * @type {string}
     * @memberof DefaultApiApiV1WorkspaceProjectIdTagsSlugTagSlugGet
     */
    readonly projectId: string

    /**
     * The slug of the tag to get details
     * @type {string}
     * @memberof DefaultApiApiV1WorkspaceProjectIdTagsSlugTagSlugGet
     */
    readonly tagSlug: string
}

/**
 * Request parameters for apiV1WorkspaceProjectIdTagsTagIdDelete operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1WorkspaceProjectIdTagsTagIdDeleteRequest
 */
export interface DefaultApiApiV1WorkspaceProjectIdTagsTagIdDeleteRequest {
    /**
     * The ID of the project to delete the tag from.
     * @type {string}
     * @memberof DefaultApiApiV1WorkspaceProjectIdTagsTagIdDelete
     */
    readonly projectId: string

    /**
     * The ID of the tag to delete.
     * @type {string}
     * @memberof DefaultApiApiV1WorkspaceProjectIdTagsTagIdDelete
     */
    readonly tagId: string
}

/**
 * Request parameters for apiV1WorkspaceProjectIdTagsTagIdGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1WorkspaceProjectIdTagsTagIdGetRequest
 */
export interface DefaultApiApiV1WorkspaceProjectIdTagsTagIdGetRequest {
    /**
     * The ID of the project to get tags from.
     * @type {string}
     * @memberof DefaultApiApiV1WorkspaceProjectIdTagsTagIdGet
     */
    readonly projectId: string

    /**
     * The ID of the tag to get details
     * @type {string}
     * @memberof DefaultApiApiV1WorkspaceProjectIdTagsTagIdGet
     */
    readonly tagId: string
}

/**
 * Request parameters for apiV1WorkspaceProjectIdTagsTagIdPatch operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1WorkspaceProjectIdTagsTagIdPatchRequest
 */
export interface DefaultApiApiV1WorkspaceProjectIdTagsTagIdPatchRequest {
    /**
     * The ID of the project to update the tag in.
     * @type {string}
     * @memberof DefaultApiApiV1WorkspaceProjectIdTagsTagIdPatch
     */
    readonly projectId: string

    /**
     * The ID of the tag to get details
     * @type {string}
     * @memberof DefaultApiApiV1WorkspaceProjectIdTagsTagIdPatch
     */
    readonly tagId: string

    /**
     * 
     * @type {ApiV1WorkspaceProjectIdTagsTagIdPatchRequest}
     * @memberof DefaultApiApiV1WorkspaceProjectIdTagsTagIdPatch
     */
    readonly apiV1WorkspaceProjectIdTagsTagIdPatchRequest: ApiV1WorkspaceProjectIdTagsTagIdPatchRequest
}

/**
 * Request parameters for apiV1WorkspaceProjectSlugRolesGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1WorkspaceProjectSlugRolesGetRequest
 */
export interface DefaultApiApiV1WorkspaceProjectSlugRolesGetRequest {
    /**
     * The slug of the project to list the roles of.
     * @type {string}
     * @memberof DefaultApiApiV1WorkspaceProjectSlugRolesGet
     */
    readonly projectSlug: string
}

/**
 * Request parameters for apiV1WorkspaceProjectSlugRolesPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1WorkspaceProjectSlugRolesPostRequest
 */
export interface DefaultApiApiV1WorkspaceProjectSlugRolesPostRequest {
    /**
     * Slug of the project to create the role for.
     * @type {string}
     * @memberof DefaultApiApiV1WorkspaceProjectSlugRolesPost
     */
    readonly projectSlug: string

    /**
     * 
     * @type {ApiV1WorkspaceProjectSlugRolesPostRequest}
     * @memberof DefaultApiApiV1WorkspaceProjectSlugRolesPost
     */
    readonly apiV1WorkspaceProjectSlugRolesPostRequest: ApiV1WorkspaceProjectSlugRolesPostRequest
}

/**
 * Request parameters for apiV1WorkspaceProjectSlugRolesRoleIdDelete operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1WorkspaceProjectSlugRolesRoleIdDeleteRequest
 */
export interface DefaultApiApiV1WorkspaceProjectSlugRolesRoleIdDeleteRequest {
    /**
     * Slug of the project to delete this role for.
     * @type {string}
     * @memberof DefaultApiApiV1WorkspaceProjectSlugRolesRoleIdDelete
     */
    readonly projectSlug: string

    /**
     * The ID of the role to update
     * @type {string}
     * @memberof DefaultApiApiV1WorkspaceProjectSlugRolesRoleIdDelete
     */
    readonly roleId: string
}

/**
 * Request parameters for apiV1WorkspaceProjectSlugRolesRoleIdPatch operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1WorkspaceProjectSlugRolesRoleIdPatchRequest
 */
export interface DefaultApiApiV1WorkspaceProjectSlugRolesRoleIdPatchRequest {
    /**
     * Slug of the project to update the role for.
     * @type {string}
     * @memberof DefaultApiApiV1WorkspaceProjectSlugRolesRoleIdPatch
     */
    readonly projectSlug: string

    /**
     * The ID of the role to update
     * @type {string}
     * @memberof DefaultApiApiV1WorkspaceProjectSlugRolesRoleIdPatch
     */
    readonly roleId: string

    /**
     * 
     * @type {ApiV1WorkspaceProjectSlugRolesRoleIdPatchRequest}
     * @memberof DefaultApiApiV1WorkspaceProjectSlugRolesRoleIdPatch
     */
    readonly apiV1WorkspaceProjectSlugRolesRoleIdPatchRequest?: ApiV1WorkspaceProjectSlugRolesRoleIdPatchRequest
}

/**
 * Request parameters for apiV1WorkspaceProjectSlugRolesSlugSlugGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1WorkspaceProjectSlugRolesSlugSlugGetRequest
 */
export interface DefaultApiApiV1WorkspaceProjectSlugRolesSlugSlugGetRequest {
    /**
     * The slug of the project.
     * @type {string}
     * @memberof DefaultApiApiV1WorkspaceProjectSlugRolesSlugSlugGet
     */
    readonly projectSlug: string

    /**
     * The slug of the role to get details
     * @type {string}
     * @memberof DefaultApiApiV1WorkspaceProjectSlugRolesSlugSlugGet
     */
    readonly slug: string
}

/**
 * Request parameters for apiV1WorkspaceWorkspaceIdAuditLogsFiltersActorsGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1WorkspaceWorkspaceIdAuditLogsFiltersActorsGetRequest
 */
export interface DefaultApiApiV1WorkspaceWorkspaceIdAuditLogsFiltersActorsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1WorkspaceWorkspaceIdAuditLogsFiltersActorsGet
     */
    readonly workspaceId: string
}

/**
 * Request parameters for apiV1WorkspaceWorkspaceIdAuditLogsGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1WorkspaceWorkspaceIdAuditLogsGetRequest
 */
export interface DefaultApiApiV1WorkspaceWorkspaceIdAuditLogsGetRequest {
    /**
     * The ID of the project to export audit logs from.
     * @type {string}
     * @memberof DefaultApiApiV1WorkspaceWorkspaceIdAuditLogsGet
     */
    readonly workspaceId: string

    /**
     * The type of the event to export.
     * @type {'get-secrets' | 'get-secret' | 'reveal-secret' | 'create-secret' | 'create-secrets' | 'update-secret' | 'update-secrets' | 'move-secrets' | 'delete-secret' | 'delete-secrets' | 'get-workspace-key' | 'authorize-integration' | 'unauthorize-integration' | 'create-integration' | 'delete-integration' | 'manual-sync-integration' | 'add-trusted-ip' | 'update-trusted-ip' | 'delete-trusted-ip' | 'create-service-token' | 'delete-service-token' | 'create-identity' | 'update-identity' | 'delete-identity' | 'login-identity-universal-auth' | 'add-identity-universal-auth' | 'update-identity-universal-auth' | 'get-identity-universal-auth' | 'revoke-identity-universal-auth' | 'create-token-identity-token-auth' | 'update-token-identity-token-auth' | 'get-tokens-identity-token-auth' | 'add-identity-token-auth' | 'update-identity-token-auth' | 'get-identity-token-auth' | 'revoke-identity-token-auth' | 'login-identity-kubernetes-auth' | 'add-identity-kubernetes-auth' | 'update-identity-kubernetes-auth' | 'get-identity-kubernetes-auth' | 'revoke-identity-kubernetes-auth' | 'login-identity-oidc-auth' | 'add-identity-oidc-auth' | 'update-identity-oidc-auth' | 'get-identity-oidc-auth' | 'revoke-identity-oidc-auth' | 'create-identity-universal-auth-client-secret' | 'revoke-identity-universal-auth-client-secret' | 'get-identity-universal-auth-client-secret' | 'get-identity-universal-auth-client-secret-by-id' | 'login-identity-gcp-auth' | 'add-identity-gcp-auth' | 'update-identity-gcp-auth' | 'revoke-identity-gcp-auth' | 'get-identity-gcp-auth' | 'login-identity-aws-auth' | 'add-identity-aws-auth' | 'update-identity-aws-auth' | 'revoke-identity-aws-auth' | 'get-identity-aws-auth' | 'login-identity-azure-auth' | 'add-identity-azure-auth' | 'update-identity-azure-auth' | 'get-identity-azure-auth' | 'revoke-identity-azure-auth' | 'create-environment' | 'update-environment' | 'delete-environment' | 'get-environment' | 'add-workspace-member' | 'add-workspace-members' | 'remove-workspace-member' | 'create-folder' | 'update-folder' | 'delete-folder' | 'create-webhook' | 'update-webhook-status' | 'delete-webhook' | 'get-secret-imports' | 'create-secret-import' | 'update-secret-import' | 'delete-secret-import' | 'update-user-workspace-role' | 'update-user-workspace-denied-permissions' | 'secret-approval-merged' | 'secret-approval-request' | 'secret-approval-closed' | 'secret-approval-reopened' | 'create-certificate-authority' | 'get-certificate-authority' | 'update-certificate-authority' | 'delete-certificate-authority' | 'renew-certificate-authority' | 'get-certificate-authority-csr' | 'get-certificate-authority-certs' | 'get-certificate-authority-cert' | 'sign-intermediate' | 'import-certificate-authority-cert' | 'get-certificate-authority-crls' | 'issue-cert' | 'sign-cert' | 'get-cert' | 'delete-cert' | 'revoke-cert' | 'get-cert-body' | 'create-pki-alert' | 'get-pki-alert' | 'update-pki-alert' | 'delete-pki-alert' | 'create-pki-collection' | 'get-pki-collection' | 'update-pki-collection' | 'delete-pki-collection' | 'get-pki-collection-items' | 'add-pki-collection-item' | 'delete-pki-collection-item' | 'create-kms' | 'update-kms' | 'delete-kms' | 'get-kms' | 'update-project-kms' | 'get-project-kms-backup' | 'load-project-kms-backup' | 'org-admin-accessed-project' | 'create-certificate-template' | 'update-certificate-template' | 'delete-certificate-template' | 'get-certificate-template' | 'create-certificate-template-est-config' | 'update-certificate-template-est-config' | 'get-certificate-template-est-config'}
     * @memberof DefaultApiApiV1WorkspaceWorkspaceIdAuditLogsGet
     */
    readonly eventType?: ApiV1WorkspaceWorkspaceIdAuditLogsGetEventTypeEnum

    /**
     * Choose which consuming application to export audit logs for.
     * @type {'web' | 'cli' | 'k8-operator' | 'terraform' | 'other' | 'InfisicalPythonSDK' | 'InfisicalNodeSDK'}
     * @memberof DefaultApiApiV1WorkspaceWorkspaceIdAuditLogsGet
     */
    readonly userAgentType?: ApiV1WorkspaceWorkspaceIdAuditLogsGetUserAgentTypeEnum

    /**
     * The date to start the export from.
     * @type {string}
     * @memberof DefaultApiApiV1WorkspaceWorkspaceIdAuditLogsGet
     */
    readonly startDate?: string

    /**
     * The date to end the export at.
     * @type {string}
     * @memberof DefaultApiApiV1WorkspaceWorkspaceIdAuditLogsGet
     */
    readonly endDate?: string

    /**
     * The offset to start from. If you enter 10, it will start from the 10th audit log.
     * @type {number}
     * @memberof DefaultApiApiV1WorkspaceWorkspaceIdAuditLogsGet
     */
    readonly offset?: number

    /**
     * The number of audit logs to return.
     * @type {number}
     * @memberof DefaultApiApiV1WorkspaceWorkspaceIdAuditLogsGet
     */
    readonly limit?: number

    /**
     * The actor to filter the audit logs by.
     * @type {string}
     * @memberof DefaultApiApiV1WorkspaceWorkspaceIdAuditLogsGet
     */
    readonly actor?: string
}

/**
 * Request parameters for apiV1WorkspaceWorkspaceIdAuthorizationsGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1WorkspaceWorkspaceIdAuthorizationsGetRequest
 */
export interface DefaultApiApiV1WorkspaceWorkspaceIdAuthorizationsGetRequest {
    /**
     * The ID of the project to list integration auths for.
     * @type {string}
     * @memberof DefaultApiApiV1WorkspaceWorkspaceIdAuthorizationsGet
     */
    readonly workspaceId: string
}

/**
 * Request parameters for apiV1WorkspaceWorkspaceIdAutoCapitalizationPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1WorkspaceWorkspaceIdAutoCapitalizationPostRequest
 */
export interface DefaultApiApiV1WorkspaceWorkspaceIdAutoCapitalizationPostRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1WorkspaceWorkspaceIdAutoCapitalizationPost
     */
    readonly workspaceId: string

    /**
     * 
     * @type {ApiV1WorkspaceWorkspaceIdAutoCapitalizationPostRequest}
     * @memberof DefaultApiApiV1WorkspaceWorkspaceIdAutoCapitalizationPost
     */
    readonly apiV1WorkspaceWorkspaceIdAutoCapitalizationPostRequest: ApiV1WorkspaceWorkspaceIdAutoCapitalizationPostRequest
}

/**
 * Request parameters for apiV1WorkspaceWorkspaceIdDelete operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1WorkspaceWorkspaceIdDeleteRequest
 */
export interface DefaultApiApiV1WorkspaceWorkspaceIdDeleteRequest {
    /**
     * The ID of the project to delete.
     * @type {string}
     * @memberof DefaultApiApiV1WorkspaceWorkspaceIdDelete
     */
    readonly workspaceId: string
}

/**
 * Request parameters for apiV1WorkspaceWorkspaceIdEnvironmentsEnvIdGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1WorkspaceWorkspaceIdEnvironmentsEnvIdGetRequest
 */
export interface DefaultApiApiV1WorkspaceWorkspaceIdEnvironmentsEnvIdGetRequest {
    /**
     * The ID of the project the environment belongs to.
     * @type {string}
     * @memberof DefaultApiApiV1WorkspaceWorkspaceIdEnvironmentsEnvIdGet
     */
    readonly workspaceId: string

    /**
     * The ID of the environment to fetch.
     * @type {string}
     * @memberof DefaultApiApiV1WorkspaceWorkspaceIdEnvironmentsEnvIdGet
     */
    readonly envId: string
}

/**
 * Request parameters for apiV1WorkspaceWorkspaceIdEnvironmentsIdDelete operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1WorkspaceWorkspaceIdEnvironmentsIdDeleteRequest
 */
export interface DefaultApiApiV1WorkspaceWorkspaceIdEnvironmentsIdDeleteRequest {
    /**
     * The ID of the project to delete the environment from.
     * @type {string}
     * @memberof DefaultApiApiV1WorkspaceWorkspaceIdEnvironmentsIdDelete
     */
    readonly workspaceId: string

    /**
     * The ID of the environment to delete.
     * @type {string}
     * @memberof DefaultApiApiV1WorkspaceWorkspaceIdEnvironmentsIdDelete
     */
    readonly id: string
}

/**
 * Request parameters for apiV1WorkspaceWorkspaceIdEnvironmentsIdPatch operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1WorkspaceWorkspaceIdEnvironmentsIdPatchRequest
 */
export interface DefaultApiApiV1WorkspaceWorkspaceIdEnvironmentsIdPatchRequest {
    /**
     * The ID of the project to update the environment in.
     * @type {string}
     * @memberof DefaultApiApiV1WorkspaceWorkspaceIdEnvironmentsIdPatch
     */
    readonly workspaceId: string

    /**
     * The ID of the environment to update.
     * @type {string}
     * @memberof DefaultApiApiV1WorkspaceWorkspaceIdEnvironmentsIdPatch
     */
    readonly id: string

    /**
     * 
     * @type {ApiV1WorkspaceWorkspaceIdEnvironmentsIdPatchRequest}
     * @memberof DefaultApiApiV1WorkspaceWorkspaceIdEnvironmentsIdPatch
     */
    readonly apiV1WorkspaceWorkspaceIdEnvironmentsIdPatchRequest?: ApiV1WorkspaceWorkspaceIdEnvironmentsIdPatchRequest
}

/**
 * Request parameters for apiV1WorkspaceWorkspaceIdEnvironmentsPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1WorkspaceWorkspaceIdEnvironmentsPostRequest
 */
export interface DefaultApiApiV1WorkspaceWorkspaceIdEnvironmentsPostRequest {
    /**
     * The ID of the project to create the environment in.
     * @type {string}
     * @memberof DefaultApiApiV1WorkspaceWorkspaceIdEnvironmentsPost
     */
    readonly workspaceId: string

    /**
     * 
     * @type {ApiV1WorkspaceWorkspaceIdEnvironmentsPostRequest}
     * @memberof DefaultApiApiV1WorkspaceWorkspaceIdEnvironmentsPost
     */
    readonly apiV1WorkspaceWorkspaceIdEnvironmentsPostRequest: ApiV1WorkspaceWorkspaceIdEnvironmentsPostRequest
}

/**
 * Request parameters for apiV1WorkspaceWorkspaceIdGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1WorkspaceWorkspaceIdGetRequest
 */
export interface DefaultApiApiV1WorkspaceWorkspaceIdGetRequest {
    /**
     * The ID of the project.
     * @type {string}
     * @memberof DefaultApiApiV1WorkspaceWorkspaceIdGet
     */
    readonly workspaceId: string
}

/**
 * Request parameters for apiV1WorkspaceWorkspaceIdIntegrationsGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1WorkspaceWorkspaceIdIntegrationsGetRequest
 */
export interface DefaultApiApiV1WorkspaceWorkspaceIdIntegrationsGetRequest {
    /**
     * The ID of the project to list integrations for.
     * @type {string}
     * @memberof DefaultApiApiV1WorkspaceWorkspaceIdIntegrationsGet
     */
    readonly workspaceId: string
}

/**
 * Request parameters for apiV1WorkspaceWorkspaceIdKeyPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1WorkspaceWorkspaceIdKeyPostRequest
 */
export interface DefaultApiApiV1WorkspaceWorkspaceIdKeyPostRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1WorkspaceWorkspaceIdKeyPost
     */
    readonly workspaceId: string

    /**
     * 
     * @type {ApiV1WorkspaceWorkspaceIdKeyPostRequest}
     * @memberof DefaultApiApiV1WorkspaceWorkspaceIdKeyPost
     */
    readonly apiV1WorkspaceWorkspaceIdKeyPostRequest: ApiV1WorkspaceWorkspaceIdKeyPostRequest
}

/**
 * Request parameters for apiV1WorkspaceWorkspaceIdKeysGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1WorkspaceWorkspaceIdKeysGetRequest
 */
export interface DefaultApiApiV1WorkspaceWorkspaceIdKeysGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1WorkspaceWorkspaceIdKeysGet
     */
    readonly workspaceId: string
}

/**
 * Request parameters for apiV1WorkspaceWorkspaceIdKmsBackupGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1WorkspaceWorkspaceIdKmsBackupGetRequest
 */
export interface DefaultApiApiV1WorkspaceWorkspaceIdKmsBackupGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1WorkspaceWorkspaceIdKmsBackupGet
     */
    readonly workspaceId: string
}

/**
 * Request parameters for apiV1WorkspaceWorkspaceIdKmsBackupPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1WorkspaceWorkspaceIdKmsBackupPostRequest
 */
export interface DefaultApiApiV1WorkspaceWorkspaceIdKmsBackupPostRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1WorkspaceWorkspaceIdKmsBackupPost
     */
    readonly workspaceId: string

    /**
     * 
     * @type {ApiV1WorkspaceWorkspaceIdKmsBackupPostRequest}
     * @memberof DefaultApiApiV1WorkspaceWorkspaceIdKmsBackupPost
     */
    readonly apiV1WorkspaceWorkspaceIdKmsBackupPostRequest: ApiV1WorkspaceWorkspaceIdKmsBackupPostRequest
}

/**
 * Request parameters for apiV1WorkspaceWorkspaceIdKmsGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1WorkspaceWorkspaceIdKmsGetRequest
 */
export interface DefaultApiApiV1WorkspaceWorkspaceIdKmsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1WorkspaceWorkspaceIdKmsGet
     */
    readonly workspaceId: string
}

/**
 * Request parameters for apiV1WorkspaceWorkspaceIdKmsPatch operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1WorkspaceWorkspaceIdKmsPatchRequest
 */
export interface DefaultApiApiV1WorkspaceWorkspaceIdKmsPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1WorkspaceWorkspaceIdKmsPatch
     */
    readonly workspaceId: string

    /**
     * 
     * @type {ApiV1WorkspaceWorkspaceIdKmsPatchRequest}
     * @memberof DefaultApiApiV1WorkspaceWorkspaceIdKmsPatch
     */
    readonly apiV1WorkspaceWorkspaceIdKmsPatchRequest: ApiV1WorkspaceWorkspaceIdKmsPatchRequest
}

/**
 * Request parameters for apiV1WorkspaceWorkspaceIdLeaveDelete operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1WorkspaceWorkspaceIdLeaveDeleteRequest
 */
export interface DefaultApiApiV1WorkspaceWorkspaceIdLeaveDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1WorkspaceWorkspaceIdLeaveDelete
     */
    readonly workspaceId: string
}

/**
 * Request parameters for apiV1WorkspaceWorkspaceIdMembershipsDetailsPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1WorkspaceWorkspaceIdMembershipsDetailsPostRequest
 */
export interface DefaultApiApiV1WorkspaceWorkspaceIdMembershipsDetailsPostRequest {
    /**
     * The ID of the project to get memberships from.
     * @type {string}
     * @memberof DefaultApiApiV1WorkspaceWorkspaceIdMembershipsDetailsPost
     */
    readonly workspaceId: string

    /**
     * 
     * @type {ApiV1WorkspaceWorkspaceIdMembershipsDetailsPostRequest}
     * @memberof DefaultApiApiV1WorkspaceWorkspaceIdMembershipsDetailsPost
     */
    readonly apiV1WorkspaceWorkspaceIdMembershipsDetailsPostRequest: ApiV1WorkspaceWorkspaceIdMembershipsDetailsPostRequest
}

/**
 * Request parameters for apiV1WorkspaceWorkspaceIdMembershipsGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1WorkspaceWorkspaceIdMembershipsGetRequest
 */
export interface DefaultApiApiV1WorkspaceWorkspaceIdMembershipsGetRequest {
    /**
     * The ID of the project to get memberships from.
     * @type {string}
     * @memberof DefaultApiApiV1WorkspaceWorkspaceIdMembershipsGet
     */
    readonly workspaceId: string
}

/**
 * Request parameters for apiV1WorkspaceWorkspaceIdMembershipsMembershipIdDelete operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1WorkspaceWorkspaceIdMembershipsMembershipIdDeleteRequest
 */
export interface DefaultApiApiV1WorkspaceWorkspaceIdMembershipsMembershipIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1WorkspaceWorkspaceIdMembershipsMembershipIdDelete
     */
    readonly workspaceId: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1WorkspaceWorkspaceIdMembershipsMembershipIdDelete
     */
    readonly membershipId: string
}

/**
 * Request parameters for apiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatch operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatchRequest
 */
export interface DefaultApiApiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatchRequest {
    /**
     * The ID of the project to update the membership for.
     * @type {string}
     * @memberof DefaultApiApiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatch
     */
    readonly workspaceId: string

    /**
     * The ID of the membership to update.
     * @type {string}
     * @memberof DefaultApiApiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatch
     */
    readonly membershipId: string

    /**
     * 
     * @type {ApiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatchRequest}
     * @memberof DefaultApiApiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatch
     */
    readonly apiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatchRequest: ApiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatchRequest
}

/**
 * Request parameters for apiV1WorkspaceWorkspaceIdMembershipsPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1WorkspaceWorkspaceIdMembershipsPostRequest
 */
export interface DefaultApiApiV1WorkspaceWorkspaceIdMembershipsPostRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1WorkspaceWorkspaceIdMembershipsPost
     */
    readonly workspaceId: string

    /**
     * 
     * @type {ApiV1WorkspaceWorkspaceIdMembershipsPostRequest}
     * @memberof DefaultApiApiV1WorkspaceWorkspaceIdMembershipsPost
     */
    readonly apiV1WorkspaceWorkspaceIdMembershipsPostRequest: ApiV1WorkspaceWorkspaceIdMembershipsPostRequest
}

/**
 * Request parameters for apiV1WorkspaceWorkspaceIdMigrateV3Post operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1WorkspaceWorkspaceIdMigrateV3PostRequest
 */
export interface DefaultApiApiV1WorkspaceWorkspaceIdMigrateV3PostRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1WorkspaceWorkspaceIdMigrateV3Post
     */
    readonly workspaceId: string
}

/**
 * Request parameters for apiV1WorkspaceWorkspaceIdNamePost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1WorkspaceWorkspaceIdNamePostRequest
 */
export interface DefaultApiApiV1WorkspaceWorkspaceIdNamePostRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1WorkspaceWorkspaceIdNamePost
     */
    readonly workspaceId: string

    /**
     * 
     * @type {ApiV1WorkspaceWorkspaceIdNamePostRequest}
     * @memberof DefaultApiApiV1WorkspaceWorkspaceIdNamePost
     */
    readonly apiV1WorkspaceWorkspaceIdNamePostRequest: ApiV1WorkspaceWorkspaceIdNamePostRequest
}

/**
 * Request parameters for apiV1WorkspaceWorkspaceIdPatch operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1WorkspaceWorkspaceIdPatchRequest
 */
export interface DefaultApiApiV1WorkspaceWorkspaceIdPatchRequest {
    /**
     * The ID of the project to update.
     * @type {string}
     * @memberof DefaultApiApiV1WorkspaceWorkspaceIdPatch
     */
    readonly workspaceId: string

    /**
     * 
     * @type {ApiV1WorkspaceWorkspaceIdPatchRequest}
     * @memberof DefaultApiApiV1WorkspaceWorkspaceIdPatch
     */
    readonly apiV1WorkspaceWorkspaceIdPatchRequest?: ApiV1WorkspaceWorkspaceIdPatchRequest
}

/**
 * Request parameters for apiV1WorkspaceWorkspaceIdSecretSnapshotsCountGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1WorkspaceWorkspaceIdSecretSnapshotsCountGetRequest
 */
export interface DefaultApiApiV1WorkspaceWorkspaceIdSecretSnapshotsCountGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1WorkspaceWorkspaceIdSecretSnapshotsCountGet
     */
    readonly environment: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1WorkspaceWorkspaceIdSecretSnapshotsCountGet
     */
    readonly workspaceId: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1WorkspaceWorkspaceIdSecretSnapshotsCountGet
     */
    readonly path?: string
}

/**
 * Request parameters for apiV1WorkspaceWorkspaceIdSecretSnapshotsGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1WorkspaceWorkspaceIdSecretSnapshotsGetRequest
 */
export interface DefaultApiApiV1WorkspaceWorkspaceIdSecretSnapshotsGetRequest {
    /**
     * The environment to get snapshots from.
     * @type {string}
     * @memberof DefaultApiApiV1WorkspaceWorkspaceIdSecretSnapshotsGet
     */
    readonly environment: string

    /**
     * The ID of the project to get snapshots from.
     * @type {string}
     * @memberof DefaultApiApiV1WorkspaceWorkspaceIdSecretSnapshotsGet
     */
    readonly workspaceId: string

    /**
     * The secret path to get snapshots from.
     * @type {string}
     * @memberof DefaultApiApiV1WorkspaceWorkspaceIdSecretSnapshotsGet
     */
    readonly path?: string

    /**
     * The offset to start from. If you enter 10, it will start from the 10th snapshot.
     * @type {number}
     * @memberof DefaultApiApiV1WorkspaceWorkspaceIdSecretSnapshotsGet
     */
    readonly offset?: number

    /**
     * The number of snapshots to return.
     * @type {number}
     * @memberof DefaultApiApiV1WorkspaceWorkspaceIdSecretSnapshotsGet
     */
    readonly limit?: number
}

/**
 * Request parameters for apiV1WorkspaceWorkspaceIdServiceTokenDataGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1WorkspaceWorkspaceIdServiceTokenDataGetRequest
 */
export interface DefaultApiApiV1WorkspaceWorkspaceIdServiceTokenDataGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1WorkspaceWorkspaceIdServiceTokenDataGet
     */
    readonly workspaceId: string
}

/**
 * Request parameters for apiV1WorkspaceWorkspaceIdTrustedIpsGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1WorkspaceWorkspaceIdTrustedIpsGetRequest
 */
export interface DefaultApiApiV1WorkspaceWorkspaceIdTrustedIpsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1WorkspaceWorkspaceIdTrustedIpsGet
     */
    readonly workspaceId: string
}

/**
 * Request parameters for apiV1WorkspaceWorkspaceIdTrustedIpsPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1WorkspaceWorkspaceIdTrustedIpsPostRequest
 */
export interface DefaultApiApiV1WorkspaceWorkspaceIdTrustedIpsPostRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1WorkspaceWorkspaceIdTrustedIpsPost
     */
    readonly workspaceId: string

    /**
     * 
     * @type {ApiV1WorkspaceWorkspaceIdTrustedIpsPostRequest}
     * @memberof DefaultApiApiV1WorkspaceWorkspaceIdTrustedIpsPost
     */
    readonly apiV1WorkspaceWorkspaceIdTrustedIpsPostRequest: ApiV1WorkspaceWorkspaceIdTrustedIpsPostRequest
}

/**
 * Request parameters for apiV1WorkspaceWorkspaceIdTrustedIpsTrustedIpIdDelete operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1WorkspaceWorkspaceIdTrustedIpsTrustedIpIdDeleteRequest
 */
export interface DefaultApiApiV1WorkspaceWorkspaceIdTrustedIpsTrustedIpIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1WorkspaceWorkspaceIdTrustedIpsTrustedIpIdDelete
     */
    readonly workspaceId: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1WorkspaceWorkspaceIdTrustedIpsTrustedIpIdDelete
     */
    readonly trustedIpId: string
}

/**
 * Request parameters for apiV1WorkspaceWorkspaceIdTrustedIpsTrustedIpIdPatch operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1WorkspaceWorkspaceIdTrustedIpsTrustedIpIdPatchRequest
 */
export interface DefaultApiApiV1WorkspaceWorkspaceIdTrustedIpsTrustedIpIdPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1WorkspaceWorkspaceIdTrustedIpsTrustedIpIdPatch
     */
    readonly workspaceId: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1WorkspaceWorkspaceIdTrustedIpsTrustedIpIdPatch
     */
    readonly trustedIpId: string

    /**
     * 
     * @type {ApiV1WorkspaceWorkspaceIdTrustedIpsTrustedIpIdPatchRequest}
     * @memberof DefaultApiApiV1WorkspaceWorkspaceIdTrustedIpsTrustedIpIdPatch
     */
    readonly apiV1WorkspaceWorkspaceIdTrustedIpsTrustedIpIdPatchRequest: ApiV1WorkspaceWorkspaceIdTrustedIpsTrustedIpIdPatchRequest
}

/**
 * Request parameters for apiV1WorkspaceWorkspaceIdUsersGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1WorkspaceWorkspaceIdUsersGetRequest
 */
export interface DefaultApiApiV1WorkspaceWorkspaceIdUsersGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1WorkspaceWorkspaceIdUsersGet
     */
    readonly workspaceId: string

    /**
     * 
     * @type {'true' | 'false'}
     * @memberof DefaultApiApiV1WorkspaceWorkspaceIdUsersGet
     */
    readonly includeGroupMembers?: ApiV1WorkspaceWorkspaceIdUsersGetIncludeGroupMembersEnum
}

/**
 * Request parameters for apiV1WorkspaceWorkspaceSlugAuditLogsRetentionPut operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1WorkspaceWorkspaceSlugAuditLogsRetentionPutRequest
 */
export interface DefaultApiApiV1WorkspaceWorkspaceSlugAuditLogsRetentionPutRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1WorkspaceWorkspaceSlugAuditLogsRetentionPut
     */
    readonly workspaceSlug: string

    /**
     * 
     * @type {ApiV1WorkspaceWorkspaceSlugAuditLogsRetentionPutRequest}
     * @memberof DefaultApiApiV1WorkspaceWorkspaceSlugAuditLogsRetentionPut
     */
    readonly apiV1WorkspaceWorkspaceSlugAuditLogsRetentionPutRequest: ApiV1WorkspaceWorkspaceSlugAuditLogsRetentionPutRequest
}

/**
 * Request parameters for apiV1WorkspaceWorkspaceSlugVersionLimitPut operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV1WorkspaceWorkspaceSlugVersionLimitPutRequest
 */
export interface DefaultApiApiV1WorkspaceWorkspaceSlugVersionLimitPutRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV1WorkspaceWorkspaceSlugVersionLimitPut
     */
    readonly workspaceSlug: string

    /**
     * 
     * @type {ApiV1WorkspaceWorkspaceSlugVersionLimitPutRequest}
     * @memberof DefaultApiApiV1WorkspaceWorkspaceSlugVersionLimitPut
     */
    readonly apiV1WorkspaceWorkspaceSlugVersionLimitPutRequest: ApiV1WorkspaceWorkspaceSlugVersionLimitPutRequest
}

/**
 * Request parameters for apiV2AuthMfaVerifyPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV2AuthMfaVerifyPostRequest
 */
export interface DefaultApiApiV2AuthMfaVerifyPostRequest {
    /**
     * 
     * @type {ApiV2AuthMfaVerifyPostRequest}
     * @memberof DefaultApiApiV2AuthMfaVerifyPost
     */
    readonly apiV2AuthMfaVerifyPostRequest: ApiV2AuthMfaVerifyPostRequest
}

/**
 * Request parameters for apiV2OrganizationsOrgIdIdentityMembershipsGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV2OrganizationsOrgIdIdentityMembershipsGetRequest
 */
export interface DefaultApiApiV2OrganizationsOrgIdIdentityMembershipsGetRequest {
    /**
     * The ID of the organization to get identity memberships from.
     * @type {string}
     * @memberof DefaultApiApiV2OrganizationsOrgIdIdentityMembershipsGet
     */
    readonly orgId: string
}

/**
 * Request parameters for apiV2OrganizationsOrganizationIdDelete operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV2OrganizationsOrganizationIdDeleteRequest
 */
export interface DefaultApiApiV2OrganizationsOrganizationIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV2OrganizationsOrganizationIdDelete
     */
    readonly organizationId: string
}

/**
 * Request parameters for apiV2OrganizationsOrganizationIdMembershipsGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV2OrganizationsOrganizationIdMembershipsGetRequest
 */
export interface DefaultApiApiV2OrganizationsOrganizationIdMembershipsGetRequest {
    /**
     * The ID of the organization to get memberships from.
     * @type {string}
     * @memberof DefaultApiApiV2OrganizationsOrganizationIdMembershipsGet
     */
    readonly organizationId: string
}

/**
 * Request parameters for apiV2OrganizationsOrganizationIdMembershipsMembershipIdDelete operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV2OrganizationsOrganizationIdMembershipsMembershipIdDeleteRequest
 */
export interface DefaultApiApiV2OrganizationsOrganizationIdMembershipsMembershipIdDeleteRequest {
    /**
     * The ID of the organization to delete the membership from.
     * @type {string}
     * @memberof DefaultApiApiV2OrganizationsOrganizationIdMembershipsMembershipIdDelete
     */
    readonly organizationId: string

    /**
     * The ID of the membership to delete.
     * @type {string}
     * @memberof DefaultApiApiV2OrganizationsOrganizationIdMembershipsMembershipIdDelete
     */
    readonly membershipId: string
}

/**
 * Request parameters for apiV2OrganizationsOrganizationIdMembershipsMembershipIdGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV2OrganizationsOrganizationIdMembershipsMembershipIdGetRequest
 */
export interface DefaultApiApiV2OrganizationsOrganizationIdMembershipsMembershipIdGetRequest {
    /**
     * The ID of the organization to get the membership for.
     * @type {string}
     * @memberof DefaultApiApiV2OrganizationsOrganizationIdMembershipsMembershipIdGet
     */
    readonly organizationId: string

    /**
     * The ID of the membership to get.
     * @type {string}
     * @memberof DefaultApiApiV2OrganizationsOrganizationIdMembershipsMembershipIdGet
     */
    readonly membershipId: string
}

/**
 * Request parameters for apiV2OrganizationsOrganizationIdMembershipsMembershipIdPatch operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV2OrganizationsOrganizationIdMembershipsMembershipIdPatchRequest
 */
export interface DefaultApiApiV2OrganizationsOrganizationIdMembershipsMembershipIdPatchRequest {
    /**
     * The ID of the organization to update the membership for.
     * @type {string}
     * @memberof DefaultApiApiV2OrganizationsOrganizationIdMembershipsMembershipIdPatch
     */
    readonly organizationId: string

    /**
     * The ID of the membership to update.
     * @type {string}
     * @memberof DefaultApiApiV2OrganizationsOrganizationIdMembershipsMembershipIdPatch
     */
    readonly membershipId: string

    /**
     * 
     * @type {ApiV2OrganizationsOrganizationIdMembershipsMembershipIdPatchRequest}
     * @memberof DefaultApiApiV2OrganizationsOrganizationIdMembershipsMembershipIdPatch
     */
    readonly apiV2OrganizationsOrganizationIdMembershipsMembershipIdPatchRequest?: ApiV2OrganizationsOrganizationIdMembershipsMembershipIdPatchRequest
}

/**
 * Request parameters for apiV2OrganizationsOrganizationIdMembershipsMembershipIdProjectMembershipsGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV2OrganizationsOrganizationIdMembershipsMembershipIdProjectMembershipsGetRequest
 */
export interface DefaultApiApiV2OrganizationsOrganizationIdMembershipsMembershipIdProjectMembershipsGetRequest {
    /**
     * The ID of the organization to delete the membership from.
     * @type {string}
     * @memberof DefaultApiApiV2OrganizationsOrganizationIdMembershipsMembershipIdProjectMembershipsGet
     */
    readonly organizationId: string

    /**
     * The ID of the membership to delete.
     * @type {string}
     * @memberof DefaultApiApiV2OrganizationsOrganizationIdMembershipsMembershipIdProjectMembershipsGet
     */
    readonly membershipId: string
}

/**
 * Request parameters for apiV2OrganizationsOrganizationIdWorkspacesGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV2OrganizationsOrganizationIdWorkspacesGetRequest
 */
export interface DefaultApiApiV2OrganizationsOrganizationIdWorkspacesGetRequest {
    /**
     * The ID of the organization to get projects from.
     * @type {string}
     * @memberof DefaultApiApiV2OrganizationsOrganizationIdWorkspacesGet
     */
    readonly organizationId: string
}

/**
 * Request parameters for apiV2OrganizationsPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV2OrganizationsPostRequest
 */
export interface DefaultApiApiV2OrganizationsPostRequest {
    /**
     * 
     * @type {ApiV1WorkspaceWorkspaceIdNamePostRequest}
     * @memberof DefaultApiApiV2OrganizationsPost
     */
    readonly apiV1WorkspaceWorkspaceIdNamePostRequest: ApiV1WorkspaceWorkspaceIdNamePostRequest
}

/**
 * Request parameters for apiV2ServiceTokenPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV2ServiceTokenPostRequest
 */
export interface DefaultApiApiV2ServiceTokenPostRequest {
    /**
     * 
     * @type {ApiV2ServiceTokenPostRequest}
     * @memberof DefaultApiApiV2ServiceTokenPost
     */
    readonly apiV2ServiceTokenPostRequest: ApiV2ServiceTokenPostRequest
}

/**
 * Request parameters for apiV2ServiceTokenServiceTokenIdDelete operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV2ServiceTokenServiceTokenIdDeleteRequest
 */
export interface DefaultApiApiV2ServiceTokenServiceTokenIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV2ServiceTokenServiceTokenIdDelete
     */
    readonly serviceTokenId: string
}

/**
 * Request parameters for apiV2UsersMeApiKeysApiKeyDataIdDelete operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV2UsersMeApiKeysApiKeyDataIdDeleteRequest
 */
export interface DefaultApiApiV2UsersMeApiKeysApiKeyDataIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV2UsersMeApiKeysApiKeyDataIdDelete
     */
    readonly apiKeyDataId: string
}

/**
 * Request parameters for apiV2UsersMeApiKeysPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV2UsersMeApiKeysPostRequest
 */
export interface DefaultApiApiV2UsersMeApiKeysPostRequest {
    /**
     * 
     * @type {ApiV2UsersMeApiKeysPostRequest}
     * @memberof DefaultApiApiV2UsersMeApiKeysPost
     */
    readonly apiV2UsersMeApiKeysPostRequest: ApiV2UsersMeApiKeysPostRequest
}

/**
 * Request parameters for apiV2UsersMeAuthMethodsPut operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV2UsersMeAuthMethodsPutRequest
 */
export interface DefaultApiApiV2UsersMeAuthMethodsPutRequest {
    /**
     * 
     * @type {ApiV2UsersMeAuthMethodsPutRequest}
     * @memberof DefaultApiApiV2UsersMeAuthMethodsPut
     */
    readonly apiV2UsersMeAuthMethodsPutRequest: ApiV2UsersMeAuthMethodsPutRequest
}

/**
 * Request parameters for apiV2UsersMeEmailsCodePost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV2UsersMeEmailsCodePostRequest
 */
export interface DefaultApiApiV2UsersMeEmailsCodePostRequest {
    /**
     * 
     * @type {ApiV2UsersMeEmailsCodePostRequest}
     * @memberof DefaultApiApiV2UsersMeEmailsCodePost
     */
    readonly apiV2UsersMeEmailsCodePostRequest: ApiV2UsersMeEmailsCodePostRequest
}

/**
 * Request parameters for apiV2UsersMeEmailsVerifyPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV2UsersMeEmailsVerifyPostRequest
 */
export interface DefaultApiApiV2UsersMeEmailsVerifyPostRequest {
    /**
     * 
     * @type {ApiV2UsersMeEmailsVerifyPostRequest}
     * @memberof DefaultApiApiV2UsersMeEmailsVerifyPost
     */
    readonly apiV2UsersMeEmailsVerifyPostRequest: ApiV2UsersMeEmailsVerifyPostRequest
}

/**
 * Request parameters for apiV2UsersMeMfaPatch operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV2UsersMeMfaPatchRequest
 */
export interface DefaultApiApiV2UsersMeMfaPatchRequest {
    /**
     * 
     * @type {ApiV2UsersMeMfaPatchRequest}
     * @memberof DefaultApiApiV2UsersMeMfaPatch
     */
    readonly apiV2UsersMeMfaPatchRequest: ApiV2UsersMeMfaPatchRequest
}

/**
 * Request parameters for apiV2UsersMeNamePatch operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV2UsersMeNamePatchRequest
 */
export interface DefaultApiApiV2UsersMeNamePatchRequest {
    /**
     * 
     * @type {ApiV2UsersMeNamePatchRequest}
     * @memberof DefaultApiApiV2UsersMeNamePatch
     */
    readonly apiV2UsersMeNamePatchRequest: ApiV2UsersMeNamePatchRequest
}

/**
 * Request parameters for apiV2WorkspacePost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV2WorkspacePostRequest
 */
export interface DefaultApiApiV2WorkspacePostRequest {
    /**
     * 
     * @type {ApiV2WorkspacePostRequest}
     * @memberof DefaultApiApiV2WorkspacePost
     */
    readonly apiV2WorkspacePostRequest: ApiV2WorkspacePostRequest
}

/**
 * Request parameters for apiV2WorkspaceProjectIdCertificateTemplatesGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV2WorkspaceProjectIdCertificateTemplatesGetRequest
 */
export interface DefaultApiApiV2WorkspaceProjectIdCertificateTemplatesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV2WorkspaceProjectIdCertificateTemplatesGet
     */
    readonly projectId: string
}

/**
 * Request parameters for apiV2WorkspaceProjectIdIdentityMembershipsGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV2WorkspaceProjectIdIdentityMembershipsGetRequest
 */
export interface DefaultApiApiV2WorkspaceProjectIdIdentityMembershipsGetRequest {
    /**
     * The ID of the project to get identity memberships from.
     * @type {string}
     * @memberof DefaultApiApiV2WorkspaceProjectIdIdentityMembershipsGet
     */
    readonly projectId: string
}

/**
 * Request parameters for apiV2WorkspaceProjectIdIdentityMembershipsIdentityIdDelete operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdDeleteRequest
 */
export interface DefaultApiApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdDeleteRequest {
    /**
     * The ID of the project to delete the identity membership from.
     * @type {string}
     * @memberof DefaultApiApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdDelete
     */
    readonly projectId: string

    /**
     * The ID of the identity to delete the membership from.
     * @type {string}
     * @memberof DefaultApiApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdDelete
     */
    readonly identityId: string
}

/**
 * Request parameters for apiV2WorkspaceProjectIdIdentityMembershipsIdentityIdGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdGetRequest
 */
export interface DefaultApiApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdGetRequest {
    /**
     * The ID of the project to get the identity membership for.
     * @type {string}
     * @memberof DefaultApiApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdGet
     */
    readonly projectId: string

    /**
     * The ID of the identity to get the membership for.
     * @type {string}
     * @memberof DefaultApiApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdGet
     */
    readonly identityId: string
}

/**
 * Request parameters for apiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPatch operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPatchRequest
 */
export interface DefaultApiApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPatchRequest {
    /**
     * The ID of the project to update the identity membership for.
     * @type {string}
     * @memberof DefaultApiApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPatch
     */
    readonly projectId: string

    /**
     * The ID of the identity to update the membership for.
     * @type {string}
     * @memberof DefaultApiApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPatch
     */
    readonly identityId: string

    /**
     * 
     * @type {ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPatchRequest}
     * @memberof DefaultApiApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPatch
     */
    readonly apiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPatchRequest: ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPatchRequest
}

/**
 * Request parameters for apiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPostRequest
 */
export interface DefaultApiApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPostRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPost
     */
    readonly projectId: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPost
     */
    readonly identityId: string

    /**
     * 
     * @type {ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPostRequest}
     * @memberof DefaultApiApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPost
     */
    readonly apiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPostRequest?: ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPostRequest
}

/**
 * Request parameters for apiV2WorkspaceProjectIdMembershipsDelete operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV2WorkspaceProjectIdMembershipsDeleteRequest
 */
export interface DefaultApiApiV2WorkspaceProjectIdMembershipsDeleteRequest {
    /**
     * The ID of the project to remove the member from.
     * @type {string}
     * @memberof DefaultApiApiV2WorkspaceProjectIdMembershipsDelete
     */
    readonly projectId: string

    /**
     * 
     * @type {ApiV2WorkspaceProjectIdMembershipsDeleteRequest}
     * @memberof DefaultApiApiV2WorkspaceProjectIdMembershipsDelete
     */
    readonly apiV2WorkspaceProjectIdMembershipsDeleteRequest?: ApiV2WorkspaceProjectIdMembershipsDeleteRequest
}

/**
 * Request parameters for apiV2WorkspaceProjectIdMembershipsPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV2WorkspaceProjectIdMembershipsPostRequest
 */
export interface DefaultApiApiV2WorkspaceProjectIdMembershipsPostRequest {
    /**
     * The ID of the project to invite the member to.
     * @type {string}
     * @memberof DefaultApiApiV2WorkspaceProjectIdMembershipsPost
     */
    readonly projectId: string

    /**
     * 
     * @type {ApiV2WorkspaceProjectIdMembershipsPostRequest}
     * @memberof DefaultApiApiV2WorkspaceProjectIdMembershipsPost
     */
    readonly apiV2WorkspaceProjectIdMembershipsPostRequest?: ApiV2WorkspaceProjectIdMembershipsPostRequest
}

/**
 * Request parameters for apiV2WorkspaceProjectIdPkiAlertsGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV2WorkspaceProjectIdPkiAlertsGetRequest
 */
export interface DefaultApiApiV2WorkspaceProjectIdPkiAlertsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV2WorkspaceProjectIdPkiAlertsGet
     */
    readonly projectId: string
}

/**
 * Request parameters for apiV2WorkspaceProjectIdPkiCollectionsGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV2WorkspaceProjectIdPkiCollectionsGetRequest
 */
export interface DefaultApiApiV2WorkspaceProjectIdPkiCollectionsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV2WorkspaceProjectIdPkiCollectionsGet
     */
    readonly projectId: string
}

/**
 * Request parameters for apiV2WorkspaceProjectIdUpgradePost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV2WorkspaceProjectIdUpgradePostRequest
 */
export interface DefaultApiApiV2WorkspaceProjectIdUpgradePostRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV2WorkspaceProjectIdUpgradePost
     */
    readonly projectId: string

    /**
     * 
     * @type {ApiV2WorkspaceProjectIdUpgradePostRequest}
     * @memberof DefaultApiApiV2WorkspaceProjectIdUpgradePost
     */
    readonly apiV2WorkspaceProjectIdUpgradePostRequest: ApiV2WorkspaceProjectIdUpgradePostRequest
}

/**
 * Request parameters for apiV2WorkspaceProjectIdUpgradeStatusGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV2WorkspaceProjectIdUpgradeStatusGetRequest
 */
export interface DefaultApiApiV2WorkspaceProjectIdUpgradeStatusGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV2WorkspaceProjectIdUpgradeStatusGet
     */
    readonly projectId: string
}

/**
 * Request parameters for apiV2WorkspaceProjectSlugGroupsGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV2WorkspaceProjectSlugGroupsGetRequest
 */
export interface DefaultApiApiV2WorkspaceProjectSlugGroupsGetRequest {
    /**
     * The slug of the project to list groups for.
     * @type {string}
     * @memberof DefaultApiApiV2WorkspaceProjectSlugGroupsGet
     */
    readonly projectSlug: string
}

/**
 * Request parameters for apiV2WorkspaceProjectSlugGroupsGroupSlugDelete operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV2WorkspaceProjectSlugGroupsGroupSlugDeleteRequest
 */
export interface DefaultApiApiV2WorkspaceProjectSlugGroupsGroupSlugDeleteRequest {
    /**
     * The slug of the project to delete the group from.
     * @type {string}
     * @memberof DefaultApiApiV2WorkspaceProjectSlugGroupsGroupSlugDelete
     */
    readonly projectSlug: string

    /**
     * The slug of the group to delete from the project.
     * @type {string}
     * @memberof DefaultApiApiV2WorkspaceProjectSlugGroupsGroupSlugDelete
     */
    readonly groupSlug: string
}

/**
 * Request parameters for apiV2WorkspaceProjectSlugGroupsGroupSlugPatch operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV2WorkspaceProjectSlugGroupsGroupSlugPatchRequest
 */
export interface DefaultApiApiV2WorkspaceProjectSlugGroupsGroupSlugPatchRequest {
    /**
     * The slug of the project to update the group in.
     * @type {string}
     * @memberof DefaultApiApiV2WorkspaceProjectSlugGroupsGroupSlugPatch
     */
    readonly projectSlug: string

    /**
     * The slug of the group to update in the project.
     * @type {string}
     * @memberof DefaultApiApiV2WorkspaceProjectSlugGroupsGroupSlugPatch
     */
    readonly groupSlug: string

    /**
     * 
     * @type {ApiV2WorkspaceProjectSlugGroupsGroupSlugPatchRequest}
     * @memberof DefaultApiApiV2WorkspaceProjectSlugGroupsGroupSlugPatch
     */
    readonly apiV2WorkspaceProjectSlugGroupsGroupSlugPatchRequest: ApiV2WorkspaceProjectSlugGroupsGroupSlugPatchRequest
}

/**
 * Request parameters for apiV2WorkspaceProjectSlugGroupsGroupSlugPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV2WorkspaceProjectSlugGroupsGroupSlugPostRequest
 */
export interface DefaultApiApiV2WorkspaceProjectSlugGroupsGroupSlugPostRequest {
    /**
     * The slug of the project to add the group to.
     * @type {string}
     * @memberof DefaultApiApiV2WorkspaceProjectSlugGroupsGroupSlugPost
     */
    readonly projectSlug: string

    /**
     * The slug of the group to add to the project.
     * @type {string}
     * @memberof DefaultApiApiV2WorkspaceProjectSlugGroupsGroupSlugPost
     */
    readonly groupSlug: string

    /**
     * 
     * @type {ApiV2WorkspaceProjectSlugGroupsGroupSlugPostRequest}
     * @memberof DefaultApiApiV2WorkspaceProjectSlugGroupsGroupSlugPost
     */
    readonly apiV2WorkspaceProjectSlugGroupsGroupSlugPostRequest?: ApiV2WorkspaceProjectSlugGroupsGroupSlugPostRequest
}

/**
 * Request parameters for apiV2WorkspaceSlugCasGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV2WorkspaceSlugCasGetRequest
 */
export interface DefaultApiApiV2WorkspaceSlugCasGetRequest {
    /**
     * The slug of the project to list CAs for.
     * @type {string}
     * @memberof DefaultApiApiV2WorkspaceSlugCasGet
     */
    readonly slug: string

    /**
     * The status of the CA to filter by.
     * @type {'active' | 'pending-certificate'}
     * @memberof DefaultApiApiV2WorkspaceSlugCasGet
     */
    readonly status?: ApiV2WorkspaceSlugCasGetStatusEnum

    /**
     * The friendly name of the CA to filter by.
     * @type {string}
     * @memberof DefaultApiApiV2WorkspaceSlugCasGet
     */
    readonly friendlyName?: string

    /**
     * The common name of the CA to filter by.
     * @type {string}
     * @memberof DefaultApiApiV2WorkspaceSlugCasGet
     */
    readonly commonName?: string

    /**
     * The offset to start from. If you enter 10, it will start from the 10th CA.
     * @type {number}
     * @memberof DefaultApiApiV2WorkspaceSlugCasGet
     */
    readonly offset?: number

    /**
     * The number of CAs to return.
     * @type {number}
     * @memberof DefaultApiApiV2WorkspaceSlugCasGet
     */
    readonly limit?: number
}

/**
 * Request parameters for apiV2WorkspaceSlugCertificatesGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV2WorkspaceSlugCertificatesGetRequest
 */
export interface DefaultApiApiV2WorkspaceSlugCertificatesGetRequest {
    /**
     * The slug of the project to list certificates for.
     * @type {string}
     * @memberof DefaultApiApiV2WorkspaceSlugCertificatesGet
     */
    readonly slug: string

    /**
     * The friendly name of the certificate to filter by.
     * @type {string}
     * @memberof DefaultApiApiV2WorkspaceSlugCertificatesGet
     */
    readonly friendlyName?: string

    /**
     * The common name of the certificate to filter by.
     * @type {string}
     * @memberof DefaultApiApiV2WorkspaceSlugCertificatesGet
     */
    readonly commonName?: string

    /**
     * The offset to start from. If you enter 10, it will start from the 10th certificate.
     * @type {number}
     * @memberof DefaultApiApiV2WorkspaceSlugCertificatesGet
     */
    readonly offset?: number

    /**
     * The number of certificates to return.
     * @type {number}
     * @memberof DefaultApiApiV2WorkspaceSlugCertificatesGet
     */
    readonly limit?: number
}

/**
 * Request parameters for apiV2WorkspaceSlugDelete operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV2WorkspaceSlugDeleteRequest
 */
export interface DefaultApiApiV2WorkspaceSlugDeleteRequest {
    /**
     * The slug of the project to delete.
     * @type {string}
     * @memberof DefaultApiApiV2WorkspaceSlugDelete
     */
    readonly slug: string
}

/**
 * Request parameters for apiV2WorkspaceSlugGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV2WorkspaceSlugGetRequest
 */
export interface DefaultApiApiV2WorkspaceSlugGetRequest {
    /**
     * The slug of the project to get.
     * @type {string}
     * @memberof DefaultApiApiV2WorkspaceSlugGet
     */
    readonly slug: string
}

/**
 * Request parameters for apiV2WorkspaceSlugPatch operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV2WorkspaceSlugPatchRequest
 */
export interface DefaultApiApiV2WorkspaceSlugPatchRequest {
    /**
     * The slug of the project to update.
     * @type {string}
     * @memberof DefaultApiApiV2WorkspaceSlugPatch
     */
    readonly slug: string

    /**
     * 
     * @type {ApiV2WorkspaceSlugPatchRequest}
     * @memberof DefaultApiApiV2WorkspaceSlugPatch
     */
    readonly apiV2WorkspaceSlugPatchRequest?: ApiV2WorkspaceSlugPatchRequest
}

/**
 * Request parameters for apiV2WorkspaceWorkspaceIdEncryptedKeyGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV2WorkspaceWorkspaceIdEncryptedKeyGetRequest
 */
export interface DefaultApiApiV2WorkspaceWorkspaceIdEncryptedKeyGetRequest {
    /**
     * The ID of the project to get the key from.
     * @type {string}
     * @memberof DefaultApiApiV2WorkspaceWorkspaceIdEncryptedKeyGet
     */
    readonly workspaceId: string
}

/**
 * Request parameters for apiV3AuthLogin1Post operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV3AuthLogin1PostRequest
 */
export interface DefaultApiApiV3AuthLogin1PostRequest {
    /**
     * 
     * @type {ApiV3AuthLogin1PostRequest}
     * @memberof DefaultApiApiV3AuthLogin1Post
     */
    readonly apiV3AuthLogin1PostRequest: ApiV3AuthLogin1PostRequest
}

/**
 * Request parameters for apiV3AuthLogin2Post operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV3AuthLogin2PostRequest
 */
export interface DefaultApiApiV3AuthLogin2PostRequest {
    /**
     * 
     * @type {ApiV3AuthLogin2PostRequest}
     * @memberof DefaultApiApiV3AuthLogin2Post
     */
    readonly apiV3AuthLogin2PostRequest: ApiV3AuthLogin2PostRequest
}

/**
 * Request parameters for apiV3AuthSelectOrganizationPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV3AuthSelectOrganizationPostRequest
 */
export interface DefaultApiApiV3AuthSelectOrganizationPostRequest {
    /**
     * 
     * @type {ApiV1SecretScanningCreateInstallationSessionOrganizationPostRequest}
     * @memberof DefaultApiApiV3AuthSelectOrganizationPost
     */
    readonly apiV1SecretScanningCreateInstallationSessionOrganizationPostRequest: ApiV1SecretScanningCreateInstallationSessionOrganizationPostRequest
}

/**
 * Request parameters for apiV3SecretsBackfillSecretReferencesPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV3SecretsBackfillSecretReferencesPostRequest
 */
export interface DefaultApiApiV3SecretsBackfillSecretReferencesPostRequest {
    /**
     * 
     * @type {ApiV3SecretsBackfillSecretReferencesPostRequest}
     * @memberof DefaultApiApiV3SecretsBackfillSecretReferencesPost
     */
    readonly apiV3SecretsBackfillSecretReferencesPostRequest: ApiV3SecretsBackfillSecretReferencesPostRequest
}

/**
 * Request parameters for apiV3SecretsBatchDelete operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV3SecretsBatchDeleteRequest
 */
export interface DefaultApiApiV3SecretsBatchDeleteRequest {
    /**
     * 
     * @type {ApiV3SecretsBatchDeleteRequest}
     * @memberof DefaultApiApiV3SecretsBatchDelete
     */
    readonly apiV3SecretsBatchDeleteRequest: ApiV3SecretsBatchDeleteRequest
}

/**
 * Request parameters for apiV3SecretsBatchPatch operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV3SecretsBatchPatchRequest
 */
export interface DefaultApiApiV3SecretsBatchPatchRequest {
    /**
     * 
     * @type {ApiV3SecretsBatchPatchRequest}
     * @memberof DefaultApiApiV3SecretsBatchPatch
     */
    readonly apiV3SecretsBatchPatchRequest: ApiV3SecretsBatchPatchRequest
}

/**
 * Request parameters for apiV3SecretsBatchPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV3SecretsBatchPostRequest
 */
export interface DefaultApiApiV3SecretsBatchPostRequest {
    /**
     * 
     * @type {ApiV3SecretsBatchPostRequest}
     * @memberof DefaultApiApiV3SecretsBatchPost
     */
    readonly apiV3SecretsBatchPostRequest: ApiV3SecretsBatchPostRequest
}

/**
 * Request parameters for apiV3SecretsBatchRawDelete operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV3SecretsBatchRawDeleteRequest
 */
export interface DefaultApiApiV3SecretsBatchRawDeleteRequest {
    /**
     * 
     * @type {ApiV3SecretsBatchRawDeleteRequest}
     * @memberof DefaultApiApiV3SecretsBatchRawDelete
     */
    readonly apiV3SecretsBatchRawDeleteRequest: ApiV3SecretsBatchRawDeleteRequest
}

/**
 * Request parameters for apiV3SecretsBatchRawPatch operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV3SecretsBatchRawPatchRequest
 */
export interface DefaultApiApiV3SecretsBatchRawPatchRequest {
    /**
     * 
     * @type {ApiV3SecretsBatchRawPatchRequest}
     * @memberof DefaultApiApiV3SecretsBatchRawPatch
     */
    readonly apiV3SecretsBatchRawPatchRequest: ApiV3SecretsBatchRawPatchRequest
}

/**
 * Request parameters for apiV3SecretsBatchRawPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV3SecretsBatchRawPostRequest
 */
export interface DefaultApiApiV3SecretsBatchRawPostRequest {
    /**
     * 
     * @type {ApiV3SecretsBatchRawPostRequest}
     * @memberof DefaultApiApiV3SecretsBatchRawPost
     */
    readonly apiV3SecretsBatchRawPostRequest: ApiV3SecretsBatchRawPostRequest
}

/**
 * Request parameters for apiV3SecretsGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV3SecretsGetRequest
 */
export interface DefaultApiApiV3SecretsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV3SecretsGet
     */
    readonly workspaceId: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV3SecretsGet
     */
    readonly environment: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV3SecretsGet
     */
    readonly secretPath?: string

    /**
     * 
     * @type {'true' | 'false'}
     * @memberof DefaultApiApiV3SecretsGet
     */
    readonly recursive?: ApiV3SecretsGetRecursiveEnum

    /**
     * 
     * @type {'true' | 'false'}
     * @memberof DefaultApiApiV3SecretsGet
     */
    readonly includeImports?: ApiV3SecretsGetIncludeImportsEnum
}

/**
 * Request parameters for apiV3SecretsMovePost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV3SecretsMovePostRequest
 */
export interface DefaultApiApiV3SecretsMovePostRequest {
    /**
     * 
     * @type {ApiV3SecretsMovePostRequest}
     * @memberof DefaultApiApiV3SecretsMovePost
     */
    readonly apiV3SecretsMovePostRequest: ApiV3SecretsMovePostRequest
}

/**
 * Request parameters for apiV3SecretsRawGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV3SecretsRawGetRequest
 */
export interface DefaultApiApiV3SecretsRawGetRequest {
    /**
     * The ID of the project to list secrets from.
     * @type {string}
     * @memberof DefaultApiApiV3SecretsRawGet
     */
    readonly workspaceId?: string

    /**
     * The slug of the project to list secrets from. This parameter is only applicable by machine identities.
     * @type {string}
     * @memberof DefaultApiApiV3SecretsRawGet
     */
    readonly workspaceSlug?: string

    /**
     * The slug of the environment to list secrets from.
     * @type {string}
     * @memberof DefaultApiApiV3SecretsRawGet
     */
    readonly environment?: string

    /**
     * The secret path to list secrets from.
     * @type {string}
     * @memberof DefaultApiApiV3SecretsRawGet
     */
    readonly secretPath?: string

    /**
     * Whether or not to expand secret references
     * @type {'true' | 'false'}
     * @memberof DefaultApiApiV3SecretsRawGet
     */
    readonly expandSecretReferences?: ApiV3SecretsRawGetExpandSecretReferencesEnum

    /**
     * Whether or not to fetch all secrets from the specified base path, and all of its subdirectories. Note, the max depth is 20 deep.
     * @type {'true' | 'false'}
     * @memberof DefaultApiApiV3SecretsRawGet
     */
    readonly recursive?: ApiV3SecretsRawGetRecursiveEnum

    /**
     * Weather to include imported secrets or not.
     * @type {'true' | 'false'}
     * @memberof DefaultApiApiV3SecretsRawGet
     */
    readonly includeImports?: ApiV3SecretsRawGetIncludeImportsEnum

    /**
     * The comma separated tag slugs to filter secrets
     * @type {string}
     * @memberof DefaultApiApiV3SecretsRawGet
     */
    readonly tagSlugs?: string
}

/**
 * Request parameters for apiV3SecretsRawSecretNameDelete operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV3SecretsRawSecretNameDeleteRequest
 */
export interface DefaultApiApiV3SecretsRawSecretNameDeleteRequest {
    /**
     * The name of the secret to delete.
     * @type {string}
     * @memberof DefaultApiApiV3SecretsRawSecretNameDelete
     */
    readonly secretName: string

    /**
     * 
     * @type {ApiV3SecretsRawSecretNameDeleteRequest}
     * @memberof DefaultApiApiV3SecretsRawSecretNameDelete
     */
    readonly apiV3SecretsRawSecretNameDeleteRequest: ApiV3SecretsRawSecretNameDeleteRequest
}

/**
 * Request parameters for apiV3SecretsRawSecretNameGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV3SecretsRawSecretNameGetRequest
 */
export interface DefaultApiApiV3SecretsRawSecretNameGetRequest {
    /**
     * The name of the secret to get.
     * @type {string}
     * @memberof DefaultApiApiV3SecretsRawSecretNameGet
     */
    readonly secretName: string

    /**
     * The ID of the project to get the secret from.
     * @type {string}
     * @memberof DefaultApiApiV3SecretsRawSecretNameGet
     */
    readonly workspaceId?: string

    /**
     * The slug of the project to get the secret from.
     * @type {string}
     * @memberof DefaultApiApiV3SecretsRawSecretNameGet
     */
    readonly workspaceSlug?: string

    /**
     * The slug of the environment to get the secret from.
     * @type {string}
     * @memberof DefaultApiApiV3SecretsRawSecretNameGet
     */
    readonly environment?: string

    /**
     * The path of the secret to get.
     * @type {string}
     * @memberof DefaultApiApiV3SecretsRawSecretNameGet
     */
    readonly secretPath?: string

    /**
     * The version of the secret to get.
     * @type {number}
     * @memberof DefaultApiApiV3SecretsRawSecretNameGet
     */
    readonly version?: number

    /**
     * The type of the secret to get.
     * @type {'shared' | 'personal'}
     * @memberof DefaultApiApiV3SecretsRawSecretNameGet
     */
    readonly type?: ApiV3SecretsRawSecretNameGetTypeEnum

    /**
     * Whether or not to expand secret references
     * @type {'true' | 'false'}
     * @memberof DefaultApiApiV3SecretsRawSecretNameGet
     */
    readonly expandSecretReferences?: ApiV3SecretsRawSecretNameGetExpandSecretReferencesEnum

    /**
     * Weather to include imported secrets or not.
     * @type {'true' | 'false'}
     * @memberof DefaultApiApiV3SecretsRawSecretNameGet
     */
    readonly includeImports?: ApiV3SecretsRawSecretNameGetIncludeImportsEnum
}

/**
 * Request parameters for apiV3SecretsRawSecretNamePatch operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV3SecretsRawSecretNamePatchRequest
 */
export interface DefaultApiApiV3SecretsRawSecretNamePatchRequest {
    /**
     * The name of the secret to update.
     * @type {string}
     * @memberof DefaultApiApiV3SecretsRawSecretNamePatch
     */
    readonly secretName: string

    /**
     * 
     * @type {ApiV3SecretsRawSecretNamePatchRequest}
     * @memberof DefaultApiApiV3SecretsRawSecretNamePatch
     */
    readonly apiV3SecretsRawSecretNamePatchRequest: ApiV3SecretsRawSecretNamePatchRequest
}

/**
 * Request parameters for apiV3SecretsRawSecretNamePost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV3SecretsRawSecretNamePostRequest
 */
export interface DefaultApiApiV3SecretsRawSecretNamePostRequest {
    /**
     * The name of the secret to create.
     * @type {string}
     * @memberof DefaultApiApiV3SecretsRawSecretNamePost
     */
    readonly secretName: string

    /**
     * 
     * @type {ApiV3SecretsRawSecretNamePostRequest}
     * @memberof DefaultApiApiV3SecretsRawSecretNamePost
     */
    readonly apiV3SecretsRawSecretNamePostRequest: ApiV3SecretsRawSecretNamePostRequest
}

/**
 * Request parameters for apiV3SecretsSecretNameDelete operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV3SecretsSecretNameDeleteRequest
 */
export interface DefaultApiApiV3SecretsSecretNameDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV3SecretsSecretNameDelete
     */
    readonly secretName: string

    /**
     * 
     * @type {ApiV3SecretsSecretNameDeleteRequest}
     * @memberof DefaultApiApiV3SecretsSecretNameDelete
     */
    readonly apiV3SecretsSecretNameDeleteRequest: ApiV3SecretsSecretNameDeleteRequest
}

/**
 * Request parameters for apiV3SecretsSecretNameGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV3SecretsSecretNameGetRequest
 */
export interface DefaultApiApiV3SecretsSecretNameGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV3SecretsSecretNameGet
     */
    readonly workspaceId: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV3SecretsSecretNameGet
     */
    readonly environment: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV3SecretsSecretNameGet
     */
    readonly secretName: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV3SecretsSecretNameGet
     */
    readonly secretPath?: string

    /**
     * 
     * @type {'shared' | 'personal'}
     * @memberof DefaultApiApiV3SecretsSecretNameGet
     */
    readonly type?: ApiV3SecretsSecretNameGetTypeEnum

    /**
     * 
     * @type {number}
     * @memberof DefaultApiApiV3SecretsSecretNameGet
     */
    readonly version?: number

    /**
     * 
     * @type {'true' | 'false'}
     * @memberof DefaultApiApiV3SecretsSecretNameGet
     */
    readonly includeImports?: ApiV3SecretsSecretNameGetIncludeImportsEnum
}

/**
 * Request parameters for apiV3SecretsSecretNamePatch operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV3SecretsSecretNamePatchRequest
 */
export interface DefaultApiApiV3SecretsSecretNamePatchRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV3SecretsSecretNamePatch
     */
    readonly secretName: string

    /**
     * 
     * @type {ApiV3SecretsSecretNamePatchRequest}
     * @memberof DefaultApiApiV3SecretsSecretNamePatch
     */
    readonly apiV3SecretsSecretNamePatchRequest: ApiV3SecretsSecretNamePatchRequest
}

/**
 * Request parameters for apiV3SecretsSecretNamePost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV3SecretsSecretNamePostRequest
 */
export interface DefaultApiApiV3SecretsSecretNamePostRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV3SecretsSecretNamePost
     */
    readonly secretName: string

    /**
     * 
     * @type {ApiV3SecretsSecretNamePostRequest}
     * @memberof DefaultApiApiV3SecretsSecretNamePost
     */
    readonly apiV3SecretsSecretNamePostRequest: ApiV3SecretsSecretNamePostRequest
}

/**
 * Request parameters for apiV3SecretsTagsSecretNameDelete operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV3SecretsTagsSecretNameDeleteRequest
 */
export interface DefaultApiApiV3SecretsTagsSecretNameDeleteRequest {
    /**
     * The name of the secret to detach tags from.
     * @type {string}
     * @memberof DefaultApiApiV3SecretsTagsSecretNameDelete
     */
    readonly secretName: string

    /**
     * 
     * @type {ApiV3SecretsTagsSecretNameDeleteRequest}
     * @memberof DefaultApiApiV3SecretsTagsSecretNameDelete
     */
    readonly apiV3SecretsTagsSecretNameDeleteRequest: ApiV3SecretsTagsSecretNameDeleteRequest
}

/**
 * Request parameters for apiV3SecretsTagsSecretNamePost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV3SecretsTagsSecretNamePostRequest
 */
export interface DefaultApiApiV3SecretsTagsSecretNamePostRequest {
    /**
     * The name of the secret to attach tags to.
     * @type {string}
     * @memberof DefaultApiApiV3SecretsTagsSecretNamePost
     */
    readonly secretName: string

    /**
     * 
     * @type {ApiV3SecretsTagsSecretNamePostRequest}
     * @memberof DefaultApiApiV3SecretsTagsSecretNamePost
     */
    readonly apiV3SecretsTagsSecretNamePostRequest: ApiV3SecretsTagsSecretNamePostRequest
}

/**
 * Request parameters for apiV3SignupCompleteAccountInvitePost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV3SignupCompleteAccountInvitePostRequest
 */
export interface DefaultApiApiV3SignupCompleteAccountInvitePostRequest {
    /**
     * 
     * @type {ApiV3SignupCompleteAccountInvitePostRequest}
     * @memberof DefaultApiApiV3SignupCompleteAccountInvitePost
     */
    readonly apiV3SignupCompleteAccountInvitePostRequest: ApiV3SignupCompleteAccountInvitePostRequest
}

/**
 * Request parameters for apiV3SignupCompleteAccountSignupPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV3SignupCompleteAccountSignupPostRequest
 */
export interface DefaultApiApiV3SignupCompleteAccountSignupPostRequest {
    /**
     * 
     * @type {ApiV3SignupCompleteAccountSignupPostRequest}
     * @memberof DefaultApiApiV3SignupCompleteAccountSignupPost
     */
    readonly apiV3SignupCompleteAccountSignupPostRequest: ApiV3SignupCompleteAccountSignupPostRequest
}

/**
 * Request parameters for apiV3SignupEmailSignupPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV3SignupEmailSignupPostRequest
 */
export interface DefaultApiApiV3SignupEmailSignupPostRequest {
    /**
     * 
     * @type {ApiV1PasswordEmailPasswordResetPostRequest}
     * @memberof DefaultApiApiV3SignupEmailSignupPost
     */
    readonly apiV1PasswordEmailPasswordResetPostRequest: ApiV1PasswordEmailPasswordResetPostRequest
}

/**
 * Request parameters for apiV3SignupEmailVerifyPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV3SignupEmailVerifyPostRequest
 */
export interface DefaultApiApiV3SignupEmailVerifyPostRequest {
    /**
     * 
     * @type {ApiV1PasswordEmailPasswordResetVerifyPostRequest}
     * @memberof DefaultApiApiV3SignupEmailVerifyPost
     */
    readonly apiV1PasswordEmailPasswordResetVerifyPostRequest: ApiV1PasswordEmailPasswordResetVerifyPostRequest
}

/**
 * Request parameters for apiV3WorkspacesProjectIdSecretsBlindIndexStatusGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV3WorkspacesProjectIdSecretsBlindIndexStatusGetRequest
 */
export interface DefaultApiApiV3WorkspacesProjectIdSecretsBlindIndexStatusGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV3WorkspacesProjectIdSecretsBlindIndexStatusGet
     */
    readonly projectId: string
}

/**
 * Request parameters for apiV3WorkspacesProjectIdSecretsGet operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV3WorkspacesProjectIdSecretsGetRequest
 */
export interface DefaultApiApiV3WorkspacesProjectIdSecretsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV3WorkspacesProjectIdSecretsGet
     */
    readonly projectId: string
}

/**
 * Request parameters for apiV3WorkspacesProjectIdSecretsNamesPost operation in DefaultApi.
 * @export
 * @interface DefaultApiApiV3WorkspacesProjectIdSecretsNamesPostRequest
 */
export interface DefaultApiApiV3WorkspacesProjectIdSecretsNamesPostRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiApiV3WorkspacesProjectIdSecretsNamesPost
     */
    readonly projectId: string

    /**
     * 
     * @type {ApiV3WorkspacesProjectIdSecretsNamesPostRequest}
     * @memberof DefaultApiApiV3WorkspacesProjectIdSecretsNamesPost
     */
    readonly apiV3WorkspacesProjectIdSecretsNamesPostRequest: ApiV3WorkspacesProjectIdSecretsNamesPostRequest
}

/**
 * Request parameters for wellKnownEstCertificateTemplateIdCacertsGet operation in DefaultApi.
 * @export
 * @interface DefaultApiWellKnownEstCertificateTemplateIdCacertsGetRequest
 */
export interface DefaultApiWellKnownEstCertificateTemplateIdCacertsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiWellKnownEstCertificateTemplateIdCacertsGet
     */
    readonly certificateTemplateId: string
}

/**
 * Request parameters for wellKnownEstCertificateTemplateIdSimpleenrollPost operation in DefaultApi.
 * @export
 * @interface DefaultApiWellKnownEstCertificateTemplateIdSimpleenrollPostRequest
 */
export interface DefaultApiWellKnownEstCertificateTemplateIdSimpleenrollPostRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiWellKnownEstCertificateTemplateIdSimpleenrollPost
     */
    readonly certificateTemplateId: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiWellKnownEstCertificateTemplateIdSimpleenrollPost
     */
    readonly body?: string
}

/**
 * Request parameters for wellKnownEstCertificateTemplateIdSimplereenrollPost operation in DefaultApi.
 * @export
 * @interface DefaultApiWellKnownEstCertificateTemplateIdSimplereenrollPostRequest
 */
export interface DefaultApiWellKnownEstCertificateTemplateIdSimplereenrollPostRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiWellKnownEstCertificateTemplateIdSimplereenrollPost
     */
    readonly certificateTemplateId: string

    /**
     * 
     * @type {string}
     * @memberof DefaultApiWellKnownEstCertificateTemplateIdSimplereenrollPost
     */
    readonly body?: string
}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiStatusGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiStatusGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1AccessApprovalsPoliciesCountGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AccessApprovalsPoliciesCountGet(requestParameters: DefaultApiApiV1AccessApprovalsPoliciesCountGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AccessApprovalsPoliciesCountGet(requestParameters.projectSlug, requestParameters.envSlug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1AccessApprovalsPoliciesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AccessApprovalsPoliciesGet(requestParameters: DefaultApiApiV1AccessApprovalsPoliciesGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AccessApprovalsPoliciesGet(requestParameters.projectSlug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1AccessApprovalsPoliciesPolicyIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AccessApprovalsPoliciesPolicyIdDelete(requestParameters: DefaultApiApiV1AccessApprovalsPoliciesPolicyIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AccessApprovalsPoliciesPolicyIdDelete(requestParameters.policyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1AccessApprovalsPoliciesPolicyIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AccessApprovalsPoliciesPolicyIdPatch(requestParameters: DefaultApiApiV1AccessApprovalsPoliciesPolicyIdPatchRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AccessApprovalsPoliciesPolicyIdPatch(requestParameters.policyId, requestParameters.apiV1AccessApprovalsPoliciesPolicyIdPatchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1AccessApprovalsPoliciesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AccessApprovalsPoliciesPost(requestParameters: DefaultApiApiV1AccessApprovalsPoliciesPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AccessApprovalsPoliciesPost(requestParameters.apiV1AccessApprovalsPoliciesPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1AccessApprovalsRequestsCountGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AccessApprovalsRequestsCountGet(requestParameters: DefaultApiApiV1AccessApprovalsRequestsCountGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AccessApprovalsRequestsCountGet(requestParameters.projectSlug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1AccessApprovalsRequestsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AccessApprovalsRequestsGet(requestParameters: DefaultApiApiV1AccessApprovalsRequestsGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AccessApprovalsRequestsGet(requestParameters.projectSlug, requestParameters.authorProjectMembershipId, requestParameters.envSlug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1AccessApprovalsRequestsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AccessApprovalsRequestsPost(requestParameters: DefaultApiApiV1AccessApprovalsRequestsPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AccessApprovalsRequestsPost(requestParameters.projectSlug, requestParameters.apiV1AccessApprovalsRequestsPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1AccessApprovalsRequestsRequestIdReviewPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AccessApprovalsRequestsRequestIdReviewPost(requestParameters: DefaultApiApiV1AccessApprovalsRequestsRequestIdReviewPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AccessApprovalsRequestsRequestIdReviewPost(requestParameters.requestId, requestParameters.apiV1SecretApprovalRequestsIdReviewPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a specific privilege of an identity.
     * @param {DefaultApiApiV1AdditionalPrivilegeIdentityDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AdditionalPrivilegeIdentityDelete(requestParameters: DefaultApiApiV1AdditionalPrivilegeIdentityDeleteRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AdditionalPrivilegeIdentityDelete(requestParameters.apiV1AdditionalPrivilegeIdentityDeleteRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List of a specific privilege of an identity in a project.
     * @param {DefaultApiApiV1AdditionalPrivilegeIdentityGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AdditionalPrivilegeIdentityGet(requestParameters: DefaultApiApiV1AdditionalPrivilegeIdentityGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AdditionalPrivilegeIdentityGet(requestParameters.identityId, requestParameters.projectSlug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a specific privilege of an identity.
     * @param {DefaultApiApiV1AdditionalPrivilegeIdentityPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AdditionalPrivilegeIdentityPatch(requestParameters: DefaultApiApiV1AdditionalPrivilegeIdentityPatchRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AdditionalPrivilegeIdentityPatch(requestParameters.apiV1AdditionalPrivilegeIdentityPatchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a permanent or a non expiry specific privilege for identity.
     * @param {DefaultApiApiV1AdditionalPrivilegeIdentityPermanentPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AdditionalPrivilegeIdentityPermanentPost(requestParameters: DefaultApiApiV1AdditionalPrivilegeIdentityPermanentPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AdditionalPrivilegeIdentityPermanentPost(requestParameters.apiV1AdditionalPrivilegeIdentityPermanentPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve details of a specific privilege by privilege slug.
     * @param {DefaultApiApiV1AdditionalPrivilegeIdentityPrivilegeSlugGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AdditionalPrivilegeIdentityPrivilegeSlugGet(requestParameters: DefaultApiApiV1AdditionalPrivilegeIdentityPrivilegeSlugGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AdditionalPrivilegeIdentityPrivilegeSlugGet(requestParameters.identityId, requestParameters.projectSlug, requestParameters.privilegeSlug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a temporary or a expiring specific privilege for identity.
     * @param {DefaultApiApiV1AdditionalPrivilegeIdentityTemporaryPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AdditionalPrivilegeIdentityTemporaryPost(requestParameters: DefaultApiApiV1AdditionalPrivilegeIdentityTemporaryPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AdditionalPrivilegeIdentityTemporaryPost(requestParameters.apiV1AdditionalPrivilegeIdentityTemporaryPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1AdditionalPrivilegeUsersGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AdditionalPrivilegeUsersGet(requestParameters: DefaultApiApiV1AdditionalPrivilegeUsersGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AdditionalPrivilegeUsersGet(requestParameters.projectMembershipId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1AdditionalPrivilegeUsersPermanentPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AdditionalPrivilegeUsersPermanentPost(requestParameters: DefaultApiApiV1AdditionalPrivilegeUsersPermanentPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AdditionalPrivilegeUsersPermanentPost(requestParameters.apiV1AdditionalPrivilegeUsersPermanentPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1AdditionalPrivilegeUsersPrivilegeIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AdditionalPrivilegeUsersPrivilegeIdDelete(requestParameters: DefaultApiApiV1AdditionalPrivilegeUsersPrivilegeIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AdditionalPrivilegeUsersPrivilegeIdDelete(requestParameters.privilegeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1AdditionalPrivilegeUsersPrivilegeIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AdditionalPrivilegeUsersPrivilegeIdGet(requestParameters: DefaultApiApiV1AdditionalPrivilegeUsersPrivilegeIdGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AdditionalPrivilegeUsersPrivilegeIdGet(requestParameters.privilegeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1AdditionalPrivilegeUsersPrivilegeIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AdditionalPrivilegeUsersPrivilegeIdPatch(requestParameters: DefaultApiApiV1AdditionalPrivilegeUsersPrivilegeIdPatchRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AdditionalPrivilegeUsersPrivilegeIdPatch(requestParameters.privilegeId, requestParameters.apiV1AdditionalPrivilegeUsersPrivilegeIdPatchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1AdditionalPrivilegeUsersTemporaryPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AdditionalPrivilegeUsersTemporaryPost(requestParameters: DefaultApiApiV1AdditionalPrivilegeUsersTemporaryPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AdditionalPrivilegeUsersTemporaryPost(requestParameters.apiV1AdditionalPrivilegeUsersTemporaryPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AdminConfigGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AdminConfigGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1AdminConfigPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AdminConfigPatch(requestParameters: DefaultApiApiV1AdminConfigPatchRequest = {}, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AdminConfigPatch(requestParameters.apiV1AdminConfigPatchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1AdminSignupPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AdminSignupPost(requestParameters: DefaultApiApiV1AdminSignupPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AdminSignupPost(requestParameters.apiV1AdminSignupPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1AdminUserManagementUsersGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AdminUserManagementUsersGet(requestParameters: DefaultApiApiV1AdminUserManagementUsersGetRequest = {}, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AdminUserManagementUsersGet(requestParameters.searchTerm, requestParameters.offset, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1AdminUserManagementUsersUserIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AdminUserManagementUsersUserIdDelete(requestParameters: DefaultApiApiV1AdminUserManagementUsersUserIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AdminUserManagementUsersUserIdDelete(requestParameters.userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List Audit Log Streams.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AuditLogStreamsGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AuditLogStreamsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an Audit Log Stream by ID.
     * @param {DefaultApiApiV1AuditLogStreamsIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AuditLogStreamsIdDelete(requestParameters: DefaultApiApiV1AuditLogStreamsIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AuditLogStreamsIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get an Audit Log Stream by ID.
     * @param {DefaultApiApiV1AuditLogStreamsIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AuditLogStreamsIdGet(requestParameters: DefaultApiApiV1AuditLogStreamsIdGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AuditLogStreamsIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an Audit Log Stream by ID.
     * @param {DefaultApiApiV1AuditLogStreamsIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AuditLogStreamsIdPatch(requestParameters: DefaultApiApiV1AuditLogStreamsIdPatchRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AuditLogStreamsIdPatch(requestParameters.id, requestParameters.apiV1AuditLogStreamsIdPatchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create an Audit Log Stream.
     * @param {DefaultApiApiV1AuditLogStreamsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AuditLogStreamsPost(requestParameters: DefaultApiApiV1AuditLogStreamsPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AuditLogStreamsPost(requestParameters.apiV1AuditLogStreamsPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete AWS Auth configuration on identity
     * @param {DefaultApiApiV1AuthAwsAuthIdentitiesIdentityIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AuthAwsAuthIdentitiesIdentityIdDelete(requestParameters: DefaultApiApiV1AuthAwsAuthIdentitiesIdentityIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AuthAwsAuthIdentitiesIdentityIdDelete(requestParameters.identityId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve AWS Auth configuration on identity
     * @param {DefaultApiApiV1AuthAwsAuthIdentitiesIdentityIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AuthAwsAuthIdentitiesIdentityIdGet(requestParameters: DefaultApiApiV1AuthAwsAuthIdentitiesIdentityIdGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AuthAwsAuthIdentitiesIdentityIdGet(requestParameters.identityId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update AWS Auth configuration on identity
     * @param {DefaultApiApiV1AuthAwsAuthIdentitiesIdentityIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AuthAwsAuthIdentitiesIdentityIdPatch(requestParameters: DefaultApiApiV1AuthAwsAuthIdentitiesIdentityIdPatchRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AuthAwsAuthIdentitiesIdentityIdPatch(requestParameters.identityId, requestParameters.apiV1AuthAwsAuthIdentitiesIdentityIdPatchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Attach AWS Auth configuration onto identity
     * @param {DefaultApiApiV1AuthAwsAuthIdentitiesIdentityIdPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AuthAwsAuthIdentitiesIdentityIdPost(requestParameters: DefaultApiApiV1AuthAwsAuthIdentitiesIdentityIdPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AuthAwsAuthIdentitiesIdentityIdPost(requestParameters.identityId, requestParameters.apiV1AuthAwsAuthIdentitiesIdentityIdPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Login with AWS Auth
     * @param {DefaultApiApiV1AuthAwsAuthLoginPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AuthAwsAuthLoginPost(requestParameters: DefaultApiApiV1AuthAwsAuthLoginPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AuthAwsAuthLoginPost(requestParameters.apiV1AuthAwsAuthLoginPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete Azure Auth configuration on identity
     * @param {DefaultApiApiV1AuthAzureAuthIdentitiesIdentityIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AuthAzureAuthIdentitiesIdentityIdDelete(requestParameters: DefaultApiApiV1AuthAzureAuthIdentitiesIdentityIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AuthAzureAuthIdentitiesIdentityIdDelete(requestParameters.identityId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve Azure Auth configuration on identity
     * @param {DefaultApiApiV1AuthAzureAuthIdentitiesIdentityIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AuthAzureAuthIdentitiesIdentityIdGet(requestParameters: DefaultApiApiV1AuthAzureAuthIdentitiesIdentityIdGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AuthAzureAuthIdentitiesIdentityIdGet(requestParameters.identityId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update Azure Auth configuration on identity
     * @param {DefaultApiApiV1AuthAzureAuthIdentitiesIdentityIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AuthAzureAuthIdentitiesIdentityIdPatch(requestParameters: DefaultApiApiV1AuthAzureAuthIdentitiesIdentityIdPatchRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AuthAzureAuthIdentitiesIdentityIdPatch(requestParameters.identityId, requestParameters.apiV1AuthAzureAuthIdentitiesIdentityIdPatchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Attach Azure Auth configuration onto identity
     * @param {DefaultApiApiV1AuthAzureAuthIdentitiesIdentityIdPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AuthAzureAuthIdentitiesIdentityIdPost(requestParameters: DefaultApiApiV1AuthAzureAuthIdentitiesIdentityIdPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AuthAzureAuthIdentitiesIdentityIdPost(requestParameters.identityId, requestParameters.apiV1AuthAzureAuthIdentitiesIdentityIdPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Login with Azure Auth
     * @param {DefaultApiApiV1AuthAzureAuthLoginPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AuthAzureAuthLoginPost(requestParameters: DefaultApiApiV1AuthAzureAuthLoginPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AuthAzureAuthLoginPost(requestParameters.apiV1AuthKubernetesAuthLoginPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AuthCheckAuthPost(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AuthCheckAuthPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete GCP Auth configuration on identity
     * @param {DefaultApiApiV1AuthGcpAuthIdentitiesIdentityIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AuthGcpAuthIdentitiesIdentityIdDelete(requestParameters: DefaultApiApiV1AuthGcpAuthIdentitiesIdentityIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AuthGcpAuthIdentitiesIdentityIdDelete(requestParameters.identityId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve GCP Auth configuration on identity
     * @param {DefaultApiApiV1AuthGcpAuthIdentitiesIdentityIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AuthGcpAuthIdentitiesIdentityIdGet(requestParameters: DefaultApiApiV1AuthGcpAuthIdentitiesIdentityIdGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AuthGcpAuthIdentitiesIdentityIdGet(requestParameters.identityId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update GCP Auth configuration on identity
     * @param {DefaultApiApiV1AuthGcpAuthIdentitiesIdentityIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AuthGcpAuthIdentitiesIdentityIdPatch(requestParameters: DefaultApiApiV1AuthGcpAuthIdentitiesIdentityIdPatchRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AuthGcpAuthIdentitiesIdentityIdPatch(requestParameters.identityId, requestParameters.apiV1AuthGcpAuthIdentitiesIdentityIdPatchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Attach GCP Auth configuration onto identity
     * @param {DefaultApiApiV1AuthGcpAuthIdentitiesIdentityIdPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AuthGcpAuthIdentitiesIdentityIdPost(requestParameters: DefaultApiApiV1AuthGcpAuthIdentitiesIdentityIdPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AuthGcpAuthIdentitiesIdentityIdPost(requestParameters.identityId, requestParameters.apiV1AuthGcpAuthIdentitiesIdentityIdPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Login with GCP Auth
     * @param {DefaultApiApiV1AuthGcpAuthLoginPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AuthGcpAuthLoginPost(requestParameters: DefaultApiApiV1AuthGcpAuthLoginPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AuthGcpAuthLoginPost(requestParameters.apiV1AuthKubernetesAuthLoginPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete Kubernetes Auth configuration on identity
     * @param {DefaultApiApiV1AuthKubernetesAuthIdentitiesIdentityIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AuthKubernetesAuthIdentitiesIdentityIdDelete(requestParameters: DefaultApiApiV1AuthKubernetesAuthIdentitiesIdentityIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AuthKubernetesAuthIdentitiesIdentityIdDelete(requestParameters.identityId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve Kubernetes Auth configuration on identity
     * @param {DefaultApiApiV1AuthKubernetesAuthIdentitiesIdentityIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AuthKubernetesAuthIdentitiesIdentityIdGet(requestParameters: DefaultApiApiV1AuthKubernetesAuthIdentitiesIdentityIdGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AuthKubernetesAuthIdentitiesIdentityIdGet(requestParameters.identityId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update Kubernetes Auth configuration on identity
     * @param {DefaultApiApiV1AuthKubernetesAuthIdentitiesIdentityIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AuthKubernetesAuthIdentitiesIdentityIdPatch(requestParameters: DefaultApiApiV1AuthKubernetesAuthIdentitiesIdentityIdPatchRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AuthKubernetesAuthIdentitiesIdentityIdPatch(requestParameters.identityId, requestParameters.apiV1AuthKubernetesAuthIdentitiesIdentityIdPatchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Attach Kubernetes Auth configuration onto identity
     * @param {DefaultApiApiV1AuthKubernetesAuthIdentitiesIdentityIdPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AuthKubernetesAuthIdentitiesIdentityIdPost(requestParameters: DefaultApiApiV1AuthKubernetesAuthIdentitiesIdentityIdPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AuthKubernetesAuthIdentitiesIdentityIdPost(requestParameters.identityId, requestParameters.apiV1AuthKubernetesAuthIdentitiesIdentityIdPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Login with Kubernetes Auth
     * @param {DefaultApiApiV1AuthKubernetesAuthLoginPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AuthKubernetesAuthLoginPost(requestParameters: DefaultApiApiV1AuthKubernetesAuthLoginPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AuthKubernetesAuthLoginPost(requestParameters.apiV1AuthKubernetesAuthLoginPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AuthLogoutPost(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AuthLogoutPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete OIDC Auth configuration on identity
     * @param {DefaultApiApiV1AuthOidcAuthIdentitiesIdentityIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AuthOidcAuthIdentitiesIdentityIdDelete(requestParameters: DefaultApiApiV1AuthOidcAuthIdentitiesIdentityIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AuthOidcAuthIdentitiesIdentityIdDelete(requestParameters.identityId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve OIDC Auth configuration on identity
     * @param {DefaultApiApiV1AuthOidcAuthIdentitiesIdentityIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AuthOidcAuthIdentitiesIdentityIdGet(requestParameters: DefaultApiApiV1AuthOidcAuthIdentitiesIdentityIdGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AuthOidcAuthIdentitiesIdentityIdGet(requestParameters.identityId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update OIDC Auth configuration on identity
     * @param {DefaultApiApiV1AuthOidcAuthIdentitiesIdentityIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AuthOidcAuthIdentitiesIdentityIdPatch(requestParameters: DefaultApiApiV1AuthOidcAuthIdentitiesIdentityIdPatchRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AuthOidcAuthIdentitiesIdentityIdPatch(requestParameters.identityId, requestParameters.apiV1AuthOidcAuthIdentitiesIdentityIdPatchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Attach OIDC Auth configuration onto identity
     * @param {DefaultApiApiV1AuthOidcAuthIdentitiesIdentityIdPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AuthOidcAuthIdentitiesIdentityIdPost(requestParameters: DefaultApiApiV1AuthOidcAuthIdentitiesIdentityIdPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AuthOidcAuthIdentitiesIdentityIdPost(requestParameters.identityId, requestParameters.apiV1AuthOidcAuthIdentitiesIdentityIdPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Login with OIDC Auth
     * @param {DefaultApiApiV1AuthOidcAuthLoginPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AuthOidcAuthLoginPost(requestParameters: DefaultApiApiV1AuthOidcAuthLoginPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AuthOidcAuthLoginPost(requestParameters.apiV1AuthKubernetesAuthLoginPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete Token Auth configuration on identity
     * @param {DefaultApiApiV1AuthTokenAuthIdentitiesIdentityIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AuthTokenAuthIdentitiesIdentityIdDelete(requestParameters: DefaultApiApiV1AuthTokenAuthIdentitiesIdentityIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AuthTokenAuthIdentitiesIdentityIdDelete(requestParameters.identityId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve Token Auth configuration on identity
     * @param {DefaultApiApiV1AuthTokenAuthIdentitiesIdentityIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AuthTokenAuthIdentitiesIdentityIdGet(requestParameters: DefaultApiApiV1AuthTokenAuthIdentitiesIdentityIdGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AuthTokenAuthIdentitiesIdentityIdGet(requestParameters.identityId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update Token Auth configuration on identity
     * @param {DefaultApiApiV1AuthTokenAuthIdentitiesIdentityIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AuthTokenAuthIdentitiesIdentityIdPatch(requestParameters: DefaultApiApiV1AuthTokenAuthIdentitiesIdentityIdPatchRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AuthTokenAuthIdentitiesIdentityIdPatch(requestParameters.identityId, requestParameters.apiV1AuthTokenAuthIdentitiesIdentityIdPatchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Attach Token Auth configuration onto identity
     * @param {DefaultApiApiV1AuthTokenAuthIdentitiesIdentityIdPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AuthTokenAuthIdentitiesIdentityIdPost(requestParameters: DefaultApiApiV1AuthTokenAuthIdentitiesIdentityIdPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AuthTokenAuthIdentitiesIdentityIdPost(requestParameters.identityId, requestParameters.apiV1AuthTokenAuthIdentitiesIdentityIdPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get tokens for identity with Token Auth
     * @param {DefaultApiApiV1AuthTokenAuthIdentitiesIdentityIdTokensGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AuthTokenAuthIdentitiesIdentityIdTokensGet(requestParameters: DefaultApiApiV1AuthTokenAuthIdentitiesIdentityIdTokensGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AuthTokenAuthIdentitiesIdentityIdTokensGet(requestParameters.identityId, requestParameters.offset, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create token for identity with Token Auth
     * @param {DefaultApiApiV1AuthTokenAuthIdentitiesIdentityIdTokensPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AuthTokenAuthIdentitiesIdentityIdTokensPost(requestParameters: DefaultApiApiV1AuthTokenAuthIdentitiesIdentityIdTokensPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AuthTokenAuthIdentitiesIdentityIdTokensPost(requestParameters.identityId, requestParameters.apiV1AuthTokenAuthIdentitiesIdentityIdTokensPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update token for identity with Token Auth
     * @param {DefaultApiApiV1AuthTokenAuthTokensTokenIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AuthTokenAuthTokensTokenIdPatch(requestParameters: DefaultApiApiV1AuthTokenAuthTokensTokenIdPatchRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AuthTokenAuthTokensTokenIdPatch(requestParameters.tokenId, requestParameters.apiV1AuthTokenAuthTokensTokenIdPatchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Revoke token for identity with Token Auth
     * @param {DefaultApiApiV1AuthTokenAuthTokensTokenIdRevokePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AuthTokenAuthTokensTokenIdRevokePost(requestParameters: DefaultApiApiV1AuthTokenAuthTokensTokenIdRevokePostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AuthTokenAuthTokensTokenIdRevokePost(requestParameters.tokenId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AuthTokenPost(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AuthTokenPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Renew access token
     * @param {DefaultApiApiV1AuthTokenRenewPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AuthTokenRenewPost(requestParameters: DefaultApiApiV1AuthTokenRenewPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AuthTokenRenewPost(requestParameters.apiV1AuthTokenRenewPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Revoke access token
     * @param {DefaultApiApiV1AuthTokenRevokePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AuthTokenRevokePost(requestParameters: DefaultApiApiV1AuthTokenRevokePostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AuthTokenRevokePost(requestParameters.apiV1AuthTokenRevokePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Universal Auth Client Secret for identity
     * @param {DefaultApiApiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsClientSecretIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsClientSecretIdGet(requestParameters: DefaultApiApiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsClientSecretIdGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsClientSecretIdGet(requestParameters.identityId, requestParameters.clientSecretId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Revoke Universal Auth Client Secrets for identity
     * @param {DefaultApiApiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsClientSecretIdRevokePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsClientSecretIdRevokePost(requestParameters: DefaultApiApiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsClientSecretIdRevokePostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsClientSecretIdRevokePost(requestParameters.identityId, requestParameters.clientSecretId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List Universal Auth Client Secrets for identity
     * @param {DefaultApiApiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsGet(requestParameters: DefaultApiApiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsGet(requestParameters.identityId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create Universal Auth Client Secret for identity
     * @param {DefaultApiApiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsPost(requestParameters: DefaultApiApiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsPost(requestParameters.identityId, requestParameters.apiV1AuthUniversalAuthIdentitiesIdentityIdClientSecretsPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete Universal Auth configuration on identity
     * @param {DefaultApiApiV1AuthUniversalAuthIdentitiesIdentityIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AuthUniversalAuthIdentitiesIdentityIdDelete(requestParameters: DefaultApiApiV1AuthUniversalAuthIdentitiesIdentityIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AuthUniversalAuthIdentitiesIdentityIdDelete(requestParameters.identityId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve Universal Auth configuration on identity
     * @param {DefaultApiApiV1AuthUniversalAuthIdentitiesIdentityIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AuthUniversalAuthIdentitiesIdentityIdGet(requestParameters: DefaultApiApiV1AuthUniversalAuthIdentitiesIdentityIdGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AuthUniversalAuthIdentitiesIdentityIdGet(requestParameters.identityId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update Universal Auth configuration on identity
     * @param {DefaultApiApiV1AuthUniversalAuthIdentitiesIdentityIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AuthUniversalAuthIdentitiesIdentityIdPatch(requestParameters: DefaultApiApiV1AuthUniversalAuthIdentitiesIdentityIdPatchRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AuthUniversalAuthIdentitiesIdentityIdPatch(requestParameters.identityId, requestParameters.apiV1AuthUniversalAuthIdentitiesIdentityIdPatchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Attach Universal Auth configuration onto identity
     * @param {DefaultApiApiV1AuthUniversalAuthIdentitiesIdentityIdPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AuthUniversalAuthIdentitiesIdentityIdPost(requestParameters: DefaultApiApiV1AuthUniversalAuthIdentitiesIdentityIdPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AuthUniversalAuthIdentitiesIdentityIdPost(requestParameters.identityId, requestParameters.apiV1AuthUniversalAuthIdentitiesIdentityIdPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Login with Universal Auth
     * @param {DefaultApiApiV1AuthUniversalAuthLoginPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1AuthUniversalAuthLoginPost(requestParameters: DefaultApiApiV1AuthUniversalAuthLoginPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1AuthUniversalAuthLoginPost(requestParameters.apiV1AuthUniversalAuthLoginPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1BotBotIdActivePatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1BotBotIdActivePatch(requestParameters: DefaultApiApiV1BotBotIdActivePatchRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1BotBotIdActivePatch(requestParameters.botId, requestParameters.apiV1BotBotIdActivePatchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1BotProjectIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1BotProjectIdGet(requestParameters: DefaultApiApiV1BotProjectIdGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1BotProjectIdGet(requestParameters.projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1DynamicSecretsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1DynamicSecretsGet(requestParameters: DefaultApiApiV1DynamicSecretsGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1DynamicSecretsGet(requestParameters.projectSlug, requestParameters.environmentSlug, requestParameters.path, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1DynamicSecretsLeasesLeaseIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1DynamicSecretsLeasesLeaseIdDelete(requestParameters: DefaultApiApiV1DynamicSecretsLeasesLeaseIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1DynamicSecretsLeasesLeaseIdDelete(requestParameters.leaseId, requestParameters.apiV1DynamicSecretsLeasesLeaseIdDeleteRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1DynamicSecretsLeasesLeaseIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1DynamicSecretsLeasesLeaseIdGet(requestParameters: DefaultApiApiV1DynamicSecretsLeasesLeaseIdGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1DynamicSecretsLeasesLeaseIdGet(requestParameters.projectSlug, requestParameters.environmentSlug, requestParameters.leaseId, requestParameters.path, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1DynamicSecretsLeasesLeaseIdRenewPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1DynamicSecretsLeasesLeaseIdRenewPost(requestParameters: DefaultApiApiV1DynamicSecretsLeasesLeaseIdRenewPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1DynamicSecretsLeasesLeaseIdRenewPost(requestParameters.leaseId, requestParameters.apiV1DynamicSecretsLeasesLeaseIdRenewPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1DynamicSecretsLeasesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1DynamicSecretsLeasesPost(requestParameters: DefaultApiApiV1DynamicSecretsLeasesPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1DynamicSecretsLeasesPost(requestParameters.apiV1DynamicSecretsLeasesPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1DynamicSecretsNameDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1DynamicSecretsNameDelete(requestParameters: DefaultApiApiV1DynamicSecretsNameDeleteRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1DynamicSecretsNameDelete(requestParameters.name, requestParameters.apiV1DynamicSecretsNameDeleteRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1DynamicSecretsNameGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1DynamicSecretsNameGet(requestParameters: DefaultApiApiV1DynamicSecretsNameGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1DynamicSecretsNameGet(requestParameters.projectSlug, requestParameters.environmentSlug, requestParameters.name, requestParameters.path, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1DynamicSecretsNameLeasesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1DynamicSecretsNameLeasesGet(requestParameters: DefaultApiApiV1DynamicSecretsNameLeasesGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1DynamicSecretsNameLeasesGet(requestParameters.projectSlug, requestParameters.environmentSlug, requestParameters.name, requestParameters.path, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1DynamicSecretsNamePatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1DynamicSecretsNamePatch(requestParameters: DefaultApiApiV1DynamicSecretsNamePatchRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1DynamicSecretsNamePatch(requestParameters.name, requestParameters.apiV1DynamicSecretsNamePatchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1DynamicSecretsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1DynamicSecretsPost(requestParameters: DefaultApiApiV1DynamicSecretsPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1DynamicSecretsPost(requestParameters.apiV1DynamicSecretsPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1ExternalKmsGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1ExternalKmsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1ExternalKmsIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1ExternalKmsIdDelete(requestParameters: DefaultApiApiV1ExternalKmsIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1ExternalKmsIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1ExternalKmsIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1ExternalKmsIdGet(requestParameters: DefaultApiApiV1ExternalKmsIdGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1ExternalKmsIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1ExternalKmsIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1ExternalKmsIdPatch(requestParameters: DefaultApiApiV1ExternalKmsIdPatchRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1ExternalKmsIdPatch(requestParameters.id, requestParameters.apiV1ExternalKmsIdPatchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1ExternalKmsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1ExternalKmsPost(requestParameters: DefaultApiApiV1ExternalKmsPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1ExternalKmsPost(requestParameters.apiV1ExternalKmsPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1ExternalKmsSlugSlugGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1ExternalKmsSlugSlugGet(requestParameters: DefaultApiApiV1ExternalKmsSlugSlugGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1ExternalKmsSlugSlugGet(requestParameters.slug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update folders by batch
     * @param {DefaultApiApiV1FoldersBatchPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1FoldersBatchPatch(requestParameters: DefaultApiApiV1FoldersBatchPatchRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1FoldersBatchPatch(requestParameters.apiV1FoldersBatchPatchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a folder
     * @param {DefaultApiApiV1FoldersFolderIdOrNameDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1FoldersFolderIdOrNameDelete(requestParameters: DefaultApiApiV1FoldersFolderIdOrNameDeleteRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1FoldersFolderIdOrNameDelete(requestParameters.folderIdOrName, requestParameters.apiV1FoldersFolderIdOrNameDeleteRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update folder
     * @param {DefaultApiApiV1FoldersFolderIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1FoldersFolderIdPatch(requestParameters: DefaultApiApiV1FoldersFolderIdPatchRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1FoldersFolderIdPatch(requestParameters.folderId, requestParameters.apiV1FoldersFolderIdPatchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get folders
     * @param {DefaultApiApiV1FoldersGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1FoldersGet(requestParameters: DefaultApiApiV1FoldersGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1FoldersGet(requestParameters.workspaceId, requestParameters.environment, requestParameters.path, requestParameters.directory, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get folder by id
     * @param {DefaultApiApiV1FoldersIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1FoldersIdGet(requestParameters: DefaultApiApiV1FoldersIdGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1FoldersIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create folders
     * @param {DefaultApiApiV1FoldersPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1FoldersPost(requestParameters: DefaultApiApiV1FoldersPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1FoldersPost(requestParameters.apiV1FoldersPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1GroupsCurrentSlugPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1GroupsCurrentSlugPatch(requestParameters: DefaultApiApiV1GroupsCurrentSlugPatchRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1GroupsCurrentSlugPatch(requestParameters.currentSlug, requestParameters.apiV1GroupsCurrentSlugPatchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1GroupsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1GroupsPost(requestParameters: DefaultApiApiV1GroupsPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1GroupsPost(requestParameters.apiV1GroupsPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1GroupsSlugDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1GroupsSlugDelete(requestParameters: DefaultApiApiV1GroupsSlugDeleteRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1GroupsSlugDelete(requestParameters.slug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1GroupsSlugUsersGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1GroupsSlugUsersGet(requestParameters: DefaultApiApiV1GroupsSlugUsersGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1GroupsSlugUsersGet(requestParameters.slug, requestParameters.offset, requestParameters.limit, requestParameters.username, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1GroupsSlugUsersUsernameDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1GroupsSlugUsersUsernameDelete(requestParameters: DefaultApiApiV1GroupsSlugUsersUsernameDeleteRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1GroupsSlugUsersUsernameDelete(requestParameters.slug, requestParameters.username, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1GroupsSlugUsersUsernamePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1GroupsSlugUsersUsernamePost(requestParameters: DefaultApiApiV1GroupsSlugUsersUsernamePostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1GroupsSlugUsersUsernamePost(requestParameters.slug, requestParameters.username, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List identities
     * @param {DefaultApiApiV1IdentitiesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1IdentitiesGet(requestParameters: DefaultApiApiV1IdentitiesGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1IdentitiesGet(requestParameters.orgId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete identity
     * @param {DefaultApiApiV1IdentitiesIdentityIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1IdentitiesIdentityIdDelete(requestParameters: DefaultApiApiV1IdentitiesIdentityIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1IdentitiesIdentityIdDelete(requestParameters.identityId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get an identity by id
     * @param {DefaultApiApiV1IdentitiesIdentityIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1IdentitiesIdentityIdGet(requestParameters: DefaultApiApiV1IdentitiesIdentityIdGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1IdentitiesIdentityIdGet(requestParameters.identityId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List project memberships that identity with id is part of
     * @param {DefaultApiApiV1IdentitiesIdentityIdIdentityMembershipsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1IdentitiesIdentityIdIdentityMembershipsGet(requestParameters: DefaultApiApiV1IdentitiesIdentityIdIdentityMembershipsGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1IdentitiesIdentityIdIdentityMembershipsGet(requestParameters.identityId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update identity
     * @param {DefaultApiApiV1IdentitiesIdentityIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1IdentitiesIdentityIdPatch(requestParameters: DefaultApiApiV1IdentitiesIdentityIdPatchRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1IdentitiesIdentityIdPatch(requestParameters.identityId, requestParameters.apiV1IdentitiesIdentityIdPatchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create identity
     * @param {DefaultApiApiV1IdentitiesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1IdentitiesPost(requestParameters: DefaultApiApiV1IdentitiesPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1IdentitiesPost(requestParameters.apiV1IdentitiesPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create the integration authentication object required for syncing secrets.
     * @param {DefaultApiApiV1IntegrationAuthAccessTokenPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1IntegrationAuthAccessTokenPost(requestParameters: DefaultApiApiV1IntegrationAuthAccessTokenPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1IntegrationAuthAccessTokenPost(requestParameters.apiV1IntegrationAuthAccessTokenPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove all integration\'s auth object from the project.
     * @param {DefaultApiApiV1IntegrationAuthDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1IntegrationAuthDelete(requestParameters: DefaultApiApiV1IntegrationAuthDeleteRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1IntegrationAuthDelete(requestParameters.integration, requestParameters.projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1IntegrationAuthIntegrationAuthIdAppsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1IntegrationAuthIntegrationAuthIdAppsGet(requestParameters: DefaultApiApiV1IntegrationAuthIntegrationAuthIdAppsGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1IntegrationAuthIntegrationAuthIdAppsGet(requestParameters.integrationAuthId, requestParameters.teamId, requestParameters.azureDevOpsOrgName, requestParameters.workspaceSlug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1IntegrationAuthIntegrationAuthIdAwsSecretsManagerKmsKeysGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1IntegrationAuthIntegrationAuthIdAwsSecretsManagerKmsKeysGet(requestParameters: DefaultApiApiV1IntegrationAuthIntegrationAuthIdAwsSecretsManagerKmsKeysGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1IntegrationAuthIntegrationAuthIdAwsSecretsManagerKmsKeysGet(requestParameters.region, requestParameters.integrationAuthId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1IntegrationAuthIntegrationAuthIdBitbucketWorkspacesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1IntegrationAuthIntegrationAuthIdBitbucketWorkspacesGet(requestParameters: DefaultApiApiV1IntegrationAuthIntegrationAuthIdBitbucketWorkspacesGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1IntegrationAuthIntegrationAuthIdBitbucketWorkspacesGet(requestParameters.integrationAuthId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1IntegrationAuthIntegrationAuthIdChecklyGroupsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1IntegrationAuthIntegrationAuthIdChecklyGroupsGet(requestParameters: DefaultApiApiV1IntegrationAuthIntegrationAuthIdChecklyGroupsGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1IntegrationAuthIntegrationAuthIdChecklyGroupsGet(requestParameters.accountId, requestParameters.integrationAuthId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove an integration auth object by object id.
     * @param {DefaultApiApiV1IntegrationAuthIntegrationAuthIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1IntegrationAuthIntegrationAuthIdDelete(requestParameters: DefaultApiApiV1IntegrationAuthIntegrationAuthIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1IntegrationAuthIntegrationAuthIdDelete(requestParameters.integrationAuthId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get details of an integration authorization by auth object id.
     * @param {DefaultApiApiV1IntegrationAuthIntegrationAuthIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1IntegrationAuthIntegrationAuthIdGet(requestParameters: DefaultApiApiV1IntegrationAuthIntegrationAuthIdGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1IntegrationAuthIntegrationAuthIdGet(requestParameters.integrationAuthId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1IntegrationAuthIntegrationAuthIdGithubEnvsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1IntegrationAuthIntegrationAuthIdGithubEnvsGet(requestParameters: DefaultApiApiV1IntegrationAuthIntegrationAuthIdGithubEnvsGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1IntegrationAuthIntegrationAuthIdGithubEnvsGet(requestParameters.repoOwner, requestParameters.repoName, requestParameters.integrationAuthId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1IntegrationAuthIntegrationAuthIdGithubOrgsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1IntegrationAuthIntegrationAuthIdGithubOrgsGet(requestParameters: DefaultApiApiV1IntegrationAuthIntegrationAuthIdGithubOrgsGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1IntegrationAuthIntegrationAuthIdGithubOrgsGet(requestParameters.integrationAuthId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1IntegrationAuthIntegrationAuthIdHerokuPipelinesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1IntegrationAuthIntegrationAuthIdHerokuPipelinesGet(requestParameters: DefaultApiApiV1IntegrationAuthIntegrationAuthIdHerokuPipelinesGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1IntegrationAuthIntegrationAuthIdHerokuPipelinesGet(requestParameters.integrationAuthId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1IntegrationAuthIntegrationAuthIdNorthflankSecretGroupsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1IntegrationAuthIntegrationAuthIdNorthflankSecretGroupsGet(requestParameters: DefaultApiApiV1IntegrationAuthIntegrationAuthIdNorthflankSecretGroupsGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1IntegrationAuthIntegrationAuthIdNorthflankSecretGroupsGet(requestParameters.appId, requestParameters.integrationAuthId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1IntegrationAuthIntegrationAuthIdQoveryAppsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1IntegrationAuthIntegrationAuthIdQoveryAppsGet(requestParameters: DefaultApiApiV1IntegrationAuthIntegrationAuthIdQoveryAppsGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1IntegrationAuthIntegrationAuthIdQoveryAppsGet(requestParameters.environmentId, requestParameters.integrationAuthId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1IntegrationAuthIntegrationAuthIdQoveryContainersGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1IntegrationAuthIntegrationAuthIdQoveryContainersGet(requestParameters: DefaultApiApiV1IntegrationAuthIntegrationAuthIdQoveryContainersGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1IntegrationAuthIntegrationAuthIdQoveryContainersGet(requestParameters.environmentId, requestParameters.integrationAuthId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1IntegrationAuthIntegrationAuthIdQoveryEnvironmentsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1IntegrationAuthIntegrationAuthIdQoveryEnvironmentsGet(requestParameters: DefaultApiApiV1IntegrationAuthIntegrationAuthIdQoveryEnvironmentsGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1IntegrationAuthIntegrationAuthIdQoveryEnvironmentsGet(requestParameters.projectId, requestParameters.integrationAuthId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1IntegrationAuthIntegrationAuthIdQoveryJobsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1IntegrationAuthIntegrationAuthIdQoveryJobsGet(requestParameters: DefaultApiApiV1IntegrationAuthIntegrationAuthIdQoveryJobsGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1IntegrationAuthIntegrationAuthIdQoveryJobsGet(requestParameters.environmentId, requestParameters.integrationAuthId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1IntegrationAuthIntegrationAuthIdQoveryOrgsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1IntegrationAuthIntegrationAuthIdQoveryOrgsGet(requestParameters: DefaultApiApiV1IntegrationAuthIntegrationAuthIdQoveryOrgsGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1IntegrationAuthIntegrationAuthIdQoveryOrgsGet(requestParameters.integrationAuthId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1IntegrationAuthIntegrationAuthIdQoveryProjectsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1IntegrationAuthIntegrationAuthIdQoveryProjectsGet(requestParameters: DefaultApiApiV1IntegrationAuthIntegrationAuthIdQoveryProjectsGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1IntegrationAuthIntegrationAuthIdQoveryProjectsGet(requestParameters.orgId, requestParameters.integrationAuthId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1IntegrationAuthIntegrationAuthIdRailwayEnvironmentsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1IntegrationAuthIntegrationAuthIdRailwayEnvironmentsGet(requestParameters: DefaultApiApiV1IntegrationAuthIntegrationAuthIdRailwayEnvironmentsGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1IntegrationAuthIntegrationAuthIdRailwayEnvironmentsGet(requestParameters.appId, requestParameters.integrationAuthId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1IntegrationAuthIntegrationAuthIdRailwayServicesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1IntegrationAuthIntegrationAuthIdRailwayServicesGet(requestParameters: DefaultApiApiV1IntegrationAuthIntegrationAuthIdRailwayServicesGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1IntegrationAuthIntegrationAuthIdRailwayServicesGet(requestParameters.appId, requestParameters.integrationAuthId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1IntegrationAuthIntegrationAuthIdTeamcityBuildConfigsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1IntegrationAuthIntegrationAuthIdTeamcityBuildConfigsGet(requestParameters: DefaultApiApiV1IntegrationAuthIntegrationAuthIdTeamcityBuildConfigsGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1IntegrationAuthIntegrationAuthIdTeamcityBuildConfigsGet(requestParameters.appId, requestParameters.integrationAuthId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1IntegrationAuthIntegrationAuthIdTeamsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1IntegrationAuthIntegrationAuthIdTeamsGet(requestParameters: DefaultApiApiV1IntegrationAuthIntegrationAuthIdTeamsGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1IntegrationAuthIntegrationAuthIdTeamsGet(requestParameters.integrationAuthId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1IntegrationAuthIntegrationAuthIdVercelBranchesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1IntegrationAuthIntegrationAuthIdVercelBranchesGet(requestParameters: DefaultApiApiV1IntegrationAuthIntegrationAuthIdVercelBranchesGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1IntegrationAuthIntegrationAuthIdVercelBranchesGet(requestParameters.appId, requestParameters.integrationAuthId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List of integrations available.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1IntegrationAuthIntegrationOptionsGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1IntegrationAuthIntegrationOptionsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1IntegrationAuthOauthTokenPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1IntegrationAuthOauthTokenPost(requestParameters: DefaultApiApiV1IntegrationAuthOauthTokenPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1IntegrationAuthOauthTokenPost(requestParameters.apiV1IntegrationAuthOauthTokenPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove an integration using the integration object ID
     * @param {DefaultApiApiV1IntegrationIntegrationIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1IntegrationIntegrationIdDelete(requestParameters: DefaultApiApiV1IntegrationIntegrationIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1IntegrationIntegrationIdDelete(requestParameters.integrationId, requestParameters.shouldDeleteIntegrationSecrets, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an integration by integration id
     * @param {DefaultApiApiV1IntegrationIntegrationIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1IntegrationIntegrationIdPatch(requestParameters: DefaultApiApiV1IntegrationIntegrationIdPatchRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1IntegrationIntegrationIdPatch(requestParameters.integrationId, requestParameters.apiV1IntegrationIntegrationIdPatchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Manually trigger sync of an integration by integration id
     * @param {DefaultApiApiV1IntegrationIntegrationIdSyncPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1IntegrationIntegrationIdSyncPost(requestParameters: DefaultApiApiV1IntegrationIntegrationIdSyncPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1IntegrationIntegrationIdSyncPost(requestParameters.integrationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create an integration to sync secrets.
     * @param {DefaultApiApiV1IntegrationPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1IntegrationPost(requestParameters: DefaultApiApiV1IntegrationPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1IntegrationPost(requestParameters.apiV1IntegrationPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1InviteOrgSignupPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1InviteOrgSignupPost(requestParameters: DefaultApiApiV1InviteOrgSignupPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1InviteOrgSignupPost(requestParameters.apiV1InviteOrgSignupPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1InviteOrgVerifyPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1InviteOrgVerifyPost(requestParameters: DefaultApiApiV1InviteOrgVerifyPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1InviteOrgVerifyPost(requestParameters.apiV1InviteOrgVerifyPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1LdapConfigConfigIdGroupMapsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1LdapConfigConfigIdGroupMapsGet(requestParameters: DefaultApiApiV1LdapConfigConfigIdGroupMapsGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1LdapConfigConfigIdGroupMapsGet(requestParameters.configId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1LdapConfigConfigIdGroupMapsGroupMapIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1LdapConfigConfigIdGroupMapsGroupMapIdDelete(requestParameters: DefaultApiApiV1LdapConfigConfigIdGroupMapsGroupMapIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1LdapConfigConfigIdGroupMapsGroupMapIdDelete(requestParameters.configId, requestParameters.groupMapId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1LdapConfigConfigIdGroupMapsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1LdapConfigConfigIdGroupMapsPost(requestParameters: DefaultApiApiV1LdapConfigConfigIdGroupMapsPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1LdapConfigConfigIdGroupMapsPost(requestParameters.configId, requestParameters.apiV1LdapConfigConfigIdGroupMapsPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1LdapConfigConfigIdTestConnectionPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1LdapConfigConfigIdTestConnectionPost(requestParameters: DefaultApiApiV1LdapConfigConfigIdTestConnectionPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1LdapConfigConfigIdTestConnectionPost(requestParameters.configId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1LdapConfigGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1LdapConfigGet(requestParameters: DefaultApiApiV1LdapConfigGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1LdapConfigGet(requestParameters.organizationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1LdapConfigPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1LdapConfigPatch(requestParameters: DefaultApiApiV1LdapConfigPatchRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1LdapConfigPatch(requestParameters.apiV1LdapConfigPatchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1LdapConfigPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1LdapConfigPost(requestParameters: DefaultApiApiV1LdapConfigPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1LdapConfigPost(requestParameters.apiV1LdapConfigPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1LdapLoginPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1LdapLoginPost(requestParameters: DefaultApiApiV1LdapLoginPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1LdapLoginPost(requestParameters.apiV1LdapLoginPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1OrganizationAdminProjectsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1OrganizationAdminProjectsGet(requestParameters: DefaultApiApiV1OrganizationAdminProjectsGetRequest = {}, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1OrganizationAdminProjectsGet(requestParameters.search, requestParameters.offset, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1OrganizationAdminProjectsProjectIdGrantAdminAccessPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1OrganizationAdminProjectsProjectIdGrantAdminAccessPost(requestParameters: DefaultApiApiV1OrganizationAdminProjectsProjectIdGrantAdminAccessPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1OrganizationAdminProjectsProjectIdGrantAdminAccessPost(requestParameters.projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1OrganizationGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1OrganizationGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1OrganizationOrganizationIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1OrganizationOrganizationIdGet(requestParameters: DefaultApiApiV1OrganizationOrganizationIdGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1OrganizationOrganizationIdGet(requestParameters.organizationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1OrganizationOrganizationIdGroupsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1OrganizationOrganizationIdGroupsGet(requestParameters: DefaultApiApiV1OrganizationOrganizationIdGroupsGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1OrganizationOrganizationIdGroupsGet(requestParameters.organizationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1OrganizationOrganizationIdIncidentContactOrgGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1OrganizationOrganizationIdIncidentContactOrgGet(requestParameters: DefaultApiApiV1OrganizationOrganizationIdIncidentContactOrgGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1OrganizationOrganizationIdIncidentContactOrgGet(requestParameters.organizationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1OrganizationOrganizationIdIncidentContactOrgIncidentContactIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1OrganizationOrganizationIdIncidentContactOrgIncidentContactIdDelete(requestParameters: DefaultApiApiV1OrganizationOrganizationIdIncidentContactOrgIncidentContactIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1OrganizationOrganizationIdIncidentContactOrgIncidentContactIdDelete(requestParameters.organizationId, requestParameters.incidentContactId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1OrganizationOrganizationIdIncidentContactOrgPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1OrganizationOrganizationIdIncidentContactOrgPost(requestParameters: DefaultApiApiV1OrganizationOrganizationIdIncidentContactOrgPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1OrganizationOrganizationIdIncidentContactOrgPost(requestParameters.organizationId, requestParameters.apiV1PasswordEmailPasswordResetPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1OrganizationOrganizationIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1OrganizationOrganizationIdPatch(requestParameters: DefaultApiApiV1OrganizationOrganizationIdPatchRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1OrganizationOrganizationIdPatch(requestParameters.organizationId, requestParameters.apiV1OrganizationOrganizationIdPatchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1OrganizationOrganizationIdPermissionsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1OrganizationOrganizationIdPermissionsGet(requestParameters: DefaultApiApiV1OrganizationOrganizationIdPermissionsGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1OrganizationOrganizationIdPermissionsGet(requestParameters.organizationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1OrganizationOrganizationIdRolesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1OrganizationOrganizationIdRolesGet(requestParameters: DefaultApiApiV1OrganizationOrganizationIdRolesGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1OrganizationOrganizationIdRolesGet(requestParameters.organizationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1OrganizationOrganizationIdRolesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1OrganizationOrganizationIdRolesPost(requestParameters: DefaultApiApiV1OrganizationOrganizationIdRolesPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1OrganizationOrganizationIdRolesPost(requestParameters.organizationId, requestParameters.apiV1OrganizationOrganizationIdRolesPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1OrganizationOrganizationIdRolesRoleIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1OrganizationOrganizationIdRolesRoleIdDelete(requestParameters: DefaultApiApiV1OrganizationOrganizationIdRolesRoleIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1OrganizationOrganizationIdRolesRoleIdDelete(requestParameters.organizationId, requestParameters.roleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1OrganizationOrganizationIdRolesRoleIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1OrganizationOrganizationIdRolesRoleIdGet(requestParameters: DefaultApiApiV1OrganizationOrganizationIdRolesRoleIdGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1OrganizationOrganizationIdRolesRoleIdGet(requestParameters.organizationId, requestParameters.roleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1OrganizationOrganizationIdRolesRoleIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1OrganizationOrganizationIdRolesRoleIdPatch(requestParameters: DefaultApiApiV1OrganizationOrganizationIdRolesRoleIdPatchRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1OrganizationOrganizationIdRolesRoleIdPatch(requestParameters.organizationId, requestParameters.roleId, requestParameters.apiV1OrganizationOrganizationIdRolesRoleIdPatchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1OrganizationOrganizationIdUsersGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1OrganizationOrganizationIdUsersGet(requestParameters: DefaultApiApiV1OrganizationOrganizationIdUsersGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1OrganizationOrganizationIdUsersGet(requestParameters.organizationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1OrganizationsOrganizationIdBillingDetailsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1OrganizationsOrganizationIdBillingDetailsGet(requestParameters: DefaultApiApiV1OrganizationsOrganizationIdBillingDetailsGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1OrganizationsOrganizationIdBillingDetailsGet(requestParameters.organizationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1OrganizationsOrganizationIdBillingDetailsPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1OrganizationsOrganizationIdBillingDetailsPatch(requestParameters: DefaultApiApiV1OrganizationsOrganizationIdBillingDetailsPatchRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1OrganizationsOrganizationIdBillingDetailsPatch(requestParameters.organizationId, requestParameters.apiV1OrganizationsOrganizationIdBillingDetailsPatchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1OrganizationsOrganizationIdBillingDetailsPaymentMethodsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1OrganizationsOrganizationIdBillingDetailsPaymentMethodsGet(requestParameters: DefaultApiApiV1OrganizationsOrganizationIdBillingDetailsPaymentMethodsGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1OrganizationsOrganizationIdBillingDetailsPaymentMethodsGet(requestParameters.organizationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1OrganizationsOrganizationIdBillingDetailsPaymentMethodsPmtMethodIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1OrganizationsOrganizationIdBillingDetailsPaymentMethodsPmtMethodIdDelete(requestParameters: DefaultApiApiV1OrganizationsOrganizationIdBillingDetailsPaymentMethodsPmtMethodIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1OrganizationsOrganizationIdBillingDetailsPaymentMethodsPmtMethodIdDelete(requestParameters.organizationId, requestParameters.pmtMethodId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1OrganizationsOrganizationIdBillingDetailsPaymentMethodsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1OrganizationsOrganizationIdBillingDetailsPaymentMethodsPost(requestParameters: DefaultApiApiV1OrganizationsOrganizationIdBillingDetailsPaymentMethodsPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1OrganizationsOrganizationIdBillingDetailsPaymentMethodsPost(requestParameters.organizationId, requestParameters.apiV1OrganizationsOrganizationIdBillingDetailsPaymentMethodsPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1OrganizationsOrganizationIdBillingDetailsTaxIdsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1OrganizationsOrganizationIdBillingDetailsTaxIdsGet(requestParameters: DefaultApiApiV1OrganizationsOrganizationIdBillingDetailsTaxIdsGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1OrganizationsOrganizationIdBillingDetailsTaxIdsGet(requestParameters.organizationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1OrganizationsOrganizationIdBillingDetailsTaxIdsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1OrganizationsOrganizationIdBillingDetailsTaxIdsPost(requestParameters: DefaultApiApiV1OrganizationsOrganizationIdBillingDetailsTaxIdsPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1OrganizationsOrganizationIdBillingDetailsTaxIdsPost(requestParameters.organizationId, requestParameters.apiV1OrganizationsOrganizationIdBillingDetailsTaxIdsPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1OrganizationsOrganizationIdBillingDetailsTaxIdsTaxIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1OrganizationsOrganizationIdBillingDetailsTaxIdsTaxIdDelete(requestParameters: DefaultApiApiV1OrganizationsOrganizationIdBillingDetailsTaxIdsTaxIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1OrganizationsOrganizationIdBillingDetailsTaxIdsTaxIdDelete(requestParameters.organizationId, requestParameters.taxId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1OrganizationsOrganizationIdCustomerPortalSessionPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1OrganizationsOrganizationIdCustomerPortalSessionPost(requestParameters: DefaultApiApiV1OrganizationsOrganizationIdCustomerPortalSessionPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1OrganizationsOrganizationIdCustomerPortalSessionPost(requestParameters.organizationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1OrganizationsOrganizationIdInvoicesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1OrganizationsOrganizationIdInvoicesGet(requestParameters: DefaultApiApiV1OrganizationsOrganizationIdInvoicesGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1OrganizationsOrganizationIdInvoicesGet(requestParameters.organizationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1OrganizationsOrganizationIdLicensesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1OrganizationsOrganizationIdLicensesGet(requestParameters: DefaultApiApiV1OrganizationsOrganizationIdLicensesGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1OrganizationsOrganizationIdLicensesGet(requestParameters.organizationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1OrganizationsOrganizationIdPlanBillingGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1OrganizationsOrganizationIdPlanBillingGet(requestParameters: DefaultApiApiV1OrganizationsOrganizationIdPlanBillingGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1OrganizationsOrganizationIdPlanBillingGet(requestParameters.organizationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1OrganizationsOrganizationIdPlanGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1OrganizationsOrganizationIdPlanGet(requestParameters: DefaultApiApiV1OrganizationsOrganizationIdPlanGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1OrganizationsOrganizationIdPlanGet(requestParameters.organizationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1OrganizationsOrganizationIdPlanTableGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1OrganizationsOrganizationIdPlanTableGet(requestParameters: DefaultApiApiV1OrganizationsOrganizationIdPlanTableGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1OrganizationsOrganizationIdPlanTableGet(requestParameters.organizationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1OrganizationsOrganizationIdPlansGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1OrganizationsOrganizationIdPlansGet(requestParameters: DefaultApiApiV1OrganizationsOrganizationIdPlansGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1OrganizationsOrganizationIdPlansGet(requestParameters.organizationId, requestParameters.workspaceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1OrganizationsOrganizationIdPlansTableGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1OrganizationsOrganizationIdPlansTableGet(requestParameters: DefaultApiApiV1OrganizationsOrganizationIdPlansTableGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1OrganizationsOrganizationIdPlansTableGet(requestParameters.billingCycle, requestParameters.organizationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1OrganizationsOrganizationIdSessionTrialPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1OrganizationsOrganizationIdSessionTrialPost(requestParameters: DefaultApiApiV1OrganizationsOrganizationIdSessionTrialPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1OrganizationsOrganizationIdSessionTrialPost(requestParameters.organizationId, requestParameters.apiV1OrganizationsOrganizationIdSessionTrialPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1PasswordBackupPrivateKeyGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1PasswordBackupPrivateKeyGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1PasswordBackupPrivateKeyPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1PasswordBackupPrivateKeyPost(requestParameters: DefaultApiApiV1PasswordBackupPrivateKeyPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1PasswordBackupPrivateKeyPost(requestParameters.apiV1PasswordBackupPrivateKeyPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1PasswordChangePasswordPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1PasswordChangePasswordPost(requestParameters: DefaultApiApiV1PasswordChangePasswordPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1PasswordChangePasswordPost(requestParameters.apiV1PasswordChangePasswordPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1PasswordEmailPasswordResetPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1PasswordEmailPasswordResetPost(requestParameters: DefaultApiApiV1PasswordEmailPasswordResetPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1PasswordEmailPasswordResetPost(requestParameters.apiV1PasswordEmailPasswordResetPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1PasswordEmailPasswordResetVerifyPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1PasswordEmailPasswordResetVerifyPost(requestParameters: DefaultApiApiV1PasswordEmailPasswordResetVerifyPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1PasswordEmailPasswordResetVerifyPost(requestParameters.apiV1PasswordEmailPasswordResetVerifyPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1PasswordPasswordResetPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1PasswordPasswordResetPost(requestParameters: DefaultApiApiV1PasswordPasswordResetPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1PasswordPasswordResetPost(requestParameters.apiV1PasswordPasswordResetPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1PasswordSrp1PostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1PasswordSrp1Post(requestParameters: DefaultApiApiV1PasswordSrp1PostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1PasswordSrp1Post(requestParameters.apiV1PasswordSrp1PostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete PKI alert
     * @param {DefaultApiApiV1PkiAlertsAlertIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1PkiAlertsAlertIdDelete(requestParameters: DefaultApiApiV1PkiAlertsAlertIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1PkiAlertsAlertIdDelete(requestParameters.alertId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get PKI alert
     * @param {DefaultApiApiV1PkiAlertsAlertIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1PkiAlertsAlertIdGet(requestParameters: DefaultApiApiV1PkiAlertsAlertIdGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1PkiAlertsAlertIdGet(requestParameters.alertId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update PKI alert
     * @param {DefaultApiApiV1PkiAlertsAlertIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1PkiAlertsAlertIdPatch(requestParameters: DefaultApiApiV1PkiAlertsAlertIdPatchRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1PkiAlertsAlertIdPatch(requestParameters.alertId, requestParameters.apiV1PkiAlertsAlertIdPatchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create PKI alert
     * @param {DefaultApiApiV1PkiAlertsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1PkiAlertsPost(requestParameters: DefaultApiApiV1PkiAlertsPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1PkiAlertsPost(requestParameters.apiV1PkiAlertsPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get list of past and current CA certificates for a CA
     * @param {DefaultApiApiV1PkiCaCaIdCaCertificatesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1PkiCaCaIdCaCertificatesGet(requestParameters: DefaultApiApiV1PkiCaCaIdCaCertificatesGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1PkiCaCaIdCaCertificatesGet(requestParameters.caId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get current CA cert and cert chain of a CA
     * @param {DefaultApiApiV1PkiCaCaIdCertificateGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1PkiCaCaIdCertificateGet(requestParameters: DefaultApiApiV1PkiCaCaIdCertificateGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1PkiCaCaIdCertificateGet(requestParameters.caId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get list of CRLs of the CA
     * @param {DefaultApiApiV1PkiCaCaIdCrlsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1PkiCaCaIdCrlsGet(requestParameters: DefaultApiApiV1PkiCaCaIdCrlsGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1PkiCaCaIdCrlsGet(requestParameters.caId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get CA CSR
     * @param {DefaultApiApiV1PkiCaCaIdCsrGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1PkiCaCaIdCsrGet(requestParameters: DefaultApiApiV1PkiCaCaIdCsrGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1PkiCaCaIdCsrGet(requestParameters.caId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete CA
     * @param {DefaultApiApiV1PkiCaCaIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1PkiCaCaIdDelete(requestParameters: DefaultApiApiV1PkiCaCaIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1PkiCaCaIdDelete(requestParameters.caId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get CA
     * @param {DefaultApiApiV1PkiCaCaIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1PkiCaCaIdGet(requestParameters: DefaultApiApiV1PkiCaCaIdGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1PkiCaCaIdGet(requestParameters.caId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Import certificate and chain to CA
     * @param {DefaultApiApiV1PkiCaCaIdImportCertificatePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1PkiCaCaIdImportCertificatePost(requestParameters: DefaultApiApiV1PkiCaCaIdImportCertificatePostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1PkiCaCaIdImportCertificatePost(requestParameters.caId, requestParameters.apiV1PkiCaCaIdImportCertificatePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Issue certificate from CA
     * @param {DefaultApiApiV1PkiCaCaIdIssueCertificatePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1PkiCaCaIdIssueCertificatePost(requestParameters: DefaultApiApiV1PkiCaCaIdIssueCertificatePostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1PkiCaCaIdIssueCertificatePost(requestParameters.caId, requestParameters.apiV1PkiCaCaIdIssueCertificatePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update CA
     * @param {DefaultApiApiV1PkiCaCaIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1PkiCaCaIdPatch(requestParameters: DefaultApiApiV1PkiCaCaIdPatchRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1PkiCaCaIdPatch(requestParameters.caId, requestParameters.apiV1PkiCaCaIdPatchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Perform CA certificate renewal
     * @param {DefaultApiApiV1PkiCaCaIdRenewPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1PkiCaCaIdRenewPost(requestParameters: DefaultApiApiV1PkiCaCaIdRenewPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1PkiCaCaIdRenewPost(requestParameters.caId, requestParameters.apiV1PkiCaCaIdRenewPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sign certificate from CA
     * @param {DefaultApiApiV1PkiCaCaIdSignCertificatePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1PkiCaCaIdSignCertificatePost(requestParameters: DefaultApiApiV1PkiCaCaIdSignCertificatePostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1PkiCaCaIdSignCertificatePost(requestParameters.caId, requestParameters.apiV1PkiCaCaIdSignCertificatePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create intermediate CA certificate from parent CA
     * @param {DefaultApiApiV1PkiCaCaIdSignIntermediatePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1PkiCaCaIdSignIntermediatePost(requestParameters: DefaultApiApiV1PkiCaCaIdSignIntermediatePostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1PkiCaCaIdSignIntermediatePost(requestParameters.caId, requestParameters.apiV1PkiCaCaIdSignIntermediatePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create CA
     * @param {DefaultApiApiV1PkiCaPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1PkiCaPost(requestParameters: DefaultApiApiV1PkiCaPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1PkiCaPost(requestParameters.apiV1PkiCaPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1PkiCertificateTemplatesCertificateTemplateIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1PkiCertificateTemplatesCertificateTemplateIdDelete(requestParameters: DefaultApiApiV1PkiCertificateTemplatesCertificateTemplateIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1PkiCertificateTemplatesCertificateTemplateIdDelete(requestParameters.certificateTemplateId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Certificate Template EST configuration
     * @param {DefaultApiApiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigGet(requestParameters: DefaultApiApiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigGet(requestParameters.certificateTemplateId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update Certificate Template EST configuration
     * @param {DefaultApiApiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPatch(requestParameters: DefaultApiApiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPatchRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPatch(requestParameters.certificateTemplateId, requestParameters.apiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPatchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create Certificate Template EST configuration
     * @param {DefaultApiApiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPost(requestParameters: DefaultApiApiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPost(requestParameters.certificateTemplateId, requestParameters.apiV1PkiCertificateTemplatesCertificateTemplateIdEstConfigPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1PkiCertificateTemplatesCertificateTemplateIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1PkiCertificateTemplatesCertificateTemplateIdGet(requestParameters: DefaultApiApiV1PkiCertificateTemplatesCertificateTemplateIdGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1PkiCertificateTemplatesCertificateTemplateIdGet(requestParameters.certificateTemplateId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1PkiCertificateTemplatesCertificateTemplateIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1PkiCertificateTemplatesCertificateTemplateIdPatch(requestParameters: DefaultApiApiV1PkiCertificateTemplatesCertificateTemplateIdPatchRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1PkiCertificateTemplatesCertificateTemplateIdPatch(requestParameters.certificateTemplateId, requestParameters.apiV1PkiCertificateTemplatesCertificateTemplateIdPatchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1PkiCertificateTemplatesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1PkiCertificateTemplatesPost(requestParameters: DefaultApiApiV1PkiCertificateTemplatesPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1PkiCertificateTemplatesPost(requestParameters.apiV1PkiCertificateTemplatesPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Issue certificate
     * @param {DefaultApiApiV1PkiCertificatesIssueCertificatePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1PkiCertificatesIssueCertificatePost(requestParameters: DefaultApiApiV1PkiCertificatesIssueCertificatePostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1PkiCertificatesIssueCertificatePost(requestParameters.apiV1PkiCertificatesIssueCertificatePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get certificate body of certificate
     * @param {DefaultApiApiV1PkiCertificatesSerialNumberCertificateGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1PkiCertificatesSerialNumberCertificateGet(requestParameters: DefaultApiApiV1PkiCertificatesSerialNumberCertificateGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1PkiCertificatesSerialNumberCertificateGet(requestParameters.serialNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete certificate
     * @param {DefaultApiApiV1PkiCertificatesSerialNumberDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1PkiCertificatesSerialNumberDelete(requestParameters: DefaultApiApiV1PkiCertificatesSerialNumberDeleteRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1PkiCertificatesSerialNumberDelete(requestParameters.serialNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get certificate
     * @param {DefaultApiApiV1PkiCertificatesSerialNumberGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1PkiCertificatesSerialNumberGet(requestParameters: DefaultApiApiV1PkiCertificatesSerialNumberGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1PkiCertificatesSerialNumberGet(requestParameters.serialNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Revoke
     * @param {DefaultApiApiV1PkiCertificatesSerialNumberRevokePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1PkiCertificatesSerialNumberRevokePost(requestParameters: DefaultApiApiV1PkiCertificatesSerialNumberRevokePostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1PkiCertificatesSerialNumberRevokePost(requestParameters.serialNumber, requestParameters.apiV1PkiCertificatesSerialNumberRevokePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sign certificate
     * @param {DefaultApiApiV1PkiCertificatesSignCertificatePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1PkiCertificatesSignCertificatePost(requestParameters: DefaultApiApiV1PkiCertificatesSignCertificatePostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1PkiCertificatesSignCertificatePost(requestParameters.apiV1PkiCertificatesSignCertificatePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete PKI collection
     * @param {DefaultApiApiV1PkiCollectionsCollectionIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1PkiCollectionsCollectionIdDelete(requestParameters: DefaultApiApiV1PkiCollectionsCollectionIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1PkiCollectionsCollectionIdDelete(requestParameters.collectionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get PKI collection
     * @param {DefaultApiApiV1PkiCollectionsCollectionIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1PkiCollectionsCollectionIdGet(requestParameters: DefaultApiApiV1PkiCollectionsCollectionIdGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1PkiCollectionsCollectionIdGet(requestParameters.collectionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove item from PKI collection
     * @param {DefaultApiApiV1PkiCollectionsCollectionIdItemsCollectionItemIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1PkiCollectionsCollectionIdItemsCollectionItemIdDelete(requestParameters: DefaultApiApiV1PkiCollectionsCollectionIdItemsCollectionItemIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1PkiCollectionsCollectionIdItemsCollectionItemIdDelete(requestParameters.collectionId, requestParameters.collectionItemId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get items in PKI collection
     * @param {DefaultApiApiV1PkiCollectionsCollectionIdItemsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1PkiCollectionsCollectionIdItemsGet(requestParameters: DefaultApiApiV1PkiCollectionsCollectionIdItemsGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1PkiCollectionsCollectionIdItemsGet(requestParameters.collectionId, requestParameters.type, requestParameters.offset, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add item to PKI collection
     * @param {DefaultApiApiV1PkiCollectionsCollectionIdItemsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1PkiCollectionsCollectionIdItemsPost(requestParameters: DefaultApiApiV1PkiCollectionsCollectionIdItemsPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1PkiCollectionsCollectionIdItemsPost(requestParameters.collectionId, requestParameters.apiV1PkiCollectionsCollectionIdItemsPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update PKI collection
     * @param {DefaultApiApiV1PkiCollectionsCollectionIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1PkiCollectionsCollectionIdPatch(requestParameters: DefaultApiApiV1PkiCollectionsCollectionIdPatchRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1PkiCollectionsCollectionIdPatch(requestParameters.collectionId, requestParameters.apiV1PkiCollectionsCollectionIdPatchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create PKI collection
     * @param {DefaultApiApiV1PkiCollectionsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1PkiCollectionsPost(requestParameters: DefaultApiApiV1PkiCollectionsPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1PkiCollectionsPost(requestParameters.apiV1PkiCollectionsPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get CRL in DER format
     * @param {DefaultApiApiV1PkiCrlCrlIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1PkiCrlCrlIdGet(requestParameters: DefaultApiApiV1PkiCrlCrlIdGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1PkiCrlCrlIdGet(requestParameters.crlId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1RateLimitGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1RateLimitGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1RateLimitPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1RateLimitPut(requestParameters: DefaultApiApiV1RateLimitPutRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1RateLimitPut(requestParameters.apiV1RateLimitPutRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1ScimGroupsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1ScimGroupsGet(requestParameters: DefaultApiApiV1ScimGroupsGetRequest = {}, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1ScimGroupsGet(requestParameters.startIndex, requestParameters.count, requestParameters.filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1ScimGroupsGroupIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1ScimGroupsGroupIdDelete(requestParameters: DefaultApiApiV1ScimGroupsGroupIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1ScimGroupsGroupIdDelete(requestParameters.groupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1ScimGroupsGroupIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1ScimGroupsGroupIdGet(requestParameters: DefaultApiApiV1ScimGroupsGroupIdGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1ScimGroupsGroupIdGet(requestParameters.groupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1ScimGroupsGroupIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1ScimGroupsGroupIdPatch(requestParameters: DefaultApiApiV1ScimGroupsGroupIdPatchRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1ScimGroupsGroupIdPatch(requestParameters.groupId, requestParameters.apiV1ScimGroupsGroupIdPatchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1ScimGroupsGroupIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1ScimGroupsGroupIdPut(requestParameters: DefaultApiApiV1ScimGroupsGroupIdPutRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1ScimGroupsGroupIdPut(requestParameters.groupId, requestParameters.apiV1ScimGroupsGroupIdPutRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1ScimGroupsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1ScimGroupsPost(requestParameters: DefaultApiApiV1ScimGroupsPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1ScimGroupsPost(requestParameters.apiV1ScimGroupsPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1ScimScimTokensGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1ScimScimTokensGet(requestParameters: DefaultApiApiV1ScimScimTokensGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1ScimScimTokensGet(requestParameters.organizationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1ScimScimTokensPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1ScimScimTokensPost(requestParameters: DefaultApiApiV1ScimScimTokensPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1ScimScimTokensPost(requestParameters.apiV1ScimScimTokensPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1ScimScimTokensScimTokenIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1ScimScimTokensScimTokenIdDelete(requestParameters: DefaultApiApiV1ScimScimTokensScimTokenIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1ScimScimTokensScimTokenIdDelete(requestParameters.scimTokenId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1ScimUsersGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1ScimUsersGet(requestParameters: DefaultApiApiV1ScimUsersGetRequest = {}, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1ScimUsersGet(requestParameters.startIndex, requestParameters.count, requestParameters.filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1ScimUsersOrgMembershipIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1ScimUsersOrgMembershipIdDelete(requestParameters: DefaultApiApiV1ScimUsersOrgMembershipIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1ScimUsersOrgMembershipIdDelete(requestParameters.orgMembershipId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1ScimUsersOrgMembershipIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1ScimUsersOrgMembershipIdGet(requestParameters: DefaultApiApiV1ScimUsersOrgMembershipIdGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1ScimUsersOrgMembershipIdGet(requestParameters.orgMembershipId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1ScimUsersOrgMembershipIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1ScimUsersOrgMembershipIdPut(requestParameters: DefaultApiApiV1ScimUsersOrgMembershipIdPutRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1ScimUsersOrgMembershipIdPut(requestParameters.orgMembershipId, requestParameters.apiV1ScimUsersOrgMembershipIdPutRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1ScimUsersPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1ScimUsersPost(requestParameters: DefaultApiApiV1ScimUsersPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1ScimUsersPost(requestParameters.apiV1ScimUsersPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1SecretApprovalRequestsCountGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1SecretApprovalRequestsCountGet(requestParameters: DefaultApiApiV1SecretApprovalRequestsCountGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1SecretApprovalRequestsCountGet(requestParameters.workspaceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1SecretApprovalRequestsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1SecretApprovalRequestsGet(requestParameters: DefaultApiApiV1SecretApprovalRequestsGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1SecretApprovalRequestsGet(requestParameters.workspaceId, requestParameters.environment, requestParameters.committer, requestParameters.status, requestParameters.limit, requestParameters.offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1SecretApprovalRequestsIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1SecretApprovalRequestsIdGet(requestParameters: DefaultApiApiV1SecretApprovalRequestsIdGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1SecretApprovalRequestsIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1SecretApprovalRequestsIdMergePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1SecretApprovalRequestsIdMergePost(requestParameters: DefaultApiApiV1SecretApprovalRequestsIdMergePostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1SecretApprovalRequestsIdMergePost(requestParameters.id, requestParameters.apiV1SecretApprovalRequestsIdMergePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1SecretApprovalRequestsIdReviewPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1SecretApprovalRequestsIdReviewPost(requestParameters: DefaultApiApiV1SecretApprovalRequestsIdReviewPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1SecretApprovalRequestsIdReviewPost(requestParameters.id, requestParameters.apiV1SecretApprovalRequestsIdReviewPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1SecretApprovalRequestsIdStatusPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1SecretApprovalRequestsIdStatusPost(requestParameters: DefaultApiApiV1SecretApprovalRequestsIdStatusPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1SecretApprovalRequestsIdStatusPost(requestParameters.id, requestParameters.apiV1SecretApprovalRequestsIdStatusPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1SecretApprovalsBoardGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1SecretApprovalsBoardGet(requestParameters: DefaultApiApiV1SecretApprovalsBoardGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1SecretApprovalsBoardGet(requestParameters.workspaceId, requestParameters.environment, requestParameters.secretPath, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1SecretApprovalsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1SecretApprovalsGet(requestParameters: DefaultApiApiV1SecretApprovalsGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1SecretApprovalsGet(requestParameters.workspaceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1SecretApprovalsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1SecretApprovalsPost(requestParameters: DefaultApiApiV1SecretApprovalsPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1SecretApprovalsPost(requestParameters.apiV1SecretApprovalsPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1SecretApprovalsSapIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1SecretApprovalsSapIdDelete(requestParameters: DefaultApiApiV1SecretApprovalsSapIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1SecretApprovalsSapIdDelete(requestParameters.sapId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1SecretApprovalsSapIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1SecretApprovalsSapIdPatch(requestParameters: DefaultApiApiV1SecretApprovalsSapIdPatchRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1SecretApprovalsSapIdPatch(requestParameters.sapId, requestParameters.apiV1SecretApprovalsSapIdPatchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get secret imports
     * @param {DefaultApiApiV1SecretImportsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1SecretImportsGet(requestParameters: DefaultApiApiV1SecretImportsGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1SecretImportsGet(requestParameters.workspaceId, requestParameters.environment, requestParameters.path, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create secret imports
     * @param {DefaultApiApiV1SecretImportsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1SecretImportsPost(requestParameters: DefaultApiApiV1SecretImportsPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1SecretImportsPost(requestParameters.apiV1SecretImportsPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete secret imports
     * @param {DefaultApiApiV1SecretImportsSecretImportIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1SecretImportsSecretImportIdDelete(requestParameters: DefaultApiApiV1SecretImportsSecretImportIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1SecretImportsSecretImportIdDelete(requestParameters.secretImportId, requestParameters.apiV1SecretImportsSecretImportIdDeleteRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update secret imports
     * @param {DefaultApiApiV1SecretImportsSecretImportIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1SecretImportsSecretImportIdPatch(requestParameters: DefaultApiApiV1SecretImportsSecretImportIdPatchRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1SecretImportsSecretImportIdPatch(requestParameters.secretImportId, requestParameters.apiV1SecretImportsSecretImportIdPatchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Resync secret replication of secret imports
     * @param {DefaultApiApiV1SecretImportsSecretImportIdReplicationResyncPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1SecretImportsSecretImportIdReplicationResyncPost(requestParameters: DefaultApiApiV1SecretImportsSecretImportIdReplicationResyncPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1SecretImportsSecretImportIdReplicationResyncPost(requestParameters.secretImportId, requestParameters.apiV1SecretImportsSecretImportIdReplicationResyncPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1SecretImportsSecretsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1SecretImportsSecretsGet(requestParameters: DefaultApiApiV1SecretImportsSecretsGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1SecretImportsSecretsGet(requestParameters.workspaceId, requestParameters.environment, requestParameters.path, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1SecretImportsSecretsRawGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1SecretImportsSecretsRawGet(requestParameters: DefaultApiApiV1SecretImportsSecretsRawGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1SecretImportsSecretsRawGet(requestParameters.workspaceId, requestParameters.environment, requestParameters.path, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1SecretRotationProvidersWorkspaceIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1SecretRotationProvidersWorkspaceIdGet(requestParameters: DefaultApiApiV1SecretRotationProvidersWorkspaceIdGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1SecretRotationProvidersWorkspaceIdGet(requestParameters.workspaceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1SecretRotationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1SecretRotationsGet(requestParameters: DefaultApiApiV1SecretRotationsGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1SecretRotationsGet(requestParameters.workspaceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1SecretRotationsIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1SecretRotationsIdDelete(requestParameters: DefaultApiApiV1SecretRotationsIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1SecretRotationsIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1SecretRotationsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1SecretRotationsPost(requestParameters: DefaultApiApiV1SecretRotationsPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1SecretRotationsPost(requestParameters.apiV1SecretRotationsPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1SecretRotationsRestartPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1SecretRotationsRestartPost(requestParameters: DefaultApiApiV1SecretRotationsRestartPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1SecretRotationsRestartPost(requestParameters.apiV1SecretRotationsRestartPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1SecretScanningCreateInstallationSessionOrganizationPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1SecretScanningCreateInstallationSessionOrganizationPost(requestParameters: DefaultApiApiV1SecretScanningCreateInstallationSessionOrganizationPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1SecretScanningCreateInstallationSessionOrganizationPost(requestParameters.apiV1SecretScanningCreateInstallationSessionOrganizationPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1SecretScanningInstallationStatusOrganizationOrganizationIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1SecretScanningInstallationStatusOrganizationOrganizationIdGet(requestParameters: DefaultApiApiV1SecretScanningInstallationStatusOrganizationOrganizationIdGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1SecretScanningInstallationStatusOrganizationOrganizationIdGet(requestParameters.organizationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1SecretScanningLinkInstallationPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1SecretScanningLinkInstallationPost(requestParameters: DefaultApiApiV1SecretScanningLinkInstallationPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1SecretScanningLinkInstallationPost(requestParameters.apiV1SecretScanningLinkInstallationPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1SecretScanningOrganizationOrganizationIdRisksGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1SecretScanningOrganizationOrganizationIdRisksGet(requestParameters: DefaultApiApiV1SecretScanningOrganizationOrganizationIdRisksGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1SecretScanningOrganizationOrganizationIdRisksGet(requestParameters.organizationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1SecretScanningOrganizationOrganizationIdRisksRiskIdStatusPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1SecretScanningOrganizationOrganizationIdRisksRiskIdStatusPost(requestParameters: DefaultApiApiV1SecretScanningOrganizationOrganizationIdRisksRiskIdStatusPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1SecretScanningOrganizationOrganizationIdRisksRiskIdStatusPost(requestParameters.organizationId, requestParameters.riskId, requestParameters.apiV1SecretScanningOrganizationOrganizationIdRisksRiskIdStatusPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1SecretSecretIdSecretVersionsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1SecretSecretIdSecretVersionsGet(requestParameters: DefaultApiApiV1SecretSecretIdSecretVersionsGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1SecretSecretIdSecretVersionsGet(requestParameters.offset, requestParameters.limit, requestParameters.secretId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1SecretSharingGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1SecretSharingGet(requestParameters: DefaultApiApiV1SecretSharingGetRequest = {}, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1SecretSharingGet(requestParameters.offset, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1SecretSharingPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1SecretSharingPost(requestParameters: DefaultApiApiV1SecretSharingPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1SecretSharingPost(requestParameters.apiV1SecretSharingPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1SecretSharingPublicIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1SecretSharingPublicIdGet(requestParameters: DefaultApiApiV1SecretSharingPublicIdGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1SecretSharingPublicIdGet(requestParameters.hashedHex, requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1SecretSharingPublicPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1SecretSharingPublicPost(requestParameters: DefaultApiApiV1SecretSharingPublicPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1SecretSharingPublicPost(requestParameters.apiV1SecretSharingPublicPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1SecretSharingSharedSecretIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1SecretSharingSharedSecretIdDelete(requestParameters: DefaultApiApiV1SecretSharingSharedSecretIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1SecretSharingSharedSecretIdDelete(requestParameters.sharedSecretId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1SecretSnapshotSecretSnapshotIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1SecretSnapshotSecretSnapshotIdGet(requestParameters: DefaultApiApiV1SecretSnapshotSecretSnapshotIdGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1SecretSnapshotSecretSnapshotIdGet(requestParameters.secretSnapshotId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Roll back project secrets to those captured in a secret snapshot version.
     * @param {DefaultApiApiV1SecretSnapshotSecretSnapshotIdRollbackPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1SecretSnapshotSecretSnapshotIdRollbackPost(requestParameters: DefaultApiApiV1SecretSnapshotSecretSnapshotIdRollbackPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1SecretSnapshotSecretSnapshotIdRollbackPost(requestParameters.secretSnapshotId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1SsoConfigGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1SsoConfigGet(requestParameters: DefaultApiApiV1SsoConfigGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1SsoConfigGet(requestParameters.organizationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1SsoConfigPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1SsoConfigPatch(requestParameters: DefaultApiApiV1SsoConfigPatchRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1SsoConfigPatch(requestParameters.apiV1SsoConfigPatchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1SsoConfigPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1SsoConfigPost(requestParameters: DefaultApiApiV1SsoConfigPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1SsoConfigPost(requestParameters.apiV1SsoConfigPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1SsoGithubGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1SsoGithubGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1SsoGitlabGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1SsoGitlabGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1SsoGoogleGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1SsoGoogleGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1SsoOidcCallbackGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1SsoOidcCallbackGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1SsoOidcConfigGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1SsoOidcConfigGet(requestParameters: DefaultApiApiV1SsoOidcConfigGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1SsoOidcConfigGet(requestParameters.orgSlug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1SsoOidcConfigPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1SsoOidcConfigPatch(requestParameters: DefaultApiApiV1SsoOidcConfigPatchRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1SsoOidcConfigPatch(requestParameters.apiV1SsoOidcConfigPatchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1SsoOidcConfigPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1SsoOidcConfigPost(requestParameters: DefaultApiApiV1SsoOidcConfigPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1SsoOidcConfigPost(requestParameters.apiV1SsoOidcConfigPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1SsoOidcLoginErrorGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1SsoOidcLoginErrorGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1SsoOidcLoginGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1SsoOidcLoginGet(requestParameters: DefaultApiApiV1SsoOidcLoginGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1SsoOidcLoginGet(requestParameters.orgSlug, requestParameters.callbackPort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1SsoRedirectGithubGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1SsoRedirectGithubGet(requestParameters: DefaultApiApiV1SsoRedirectGithubGetRequest = {}, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1SsoRedirectGithubGet(requestParameters.callbackPort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1SsoRedirectGitlabGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1SsoRedirectGitlabGet(requestParameters: DefaultApiApiV1SsoRedirectGitlabGetRequest = {}, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1SsoRedirectGitlabGet(requestParameters.callbackPort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1SsoRedirectGoogleGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1SsoRedirectGoogleGet(requestParameters: DefaultApiApiV1SsoRedirectGoogleGetRequest = {}, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1SsoRedirectGoogleGet(requestParameters.callbackPort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1SsoRedirectSaml2OrganizationsOrgSlugGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1SsoRedirectSaml2OrganizationsOrgSlugGet(requestParameters: DefaultApiApiV1SsoRedirectSaml2OrganizationsOrgSlugGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1SsoRedirectSaml2OrganizationsOrgSlugGet(requestParameters.orgSlug, requestParameters.callbackPort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1SsoRedirectSaml2SamlConfigIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1SsoRedirectSaml2SamlConfigIdGet(requestParameters: DefaultApiApiV1SsoRedirectSaml2SamlConfigIdGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1SsoRedirectSaml2SamlConfigIdGet(requestParameters.samlConfigId, requestParameters.callbackPort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1SsoSaml2SamlConfigIdPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1SsoSaml2SamlConfigIdPost(requestParameters: DefaultApiApiV1SsoSaml2SamlConfigIdPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1SsoSaml2SamlConfigIdPost(requestParameters.samlConfigId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1SsoTokenExchangePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1SsoTokenExchangePost(requestParameters: DefaultApiApiV1SsoTokenExchangePostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1SsoTokenExchangePost(requestParameters.apiV1SsoTokenExchangePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1UserActionGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1UserActionGet(requestParameters: DefaultApiApiV1UserActionGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1UserActionGet(requestParameters.action, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1UserActionPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1UserActionPost(requestParameters: DefaultApiApiV1UserActionPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1UserActionPost(requestParameters.apiV1UserActionPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1UserEngagementMeWishPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1UserEngagementMeWishPost(requestParameters: DefaultApiApiV1UserEngagementMeWishPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1UserEngagementMeWishPost(requestParameters.apiV1UserEngagementMeWishPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1UserGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1UserGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1UserMeProjectFavoritesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1UserMeProjectFavoritesGet(requestParameters: DefaultApiApiV1UserMeProjectFavoritesGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1UserMeProjectFavoritesGet(requestParameters.orgId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1UserMeProjectFavoritesPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1UserMeProjectFavoritesPut(requestParameters: DefaultApiApiV1UserMeProjectFavoritesPutRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1UserMeProjectFavoritesPut(requestParameters.apiV1UserMeProjectFavoritesPutRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1UserPrivateKeyGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1UserPrivateKeyGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1UserUserIdUnlockGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1UserUserIdUnlockGet(requestParameters: DefaultApiApiV1UserUserIdUnlockGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1UserUserIdUnlockGet(requestParameters.token, requestParameters.userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1WebhooksGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1WebhooksGet(requestParameters: DefaultApiApiV1WebhooksGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1WebhooksGet(requestParameters.workspaceId, requestParameters.environment, requestParameters.secretPath, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1WebhooksPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1WebhooksPost(requestParameters: DefaultApiApiV1WebhooksPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1WebhooksPost(requestParameters.apiV1WebhooksPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1WebhooksWebhookIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1WebhooksWebhookIdDelete(requestParameters: DefaultApiApiV1WebhooksWebhookIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1WebhooksWebhookIdDelete(requestParameters.webhookId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1WebhooksWebhookIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1WebhooksWebhookIdPatch(requestParameters: DefaultApiApiV1WebhooksWebhookIdPatchRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1WebhooksWebhookIdPatch(requestParameters.webhookId, requestParameters.apiV1WebhooksWebhookIdPatchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1WebhooksWebhookIdTestPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1WebhooksWebhookIdTestPost(requestParameters: DefaultApiApiV1WebhooksWebhookIdTestPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1WebhooksWebhookIdTestPost(requestParameters.webhookId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1WorkspaceGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1WorkspaceGet(requestParameters: DefaultApiApiV1WorkspaceGetRequest = {}, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1WorkspaceGet(requestParameters.includeRoles, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1WorkspaceProjectIdPermissionsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1WorkspaceProjectIdPermissionsGet(requestParameters: DefaultApiApiV1WorkspaceProjectIdPermissionsGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1WorkspaceProjectIdPermissionsGet(requestParameters.projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1WorkspaceProjectIdTagsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1WorkspaceProjectIdTagsGet(requestParameters: DefaultApiApiV1WorkspaceProjectIdTagsGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1WorkspaceProjectIdTagsGet(requestParameters.projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1WorkspaceProjectIdTagsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1WorkspaceProjectIdTagsPost(requestParameters: DefaultApiApiV1WorkspaceProjectIdTagsPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1WorkspaceProjectIdTagsPost(requestParameters.projectId, requestParameters.apiV1WorkspaceProjectIdTagsPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1WorkspaceProjectIdTagsSlugTagSlugGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1WorkspaceProjectIdTagsSlugTagSlugGet(requestParameters: DefaultApiApiV1WorkspaceProjectIdTagsSlugTagSlugGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1WorkspaceProjectIdTagsSlugTagSlugGet(requestParameters.projectId, requestParameters.tagSlug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1WorkspaceProjectIdTagsTagIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1WorkspaceProjectIdTagsTagIdDelete(requestParameters: DefaultApiApiV1WorkspaceProjectIdTagsTagIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1WorkspaceProjectIdTagsTagIdDelete(requestParameters.projectId, requestParameters.tagId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1WorkspaceProjectIdTagsTagIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1WorkspaceProjectIdTagsTagIdGet(requestParameters: DefaultApiApiV1WorkspaceProjectIdTagsTagIdGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1WorkspaceProjectIdTagsTagIdGet(requestParameters.projectId, requestParameters.tagId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1WorkspaceProjectIdTagsTagIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1WorkspaceProjectIdTagsTagIdPatch(requestParameters: DefaultApiApiV1WorkspaceProjectIdTagsTagIdPatchRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1WorkspaceProjectIdTagsTagIdPatch(requestParameters.projectId, requestParameters.tagId, requestParameters.apiV1WorkspaceProjectIdTagsTagIdPatchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List project role
     * @param {DefaultApiApiV1WorkspaceProjectSlugRolesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1WorkspaceProjectSlugRolesGet(requestParameters: DefaultApiApiV1WorkspaceProjectSlugRolesGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1WorkspaceProjectSlugRolesGet(requestParameters.projectSlug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a project role
     * @param {DefaultApiApiV1WorkspaceProjectSlugRolesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1WorkspaceProjectSlugRolesPost(requestParameters: DefaultApiApiV1WorkspaceProjectSlugRolesPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1WorkspaceProjectSlugRolesPost(requestParameters.projectSlug, requestParameters.apiV1WorkspaceProjectSlugRolesPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a project role
     * @param {DefaultApiApiV1WorkspaceProjectSlugRolesRoleIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1WorkspaceProjectSlugRolesRoleIdDelete(requestParameters: DefaultApiApiV1WorkspaceProjectSlugRolesRoleIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1WorkspaceProjectSlugRolesRoleIdDelete(requestParameters.projectSlug, requestParameters.roleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a project role
     * @param {DefaultApiApiV1WorkspaceProjectSlugRolesRoleIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1WorkspaceProjectSlugRolesRoleIdPatch(requestParameters: DefaultApiApiV1WorkspaceProjectSlugRolesRoleIdPatchRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1WorkspaceProjectSlugRolesRoleIdPatch(requestParameters.projectSlug, requestParameters.roleId, requestParameters.apiV1WorkspaceProjectSlugRolesRoleIdPatchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1WorkspaceProjectSlugRolesSlugSlugGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1WorkspaceProjectSlugRolesSlugSlugGet(requestParameters: DefaultApiApiV1WorkspaceProjectSlugRolesSlugSlugGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1WorkspaceProjectSlugRolesSlugSlugGet(requestParameters.projectSlug, requestParameters.slug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1WorkspaceWorkspaceIdAuditLogsFiltersActorsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1WorkspaceWorkspaceIdAuditLogsFiltersActorsGet(requestParameters: DefaultApiApiV1WorkspaceWorkspaceIdAuditLogsFiltersActorsGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1WorkspaceWorkspaceIdAuditLogsFiltersActorsGet(requestParameters.workspaceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return audit logs
     * @param {DefaultApiApiV1WorkspaceWorkspaceIdAuditLogsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1WorkspaceWorkspaceIdAuditLogsGet(requestParameters: DefaultApiApiV1WorkspaceWorkspaceIdAuditLogsGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1WorkspaceWorkspaceIdAuditLogsGet(requestParameters.workspaceId, requestParameters.eventType, requestParameters.userAgentType, requestParameters.startDate, requestParameters.endDate, requestParameters.offset, requestParameters.limit, requestParameters.actor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List integration auth objects for a workspace.
     * @param {DefaultApiApiV1WorkspaceWorkspaceIdAuthorizationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1WorkspaceWorkspaceIdAuthorizationsGet(requestParameters: DefaultApiApiV1WorkspaceWorkspaceIdAuthorizationsGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1WorkspaceWorkspaceIdAuthorizationsGet(requestParameters.workspaceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1WorkspaceWorkspaceIdAutoCapitalizationPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1WorkspaceWorkspaceIdAutoCapitalizationPost(requestParameters: DefaultApiApiV1WorkspaceWorkspaceIdAutoCapitalizationPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1WorkspaceWorkspaceIdAutoCapitalizationPost(requestParameters.workspaceId, requestParameters.apiV1WorkspaceWorkspaceIdAutoCapitalizationPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete project
     * @param {DefaultApiApiV1WorkspaceWorkspaceIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1WorkspaceWorkspaceIdDelete(requestParameters: DefaultApiApiV1WorkspaceWorkspaceIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1WorkspaceWorkspaceIdDelete(requestParameters.workspaceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Environment
     * @param {DefaultApiApiV1WorkspaceWorkspaceIdEnvironmentsEnvIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1WorkspaceWorkspaceIdEnvironmentsEnvIdGet(requestParameters: DefaultApiApiV1WorkspaceWorkspaceIdEnvironmentsEnvIdGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1WorkspaceWorkspaceIdEnvironmentsEnvIdGet(requestParameters.workspaceId, requestParameters.envId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete environment
     * @param {DefaultApiApiV1WorkspaceWorkspaceIdEnvironmentsIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1WorkspaceWorkspaceIdEnvironmentsIdDelete(requestParameters: DefaultApiApiV1WorkspaceWorkspaceIdEnvironmentsIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1WorkspaceWorkspaceIdEnvironmentsIdDelete(requestParameters.workspaceId, requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update environment
     * @param {DefaultApiApiV1WorkspaceWorkspaceIdEnvironmentsIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1WorkspaceWorkspaceIdEnvironmentsIdPatch(requestParameters: DefaultApiApiV1WorkspaceWorkspaceIdEnvironmentsIdPatchRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1WorkspaceWorkspaceIdEnvironmentsIdPatch(requestParameters.workspaceId, requestParameters.id, requestParameters.apiV1WorkspaceWorkspaceIdEnvironmentsIdPatchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create environment
     * @param {DefaultApiApiV1WorkspaceWorkspaceIdEnvironmentsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1WorkspaceWorkspaceIdEnvironmentsPost(requestParameters: DefaultApiApiV1WorkspaceWorkspaceIdEnvironmentsPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1WorkspaceWorkspaceIdEnvironmentsPost(requestParameters.workspaceId, requestParameters.apiV1WorkspaceWorkspaceIdEnvironmentsPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get project
     * @param {DefaultApiApiV1WorkspaceWorkspaceIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1WorkspaceWorkspaceIdGet(requestParameters: DefaultApiApiV1WorkspaceWorkspaceIdGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1WorkspaceWorkspaceIdGet(requestParameters.workspaceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List integrations for a project.
     * @param {DefaultApiApiV1WorkspaceWorkspaceIdIntegrationsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1WorkspaceWorkspaceIdIntegrationsGet(requestParameters: DefaultApiApiV1WorkspaceWorkspaceIdIntegrationsGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1WorkspaceWorkspaceIdIntegrationsGet(requestParameters.workspaceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1WorkspaceWorkspaceIdKeyPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1WorkspaceWorkspaceIdKeyPost(requestParameters: DefaultApiApiV1WorkspaceWorkspaceIdKeyPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1WorkspaceWorkspaceIdKeyPost(requestParameters.workspaceId, requestParameters.apiV1WorkspaceWorkspaceIdKeyPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1WorkspaceWorkspaceIdKeysGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1WorkspaceWorkspaceIdKeysGet(requestParameters: DefaultApiApiV1WorkspaceWorkspaceIdKeysGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1WorkspaceWorkspaceIdKeysGet(requestParameters.workspaceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1WorkspaceWorkspaceIdKmsBackupGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1WorkspaceWorkspaceIdKmsBackupGet(requestParameters: DefaultApiApiV1WorkspaceWorkspaceIdKmsBackupGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1WorkspaceWorkspaceIdKmsBackupGet(requestParameters.workspaceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1WorkspaceWorkspaceIdKmsBackupPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1WorkspaceWorkspaceIdKmsBackupPost(requestParameters: DefaultApiApiV1WorkspaceWorkspaceIdKmsBackupPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1WorkspaceWorkspaceIdKmsBackupPost(requestParameters.workspaceId, requestParameters.apiV1WorkspaceWorkspaceIdKmsBackupPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1WorkspaceWorkspaceIdKmsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1WorkspaceWorkspaceIdKmsGet(requestParameters: DefaultApiApiV1WorkspaceWorkspaceIdKmsGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1WorkspaceWorkspaceIdKmsGet(requestParameters.workspaceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1WorkspaceWorkspaceIdKmsPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1WorkspaceWorkspaceIdKmsPatch(requestParameters: DefaultApiApiV1WorkspaceWorkspaceIdKmsPatchRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1WorkspaceWorkspaceIdKmsPatch(requestParameters.workspaceId, requestParameters.apiV1WorkspaceWorkspaceIdKmsPatchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1WorkspaceWorkspaceIdLeaveDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1WorkspaceWorkspaceIdLeaveDelete(requestParameters: DefaultApiApiV1WorkspaceWorkspaceIdLeaveDeleteRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1WorkspaceWorkspaceIdLeaveDelete(requestParameters.workspaceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return project user memberships
     * @param {DefaultApiApiV1WorkspaceWorkspaceIdMembershipsDetailsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1WorkspaceWorkspaceIdMembershipsDetailsPost(requestParameters: DefaultApiApiV1WorkspaceWorkspaceIdMembershipsDetailsPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1WorkspaceWorkspaceIdMembershipsDetailsPost(requestParameters.workspaceId, requestParameters.apiV1WorkspaceWorkspaceIdMembershipsDetailsPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return project user memberships
     * @param {DefaultApiApiV1WorkspaceWorkspaceIdMembershipsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1WorkspaceWorkspaceIdMembershipsGet(requestParameters: DefaultApiApiV1WorkspaceWorkspaceIdMembershipsGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1WorkspaceWorkspaceIdMembershipsGet(requestParameters.workspaceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete project user membership
     * @param {DefaultApiApiV1WorkspaceWorkspaceIdMembershipsMembershipIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1WorkspaceWorkspaceIdMembershipsMembershipIdDelete(requestParameters: DefaultApiApiV1WorkspaceWorkspaceIdMembershipsMembershipIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1WorkspaceWorkspaceIdMembershipsMembershipIdDelete(requestParameters.workspaceId, requestParameters.membershipId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update project user membership
     * @param {DefaultApiApiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatch(requestParameters: DefaultApiApiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatchRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatch(requestParameters.workspaceId, requestParameters.membershipId, requestParameters.apiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1WorkspaceWorkspaceIdMembershipsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1WorkspaceWorkspaceIdMembershipsPost(requestParameters: DefaultApiApiV1WorkspaceWorkspaceIdMembershipsPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1WorkspaceWorkspaceIdMembershipsPost(requestParameters.workspaceId, requestParameters.apiV1WorkspaceWorkspaceIdMembershipsPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1WorkspaceWorkspaceIdMigrateV3PostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1WorkspaceWorkspaceIdMigrateV3Post(requestParameters: DefaultApiApiV1WorkspaceWorkspaceIdMigrateV3PostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1WorkspaceWorkspaceIdMigrateV3Post(requestParameters.workspaceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1WorkspaceWorkspaceIdNamePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1WorkspaceWorkspaceIdNamePost(requestParameters: DefaultApiApiV1WorkspaceWorkspaceIdNamePostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1WorkspaceWorkspaceIdNamePost(requestParameters.workspaceId, requestParameters.apiV1WorkspaceWorkspaceIdNamePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update project
     * @param {DefaultApiApiV1WorkspaceWorkspaceIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1WorkspaceWorkspaceIdPatch(requestParameters: DefaultApiApiV1WorkspaceWorkspaceIdPatchRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1WorkspaceWorkspaceIdPatch(requestParameters.workspaceId, requestParameters.apiV1WorkspaceWorkspaceIdPatchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1WorkspaceWorkspaceIdSecretSnapshotsCountGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1WorkspaceWorkspaceIdSecretSnapshotsCountGet(requestParameters: DefaultApiApiV1WorkspaceWorkspaceIdSecretSnapshotsCountGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1WorkspaceWorkspaceIdSecretSnapshotsCountGet(requestParameters.environment, requestParameters.workspaceId, requestParameters.path, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return project secret snapshots ids
     * @param {DefaultApiApiV1WorkspaceWorkspaceIdSecretSnapshotsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1WorkspaceWorkspaceIdSecretSnapshotsGet(requestParameters: DefaultApiApiV1WorkspaceWorkspaceIdSecretSnapshotsGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1WorkspaceWorkspaceIdSecretSnapshotsGet(requestParameters.environment, requestParameters.workspaceId, requestParameters.path, requestParameters.offset, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1WorkspaceWorkspaceIdServiceTokenDataGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1WorkspaceWorkspaceIdServiceTokenDataGet(requestParameters: DefaultApiApiV1WorkspaceWorkspaceIdServiceTokenDataGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1WorkspaceWorkspaceIdServiceTokenDataGet(requestParameters.workspaceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1WorkspaceWorkspaceIdTrustedIpsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1WorkspaceWorkspaceIdTrustedIpsGet(requestParameters: DefaultApiApiV1WorkspaceWorkspaceIdTrustedIpsGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1WorkspaceWorkspaceIdTrustedIpsGet(requestParameters.workspaceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1WorkspaceWorkspaceIdTrustedIpsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1WorkspaceWorkspaceIdTrustedIpsPost(requestParameters: DefaultApiApiV1WorkspaceWorkspaceIdTrustedIpsPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1WorkspaceWorkspaceIdTrustedIpsPost(requestParameters.workspaceId, requestParameters.apiV1WorkspaceWorkspaceIdTrustedIpsPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1WorkspaceWorkspaceIdTrustedIpsTrustedIpIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1WorkspaceWorkspaceIdTrustedIpsTrustedIpIdDelete(requestParameters: DefaultApiApiV1WorkspaceWorkspaceIdTrustedIpsTrustedIpIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1WorkspaceWorkspaceIdTrustedIpsTrustedIpIdDelete(requestParameters.workspaceId, requestParameters.trustedIpId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1WorkspaceWorkspaceIdTrustedIpsTrustedIpIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1WorkspaceWorkspaceIdTrustedIpsTrustedIpIdPatch(requestParameters: DefaultApiApiV1WorkspaceWorkspaceIdTrustedIpsTrustedIpIdPatchRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1WorkspaceWorkspaceIdTrustedIpsTrustedIpIdPatch(requestParameters.workspaceId, requestParameters.trustedIpId, requestParameters.apiV1WorkspaceWorkspaceIdTrustedIpsTrustedIpIdPatchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1WorkspaceWorkspaceIdUsersGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1WorkspaceWorkspaceIdUsersGet(requestParameters: DefaultApiApiV1WorkspaceWorkspaceIdUsersGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1WorkspaceWorkspaceIdUsersGet(requestParameters.workspaceId, requestParameters.includeGroupMembers, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1WorkspaceWorkspaceSlugAuditLogsRetentionPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1WorkspaceWorkspaceSlugAuditLogsRetentionPut(requestParameters: DefaultApiApiV1WorkspaceWorkspaceSlugAuditLogsRetentionPutRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1WorkspaceWorkspaceSlugAuditLogsRetentionPut(requestParameters.workspaceSlug, requestParameters.apiV1WorkspaceWorkspaceSlugAuditLogsRetentionPutRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV1WorkspaceWorkspaceSlugVersionLimitPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV1WorkspaceWorkspaceSlugVersionLimitPut(requestParameters: DefaultApiApiV1WorkspaceWorkspaceSlugVersionLimitPutRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV1WorkspaceWorkspaceSlugVersionLimitPut(requestParameters.workspaceSlug, requestParameters.apiV1WorkspaceWorkspaceSlugVersionLimitPutRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV2AuthMfaSendPost(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV2AuthMfaSendPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV2AuthMfaVerifyPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV2AuthMfaVerifyPost(requestParameters: DefaultApiApiV2AuthMfaVerifyPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV2AuthMfaVerifyPost(requestParameters.apiV2AuthMfaVerifyPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return organization identity memberships
     * @param {DefaultApiApiV2OrganizationsOrgIdIdentityMembershipsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV2OrganizationsOrgIdIdentityMembershipsGet(requestParameters: DefaultApiApiV2OrganizationsOrgIdIdentityMembershipsGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV2OrganizationsOrgIdIdentityMembershipsGet(requestParameters.orgId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV2OrganizationsOrganizationIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV2OrganizationsOrganizationIdDelete(requestParameters: DefaultApiApiV2OrganizationsOrganizationIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV2OrganizationsOrganizationIdDelete(requestParameters.organizationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return organization user memberships
     * @param {DefaultApiApiV2OrganizationsOrganizationIdMembershipsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV2OrganizationsOrganizationIdMembershipsGet(requestParameters: DefaultApiApiV2OrganizationsOrganizationIdMembershipsGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV2OrganizationsOrganizationIdMembershipsGet(requestParameters.organizationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete organization user memberships
     * @param {DefaultApiApiV2OrganizationsOrganizationIdMembershipsMembershipIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV2OrganizationsOrganizationIdMembershipsMembershipIdDelete(requestParameters: DefaultApiApiV2OrganizationsOrganizationIdMembershipsMembershipIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV2OrganizationsOrganizationIdMembershipsMembershipIdDelete(requestParameters.organizationId, requestParameters.membershipId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get organization user membership
     * @param {DefaultApiApiV2OrganizationsOrganizationIdMembershipsMembershipIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV2OrganizationsOrganizationIdMembershipsMembershipIdGet(requestParameters: DefaultApiApiV2OrganizationsOrganizationIdMembershipsMembershipIdGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV2OrganizationsOrganizationIdMembershipsMembershipIdGet(requestParameters.organizationId, requestParameters.membershipId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update organization user memberships
     * @param {DefaultApiApiV2OrganizationsOrganizationIdMembershipsMembershipIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV2OrganizationsOrganizationIdMembershipsMembershipIdPatch(requestParameters: DefaultApiApiV2OrganizationsOrganizationIdMembershipsMembershipIdPatchRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV2OrganizationsOrganizationIdMembershipsMembershipIdPatch(requestParameters.organizationId, requestParameters.membershipId, requestParameters.apiV2OrganizationsOrganizationIdMembershipsMembershipIdPatchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get project memberships given organization membership
     * @param {DefaultApiApiV2OrganizationsOrganizationIdMembershipsMembershipIdProjectMembershipsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV2OrganizationsOrganizationIdMembershipsMembershipIdProjectMembershipsGet(requestParameters: DefaultApiApiV2OrganizationsOrganizationIdMembershipsMembershipIdProjectMembershipsGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV2OrganizationsOrganizationIdMembershipsMembershipIdProjectMembershipsGet(requestParameters.organizationId, requestParameters.membershipId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return projects in organization that user is part of
     * @param {DefaultApiApiV2OrganizationsOrganizationIdWorkspacesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV2OrganizationsOrganizationIdWorkspacesGet(requestParameters: DefaultApiApiV2OrganizationsOrganizationIdWorkspacesGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV2OrganizationsOrganizationIdWorkspacesGet(requestParameters.organizationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV2OrganizationsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV2OrganizationsPost(requestParameters: DefaultApiApiV2OrganizationsPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV2OrganizationsPost(requestParameters.apiV1WorkspaceWorkspaceIdNamePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return Infisical Token data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV2ServiceTokenGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV2ServiceTokenGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV2ServiceTokenPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV2ServiceTokenPost(requestParameters: DefaultApiApiV2ServiceTokenPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV2ServiceTokenPost(requestParameters.apiV2ServiceTokenPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV2ServiceTokenServiceTokenIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV2ServiceTokenServiceTokenIdDelete(requestParameters: DefaultApiApiV2ServiceTokenServiceTokenIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV2ServiceTokenServiceTokenIdDelete(requestParameters.serviceTokenId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV2UsersMeApiKeysApiKeyDataIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV2UsersMeApiKeysApiKeyDataIdDelete(requestParameters: DefaultApiApiV2UsersMeApiKeysApiKeyDataIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV2UsersMeApiKeysApiKeyDataIdDelete(requestParameters.apiKeyDataId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV2UsersMeApiKeysGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV2UsersMeApiKeysGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV2UsersMeApiKeysPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV2UsersMeApiKeysPost(requestParameters: DefaultApiApiV2UsersMeApiKeysPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV2UsersMeApiKeysPost(requestParameters.apiV2UsersMeApiKeysPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV2UsersMeAuthMethodsPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV2UsersMeAuthMethodsPut(requestParameters: DefaultApiApiV2UsersMeAuthMethodsPutRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV2UsersMeAuthMethodsPut(requestParameters.apiV2UsersMeAuthMethodsPutRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV2UsersMeDelete(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV2UsersMeDelete(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV2UsersMeEmailsCodePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV2UsersMeEmailsCodePost(requestParameters: DefaultApiApiV2UsersMeEmailsCodePostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV2UsersMeEmailsCodePost(requestParameters.apiV2UsersMeEmailsCodePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV2UsersMeEmailsVerifyPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV2UsersMeEmailsVerifyPost(requestParameters: DefaultApiApiV2UsersMeEmailsVerifyPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV2UsersMeEmailsVerifyPost(requestParameters.apiV2UsersMeEmailsVerifyPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the current user on the request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV2UsersMeGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV2UsersMeGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV2UsersMeMfaPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV2UsersMeMfaPatch(requestParameters: DefaultApiApiV2UsersMeMfaPatchRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV2UsersMeMfaPatch(requestParameters.apiV2UsersMeMfaPatchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV2UsersMeNamePatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV2UsersMeNamePatch(requestParameters: DefaultApiApiV2UsersMeNamePatchRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV2UsersMeNamePatch(requestParameters.apiV2UsersMeNamePatchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return organizations that current user is part of
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV2UsersMeOrganizationsGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV2UsersMeOrganizationsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV2UsersMeSessionsDelete(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV2UsersMeSessionsDelete(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV2UsersMeSessionsGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV2UsersMeSessionsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new project
     * @param {DefaultApiApiV2WorkspacePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV2WorkspacePost(requestParameters: DefaultApiApiV2WorkspacePostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV2WorkspacePost(requestParameters.apiV2WorkspacePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV2WorkspaceProjectIdCertificateTemplatesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV2WorkspaceProjectIdCertificateTemplatesGet(requestParameters: DefaultApiApiV2WorkspaceProjectIdCertificateTemplatesGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV2WorkspaceProjectIdCertificateTemplatesGet(requestParameters.projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return project identity memberships
     * @param {DefaultApiApiV2WorkspaceProjectIdIdentityMembershipsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV2WorkspaceProjectIdIdentityMembershipsGet(requestParameters: DefaultApiApiV2WorkspaceProjectIdIdentityMembershipsGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV2WorkspaceProjectIdIdentityMembershipsGet(requestParameters.projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete project identity memberships
     * @param {DefaultApiApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV2WorkspaceProjectIdIdentityMembershipsIdentityIdDelete(requestParameters: DefaultApiApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV2WorkspaceProjectIdIdentityMembershipsIdentityIdDelete(requestParameters.projectId, requestParameters.identityId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return project identity membership
     * @param {DefaultApiApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV2WorkspaceProjectIdIdentityMembershipsIdentityIdGet(requestParameters: DefaultApiApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV2WorkspaceProjectIdIdentityMembershipsIdentityIdGet(requestParameters.projectId, requestParameters.identityId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update project identity memberships
     * @param {DefaultApiApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPatch(requestParameters: DefaultApiApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPatchRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPatch(requestParameters.projectId, requestParameters.identityId, requestParameters.apiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPatchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create project identity membership
     * @param {DefaultApiApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPost(requestParameters: DefaultApiApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPost(requestParameters.projectId, requestParameters.identityId, requestParameters.apiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove members from project
     * @param {DefaultApiApiV2WorkspaceProjectIdMembershipsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV2WorkspaceProjectIdMembershipsDelete(requestParameters: DefaultApiApiV2WorkspaceProjectIdMembershipsDeleteRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV2WorkspaceProjectIdMembershipsDelete(requestParameters.projectId, requestParameters.apiV2WorkspaceProjectIdMembershipsDeleteRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invite members to project
     * @param {DefaultApiApiV2WorkspaceProjectIdMembershipsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV2WorkspaceProjectIdMembershipsPost(requestParameters: DefaultApiApiV2WorkspaceProjectIdMembershipsPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV2WorkspaceProjectIdMembershipsPost(requestParameters.projectId, requestParameters.apiV2WorkspaceProjectIdMembershipsPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV2WorkspaceProjectIdPkiAlertsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV2WorkspaceProjectIdPkiAlertsGet(requestParameters: DefaultApiApiV2WorkspaceProjectIdPkiAlertsGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV2WorkspaceProjectIdPkiAlertsGet(requestParameters.projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV2WorkspaceProjectIdPkiCollectionsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV2WorkspaceProjectIdPkiCollectionsGet(requestParameters: DefaultApiApiV2WorkspaceProjectIdPkiCollectionsGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV2WorkspaceProjectIdPkiCollectionsGet(requestParameters.projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV2WorkspaceProjectIdUpgradePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV2WorkspaceProjectIdUpgradePost(requestParameters: DefaultApiApiV2WorkspaceProjectIdUpgradePostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV2WorkspaceProjectIdUpgradePost(requestParameters.projectId, requestParameters.apiV2WorkspaceProjectIdUpgradePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV2WorkspaceProjectIdUpgradeStatusGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV2WorkspaceProjectIdUpgradeStatusGet(requestParameters: DefaultApiApiV2WorkspaceProjectIdUpgradeStatusGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV2WorkspaceProjectIdUpgradeStatusGet(requestParameters.projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return list of groups in project
     * @param {DefaultApiApiV2WorkspaceProjectSlugGroupsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV2WorkspaceProjectSlugGroupsGet(requestParameters: DefaultApiApiV2WorkspaceProjectSlugGroupsGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV2WorkspaceProjectSlugGroupsGet(requestParameters.projectSlug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove group from project
     * @param {DefaultApiApiV2WorkspaceProjectSlugGroupsGroupSlugDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV2WorkspaceProjectSlugGroupsGroupSlugDelete(requestParameters: DefaultApiApiV2WorkspaceProjectSlugGroupsGroupSlugDeleteRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV2WorkspaceProjectSlugGroupsGroupSlugDelete(requestParameters.projectSlug, requestParameters.groupSlug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update group in project
     * @param {DefaultApiApiV2WorkspaceProjectSlugGroupsGroupSlugPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV2WorkspaceProjectSlugGroupsGroupSlugPatch(requestParameters: DefaultApiApiV2WorkspaceProjectSlugGroupsGroupSlugPatchRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV2WorkspaceProjectSlugGroupsGroupSlugPatch(requestParameters.projectSlug, requestParameters.groupSlug, requestParameters.apiV2WorkspaceProjectSlugGroupsGroupSlugPatchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add group to project
     * @param {DefaultApiApiV2WorkspaceProjectSlugGroupsGroupSlugPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV2WorkspaceProjectSlugGroupsGroupSlugPost(requestParameters: DefaultApiApiV2WorkspaceProjectSlugGroupsGroupSlugPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV2WorkspaceProjectSlugGroupsGroupSlugPost(requestParameters.projectSlug, requestParameters.groupSlug, requestParameters.apiV2WorkspaceProjectSlugGroupsGroupSlugPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV2WorkspaceSlugCasGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV2WorkspaceSlugCasGet(requestParameters: DefaultApiApiV2WorkspaceSlugCasGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV2WorkspaceSlugCasGet(requestParameters.slug, requestParameters.status, requestParameters.friendlyName, requestParameters.commonName, requestParameters.offset, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV2WorkspaceSlugCertificatesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV2WorkspaceSlugCertificatesGet(requestParameters: DefaultApiApiV2WorkspaceSlugCertificatesGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV2WorkspaceSlugCertificatesGet(requestParameters.slug, requestParameters.friendlyName, requestParameters.commonName, requestParameters.offset, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete project
     * @param {DefaultApiApiV2WorkspaceSlugDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV2WorkspaceSlugDelete(requestParameters: DefaultApiApiV2WorkspaceSlugDeleteRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV2WorkspaceSlugDelete(requestParameters.slug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV2WorkspaceSlugGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV2WorkspaceSlugGet(requestParameters: DefaultApiApiV2WorkspaceSlugGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV2WorkspaceSlugGet(requestParameters.slug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV2WorkspaceSlugPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV2WorkspaceSlugPatch(requestParameters: DefaultApiApiV2WorkspaceSlugPatchRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV2WorkspaceSlugPatch(requestParameters.slug, requestParameters.apiV2WorkspaceSlugPatchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return encrypted project key
     * @param {DefaultApiApiV2WorkspaceWorkspaceIdEncryptedKeyGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV2WorkspaceWorkspaceIdEncryptedKeyGet(requestParameters: DefaultApiApiV2WorkspaceWorkspaceIdEncryptedKeyGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV2WorkspaceWorkspaceIdEncryptedKeyGet(requestParameters.workspaceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV3AuthLogin1PostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV3AuthLogin1Post(requestParameters: DefaultApiApiV3AuthLogin1PostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV3AuthLogin1Post(requestParameters.apiV3AuthLogin1PostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV3AuthLogin2PostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV3AuthLogin2Post(requestParameters: DefaultApiApiV3AuthLogin2PostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV3AuthLogin2Post(requestParameters.apiV3AuthLogin2PostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV3AuthSelectOrganizationPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV3AuthSelectOrganizationPost(requestParameters: DefaultApiApiV3AuthSelectOrganizationPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV3AuthSelectOrganizationPost(requestParameters.apiV1SecretScanningCreateInstallationSessionOrganizationPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Backfill secret references
     * @param {DefaultApiApiV3SecretsBackfillSecretReferencesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV3SecretsBackfillSecretReferencesPost(requestParameters: DefaultApiApiV3SecretsBackfillSecretReferencesPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV3SecretsBackfillSecretReferencesPost(requestParameters.apiV3SecretsBackfillSecretReferencesPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV3SecretsBatchDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV3SecretsBatchDelete(requestParameters: DefaultApiApiV3SecretsBatchDeleteRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV3SecretsBatchDelete(requestParameters.apiV3SecretsBatchDeleteRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV3SecretsBatchPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV3SecretsBatchPatch(requestParameters: DefaultApiApiV3SecretsBatchPatchRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV3SecretsBatchPatch(requestParameters.apiV3SecretsBatchPatchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV3SecretsBatchPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV3SecretsBatchPost(requestParameters: DefaultApiApiV3SecretsBatchPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV3SecretsBatchPost(requestParameters.apiV3SecretsBatchPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete many secrets
     * @param {DefaultApiApiV3SecretsBatchRawDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV3SecretsBatchRawDelete(requestParameters: DefaultApiApiV3SecretsBatchRawDeleteRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV3SecretsBatchRawDelete(requestParameters.apiV3SecretsBatchRawDeleteRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update many secrets
     * @param {DefaultApiApiV3SecretsBatchRawPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV3SecretsBatchRawPatch(requestParameters: DefaultApiApiV3SecretsBatchRawPatchRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV3SecretsBatchRawPatch(requestParameters.apiV3SecretsBatchRawPatchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create many secrets
     * @param {DefaultApiApiV3SecretsBatchRawPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV3SecretsBatchRawPost(requestParameters: DefaultApiApiV3SecretsBatchRawPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV3SecretsBatchRawPost(requestParameters.apiV3SecretsBatchRawPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV3SecretsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV3SecretsGet(requestParameters: DefaultApiApiV3SecretsGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV3SecretsGet(requestParameters.workspaceId, requestParameters.environment, requestParameters.secretPath, requestParameters.recursive, requestParameters.includeImports, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV3SecretsMovePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV3SecretsMovePost(requestParameters: DefaultApiApiV3SecretsMovePostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV3SecretsMovePost(requestParameters.apiV3SecretsMovePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List secrets
     * @param {DefaultApiApiV3SecretsRawGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV3SecretsRawGet(requestParameters: DefaultApiApiV3SecretsRawGetRequest = {}, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV3SecretsRawGet(requestParameters.workspaceId, requestParameters.workspaceSlug, requestParameters.environment, requestParameters.secretPath, requestParameters.expandSecretReferences, requestParameters.recursive, requestParameters.includeImports, requestParameters.tagSlugs, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete secret
     * @param {DefaultApiApiV3SecretsRawSecretNameDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV3SecretsRawSecretNameDelete(requestParameters: DefaultApiApiV3SecretsRawSecretNameDeleteRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV3SecretsRawSecretNameDelete(requestParameters.secretName, requestParameters.apiV3SecretsRawSecretNameDeleteRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a secret by name
     * @param {DefaultApiApiV3SecretsRawSecretNameGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV3SecretsRawSecretNameGet(requestParameters: DefaultApiApiV3SecretsRawSecretNameGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV3SecretsRawSecretNameGet(requestParameters.secretName, requestParameters.workspaceId, requestParameters.workspaceSlug, requestParameters.environment, requestParameters.secretPath, requestParameters.version, requestParameters.type, requestParameters.expandSecretReferences, requestParameters.includeImports, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update secret
     * @param {DefaultApiApiV3SecretsRawSecretNamePatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV3SecretsRawSecretNamePatch(requestParameters: DefaultApiApiV3SecretsRawSecretNamePatchRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV3SecretsRawSecretNamePatch(requestParameters.secretName, requestParameters.apiV3SecretsRawSecretNamePatchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create secret
     * @param {DefaultApiApiV3SecretsRawSecretNamePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV3SecretsRawSecretNamePost(requestParameters: DefaultApiApiV3SecretsRawSecretNamePostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV3SecretsRawSecretNamePost(requestParameters.secretName, requestParameters.apiV3SecretsRawSecretNamePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV3SecretsSecretNameDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV3SecretsSecretNameDelete(requestParameters: DefaultApiApiV3SecretsSecretNameDeleteRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV3SecretsSecretNameDelete(requestParameters.secretName, requestParameters.apiV3SecretsSecretNameDeleteRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV3SecretsSecretNameGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV3SecretsSecretNameGet(requestParameters: DefaultApiApiV3SecretsSecretNameGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV3SecretsSecretNameGet(requestParameters.workspaceId, requestParameters.environment, requestParameters.secretName, requestParameters.secretPath, requestParameters.type, requestParameters.version, requestParameters.includeImports, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV3SecretsSecretNamePatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV3SecretsSecretNamePatch(requestParameters: DefaultApiApiV3SecretsSecretNamePatchRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV3SecretsSecretNamePatch(requestParameters.secretName, requestParameters.apiV3SecretsSecretNamePatchRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV3SecretsSecretNamePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV3SecretsSecretNamePost(requestParameters: DefaultApiApiV3SecretsSecretNamePostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV3SecretsSecretNamePost(requestParameters.secretName, requestParameters.apiV3SecretsSecretNamePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Detach tags from a secret
     * @param {DefaultApiApiV3SecretsTagsSecretNameDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV3SecretsTagsSecretNameDelete(requestParameters: DefaultApiApiV3SecretsTagsSecretNameDeleteRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV3SecretsTagsSecretNameDelete(requestParameters.secretName, requestParameters.apiV3SecretsTagsSecretNameDeleteRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Attach tags to a secret
     * @param {DefaultApiApiV3SecretsTagsSecretNamePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV3SecretsTagsSecretNamePost(requestParameters: DefaultApiApiV3SecretsTagsSecretNamePostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV3SecretsTagsSecretNamePost(requestParameters.secretName, requestParameters.apiV3SecretsTagsSecretNamePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV3SignupCompleteAccountInvitePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV3SignupCompleteAccountInvitePost(requestParameters: DefaultApiApiV3SignupCompleteAccountInvitePostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV3SignupCompleteAccountInvitePost(requestParameters.apiV3SignupCompleteAccountInvitePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV3SignupCompleteAccountSignupPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV3SignupCompleteAccountSignupPost(requestParameters: DefaultApiApiV3SignupCompleteAccountSignupPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV3SignupCompleteAccountSignupPost(requestParameters.apiV3SignupCompleteAccountSignupPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV3SignupEmailSignupPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV3SignupEmailSignupPost(requestParameters: DefaultApiApiV3SignupEmailSignupPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV3SignupEmailSignupPost(requestParameters.apiV1PasswordEmailPasswordResetPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV3SignupEmailVerifyPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV3SignupEmailVerifyPost(requestParameters: DefaultApiApiV3SignupEmailVerifyPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV3SignupEmailVerifyPost(requestParameters.apiV1PasswordEmailPasswordResetVerifyPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV3UsersMeApiKeysGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV3UsersMeApiKeysGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV3WorkspacesProjectIdSecretsBlindIndexStatusGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV3WorkspacesProjectIdSecretsBlindIndexStatusGet(requestParameters: DefaultApiApiV3WorkspacesProjectIdSecretsBlindIndexStatusGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV3WorkspacesProjectIdSecretsBlindIndexStatusGet(requestParameters.projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV3WorkspacesProjectIdSecretsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV3WorkspacesProjectIdSecretsGet(requestParameters: DefaultApiApiV3WorkspacesProjectIdSecretsGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV3WorkspacesProjectIdSecretsGet(requestParameters.projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiApiV3WorkspacesProjectIdSecretsNamesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV3WorkspacesProjectIdSecretsNamesPost(requestParameters: DefaultApiApiV3WorkspacesProjectIdSecretsNamesPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiV3WorkspacesProjectIdSecretsNamesPost(requestParameters.projectId, requestParameters.apiV3WorkspacesProjectIdSecretsNamesPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiWellKnownEstCertificateTemplateIdCacertsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public wellKnownEstCertificateTemplateIdCacertsGet(requestParameters: DefaultApiWellKnownEstCertificateTemplateIdCacertsGetRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).wellKnownEstCertificateTemplateIdCacertsGet(requestParameters.certificateTemplateId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiWellKnownEstCertificateTemplateIdSimpleenrollPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public wellKnownEstCertificateTemplateIdSimpleenrollPost(requestParameters: DefaultApiWellKnownEstCertificateTemplateIdSimpleenrollPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).wellKnownEstCertificateTemplateIdSimpleenrollPost(requestParameters.certificateTemplateId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DefaultApiWellKnownEstCertificateTemplateIdSimplereenrollPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public wellKnownEstCertificateTemplateIdSimplereenrollPost(requestParameters: DefaultApiWellKnownEstCertificateTemplateIdSimplereenrollPostRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).wellKnownEstCertificateTemplateIdSimplereenrollPost(requestParameters.certificateTemplateId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const ApiV1IntegrationIntegrationIdDeleteShouldDeleteIntegrationSecretsEnum = {
    True: 'true',
    False: 'false'
} as const;
export type ApiV1IntegrationIntegrationIdDeleteShouldDeleteIntegrationSecretsEnum = typeof ApiV1IntegrationIntegrationIdDeleteShouldDeleteIntegrationSecretsEnum[keyof typeof ApiV1IntegrationIntegrationIdDeleteShouldDeleteIntegrationSecretsEnum];
/**
 * @export
 */
export const ApiV1OrganizationsOrganizationIdPlansTableGetBillingCycleEnum = {
    Monthly: 'monthly',
    Yearly: 'yearly'
} as const;
export type ApiV1OrganizationsOrganizationIdPlansTableGetBillingCycleEnum = typeof ApiV1OrganizationsOrganizationIdPlansTableGetBillingCycleEnum[keyof typeof ApiV1OrganizationsOrganizationIdPlansTableGetBillingCycleEnum];
/**
 * @export
 */
export const ApiV1PkiCollectionsCollectionIdItemsGetTypeEnum = {
    Certificate: 'certificate',
    Ca: 'ca'
} as const;
export type ApiV1PkiCollectionsCollectionIdItemsGetTypeEnum = typeof ApiV1PkiCollectionsCollectionIdItemsGetTypeEnum[keyof typeof ApiV1PkiCollectionsCollectionIdItemsGetTypeEnum];
/**
 * @export
 */
export const ApiV1SecretApprovalRequestsGetStatusEnum = {
    Open: 'open',
    Close: 'close'
} as const;
export type ApiV1SecretApprovalRequestsGetStatusEnum = typeof ApiV1SecretApprovalRequestsGetStatusEnum[keyof typeof ApiV1SecretApprovalRequestsGetStatusEnum];
/**
 * @export
 */
export const ApiV1WorkspaceGetIncludeRolesEnum = {
    True: 'true',
    False: 'false'
} as const;
export type ApiV1WorkspaceGetIncludeRolesEnum = typeof ApiV1WorkspaceGetIncludeRolesEnum[keyof typeof ApiV1WorkspaceGetIncludeRolesEnum];
/**
 * @export
 */
export const ApiV1WorkspaceWorkspaceIdAuditLogsGetEventTypeEnum = {
    GetSecrets: 'get-secrets',
    GetSecret: 'get-secret',
    RevealSecret: 'reveal-secret',
    CreateSecret: 'create-secret',
    CreateSecrets: 'create-secrets',
    UpdateSecret: 'update-secret',
    UpdateSecrets: 'update-secrets',
    MoveSecrets: 'move-secrets',
    DeleteSecret: 'delete-secret',
    DeleteSecrets: 'delete-secrets',
    GetWorkspaceKey: 'get-workspace-key',
    AuthorizeIntegration: 'authorize-integration',
    UnauthorizeIntegration: 'unauthorize-integration',
    CreateIntegration: 'create-integration',
    DeleteIntegration: 'delete-integration',
    ManualSyncIntegration: 'manual-sync-integration',
    AddTrustedIp: 'add-trusted-ip',
    UpdateTrustedIp: 'update-trusted-ip',
    DeleteTrustedIp: 'delete-trusted-ip',
    CreateServiceToken: 'create-service-token',
    DeleteServiceToken: 'delete-service-token',
    CreateIdentity: 'create-identity',
    UpdateIdentity: 'update-identity',
    DeleteIdentity: 'delete-identity',
    LoginIdentityUniversalAuth: 'login-identity-universal-auth',
    AddIdentityUniversalAuth: 'add-identity-universal-auth',
    UpdateIdentityUniversalAuth: 'update-identity-universal-auth',
    GetIdentityUniversalAuth: 'get-identity-universal-auth',
    RevokeIdentityUniversalAuth: 'revoke-identity-universal-auth',
    CreateTokenIdentityTokenAuth: 'create-token-identity-token-auth',
    UpdateTokenIdentityTokenAuth: 'update-token-identity-token-auth',
    GetTokensIdentityTokenAuth: 'get-tokens-identity-token-auth',
    AddIdentityTokenAuth: 'add-identity-token-auth',
    UpdateIdentityTokenAuth: 'update-identity-token-auth',
    GetIdentityTokenAuth: 'get-identity-token-auth',
    RevokeIdentityTokenAuth: 'revoke-identity-token-auth',
    LoginIdentityKubernetesAuth: 'login-identity-kubernetes-auth',
    AddIdentityKubernetesAuth: 'add-identity-kubernetes-auth',
    UpdateIdentityKubernetesAuth: 'update-identity-kubernetes-auth',
    GetIdentityKubernetesAuth: 'get-identity-kubernetes-auth',
    RevokeIdentityKubernetesAuth: 'revoke-identity-kubernetes-auth',
    LoginIdentityOidcAuth: 'login-identity-oidc-auth',
    AddIdentityOidcAuth: 'add-identity-oidc-auth',
    UpdateIdentityOidcAuth: 'update-identity-oidc-auth',
    GetIdentityOidcAuth: 'get-identity-oidc-auth',
    RevokeIdentityOidcAuth: 'revoke-identity-oidc-auth',
    CreateIdentityUniversalAuthClientSecret: 'create-identity-universal-auth-client-secret',
    RevokeIdentityUniversalAuthClientSecret: 'revoke-identity-universal-auth-client-secret',
    GetIdentityUniversalAuthClientSecret: 'get-identity-universal-auth-client-secret',
    GetIdentityUniversalAuthClientSecretById: 'get-identity-universal-auth-client-secret-by-id',
    LoginIdentityGcpAuth: 'login-identity-gcp-auth',
    AddIdentityGcpAuth: 'add-identity-gcp-auth',
    UpdateIdentityGcpAuth: 'update-identity-gcp-auth',
    RevokeIdentityGcpAuth: 'revoke-identity-gcp-auth',
    GetIdentityGcpAuth: 'get-identity-gcp-auth',
    LoginIdentityAwsAuth: 'login-identity-aws-auth',
    AddIdentityAwsAuth: 'add-identity-aws-auth',
    UpdateIdentityAwsAuth: 'update-identity-aws-auth',
    RevokeIdentityAwsAuth: 'revoke-identity-aws-auth',
    GetIdentityAwsAuth: 'get-identity-aws-auth',
    LoginIdentityAzureAuth: 'login-identity-azure-auth',
    AddIdentityAzureAuth: 'add-identity-azure-auth',
    UpdateIdentityAzureAuth: 'update-identity-azure-auth',
    GetIdentityAzureAuth: 'get-identity-azure-auth',
    RevokeIdentityAzureAuth: 'revoke-identity-azure-auth',
    CreateEnvironment: 'create-environment',
    UpdateEnvironment: 'update-environment',
    DeleteEnvironment: 'delete-environment',
    GetEnvironment: 'get-environment',
    AddWorkspaceMember: 'add-workspace-member',
    AddWorkspaceMembers: 'add-workspace-members',
    RemoveWorkspaceMember: 'remove-workspace-member',
    CreateFolder: 'create-folder',
    UpdateFolder: 'update-folder',
    DeleteFolder: 'delete-folder',
    CreateWebhook: 'create-webhook',
    UpdateWebhookStatus: 'update-webhook-status',
    DeleteWebhook: 'delete-webhook',
    GetSecretImports: 'get-secret-imports',
    CreateSecretImport: 'create-secret-import',
    UpdateSecretImport: 'update-secret-import',
    DeleteSecretImport: 'delete-secret-import',
    UpdateUserWorkspaceRole: 'update-user-workspace-role',
    UpdateUserWorkspaceDeniedPermissions: 'update-user-workspace-denied-permissions',
    SecretApprovalMerged: 'secret-approval-merged',
    SecretApprovalRequest: 'secret-approval-request',
    SecretApprovalClosed: 'secret-approval-closed',
    SecretApprovalReopened: 'secret-approval-reopened',
    CreateCertificateAuthority: 'create-certificate-authority',
    GetCertificateAuthority: 'get-certificate-authority',
    UpdateCertificateAuthority: 'update-certificate-authority',
    DeleteCertificateAuthority: 'delete-certificate-authority',
    RenewCertificateAuthority: 'renew-certificate-authority',
    GetCertificateAuthorityCsr: 'get-certificate-authority-csr',
    GetCertificateAuthorityCerts: 'get-certificate-authority-certs',
    GetCertificateAuthorityCert: 'get-certificate-authority-cert',
    SignIntermediate: 'sign-intermediate',
    ImportCertificateAuthorityCert: 'import-certificate-authority-cert',
    GetCertificateAuthorityCrls: 'get-certificate-authority-crls',
    IssueCert: 'issue-cert',
    SignCert: 'sign-cert',
    GetCert: 'get-cert',
    DeleteCert: 'delete-cert',
    RevokeCert: 'revoke-cert',
    GetCertBody: 'get-cert-body',
    CreatePkiAlert: 'create-pki-alert',
    GetPkiAlert: 'get-pki-alert',
    UpdatePkiAlert: 'update-pki-alert',
    DeletePkiAlert: 'delete-pki-alert',
    CreatePkiCollection: 'create-pki-collection',
    GetPkiCollection: 'get-pki-collection',
    UpdatePkiCollection: 'update-pki-collection',
    DeletePkiCollection: 'delete-pki-collection',
    GetPkiCollectionItems: 'get-pki-collection-items',
    AddPkiCollectionItem: 'add-pki-collection-item',
    DeletePkiCollectionItem: 'delete-pki-collection-item',
    CreateKms: 'create-kms',
    UpdateKms: 'update-kms',
    DeleteKms: 'delete-kms',
    GetKms: 'get-kms',
    UpdateProjectKms: 'update-project-kms',
    GetProjectKmsBackup: 'get-project-kms-backup',
    LoadProjectKmsBackup: 'load-project-kms-backup',
    OrgAdminAccessedProject: 'org-admin-accessed-project',
    CreateCertificateTemplate: 'create-certificate-template',
    UpdateCertificateTemplate: 'update-certificate-template',
    DeleteCertificateTemplate: 'delete-certificate-template',
    GetCertificateTemplate: 'get-certificate-template',
    CreateCertificateTemplateEstConfig: 'create-certificate-template-est-config',
    UpdateCertificateTemplateEstConfig: 'update-certificate-template-est-config',
    GetCertificateTemplateEstConfig: 'get-certificate-template-est-config'
} as const;
export type ApiV1WorkspaceWorkspaceIdAuditLogsGetEventTypeEnum = typeof ApiV1WorkspaceWorkspaceIdAuditLogsGetEventTypeEnum[keyof typeof ApiV1WorkspaceWorkspaceIdAuditLogsGetEventTypeEnum];
/**
 * @export
 */
export const ApiV1WorkspaceWorkspaceIdAuditLogsGetUserAgentTypeEnum = {
    Web: 'web',
    Cli: 'cli',
    K8Operator: 'k8-operator',
    Terraform: 'terraform',
    Other: 'other',
    InfisicalPythonSdk: 'InfisicalPythonSDK',
    InfisicalNodeSdk: 'InfisicalNodeSDK'
} as const;
export type ApiV1WorkspaceWorkspaceIdAuditLogsGetUserAgentTypeEnum = typeof ApiV1WorkspaceWorkspaceIdAuditLogsGetUserAgentTypeEnum[keyof typeof ApiV1WorkspaceWorkspaceIdAuditLogsGetUserAgentTypeEnum];
/**
 * @export
 */
export const ApiV1WorkspaceWorkspaceIdUsersGetIncludeGroupMembersEnum = {
    True: 'true',
    False: 'false'
} as const;
export type ApiV1WorkspaceWorkspaceIdUsersGetIncludeGroupMembersEnum = typeof ApiV1WorkspaceWorkspaceIdUsersGetIncludeGroupMembersEnum[keyof typeof ApiV1WorkspaceWorkspaceIdUsersGetIncludeGroupMembersEnum];
/**
 * @export
 */
export const ApiV2WorkspaceSlugCasGetStatusEnum = {
    Active: 'active',
    PendingCertificate: 'pending-certificate'
} as const;
export type ApiV2WorkspaceSlugCasGetStatusEnum = typeof ApiV2WorkspaceSlugCasGetStatusEnum[keyof typeof ApiV2WorkspaceSlugCasGetStatusEnum];
/**
 * @export
 */
export const ApiV3SecretsGetRecursiveEnum = {
    True: 'true',
    False: 'false'
} as const;
export type ApiV3SecretsGetRecursiveEnum = typeof ApiV3SecretsGetRecursiveEnum[keyof typeof ApiV3SecretsGetRecursiveEnum];
/**
 * @export
 */
export const ApiV3SecretsGetIncludeImportsEnum = {
    True: 'true',
    False: 'false'
} as const;
export type ApiV3SecretsGetIncludeImportsEnum = typeof ApiV3SecretsGetIncludeImportsEnum[keyof typeof ApiV3SecretsGetIncludeImportsEnum];
/**
 * @export
 */
export const ApiV3SecretsRawGetExpandSecretReferencesEnum = {
    True: 'true',
    False: 'false'
} as const;
export type ApiV3SecretsRawGetExpandSecretReferencesEnum = typeof ApiV3SecretsRawGetExpandSecretReferencesEnum[keyof typeof ApiV3SecretsRawGetExpandSecretReferencesEnum];
/**
 * @export
 */
export const ApiV3SecretsRawGetRecursiveEnum = {
    True: 'true',
    False: 'false'
} as const;
export type ApiV3SecretsRawGetRecursiveEnum = typeof ApiV3SecretsRawGetRecursiveEnum[keyof typeof ApiV3SecretsRawGetRecursiveEnum];
/**
 * @export
 */
export const ApiV3SecretsRawGetIncludeImportsEnum = {
    True: 'true',
    False: 'false'
} as const;
export type ApiV3SecretsRawGetIncludeImportsEnum = typeof ApiV3SecretsRawGetIncludeImportsEnum[keyof typeof ApiV3SecretsRawGetIncludeImportsEnum];
/**
 * @export
 */
export const ApiV3SecretsRawSecretNameGetTypeEnum = {
    Shared: 'shared',
    Personal: 'personal'
} as const;
export type ApiV3SecretsRawSecretNameGetTypeEnum = typeof ApiV3SecretsRawSecretNameGetTypeEnum[keyof typeof ApiV3SecretsRawSecretNameGetTypeEnum];
/**
 * @export
 */
export const ApiV3SecretsRawSecretNameGetExpandSecretReferencesEnum = {
    True: 'true',
    False: 'false'
} as const;
export type ApiV3SecretsRawSecretNameGetExpandSecretReferencesEnum = typeof ApiV3SecretsRawSecretNameGetExpandSecretReferencesEnum[keyof typeof ApiV3SecretsRawSecretNameGetExpandSecretReferencesEnum];
/**
 * @export
 */
export const ApiV3SecretsRawSecretNameGetIncludeImportsEnum = {
    True: 'true',
    False: 'false'
} as const;
export type ApiV3SecretsRawSecretNameGetIncludeImportsEnum = typeof ApiV3SecretsRawSecretNameGetIncludeImportsEnum[keyof typeof ApiV3SecretsRawSecretNameGetIncludeImportsEnum];
/**
 * @export
 */
export const ApiV3SecretsSecretNameGetTypeEnum = {
    Shared: 'shared',
    Personal: 'personal'
} as const;
export type ApiV3SecretsSecretNameGetTypeEnum = typeof ApiV3SecretsSecretNameGetTypeEnum[keyof typeof ApiV3SecretsSecretNameGetTypeEnum];
/**
 * @export
 */
export const ApiV3SecretsSecretNameGetIncludeImportsEnum = {
    True: 'true',
    False: 'false'
} as const;
export type ApiV3SecretsSecretNameGetIncludeImportsEnum = typeof ApiV3SecretsSecretNameGetIncludeImportsEnum[keyof typeof ApiV3SecretsSecretNameGetIncludeImportsEnum];


